
TASK2_GYROSCOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003178  08003178  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003178  08003178  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800318c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800318c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049a2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001136  00000000  00000000  00024a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  00025b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000403  00000000  00000000  000260b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cef  00000000  00000000  000264b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006cd7  00000000  00000000  0003e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f19  00000000  00000000  00044e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001320  00000000  00000000  000ced94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d00b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003130 	.word	0x08003130

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003130 	.word	0x08003130

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	0243      	lsls	r3, r0, #9
 8000222:	0a5b      	lsrs	r3, r3, #9
 8000224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000226:	464f      	mov	r7, r9
 8000228:	4646      	mov	r6, r8
 800022a:	4699      	mov	r9, r3
 800022c:	46d6      	mov	lr, sl
 800022e:	0fc3      	lsrs	r3, r0, #31
 8000230:	0045      	lsls	r5, r0, #1
 8000232:	4698      	mov	r8, r3
 8000234:	b5c0      	push	{r6, r7, lr}
 8000236:	464b      	mov	r3, r9
 8000238:	1c0f      	adds	r7, r1, #0
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	d100      	bne.n	8000240 <__aeabi_fmul+0x20>
 800023e:	e0cb      	b.n	80003d8 <__aeabi_fmul+0x1b8>
 8000240:	2dff      	cmp	r5, #255	; 0xff
 8000242:	d100      	bne.n	8000246 <__aeabi_fmul+0x26>
 8000244:	e0cf      	b.n	80003e6 <__aeabi_fmul+0x1c6>
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	04d2      	lsls	r2, r2, #19
 800024c:	431a      	orrs	r2, r3
 800024e:	2300      	movs	r3, #0
 8000250:	4691      	mov	r9, r2
 8000252:	2600      	movs	r6, #0
 8000254:	469a      	mov	sl, r3
 8000256:	3d7f      	subs	r5, #127	; 0x7f
 8000258:	027c      	lsls	r4, r7, #9
 800025a:	007b      	lsls	r3, r7, #1
 800025c:	0a64      	lsrs	r4, r4, #9
 800025e:	0e1b      	lsrs	r3, r3, #24
 8000260:	0fff      	lsrs	r7, r7, #31
 8000262:	2b00      	cmp	r3, #0
 8000264:	d100      	bne.n	8000268 <__aeabi_fmul+0x48>
 8000266:	e0a9      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000268:	2bff      	cmp	r3, #255	; 0xff
 800026a:	d011      	beq.n	8000290 <__aeabi_fmul+0x70>
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	00e4      	lsls	r4, r4, #3
 8000270:	04d2      	lsls	r2, r2, #19
 8000272:	4314      	orrs	r4, r2
 8000274:	4642      	mov	r2, r8
 8000276:	3b7f      	subs	r3, #127	; 0x7f
 8000278:	195b      	adds	r3, r3, r5
 800027a:	407a      	eors	r2, r7
 800027c:	2000      	movs	r0, #0
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	1c5d      	adds	r5, r3, #1
 8000282:	2e0a      	cmp	r6, #10
 8000284:	dd13      	ble.n	80002ae <__aeabi_fmul+0x8e>
 8000286:	003a      	movs	r2, r7
 8000288:	2e0b      	cmp	r6, #11
 800028a:	d047      	beq.n	800031c <__aeabi_fmul+0xfc>
 800028c:	4647      	mov	r7, r8
 800028e:	e03f      	b.n	8000310 <__aeabi_fmul+0xf0>
 8000290:	002b      	movs	r3, r5
 8000292:	33ff      	adds	r3, #255	; 0xff
 8000294:	2c00      	cmp	r4, #0
 8000296:	d11e      	bne.n	80002d6 <__aeabi_fmul+0xb6>
 8000298:	2202      	movs	r2, #2
 800029a:	4316      	orrs	r6, r2
 800029c:	4642      	mov	r2, r8
 800029e:	3501      	adds	r5, #1
 80002a0:	407a      	eors	r2, r7
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	35ff      	adds	r5, #255	; 0xff
 80002a6:	2e0a      	cmp	r6, #10
 80002a8:	dd00      	ble.n	80002ac <__aeabi_fmul+0x8c>
 80002aa:	e0e4      	b.n	8000476 <__aeabi_fmul+0x256>
 80002ac:	2002      	movs	r0, #2
 80002ae:	2e02      	cmp	r6, #2
 80002b0:	dc1c      	bgt.n	80002ec <__aeabi_fmul+0xcc>
 80002b2:	3e01      	subs	r6, #1
 80002b4:	2e01      	cmp	r6, #1
 80002b6:	d842      	bhi.n	800033e <__aeabi_fmul+0x11e>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d03d      	beq.n	8000338 <__aeabi_fmul+0x118>
 80002bc:	2801      	cmp	r0, #1
 80002be:	d166      	bne.n	800038e <__aeabi_fmul+0x16e>
 80002c0:	2000      	movs	r0, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	05c0      	lsls	r0, r0, #23
 80002c6:	4308      	orrs	r0, r1
 80002c8:	07d2      	lsls	r2, r2, #31
 80002ca:	4310      	orrs	r0, r2
 80002cc:	bce0      	pop	{r5, r6, r7}
 80002ce:	46ba      	mov	sl, r7
 80002d0:	46b1      	mov	r9, r6
 80002d2:	46a8      	mov	r8, r5
 80002d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d6:	2203      	movs	r2, #3
 80002d8:	4316      	orrs	r6, r2
 80002da:	4642      	mov	r2, r8
 80002dc:	3501      	adds	r5, #1
 80002de:	407a      	eors	r2, r7
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	35ff      	adds	r5, #255	; 0xff
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd00      	ble.n	80002ea <__aeabi_fmul+0xca>
 80002e8:	e0e4      	b.n	80004b4 <__aeabi_fmul+0x294>
 80002ea:	2003      	movs	r0, #3
 80002ec:	2101      	movs	r1, #1
 80002ee:	40b1      	lsls	r1, r6
 80002f0:	26a6      	movs	r6, #166	; 0xa6
 80002f2:	00f6      	lsls	r6, r6, #3
 80002f4:	4231      	tst	r1, r6
 80002f6:	d10a      	bne.n	800030e <__aeabi_fmul+0xee>
 80002f8:	2690      	movs	r6, #144	; 0x90
 80002fa:	00b6      	lsls	r6, r6, #2
 80002fc:	4231      	tst	r1, r6
 80002fe:	d116      	bne.n	800032e <__aeabi_fmul+0x10e>
 8000300:	3eb9      	subs	r6, #185	; 0xb9
 8000302:	3eff      	subs	r6, #255	; 0xff
 8000304:	420e      	tst	r6, r1
 8000306:	d01a      	beq.n	800033e <__aeabi_fmul+0x11e>
 8000308:	46a1      	mov	r9, r4
 800030a:	4682      	mov	sl, r0
 800030c:	e000      	b.n	8000310 <__aeabi_fmul+0xf0>
 800030e:	0017      	movs	r7, r2
 8000310:	4653      	mov	r3, sl
 8000312:	003a      	movs	r2, r7
 8000314:	2b02      	cmp	r3, #2
 8000316:	d00f      	beq.n	8000338 <__aeabi_fmul+0x118>
 8000318:	464c      	mov	r4, r9
 800031a:	4650      	mov	r0, sl
 800031c:	2803      	cmp	r0, #3
 800031e:	d1cd      	bne.n	80002bc <__aeabi_fmul+0x9c>
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	03c9      	lsls	r1, r1, #15
 8000324:	4321      	orrs	r1, r4
 8000326:	0249      	lsls	r1, r1, #9
 8000328:	20ff      	movs	r0, #255	; 0xff
 800032a:	0a49      	lsrs	r1, r1, #9
 800032c:	e7ca      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	2200      	movs	r2, #0
 8000332:	20ff      	movs	r0, #255	; 0xff
 8000334:	03c9      	lsls	r1, r1, #15
 8000336:	e7c5      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000338:	20ff      	movs	r0, #255	; 0xff
 800033a:	2100      	movs	r1, #0
 800033c:	e7c2      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	4649      	mov	r1, r9
 8000342:	0424      	lsls	r4, r4, #16
 8000344:	0c24      	lsrs	r4, r4, #16
 8000346:	0027      	movs	r7, r4
 8000348:	0c0e      	lsrs	r6, r1, #16
 800034a:	0409      	lsls	r1, r1, #16
 800034c:	0c09      	lsrs	r1, r1, #16
 800034e:	4374      	muls	r4, r6
 8000350:	434f      	muls	r7, r1
 8000352:	4346      	muls	r6, r0
 8000354:	4348      	muls	r0, r1
 8000356:	0c39      	lsrs	r1, r7, #16
 8000358:	1900      	adds	r0, r0, r4
 800035a:	1809      	adds	r1, r1, r0
 800035c:	428c      	cmp	r4, r1
 800035e:	d903      	bls.n	8000368 <__aeabi_fmul+0x148>
 8000360:	2080      	movs	r0, #128	; 0x80
 8000362:	0240      	lsls	r0, r0, #9
 8000364:	4684      	mov	ip, r0
 8000366:	4466      	add	r6, ip
 8000368:	043f      	lsls	r7, r7, #16
 800036a:	0408      	lsls	r0, r1, #16
 800036c:	0c3f      	lsrs	r7, r7, #16
 800036e:	19c0      	adds	r0, r0, r7
 8000370:	0184      	lsls	r4, r0, #6
 8000372:	1e67      	subs	r7, r4, #1
 8000374:	41bc      	sbcs	r4, r7
 8000376:	0c09      	lsrs	r1, r1, #16
 8000378:	0e80      	lsrs	r0, r0, #26
 800037a:	1989      	adds	r1, r1, r6
 800037c:	4304      	orrs	r4, r0
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	430c      	orrs	r4, r1
 8000382:	0109      	lsls	r1, r1, #4
 8000384:	d571      	bpl.n	800046a <__aeabi_fmul+0x24a>
 8000386:	2301      	movs	r3, #1
 8000388:	0861      	lsrs	r1, r4, #1
 800038a:	401c      	ands	r4, r3
 800038c:	430c      	orrs	r4, r1
 800038e:	002b      	movs	r3, r5
 8000390:	337f      	adds	r3, #127	; 0x7f
 8000392:	2b00      	cmp	r3, #0
 8000394:	dd51      	ble.n	800043a <__aeabi_fmul+0x21a>
 8000396:	0761      	lsls	r1, r4, #29
 8000398:	d004      	beq.n	80003a4 <__aeabi_fmul+0x184>
 800039a:	210f      	movs	r1, #15
 800039c:	4021      	ands	r1, r4
 800039e:	2904      	cmp	r1, #4
 80003a0:	d000      	beq.n	80003a4 <__aeabi_fmul+0x184>
 80003a2:	3404      	adds	r4, #4
 80003a4:	0121      	lsls	r1, r4, #4
 80003a6:	d503      	bpl.n	80003b0 <__aeabi_fmul+0x190>
 80003a8:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <__aeabi_fmul+0x298>)
 80003aa:	401c      	ands	r4, r3
 80003ac:	002b      	movs	r3, r5
 80003ae:	3380      	adds	r3, #128	; 0x80
 80003b0:	2bfe      	cmp	r3, #254	; 0xfe
 80003b2:	dcc1      	bgt.n	8000338 <__aeabi_fmul+0x118>
 80003b4:	01a1      	lsls	r1, r4, #6
 80003b6:	0a49      	lsrs	r1, r1, #9
 80003b8:	b2d8      	uxtb	r0, r3
 80003ba:	e783      	b.n	80002c4 <__aeabi_fmul+0xa4>
 80003bc:	2c00      	cmp	r4, #0
 80003be:	d12c      	bne.n	800041a <__aeabi_fmul+0x1fa>
 80003c0:	2301      	movs	r3, #1
 80003c2:	4642      	mov	r2, r8
 80003c4:	431e      	orrs	r6, r3
 80003c6:	002b      	movs	r3, r5
 80003c8:	407a      	eors	r2, r7
 80003ca:	2001      	movs	r0, #1
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	1c5d      	adds	r5, r3, #1
 80003d0:	2e0a      	cmp	r6, #10
 80003d2:	dd00      	ble.n	80003d6 <__aeabi_fmul+0x1b6>
 80003d4:	e757      	b.n	8000286 <__aeabi_fmul+0x66>
 80003d6:	e76a      	b.n	80002ae <__aeabi_fmul+0x8e>
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d110      	bne.n	80003fe <__aeabi_fmul+0x1de>
 80003dc:	2301      	movs	r3, #1
 80003de:	2604      	movs	r6, #4
 80003e0:	2500      	movs	r5, #0
 80003e2:	469a      	mov	sl, r3
 80003e4:	e738      	b.n	8000258 <__aeabi_fmul+0x38>
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d104      	bne.n	80003f4 <__aeabi_fmul+0x1d4>
 80003ea:	2302      	movs	r3, #2
 80003ec:	2608      	movs	r6, #8
 80003ee:	25ff      	movs	r5, #255	; 0xff
 80003f0:	469a      	mov	sl, r3
 80003f2:	e731      	b.n	8000258 <__aeabi_fmul+0x38>
 80003f4:	2303      	movs	r3, #3
 80003f6:	260c      	movs	r6, #12
 80003f8:	25ff      	movs	r5, #255	; 0xff
 80003fa:	469a      	mov	sl, r3
 80003fc:	e72c      	b.n	8000258 <__aeabi_fmul+0x38>
 80003fe:	4648      	mov	r0, r9
 8000400:	f000 ff9e 	bl	8001340 <__clzsi2>
 8000404:	464a      	mov	r2, r9
 8000406:	1f43      	subs	r3, r0, #5
 8000408:	2576      	movs	r5, #118	; 0x76
 800040a:	409a      	lsls	r2, r3
 800040c:	2300      	movs	r3, #0
 800040e:	426d      	negs	r5, r5
 8000410:	4691      	mov	r9, r2
 8000412:	2600      	movs	r6, #0
 8000414:	469a      	mov	sl, r3
 8000416:	1a2d      	subs	r5, r5, r0
 8000418:	e71e      	b.n	8000258 <__aeabi_fmul+0x38>
 800041a:	0020      	movs	r0, r4
 800041c:	f000 ff90 	bl	8001340 <__clzsi2>
 8000420:	4642      	mov	r2, r8
 8000422:	1f43      	subs	r3, r0, #5
 8000424:	409c      	lsls	r4, r3
 8000426:	1a2b      	subs	r3, r5, r0
 8000428:	3b76      	subs	r3, #118	; 0x76
 800042a:	407a      	eors	r2, r7
 800042c:	2000      	movs	r0, #0
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	1c5d      	adds	r5, r3, #1
 8000432:	2e0a      	cmp	r6, #10
 8000434:	dd00      	ble.n	8000438 <__aeabi_fmul+0x218>
 8000436:	e726      	b.n	8000286 <__aeabi_fmul+0x66>
 8000438:	e739      	b.n	80002ae <__aeabi_fmul+0x8e>
 800043a:	2101      	movs	r1, #1
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	2b1b      	cmp	r3, #27
 8000440:	dd00      	ble.n	8000444 <__aeabi_fmul+0x224>
 8000442:	e73d      	b.n	80002c0 <__aeabi_fmul+0xa0>
 8000444:	359e      	adds	r5, #158	; 0x9e
 8000446:	0021      	movs	r1, r4
 8000448:	40ac      	lsls	r4, r5
 800044a:	40d9      	lsrs	r1, r3
 800044c:	1e63      	subs	r3, r4, #1
 800044e:	419c      	sbcs	r4, r3
 8000450:	4321      	orrs	r1, r4
 8000452:	074b      	lsls	r3, r1, #29
 8000454:	d004      	beq.n	8000460 <__aeabi_fmul+0x240>
 8000456:	230f      	movs	r3, #15
 8000458:	400b      	ands	r3, r1
 800045a:	2b04      	cmp	r3, #4
 800045c:	d000      	beq.n	8000460 <__aeabi_fmul+0x240>
 800045e:	3104      	adds	r1, #4
 8000460:	014b      	lsls	r3, r1, #5
 8000462:	d504      	bpl.n	800046e <__aeabi_fmul+0x24e>
 8000464:	2001      	movs	r0, #1
 8000466:	2100      	movs	r1, #0
 8000468:	e72c      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800046a:	001d      	movs	r5, r3
 800046c:	e78f      	b.n	800038e <__aeabi_fmul+0x16e>
 800046e:	0189      	lsls	r1, r1, #6
 8000470:	2000      	movs	r0, #0
 8000472:	0a49      	lsrs	r1, r1, #9
 8000474:	e726      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000476:	2302      	movs	r3, #2
 8000478:	2e0f      	cmp	r6, #15
 800047a:	d10c      	bne.n	8000496 <__aeabi_fmul+0x276>
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	464b      	mov	r3, r9
 8000480:	03c9      	lsls	r1, r1, #15
 8000482:	420b      	tst	r3, r1
 8000484:	d00d      	beq.n	80004a2 <__aeabi_fmul+0x282>
 8000486:	420c      	tst	r4, r1
 8000488:	d10b      	bne.n	80004a2 <__aeabi_fmul+0x282>
 800048a:	4321      	orrs	r1, r4
 800048c:	0249      	lsls	r1, r1, #9
 800048e:	003a      	movs	r2, r7
 8000490:	20ff      	movs	r0, #255	; 0xff
 8000492:	0a49      	lsrs	r1, r1, #9
 8000494:	e716      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000496:	2e0b      	cmp	r6, #11
 8000498:	d000      	beq.n	800049c <__aeabi_fmul+0x27c>
 800049a:	e6f7      	b.n	800028c <__aeabi_fmul+0x6c>
 800049c:	46a1      	mov	r9, r4
 800049e:	469a      	mov	sl, r3
 80004a0:	e736      	b.n	8000310 <__aeabi_fmul+0xf0>
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	464b      	mov	r3, r9
 80004a6:	03c9      	lsls	r1, r1, #15
 80004a8:	4319      	orrs	r1, r3
 80004aa:	0249      	lsls	r1, r1, #9
 80004ac:	4642      	mov	r2, r8
 80004ae:	20ff      	movs	r0, #255	; 0xff
 80004b0:	0a49      	lsrs	r1, r1, #9
 80004b2:	e707      	b.n	80002c4 <__aeabi_fmul+0xa4>
 80004b4:	2303      	movs	r3, #3
 80004b6:	e7df      	b.n	8000478 <__aeabi_fmul+0x258>
 80004b8:	f7ffffff 	.word	0xf7ffffff

080004bc <__aeabi_i2f>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2800      	cmp	r0, #0
 80004c0:	d013      	beq.n	80004ea <__aeabi_i2f+0x2e>
 80004c2:	17c3      	asrs	r3, r0, #31
 80004c4:	18c5      	adds	r5, r0, r3
 80004c6:	405d      	eors	r5, r3
 80004c8:	0fc4      	lsrs	r4, r0, #31
 80004ca:	0028      	movs	r0, r5
 80004cc:	f000 ff38 	bl	8001340 <__clzsi2>
 80004d0:	239e      	movs	r3, #158	; 0x9e
 80004d2:	0001      	movs	r1, r0
 80004d4:	1a1b      	subs	r3, r3, r0
 80004d6:	2b96      	cmp	r3, #150	; 0x96
 80004d8:	dc0f      	bgt.n	80004fa <__aeabi_i2f+0x3e>
 80004da:	2808      	cmp	r0, #8
 80004dc:	d031      	beq.n	8000542 <__aeabi_i2f+0x86>
 80004de:	3908      	subs	r1, #8
 80004e0:	408d      	lsls	r5, r1
 80004e2:	026d      	lsls	r5, r5, #9
 80004e4:	0a6d      	lsrs	r5, r5, #9
 80004e6:	b2d8      	uxtb	r0, r3
 80004e8:	e002      	b.n	80004f0 <__aeabi_i2f+0x34>
 80004ea:	2400      	movs	r4, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	2500      	movs	r5, #0
 80004f0:	05c0      	lsls	r0, r0, #23
 80004f2:	4328      	orrs	r0, r5
 80004f4:	07e4      	lsls	r4, r4, #31
 80004f6:	4320      	orrs	r0, r4
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	2b99      	cmp	r3, #153	; 0x99
 80004fc:	dd0c      	ble.n	8000518 <__aeabi_i2f+0x5c>
 80004fe:	2205      	movs	r2, #5
 8000500:	1a12      	subs	r2, r2, r0
 8000502:	0028      	movs	r0, r5
 8000504:	40d0      	lsrs	r0, r2
 8000506:	0002      	movs	r2, r0
 8000508:	0008      	movs	r0, r1
 800050a:	301b      	adds	r0, #27
 800050c:	4085      	lsls	r5, r0
 800050e:	0028      	movs	r0, r5
 8000510:	1e45      	subs	r5, r0, #1
 8000512:	41a8      	sbcs	r0, r5
 8000514:	4302      	orrs	r2, r0
 8000516:	0015      	movs	r5, r2
 8000518:	2905      	cmp	r1, #5
 800051a:	dc16      	bgt.n	800054a <__aeabi_i2f+0x8e>
 800051c:	002a      	movs	r2, r5
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <__aeabi_i2f+0xa0>)
 8000520:	4002      	ands	r2, r0
 8000522:	076e      	lsls	r6, r5, #29
 8000524:	d009      	beq.n	800053a <__aeabi_i2f+0x7e>
 8000526:	260f      	movs	r6, #15
 8000528:	4035      	ands	r5, r6
 800052a:	2d04      	cmp	r5, #4
 800052c:	d005      	beq.n	800053a <__aeabi_i2f+0x7e>
 800052e:	3204      	adds	r2, #4
 8000530:	0155      	lsls	r5, r2, #5
 8000532:	d502      	bpl.n	800053a <__aeabi_i2f+0x7e>
 8000534:	239f      	movs	r3, #159	; 0x9f
 8000536:	4002      	ands	r2, r0
 8000538:	1a5b      	subs	r3, r3, r1
 800053a:	0192      	lsls	r2, r2, #6
 800053c:	0a55      	lsrs	r5, r2, #9
 800053e:	b2d8      	uxtb	r0, r3
 8000540:	e7d6      	b.n	80004f0 <__aeabi_i2f+0x34>
 8000542:	026d      	lsls	r5, r5, #9
 8000544:	2096      	movs	r0, #150	; 0x96
 8000546:	0a6d      	lsrs	r5, r5, #9
 8000548:	e7d2      	b.n	80004f0 <__aeabi_i2f+0x34>
 800054a:	1f4a      	subs	r2, r1, #5
 800054c:	4095      	lsls	r5, r2
 800054e:	002a      	movs	r2, r5
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <__aeabi_i2f+0xa0>)
 8000552:	4002      	ands	r2, r0
 8000554:	076e      	lsls	r6, r5, #29
 8000556:	d0f0      	beq.n	800053a <__aeabi_i2f+0x7e>
 8000558:	e7e5      	b.n	8000526 <__aeabi_i2f+0x6a>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	fbffffff 	.word	0xfbffffff

08000560 <__aeabi_dadd>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	464f      	mov	r7, r9
 8000564:	4646      	mov	r6, r8
 8000566:	46d6      	mov	lr, sl
 8000568:	0004      	movs	r4, r0
 800056a:	b5c0      	push	{r6, r7, lr}
 800056c:	001f      	movs	r7, r3
 800056e:	030b      	lsls	r3, r1, #12
 8000570:	0010      	movs	r0, r2
 8000572:	004e      	lsls	r6, r1, #1
 8000574:	0a5b      	lsrs	r3, r3, #9
 8000576:	0fcd      	lsrs	r5, r1, #31
 8000578:	0f61      	lsrs	r1, r4, #29
 800057a:	007a      	lsls	r2, r7, #1
 800057c:	4319      	orrs	r1, r3
 800057e:	00e3      	lsls	r3, r4, #3
 8000580:	033c      	lsls	r4, r7, #12
 8000582:	0fff      	lsrs	r7, r7, #31
 8000584:	46bc      	mov	ip, r7
 8000586:	0a64      	lsrs	r4, r4, #9
 8000588:	0f47      	lsrs	r7, r0, #29
 800058a:	4327      	orrs	r7, r4
 800058c:	0d76      	lsrs	r6, r6, #21
 800058e:	0d52      	lsrs	r2, r2, #21
 8000590:	00c0      	lsls	r0, r0, #3
 8000592:	46b9      	mov	r9, r7
 8000594:	4680      	mov	r8, r0
 8000596:	1ab7      	subs	r7, r6, r2
 8000598:	4565      	cmp	r5, ip
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x3e>
 800059c:	e09b      	b.n	80006d6 <__aeabi_dadd+0x176>
 800059e:	2f00      	cmp	r7, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_dadd+0x44>
 80005a2:	e084      	b.n	80006ae <__aeabi_dadd+0x14e>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_dadd+0x4a>
 80005a8:	e0be      	b.n	8000728 <__aeabi_dadd+0x1c8>
 80005aa:	4ac8      	ldr	r2, [pc, #800]	; (80008cc <__aeabi_dadd+0x36c>)
 80005ac:	4296      	cmp	r6, r2
 80005ae:	d100      	bne.n	80005b2 <__aeabi_dadd+0x52>
 80005b0:	e124      	b.n	80007fc <__aeabi_dadd+0x29c>
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	464c      	mov	r4, r9
 80005b6:	0412      	lsls	r2, r2, #16
 80005b8:	4314      	orrs	r4, r2
 80005ba:	46a1      	mov	r9, r4
 80005bc:	2f38      	cmp	r7, #56	; 0x38
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dadd+0x62>
 80005c0:	e167      	b.n	8000892 <__aeabi_dadd+0x332>
 80005c2:	2f1f      	cmp	r7, #31
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_dadd+0x68>
 80005c6:	e1d6      	b.n	8000976 <__aeabi_dadd+0x416>
 80005c8:	2220      	movs	r2, #32
 80005ca:	464c      	mov	r4, r9
 80005cc:	1bd2      	subs	r2, r2, r7
 80005ce:	4094      	lsls	r4, r2
 80005d0:	46a2      	mov	sl, r4
 80005d2:	4644      	mov	r4, r8
 80005d4:	40fc      	lsrs	r4, r7
 80005d6:	0020      	movs	r0, r4
 80005d8:	4654      	mov	r4, sl
 80005da:	4304      	orrs	r4, r0
 80005dc:	4640      	mov	r0, r8
 80005de:	4090      	lsls	r0, r2
 80005e0:	1e42      	subs	r2, r0, #1
 80005e2:	4190      	sbcs	r0, r2
 80005e4:	464a      	mov	r2, r9
 80005e6:	40fa      	lsrs	r2, r7
 80005e8:	4304      	orrs	r4, r0
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	1b1c      	subs	r4, r3, r4
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	4192      	sbcs	r2, r2
 80005f2:	4252      	negs	r2, r2
 80005f4:	1a8b      	subs	r3, r1, r2
 80005f6:	469a      	mov	sl, r3
 80005f8:	4653      	mov	r3, sl
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	d400      	bmi.n	8000600 <__aeabi_dadd+0xa0>
 80005fe:	e0d4      	b.n	80007aa <__aeabi_dadd+0x24a>
 8000600:	4653      	mov	r3, sl
 8000602:	025a      	lsls	r2, r3, #9
 8000604:	0a53      	lsrs	r3, r2, #9
 8000606:	469a      	mov	sl, r3
 8000608:	4653      	mov	r3, sl
 800060a:	2b00      	cmp	r3, #0
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0xb0>
 800060e:	e104      	b.n	800081a <__aeabi_dadd+0x2ba>
 8000610:	4650      	mov	r0, sl
 8000612:	f000 fe95 	bl	8001340 <__clzsi2>
 8000616:	0003      	movs	r3, r0
 8000618:	3b08      	subs	r3, #8
 800061a:	2220      	movs	r2, #32
 800061c:	0020      	movs	r0, r4
 800061e:	1ad2      	subs	r2, r2, r3
 8000620:	4651      	mov	r1, sl
 8000622:	40d0      	lsrs	r0, r2
 8000624:	4099      	lsls	r1, r3
 8000626:	0002      	movs	r2, r0
 8000628:	409c      	lsls	r4, r3
 800062a:	430a      	orrs	r2, r1
 800062c:	42b3      	cmp	r3, r6
 800062e:	da00      	bge.n	8000632 <__aeabi_dadd+0xd2>
 8000630:	e102      	b.n	8000838 <__aeabi_dadd+0x2d8>
 8000632:	1b9b      	subs	r3, r3, r6
 8000634:	1c59      	adds	r1, r3, #1
 8000636:	291f      	cmp	r1, #31
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0xdc>
 800063a:	e0a7      	b.n	800078c <__aeabi_dadd+0x22c>
 800063c:	2320      	movs	r3, #32
 800063e:	0010      	movs	r0, r2
 8000640:	0026      	movs	r6, r4
 8000642:	1a5b      	subs	r3, r3, r1
 8000644:	409c      	lsls	r4, r3
 8000646:	4098      	lsls	r0, r3
 8000648:	40ce      	lsrs	r6, r1
 800064a:	40ca      	lsrs	r2, r1
 800064c:	1e63      	subs	r3, r4, #1
 800064e:	419c      	sbcs	r4, r3
 8000650:	4330      	orrs	r0, r6
 8000652:	4692      	mov	sl, r2
 8000654:	2600      	movs	r6, #0
 8000656:	4304      	orrs	r4, r0
 8000658:	0763      	lsls	r3, r4, #29
 800065a:	d009      	beq.n	8000670 <__aeabi_dadd+0x110>
 800065c:	230f      	movs	r3, #15
 800065e:	4023      	ands	r3, r4
 8000660:	2b04      	cmp	r3, #4
 8000662:	d005      	beq.n	8000670 <__aeabi_dadd+0x110>
 8000664:	1d23      	adds	r3, r4, #4
 8000666:	42a3      	cmp	r3, r4
 8000668:	41a4      	sbcs	r4, r4
 800066a:	4264      	negs	r4, r4
 800066c:	44a2      	add	sl, r4
 800066e:	001c      	movs	r4, r3
 8000670:	4653      	mov	r3, sl
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	d400      	bmi.n	8000678 <__aeabi_dadd+0x118>
 8000676:	e09b      	b.n	80007b0 <__aeabi_dadd+0x250>
 8000678:	4b94      	ldr	r3, [pc, #592]	; (80008cc <__aeabi_dadd+0x36c>)
 800067a:	3601      	adds	r6, #1
 800067c:	429e      	cmp	r6, r3
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x122>
 8000680:	e0b8      	b.n	80007f4 <__aeabi_dadd+0x294>
 8000682:	4653      	mov	r3, sl
 8000684:	4992      	ldr	r1, [pc, #584]	; (80008d0 <__aeabi_dadd+0x370>)
 8000686:	08e4      	lsrs	r4, r4, #3
 8000688:	400b      	ands	r3, r1
 800068a:	0019      	movs	r1, r3
 800068c:	075b      	lsls	r3, r3, #29
 800068e:	4323      	orrs	r3, r4
 8000690:	0572      	lsls	r2, r6, #21
 8000692:	024c      	lsls	r4, r1, #9
 8000694:	0b24      	lsrs	r4, r4, #12
 8000696:	0d52      	lsrs	r2, r2, #21
 8000698:	0512      	lsls	r2, r2, #20
 800069a:	07ed      	lsls	r5, r5, #31
 800069c:	4322      	orrs	r2, r4
 800069e:	432a      	orrs	r2, r5
 80006a0:	0018      	movs	r0, r3
 80006a2:	0011      	movs	r1, r2
 80006a4:	bce0      	pop	{r5, r6, r7}
 80006a6:	46ba      	mov	sl, r7
 80006a8:	46b1      	mov	r9, r6
 80006aa:	46a8      	mov	r8, r5
 80006ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d048      	beq.n	8000744 <__aeabi_dadd+0x1e4>
 80006b2:	1b97      	subs	r7, r2, r6
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d000      	beq.n	80006ba <__aeabi_dadd+0x15a>
 80006b8:	e10e      	b.n	80008d8 <__aeabi_dadd+0x378>
 80006ba:	000c      	movs	r4, r1
 80006bc:	431c      	orrs	r4, r3
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x162>
 80006c0:	e1b7      	b.n	8000a32 <__aeabi_dadd+0x4d2>
 80006c2:	1e7c      	subs	r4, r7, #1
 80006c4:	2f01      	cmp	r7, #1
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x16a>
 80006c8:	e226      	b.n	8000b18 <__aeabi_dadd+0x5b8>
 80006ca:	4d80      	ldr	r5, [pc, #512]	; (80008cc <__aeabi_dadd+0x36c>)
 80006cc:	42af      	cmp	r7, r5
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x172>
 80006d0:	e1d5      	b.n	8000a7e <__aeabi_dadd+0x51e>
 80006d2:	0027      	movs	r7, r4
 80006d4:	e107      	b.n	80008e6 <__aeabi_dadd+0x386>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_dadd+0x17c>
 80006da:	e0b2      	b.n	8000842 <__aeabi_dadd+0x2e2>
 80006dc:	2a00      	cmp	r2, #0
 80006de:	d047      	beq.n	8000770 <__aeabi_dadd+0x210>
 80006e0:	4a7a      	ldr	r2, [pc, #488]	; (80008cc <__aeabi_dadd+0x36c>)
 80006e2:	4296      	cmp	r6, r2
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x188>
 80006e6:	e089      	b.n	80007fc <__aeabi_dadd+0x29c>
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	464c      	mov	r4, r9
 80006ec:	0412      	lsls	r2, r2, #16
 80006ee:	4314      	orrs	r4, r2
 80006f0:	46a1      	mov	r9, r4
 80006f2:	2f38      	cmp	r7, #56	; 0x38
 80006f4:	dc6b      	bgt.n	80007ce <__aeabi_dadd+0x26e>
 80006f6:	2f1f      	cmp	r7, #31
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_dadd+0x19c>
 80006fa:	e16e      	b.n	80009da <__aeabi_dadd+0x47a>
 80006fc:	003a      	movs	r2, r7
 80006fe:	4648      	mov	r0, r9
 8000700:	3a20      	subs	r2, #32
 8000702:	40d0      	lsrs	r0, r2
 8000704:	4684      	mov	ip, r0
 8000706:	2f20      	cmp	r7, #32
 8000708:	d007      	beq.n	800071a <__aeabi_dadd+0x1ba>
 800070a:	2240      	movs	r2, #64	; 0x40
 800070c:	4648      	mov	r0, r9
 800070e:	1bd2      	subs	r2, r2, r7
 8000710:	4090      	lsls	r0, r2
 8000712:	0002      	movs	r2, r0
 8000714:	4640      	mov	r0, r8
 8000716:	4310      	orrs	r0, r2
 8000718:	4680      	mov	r8, r0
 800071a:	4640      	mov	r0, r8
 800071c:	1e42      	subs	r2, r0, #1
 800071e:	4190      	sbcs	r0, r2
 8000720:	4662      	mov	r2, ip
 8000722:	0004      	movs	r4, r0
 8000724:	4314      	orrs	r4, r2
 8000726:	e057      	b.n	80007d8 <__aeabi_dadd+0x278>
 8000728:	464a      	mov	r2, r9
 800072a:	4302      	orrs	r2, r0
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x1d0>
 800072e:	e103      	b.n	8000938 <__aeabi_dadd+0x3d8>
 8000730:	1e7a      	subs	r2, r7, #1
 8000732:	2f01      	cmp	r7, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x1d8>
 8000736:	e193      	b.n	8000a60 <__aeabi_dadd+0x500>
 8000738:	4c64      	ldr	r4, [pc, #400]	; (80008cc <__aeabi_dadd+0x36c>)
 800073a:	42a7      	cmp	r7, r4
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x1e0>
 800073e:	e18a      	b.n	8000a56 <__aeabi_dadd+0x4f6>
 8000740:	0017      	movs	r7, r2
 8000742:	e73b      	b.n	80005bc <__aeabi_dadd+0x5c>
 8000744:	4c63      	ldr	r4, [pc, #396]	; (80008d4 <__aeabi_dadd+0x374>)
 8000746:	1c72      	adds	r2, r6, #1
 8000748:	4222      	tst	r2, r4
 800074a:	d000      	beq.n	800074e <__aeabi_dadd+0x1ee>
 800074c:	e0e0      	b.n	8000910 <__aeabi_dadd+0x3b0>
 800074e:	000a      	movs	r2, r1
 8000750:	431a      	orrs	r2, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d000      	beq.n	8000758 <__aeabi_dadd+0x1f8>
 8000756:	e174      	b.n	8000a42 <__aeabi_dadd+0x4e2>
 8000758:	2a00      	cmp	r2, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1fe>
 800075c:	e1d0      	b.n	8000b00 <__aeabi_dadd+0x5a0>
 800075e:	464a      	mov	r2, r9
 8000760:	4302      	orrs	r2, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_dadd+0x206>
 8000764:	e1e3      	b.n	8000b2e <__aeabi_dadd+0x5ce>
 8000766:	074a      	lsls	r2, r1, #29
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	4313      	orrs	r3, r2
 800076c:	08c9      	lsrs	r1, r1, #3
 800076e:	e029      	b.n	80007c4 <__aeabi_dadd+0x264>
 8000770:	464a      	mov	r2, r9
 8000772:	4302      	orrs	r2, r0
 8000774:	d100      	bne.n	8000778 <__aeabi_dadd+0x218>
 8000776:	e17d      	b.n	8000a74 <__aeabi_dadd+0x514>
 8000778:	1e7a      	subs	r2, r7, #1
 800077a:	2f01      	cmp	r7, #1
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x220>
 800077e:	e0e0      	b.n	8000942 <__aeabi_dadd+0x3e2>
 8000780:	4c52      	ldr	r4, [pc, #328]	; (80008cc <__aeabi_dadd+0x36c>)
 8000782:	42a7      	cmp	r7, r4
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x228>
 8000786:	e166      	b.n	8000a56 <__aeabi_dadd+0x4f6>
 8000788:	0017      	movs	r7, r2
 800078a:	e7b2      	b.n	80006f2 <__aeabi_dadd+0x192>
 800078c:	0010      	movs	r0, r2
 800078e:	3b1f      	subs	r3, #31
 8000790:	40d8      	lsrs	r0, r3
 8000792:	2920      	cmp	r1, #32
 8000794:	d003      	beq.n	800079e <__aeabi_dadd+0x23e>
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	409a      	lsls	r2, r3
 800079c:	4314      	orrs	r4, r2
 800079e:	1e63      	subs	r3, r4, #1
 80007a0:	419c      	sbcs	r4, r3
 80007a2:	2300      	movs	r3, #0
 80007a4:	2600      	movs	r6, #0
 80007a6:	469a      	mov	sl, r3
 80007a8:	4304      	orrs	r4, r0
 80007aa:	0763      	lsls	r3, r4, #29
 80007ac:	d000      	beq.n	80007b0 <__aeabi_dadd+0x250>
 80007ae:	e755      	b.n	800065c <__aeabi_dadd+0xfc>
 80007b0:	4652      	mov	r2, sl
 80007b2:	08e3      	lsrs	r3, r4, #3
 80007b4:	0752      	lsls	r2, r2, #29
 80007b6:	4313      	orrs	r3, r2
 80007b8:	4652      	mov	r2, sl
 80007ba:	0037      	movs	r7, r6
 80007bc:	08d1      	lsrs	r1, r2, #3
 80007be:	4a43      	ldr	r2, [pc, #268]	; (80008cc <__aeabi_dadd+0x36c>)
 80007c0:	4297      	cmp	r7, r2
 80007c2:	d01f      	beq.n	8000804 <__aeabi_dadd+0x2a4>
 80007c4:	0309      	lsls	r1, r1, #12
 80007c6:	057a      	lsls	r2, r7, #21
 80007c8:	0b0c      	lsrs	r4, r1, #12
 80007ca:	0d52      	lsrs	r2, r2, #21
 80007cc:	e764      	b.n	8000698 <__aeabi_dadd+0x138>
 80007ce:	4642      	mov	r2, r8
 80007d0:	464c      	mov	r4, r9
 80007d2:	4314      	orrs	r4, r2
 80007d4:	1e62      	subs	r2, r4, #1
 80007d6:	4194      	sbcs	r4, r2
 80007d8:	18e4      	adds	r4, r4, r3
 80007da:	429c      	cmp	r4, r3
 80007dc:	4192      	sbcs	r2, r2
 80007de:	4252      	negs	r2, r2
 80007e0:	4692      	mov	sl, r2
 80007e2:	448a      	add	sl, r1
 80007e4:	4653      	mov	r3, sl
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	d5df      	bpl.n	80007aa <__aeabi_dadd+0x24a>
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <__aeabi_dadd+0x36c>)
 80007ec:	3601      	adds	r6, #1
 80007ee:	429e      	cmp	r6, r3
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x294>
 80007f2:	e0b3      	b.n	800095c <__aeabi_dadd+0x3fc>
 80007f4:	0032      	movs	r2, r6
 80007f6:	2400      	movs	r4, #0
 80007f8:	2300      	movs	r3, #0
 80007fa:	e74d      	b.n	8000698 <__aeabi_dadd+0x138>
 80007fc:	074a      	lsls	r2, r1, #29
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	4313      	orrs	r3, r2
 8000802:	08c9      	lsrs	r1, r1, #3
 8000804:	001a      	movs	r2, r3
 8000806:	430a      	orrs	r2, r1
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x2ac>
 800080a:	e200      	b.n	8000c0e <__aeabi_dadd+0x6ae>
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	0324      	lsls	r4, r4, #12
 8000810:	430c      	orrs	r4, r1
 8000812:	0324      	lsls	r4, r4, #12
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <__aeabi_dadd+0x36c>)
 8000816:	0b24      	lsrs	r4, r4, #12
 8000818:	e73e      	b.n	8000698 <__aeabi_dadd+0x138>
 800081a:	0020      	movs	r0, r4
 800081c:	f000 fd90 	bl	8001340 <__clzsi2>
 8000820:	0003      	movs	r3, r0
 8000822:	3318      	adds	r3, #24
 8000824:	2b1f      	cmp	r3, #31
 8000826:	dc00      	bgt.n	800082a <__aeabi_dadd+0x2ca>
 8000828:	e6f7      	b.n	800061a <__aeabi_dadd+0xba>
 800082a:	0022      	movs	r2, r4
 800082c:	3808      	subs	r0, #8
 800082e:	4082      	lsls	r2, r0
 8000830:	2400      	movs	r4, #0
 8000832:	42b3      	cmp	r3, r6
 8000834:	db00      	blt.n	8000838 <__aeabi_dadd+0x2d8>
 8000836:	e6fc      	b.n	8000632 <__aeabi_dadd+0xd2>
 8000838:	1af6      	subs	r6, r6, r3
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <__aeabi_dadd+0x370>)
 800083c:	401a      	ands	r2, r3
 800083e:	4692      	mov	sl, r2
 8000840:	e70a      	b.n	8000658 <__aeabi_dadd+0xf8>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d02b      	beq.n	800089e <__aeabi_dadd+0x33e>
 8000846:	1b97      	subs	r7, r2, r6
 8000848:	2e00      	cmp	r6, #0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x2ee>
 800084c:	e0b8      	b.n	80009c0 <__aeabi_dadd+0x460>
 800084e:	4c1f      	ldr	r4, [pc, #124]	; (80008cc <__aeabi_dadd+0x36c>)
 8000850:	42a2      	cmp	r2, r4
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x2f6>
 8000854:	e11c      	b.n	8000a90 <__aeabi_dadd+0x530>
 8000856:	2480      	movs	r4, #128	; 0x80
 8000858:	0424      	lsls	r4, r4, #16
 800085a:	4321      	orrs	r1, r4
 800085c:	2f38      	cmp	r7, #56	; 0x38
 800085e:	dd00      	ble.n	8000862 <__aeabi_dadd+0x302>
 8000860:	e11e      	b.n	8000aa0 <__aeabi_dadd+0x540>
 8000862:	2f1f      	cmp	r7, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x308>
 8000866:	e19e      	b.n	8000ba6 <__aeabi_dadd+0x646>
 8000868:	2620      	movs	r6, #32
 800086a:	000c      	movs	r4, r1
 800086c:	1bf6      	subs	r6, r6, r7
 800086e:	0018      	movs	r0, r3
 8000870:	40b3      	lsls	r3, r6
 8000872:	40b4      	lsls	r4, r6
 8000874:	40f8      	lsrs	r0, r7
 8000876:	1e5e      	subs	r6, r3, #1
 8000878:	41b3      	sbcs	r3, r6
 800087a:	40f9      	lsrs	r1, r7
 800087c:	4304      	orrs	r4, r0
 800087e:	431c      	orrs	r4, r3
 8000880:	4489      	add	r9, r1
 8000882:	4444      	add	r4, r8
 8000884:	4544      	cmp	r4, r8
 8000886:	419b      	sbcs	r3, r3
 8000888:	425b      	negs	r3, r3
 800088a:	444b      	add	r3, r9
 800088c:	469a      	mov	sl, r3
 800088e:	0016      	movs	r6, r2
 8000890:	e7a8      	b.n	80007e4 <__aeabi_dadd+0x284>
 8000892:	4642      	mov	r2, r8
 8000894:	464c      	mov	r4, r9
 8000896:	4314      	orrs	r4, r2
 8000898:	1e62      	subs	r2, r4, #1
 800089a:	4194      	sbcs	r4, r2
 800089c:	e6a6      	b.n	80005ec <__aeabi_dadd+0x8c>
 800089e:	4c0d      	ldr	r4, [pc, #52]	; (80008d4 <__aeabi_dadd+0x374>)
 80008a0:	1c72      	adds	r2, r6, #1
 80008a2:	4222      	tst	r2, r4
 80008a4:	d000      	beq.n	80008a8 <__aeabi_dadd+0x348>
 80008a6:	e0a8      	b.n	80009fa <__aeabi_dadd+0x49a>
 80008a8:	000a      	movs	r2, r1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d000      	beq.n	80008b2 <__aeabi_dadd+0x352>
 80008b0:	e10a      	b.n	8000ac8 <__aeabi_dadd+0x568>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x358>
 80008b6:	e15e      	b.n	8000b76 <__aeabi_dadd+0x616>
 80008b8:	464a      	mov	r2, r9
 80008ba:	4302      	orrs	r2, r0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_dadd+0x360>
 80008be:	e161      	b.n	8000b84 <__aeabi_dadd+0x624>
 80008c0:	074a      	lsls	r2, r1, #29
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	e77c      	b.n	80007c4 <__aeabi_dadd+0x264>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	ff7fffff 	.word	0xff7fffff
 80008d4:	000007fe 	.word	0x000007fe
 80008d8:	4ccf      	ldr	r4, [pc, #828]	; (8000c18 <__aeabi_dadd+0x6b8>)
 80008da:	42a2      	cmp	r2, r4
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x380>
 80008de:	e0ce      	b.n	8000a7e <__aeabi_dadd+0x51e>
 80008e0:	2480      	movs	r4, #128	; 0x80
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	4321      	orrs	r1, r4
 80008e6:	2f38      	cmp	r7, #56	; 0x38
 80008e8:	dc5b      	bgt.n	80009a2 <__aeabi_dadd+0x442>
 80008ea:	2f1f      	cmp	r7, #31
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_dadd+0x390>
 80008ee:	e0dc      	b.n	8000aaa <__aeabi_dadd+0x54a>
 80008f0:	2520      	movs	r5, #32
 80008f2:	000c      	movs	r4, r1
 80008f4:	1bed      	subs	r5, r5, r7
 80008f6:	001e      	movs	r6, r3
 80008f8:	40ab      	lsls	r3, r5
 80008fa:	40ac      	lsls	r4, r5
 80008fc:	40fe      	lsrs	r6, r7
 80008fe:	1e5d      	subs	r5, r3, #1
 8000900:	41ab      	sbcs	r3, r5
 8000902:	4334      	orrs	r4, r6
 8000904:	40f9      	lsrs	r1, r7
 8000906:	431c      	orrs	r4, r3
 8000908:	464b      	mov	r3, r9
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	4699      	mov	r9, r3
 800090e:	e04c      	b.n	80009aa <__aeabi_dadd+0x44a>
 8000910:	464a      	mov	r2, r9
 8000912:	1a1c      	subs	r4, r3, r0
 8000914:	1a88      	subs	r0, r1, r2
 8000916:	42a3      	cmp	r3, r4
 8000918:	4192      	sbcs	r2, r2
 800091a:	4252      	negs	r2, r2
 800091c:	4692      	mov	sl, r2
 800091e:	0002      	movs	r2, r0
 8000920:	4650      	mov	r0, sl
 8000922:	1a12      	subs	r2, r2, r0
 8000924:	4692      	mov	sl, r2
 8000926:	0212      	lsls	r2, r2, #8
 8000928:	d478      	bmi.n	8000a1c <__aeabi_dadd+0x4bc>
 800092a:	4653      	mov	r3, sl
 800092c:	4323      	orrs	r3, r4
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x3d2>
 8000930:	e66a      	b.n	8000608 <__aeabi_dadd+0xa8>
 8000932:	2100      	movs	r1, #0
 8000934:	2500      	movs	r5, #0
 8000936:	e745      	b.n	80007c4 <__aeabi_dadd+0x264>
 8000938:	074a      	lsls	r2, r1, #29
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4313      	orrs	r3, r2
 800093e:	08c9      	lsrs	r1, r1, #3
 8000940:	e73d      	b.n	80007be <__aeabi_dadd+0x25e>
 8000942:	181c      	adds	r4, r3, r0
 8000944:	429c      	cmp	r4, r3
 8000946:	419b      	sbcs	r3, r3
 8000948:	4449      	add	r1, r9
 800094a:	468a      	mov	sl, r1
 800094c:	425b      	negs	r3, r3
 800094e:	449a      	add	sl, r3
 8000950:	4653      	mov	r3, sl
 8000952:	2601      	movs	r6, #1
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	d400      	bmi.n	800095a <__aeabi_dadd+0x3fa>
 8000958:	e727      	b.n	80007aa <__aeabi_dadd+0x24a>
 800095a:	2602      	movs	r6, #2
 800095c:	4652      	mov	r2, sl
 800095e:	4baf      	ldr	r3, [pc, #700]	; (8000c1c <__aeabi_dadd+0x6bc>)
 8000960:	2101      	movs	r1, #1
 8000962:	401a      	ands	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	4021      	ands	r1, r4
 8000968:	0862      	lsrs	r2, r4, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	07dc      	lsls	r4, r3, #31
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	469a      	mov	sl, r3
 8000972:	4314      	orrs	r4, r2
 8000974:	e670      	b.n	8000658 <__aeabi_dadd+0xf8>
 8000976:	003a      	movs	r2, r7
 8000978:	464c      	mov	r4, r9
 800097a:	3a20      	subs	r2, #32
 800097c:	40d4      	lsrs	r4, r2
 800097e:	46a4      	mov	ip, r4
 8000980:	2f20      	cmp	r7, #32
 8000982:	d007      	beq.n	8000994 <__aeabi_dadd+0x434>
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	4648      	mov	r0, r9
 8000988:	1bd2      	subs	r2, r2, r7
 800098a:	4090      	lsls	r0, r2
 800098c:	0002      	movs	r2, r0
 800098e:	4640      	mov	r0, r8
 8000990:	4310      	orrs	r0, r2
 8000992:	4680      	mov	r8, r0
 8000994:	4640      	mov	r0, r8
 8000996:	1e42      	subs	r2, r0, #1
 8000998:	4190      	sbcs	r0, r2
 800099a:	4662      	mov	r2, ip
 800099c:	0004      	movs	r4, r0
 800099e:	4314      	orrs	r4, r2
 80009a0:	e624      	b.n	80005ec <__aeabi_dadd+0x8c>
 80009a2:	4319      	orrs	r1, r3
 80009a4:	000c      	movs	r4, r1
 80009a6:	1e63      	subs	r3, r4, #1
 80009a8:	419c      	sbcs	r4, r3
 80009aa:	4643      	mov	r3, r8
 80009ac:	1b1c      	subs	r4, r3, r4
 80009ae:	45a0      	cmp	r8, r4
 80009b0:	419b      	sbcs	r3, r3
 80009b2:	4649      	mov	r1, r9
 80009b4:	425b      	negs	r3, r3
 80009b6:	1acb      	subs	r3, r1, r3
 80009b8:	469a      	mov	sl, r3
 80009ba:	4665      	mov	r5, ip
 80009bc:	0016      	movs	r6, r2
 80009be:	e61b      	b.n	80005f8 <__aeabi_dadd+0x98>
 80009c0:	000c      	movs	r4, r1
 80009c2:	431c      	orrs	r4, r3
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x468>
 80009c6:	e0c7      	b.n	8000b58 <__aeabi_dadd+0x5f8>
 80009c8:	1e7c      	subs	r4, r7, #1
 80009ca:	2f01      	cmp	r7, #1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x470>
 80009ce:	e0f9      	b.n	8000bc4 <__aeabi_dadd+0x664>
 80009d0:	4e91      	ldr	r6, [pc, #580]	; (8000c18 <__aeabi_dadd+0x6b8>)
 80009d2:	42b7      	cmp	r7, r6
 80009d4:	d05c      	beq.n	8000a90 <__aeabi_dadd+0x530>
 80009d6:	0027      	movs	r7, r4
 80009d8:	e740      	b.n	800085c <__aeabi_dadd+0x2fc>
 80009da:	2220      	movs	r2, #32
 80009dc:	464c      	mov	r4, r9
 80009de:	4640      	mov	r0, r8
 80009e0:	1bd2      	subs	r2, r2, r7
 80009e2:	4094      	lsls	r4, r2
 80009e4:	40f8      	lsrs	r0, r7
 80009e6:	4304      	orrs	r4, r0
 80009e8:	4640      	mov	r0, r8
 80009ea:	4090      	lsls	r0, r2
 80009ec:	1e42      	subs	r2, r0, #1
 80009ee:	4190      	sbcs	r0, r2
 80009f0:	464a      	mov	r2, r9
 80009f2:	40fa      	lsrs	r2, r7
 80009f4:	4304      	orrs	r4, r0
 80009f6:	1889      	adds	r1, r1, r2
 80009f8:	e6ee      	b.n	80007d8 <__aeabi_dadd+0x278>
 80009fa:	4c87      	ldr	r4, [pc, #540]	; (8000c18 <__aeabi_dadd+0x6b8>)
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x4a2>
 8000a00:	e6f9      	b.n	80007f6 <__aeabi_dadd+0x296>
 8000a02:	1818      	adds	r0, r3, r0
 8000a04:	4298      	cmp	r0, r3
 8000a06:	419b      	sbcs	r3, r3
 8000a08:	4449      	add	r1, r9
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	18cb      	adds	r3, r1, r3
 8000a0e:	07dc      	lsls	r4, r3, #31
 8000a10:	0840      	lsrs	r0, r0, #1
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	469a      	mov	sl, r3
 8000a16:	0016      	movs	r6, r2
 8000a18:	4304      	orrs	r4, r0
 8000a1a:	e6c6      	b.n	80007aa <__aeabi_dadd+0x24a>
 8000a1c:	4642      	mov	r2, r8
 8000a1e:	1ad4      	subs	r4, r2, r3
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	4180      	sbcs	r0, r0
 8000a24:	464b      	mov	r3, r9
 8000a26:	4240      	negs	r0, r0
 8000a28:	1a59      	subs	r1, r3, r1
 8000a2a:	1a0b      	subs	r3, r1, r0
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	4665      	mov	r5, ip
 8000a30:	e5ea      	b.n	8000608 <__aeabi_dadd+0xa8>
 8000a32:	464b      	mov	r3, r9
 8000a34:	464a      	mov	r2, r9
 8000a36:	08c0      	lsrs	r0, r0, #3
 8000a38:	075b      	lsls	r3, r3, #29
 8000a3a:	4665      	mov	r5, ip
 8000a3c:	4303      	orrs	r3, r0
 8000a3e:	08d1      	lsrs	r1, r2, #3
 8000a40:	e6bd      	b.n	80007be <__aeabi_dadd+0x25e>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dadd+0x4e8>
 8000a46:	e08e      	b.n	8000b66 <__aeabi_dadd+0x606>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	d117      	bne.n	8000a7e <__aeabi_dadd+0x51e>
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	2500      	movs	r5, #0
 8000a52:	0309      	lsls	r1, r1, #12
 8000a54:	e6da      	b.n	800080c <__aeabi_dadd+0x2ac>
 8000a56:	074a      	lsls	r2, r1, #29
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	08c9      	lsrs	r1, r1, #3
 8000a5e:	e6d1      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000a60:	1a1c      	subs	r4, r3, r0
 8000a62:	464a      	mov	r2, r9
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	419b      	sbcs	r3, r3
 8000a68:	1a89      	subs	r1, r1, r2
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	1acb      	subs	r3, r1, r3
 8000a6e:	469a      	mov	sl, r3
 8000a70:	2601      	movs	r6, #1
 8000a72:	e5c1      	b.n	80005f8 <__aeabi_dadd+0x98>
 8000a74:	074a      	lsls	r2, r1, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c9      	lsrs	r1, r1, #3
 8000a7c:	e69f      	b.n	80007be <__aeabi_dadd+0x25e>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	08d8      	lsrs	r0, r3, #3
 8000a82:	464b      	mov	r3, r9
 8000a84:	464a      	mov	r2, r9
 8000a86:	075b      	lsls	r3, r3, #29
 8000a88:	4665      	mov	r5, ip
 8000a8a:	4303      	orrs	r3, r0
 8000a8c:	08d1      	lsrs	r1, r2, #3
 8000a8e:	e6b9      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000a90:	4643      	mov	r3, r8
 8000a92:	08d8      	lsrs	r0, r3, #3
 8000a94:	464b      	mov	r3, r9
 8000a96:	464a      	mov	r2, r9
 8000a98:	075b      	lsls	r3, r3, #29
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	08d1      	lsrs	r1, r2, #3
 8000a9e:	e6b1      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000aa0:	4319      	orrs	r1, r3
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	1e63      	subs	r3, r4, #1
 8000aa6:	419c      	sbcs	r4, r3
 8000aa8:	e6eb      	b.n	8000882 <__aeabi_dadd+0x322>
 8000aaa:	003c      	movs	r4, r7
 8000aac:	000d      	movs	r5, r1
 8000aae:	3c20      	subs	r4, #32
 8000ab0:	40e5      	lsrs	r5, r4
 8000ab2:	2f20      	cmp	r7, #32
 8000ab4:	d003      	beq.n	8000abe <__aeabi_dadd+0x55e>
 8000ab6:	2440      	movs	r4, #64	; 0x40
 8000ab8:	1be4      	subs	r4, r4, r7
 8000aba:	40a1      	lsls	r1, r4
 8000abc:	430b      	orrs	r3, r1
 8000abe:	001c      	movs	r4, r3
 8000ac0:	1e63      	subs	r3, r4, #1
 8000ac2:	419c      	sbcs	r4, r3
 8000ac4:	432c      	orrs	r4, r5
 8000ac6:	e770      	b.n	80009aa <__aeabi_dadd+0x44a>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d0e1      	beq.n	8000a90 <__aeabi_dadd+0x530>
 8000acc:	464a      	mov	r2, r9
 8000ace:	4302      	orrs	r2, r0
 8000ad0:	d0c1      	beq.n	8000a56 <__aeabi_dadd+0x4f6>
 8000ad2:	074a      	lsls	r2, r1, #29
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	0312      	lsls	r2, r2, #12
 8000ade:	4211      	tst	r1, r2
 8000ae0:	d008      	beq.n	8000af4 <__aeabi_dadd+0x594>
 8000ae2:	4648      	mov	r0, r9
 8000ae4:	08c4      	lsrs	r4, r0, #3
 8000ae6:	4214      	tst	r4, r2
 8000ae8:	d104      	bne.n	8000af4 <__aeabi_dadd+0x594>
 8000aea:	4643      	mov	r3, r8
 8000aec:	0021      	movs	r1, r4
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	0742      	lsls	r2, r0, #29
 8000af2:	4313      	orrs	r3, r2
 8000af4:	0f5a      	lsrs	r2, r3, #29
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	0752      	lsls	r2, r2, #29
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	e681      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000b00:	464b      	mov	r3, r9
 8000b02:	4303      	orrs	r3, r0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dadd+0x5a8>
 8000b06:	e714      	b.n	8000932 <__aeabi_dadd+0x3d2>
 8000b08:	464b      	mov	r3, r9
 8000b0a:	464a      	mov	r2, r9
 8000b0c:	08c0      	lsrs	r0, r0, #3
 8000b0e:	075b      	lsls	r3, r3, #29
 8000b10:	4665      	mov	r5, ip
 8000b12:	4303      	orrs	r3, r0
 8000b14:	08d1      	lsrs	r1, r2, #3
 8000b16:	e655      	b.n	80007c4 <__aeabi_dadd+0x264>
 8000b18:	1ac4      	subs	r4, r0, r3
 8000b1a:	45a0      	cmp	r8, r4
 8000b1c:	4180      	sbcs	r0, r0
 8000b1e:	464b      	mov	r3, r9
 8000b20:	4240      	negs	r0, r0
 8000b22:	1a59      	subs	r1, r3, r1
 8000b24:	1a0b      	subs	r3, r1, r0
 8000b26:	469a      	mov	sl, r3
 8000b28:	4665      	mov	r5, ip
 8000b2a:	2601      	movs	r6, #1
 8000b2c:	e564      	b.n	80005f8 <__aeabi_dadd+0x98>
 8000b2e:	1a1c      	subs	r4, r3, r0
 8000b30:	464a      	mov	r2, r9
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4180      	sbcs	r0, r0
 8000b36:	1a8a      	subs	r2, r1, r2
 8000b38:	4240      	negs	r0, r0
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	4692      	mov	sl, r2
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	d549      	bpl.n	8000bd6 <__aeabi_dadd+0x676>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1ad4      	subs	r4, r2, r3
 8000b46:	45a0      	cmp	r8, r4
 8000b48:	4180      	sbcs	r0, r0
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	4240      	negs	r0, r0
 8000b4e:	1a59      	subs	r1, r3, r1
 8000b50:	1a0b      	subs	r3, r1, r0
 8000b52:	469a      	mov	sl, r3
 8000b54:	4665      	mov	r5, ip
 8000b56:	e57f      	b.n	8000658 <__aeabi_dadd+0xf8>
 8000b58:	464b      	mov	r3, r9
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	08c0      	lsrs	r0, r0, #3
 8000b5e:	075b      	lsls	r3, r3, #29
 8000b60:	4303      	orrs	r3, r0
 8000b62:	08d1      	lsrs	r1, r2, #3
 8000b64:	e62b      	b.n	80007be <__aeabi_dadd+0x25e>
 8000b66:	464a      	mov	r2, r9
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	d138      	bne.n	8000be0 <__aeabi_dadd+0x680>
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	4313      	orrs	r3, r2
 8000b72:	08c9      	lsrs	r1, r1, #3
 8000b74:	e646      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000b76:	464b      	mov	r3, r9
 8000b78:	464a      	mov	r2, r9
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	075b      	lsls	r3, r3, #29
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	08d1      	lsrs	r1, r2, #3
 8000b82:	e61f      	b.n	80007c4 <__aeabi_dadd+0x264>
 8000b84:	181c      	adds	r4, r3, r0
 8000b86:	429c      	cmp	r4, r3
 8000b88:	419b      	sbcs	r3, r3
 8000b8a:	4449      	add	r1, r9
 8000b8c:	468a      	mov	sl, r1
 8000b8e:	425b      	negs	r3, r3
 8000b90:	449a      	add	sl, r3
 8000b92:	4653      	mov	r3, sl
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	d400      	bmi.n	8000b9a <__aeabi_dadd+0x63a>
 8000b98:	e607      	b.n	80007aa <__aeabi_dadd+0x24a>
 8000b9a:	4652      	mov	r2, sl
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <__aeabi_dadd+0x6bc>)
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	4692      	mov	sl, r2
 8000ba4:	e601      	b.n	80007aa <__aeabi_dadd+0x24a>
 8000ba6:	003c      	movs	r4, r7
 8000ba8:	000e      	movs	r6, r1
 8000baa:	3c20      	subs	r4, #32
 8000bac:	40e6      	lsrs	r6, r4
 8000bae:	2f20      	cmp	r7, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x65a>
 8000bb2:	2440      	movs	r4, #64	; 0x40
 8000bb4:	1be4      	subs	r4, r4, r7
 8000bb6:	40a1      	lsls	r1, r4
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	001c      	movs	r4, r3
 8000bbc:	1e63      	subs	r3, r4, #1
 8000bbe:	419c      	sbcs	r4, r3
 8000bc0:	4334      	orrs	r4, r6
 8000bc2:	e65e      	b.n	8000882 <__aeabi_dadd+0x322>
 8000bc4:	4443      	add	r3, r8
 8000bc6:	4283      	cmp	r3, r0
 8000bc8:	4180      	sbcs	r0, r0
 8000bca:	4449      	add	r1, r9
 8000bcc:	468a      	mov	sl, r1
 8000bce:	4240      	negs	r0, r0
 8000bd0:	001c      	movs	r4, r3
 8000bd2:	4482      	add	sl, r0
 8000bd4:	e6bc      	b.n	8000950 <__aeabi_dadd+0x3f0>
 8000bd6:	4653      	mov	r3, sl
 8000bd8:	4323      	orrs	r3, r4
 8000bda:	d100      	bne.n	8000bde <__aeabi_dadd+0x67e>
 8000bdc:	e6a9      	b.n	8000932 <__aeabi_dadd+0x3d2>
 8000bde:	e5e4      	b.n	80007aa <__aeabi_dadd+0x24a>
 8000be0:	074a      	lsls	r2, r1, #29
 8000be2:	4313      	orrs	r3, r2
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	08c9      	lsrs	r1, r1, #3
 8000be8:	0312      	lsls	r2, r2, #12
 8000bea:	4211      	tst	r1, r2
 8000bec:	d009      	beq.n	8000c02 <__aeabi_dadd+0x6a2>
 8000bee:	4648      	mov	r0, r9
 8000bf0:	08c4      	lsrs	r4, r0, #3
 8000bf2:	4214      	tst	r4, r2
 8000bf4:	d105      	bne.n	8000c02 <__aeabi_dadd+0x6a2>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	0742      	lsls	r2, r0, #29
 8000c00:	4313      	orrs	r3, r2
 8000c02:	0f5a      	lsrs	r2, r3, #29
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	0752      	lsls	r2, r2, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	e5fa      	b.n	8000804 <__aeabi_dadd+0x2a4>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4a01      	ldr	r2, [pc, #4]	; (8000c18 <__aeabi_dadd+0x6b8>)
 8000c12:	001c      	movs	r4, r3
 8000c14:	e540      	b.n	8000698 <__aeabi_dadd+0x138>
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	000007ff 	.word	0x000007ff
 8000c1c:	ff7fffff 	.word	0xff7fffff

08000c20 <__aeabi_dmul>:
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	4645      	mov	r5, r8
 8000c24:	46de      	mov	lr, fp
 8000c26:	4657      	mov	r7, sl
 8000c28:	464e      	mov	r6, r9
 8000c2a:	b5e0      	push	{r5, r6, r7, lr}
 8000c2c:	001f      	movs	r7, r3
 8000c2e:	030b      	lsls	r3, r1, #12
 8000c30:	0b1b      	lsrs	r3, r3, #12
 8000c32:	469b      	mov	fp, r3
 8000c34:	004d      	lsls	r5, r1, #1
 8000c36:	0fcb      	lsrs	r3, r1, #31
 8000c38:	0004      	movs	r4, r0
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	b087      	sub	sp, #28
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dmul+0x26>
 8000c44:	e1cd      	b.n	8000fe2 <__aeabi_dmul+0x3c2>
 8000c46:	4bce      	ldr	r3, [pc, #824]	; (8000f80 <__aeabi_dmul+0x360>)
 8000c48:	429d      	cmp	r5, r3
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dmul+0x2e>
 8000c4c:	e1e9      	b.n	8001022 <__aeabi_dmul+0x402>
 8000c4e:	465a      	mov	r2, fp
 8000c50:	0f43      	lsrs	r3, r0, #29
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	0412      	lsls	r2, r2, #16
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	00c3      	lsls	r3, r0, #3
 8000c5e:	469a      	mov	sl, r3
 8000c60:	4bc8      	ldr	r3, [pc, #800]	; (8000f84 <__aeabi_dmul+0x364>)
 8000c62:	4693      	mov	fp, r2
 8000c64:	469c      	mov	ip, r3
 8000c66:	2300      	movs	r3, #0
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4465      	add	r5, ip
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	033c      	lsls	r4, r7, #12
 8000c70:	007b      	lsls	r3, r7, #1
 8000c72:	4648      	mov	r0, r9
 8000c74:	0b24      	lsrs	r4, r4, #12
 8000c76:	0d5b      	lsrs	r3, r3, #21
 8000c78:	0fff      	lsrs	r7, r7, #31
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dmul+0x60>
 8000c7e:	e189      	b.n	8000f94 <__aeabi_dmul+0x374>
 8000c80:	4abf      	ldr	r2, [pc, #764]	; (8000f80 <__aeabi_dmul+0x360>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d019      	beq.n	8000cba <__aeabi_dmul+0x9a>
 8000c86:	0f42      	lsrs	r2, r0, #29
 8000c88:	00e4      	lsls	r4, r4, #3
 8000c8a:	4322      	orrs	r2, r4
 8000c8c:	2480      	movs	r4, #128	; 0x80
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	4314      	orrs	r4, r2
 8000c92:	4abc      	ldr	r2, [pc, #752]	; (8000f84 <__aeabi_dmul+0x364>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	4694      	mov	ip, r2
 8000c98:	4642      	mov	r2, r8
 8000c9a:	4463      	add	r3, ip
 8000c9c:	195b      	adds	r3, r3, r5
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	407a      	eors	r2, r7
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	00c0      	lsls	r0, r0, #3
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2e0a      	cmp	r6, #10
 8000cae:	dd1c      	ble.n	8000cea <__aeabi_dmul+0xca>
 8000cb0:	003a      	movs	r2, r7
 8000cb2:	2e0b      	cmp	r6, #11
 8000cb4:	d05e      	beq.n	8000d74 <__aeabi_dmul+0x154>
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	e056      	b.n	8000d68 <__aeabi_dmul+0x148>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <__aeabi_dmul+0x360>)
 8000cbe:	4321      	orrs	r1, r4
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d12a      	bne.n	8000d1e <__aeabi_dmul+0xfe>
 8000cc8:	2080      	movs	r0, #128	; 0x80
 8000cca:	2202      	movs	r2, #2
 8000ccc:	0100      	lsls	r0, r0, #4
 8000cce:	002b      	movs	r3, r5
 8000cd0:	4684      	mov	ip, r0
 8000cd2:	4316      	orrs	r6, r2
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	4463      	add	r3, ip
 8000cd8:	407a      	eors	r2, r7
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2e0a      	cmp	r6, #10
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_dmul+0xc4>
 8000ce2:	e231      	b.n	8001148 <__aeabi_dmul+0x528>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	2e02      	cmp	r6, #2
 8000cec:	dc26      	bgt.n	8000d3c <__aeabi_dmul+0x11c>
 8000cee:	3e01      	subs	r6, #1
 8000cf0:	2e01      	cmp	r6, #1
 8000cf2:	d852      	bhi.n	8000d9a <__aeabi_dmul+0x17a>
 8000cf4:	2902      	cmp	r1, #2
 8000cf6:	d04c      	beq.n	8000d92 <__aeabi_dmul+0x172>
 8000cf8:	2901      	cmp	r1, #1
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dmul+0xde>
 8000cfc:	e118      	b.n	8000f30 <__aeabi_dmul+0x310>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2400      	movs	r4, #0
 8000d02:	2500      	movs	r5, #0
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	4323      	orrs	r3, r4
 8000d08:	07d2      	lsls	r2, r2, #31
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	0028      	movs	r0, r5
 8000d0e:	0019      	movs	r1, r3
 8000d10:	b007      	add	sp, #28
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
 8000d14:	46bb      	mov	fp, r7
 8000d16:	46b2      	mov	sl, r6
 8000d18:	46a9      	mov	r9, r5
 8000d1a:	46a0      	mov	r8, r4
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	2203      	movs	r2, #3
 8000d22:	0109      	lsls	r1, r1, #4
 8000d24:	002b      	movs	r3, r5
 8000d26:	468c      	mov	ip, r1
 8000d28:	4316      	orrs	r6, r2
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	4463      	add	r3, ip
 8000d2e:	407a      	eors	r2, r7
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2e0a      	cmp	r6, #10
 8000d36:	dd00      	ble.n	8000d3a <__aeabi_dmul+0x11a>
 8000d38:	e228      	b.n	800118c <__aeabi_dmul+0x56c>
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	2501      	movs	r5, #1
 8000d3e:	40b5      	lsls	r5, r6
 8000d40:	46ac      	mov	ip, r5
 8000d42:	26a6      	movs	r6, #166	; 0xa6
 8000d44:	4663      	mov	r3, ip
 8000d46:	00f6      	lsls	r6, r6, #3
 8000d48:	4035      	ands	r5, r6
 8000d4a:	4233      	tst	r3, r6
 8000d4c:	d10b      	bne.n	8000d66 <__aeabi_dmul+0x146>
 8000d4e:	2690      	movs	r6, #144	; 0x90
 8000d50:	00b6      	lsls	r6, r6, #2
 8000d52:	4233      	tst	r3, r6
 8000d54:	d118      	bne.n	8000d88 <__aeabi_dmul+0x168>
 8000d56:	3eb9      	subs	r6, #185	; 0xb9
 8000d58:	3eff      	subs	r6, #255	; 0xff
 8000d5a:	421e      	tst	r6, r3
 8000d5c:	d01d      	beq.n	8000d9a <__aeabi_dmul+0x17a>
 8000d5e:	46a3      	mov	fp, r4
 8000d60:	4682      	mov	sl, r0
 8000d62:	9100      	str	r1, [sp, #0]
 8000d64:	e000      	b.n	8000d68 <__aeabi_dmul+0x148>
 8000d66:	0017      	movs	r7, r2
 8000d68:	9900      	ldr	r1, [sp, #0]
 8000d6a:	003a      	movs	r2, r7
 8000d6c:	2902      	cmp	r1, #2
 8000d6e:	d010      	beq.n	8000d92 <__aeabi_dmul+0x172>
 8000d70:	465c      	mov	r4, fp
 8000d72:	4650      	mov	r0, sl
 8000d74:	2903      	cmp	r1, #3
 8000d76:	d1bf      	bne.n	8000cf8 <__aeabi_dmul+0xd8>
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	031b      	lsls	r3, r3, #12
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	0324      	lsls	r4, r4, #12
 8000d80:	0005      	movs	r5, r0
 8000d82:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <__aeabi_dmul+0x360>)
 8000d84:	0b24      	lsrs	r4, r4, #12
 8000d86:	e7bd      	b.n	8000d04 <__aeabi_dmul+0xe4>
 8000d88:	2480      	movs	r4, #128	; 0x80
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4b7c      	ldr	r3, [pc, #496]	; (8000f80 <__aeabi_dmul+0x360>)
 8000d8e:	0324      	lsls	r4, r4, #12
 8000d90:	e7b8      	b.n	8000d04 <__aeabi_dmul+0xe4>
 8000d92:	2400      	movs	r4, #0
 8000d94:	2500      	movs	r5, #0
 8000d96:	4b7a      	ldr	r3, [pc, #488]	; (8000f80 <__aeabi_dmul+0x360>)
 8000d98:	e7b4      	b.n	8000d04 <__aeabi_dmul+0xe4>
 8000d9a:	4653      	mov	r3, sl
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	0c1f      	lsrs	r7, r3, #16
 8000da2:	0033      	movs	r3, r6
 8000da4:	0c01      	lsrs	r1, r0, #16
 8000da6:	0400      	lsls	r0, r0, #16
 8000da8:	0c00      	lsrs	r0, r0, #16
 8000daa:	4343      	muls	r3, r0
 8000dac:	4698      	mov	r8, r3
 8000dae:	0003      	movs	r3, r0
 8000db0:	437b      	muls	r3, r7
 8000db2:	4699      	mov	r9, r3
 8000db4:	0033      	movs	r3, r6
 8000db6:	434b      	muls	r3, r1
 8000db8:	469c      	mov	ip, r3
 8000dba:	4643      	mov	r3, r8
 8000dbc:	000d      	movs	r5, r1
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	437d      	muls	r5, r7
 8000dc4:	44cc      	add	ip, r9
 8000dc6:	44d4      	add	ip, sl
 8000dc8:	9500      	str	r5, [sp, #0]
 8000dca:	45e1      	cmp	r9, ip
 8000dcc:	d904      	bls.n	8000dd8 <__aeabi_dmul+0x1b8>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	444d      	add	r5, r9
 8000dd6:	9500      	str	r5, [sp, #0]
 8000dd8:	4663      	mov	r3, ip
 8000dda:	0c1b      	lsrs	r3, r3, #16
 8000ddc:	001d      	movs	r5, r3
 8000dde:	4663      	mov	r3, ip
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	469c      	mov	ip, r3
 8000de4:	4643      	mov	r3, r8
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	0c1b      	lsrs	r3, r3, #16
 8000dea:	4698      	mov	r8, r3
 8000dec:	4663      	mov	r3, ip
 8000dee:	4443      	add	r3, r8
 8000df0:	9303      	str	r3, [sp, #12]
 8000df2:	0c23      	lsrs	r3, r4, #16
 8000df4:	4698      	mov	r8, r3
 8000df6:	0033      	movs	r3, r6
 8000df8:	0424      	lsls	r4, r4, #16
 8000dfa:	0c24      	lsrs	r4, r4, #16
 8000dfc:	4363      	muls	r3, r4
 8000dfe:	469c      	mov	ip, r3
 8000e00:	0023      	movs	r3, r4
 8000e02:	437b      	muls	r3, r7
 8000e04:	4699      	mov	r9, r3
 8000e06:	4643      	mov	r3, r8
 8000e08:	435e      	muls	r6, r3
 8000e0a:	435f      	muls	r7, r3
 8000e0c:	444e      	add	r6, r9
 8000e0e:	4663      	mov	r3, ip
 8000e10:	46b2      	mov	sl, r6
 8000e12:	0c1e      	lsrs	r6, r3, #16
 8000e14:	4456      	add	r6, sl
 8000e16:	45b1      	cmp	r9, r6
 8000e18:	d903      	bls.n	8000e22 <__aeabi_dmul+0x202>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	025b      	lsls	r3, r3, #9
 8000e1e:	4699      	mov	r9, r3
 8000e20:	444f      	add	r7, r9
 8000e22:	0c33      	lsrs	r3, r6, #16
 8000e24:	4699      	mov	r9, r3
 8000e26:	003b      	movs	r3, r7
 8000e28:	444b      	add	r3, r9
 8000e2a:	9305      	str	r3, [sp, #20]
 8000e2c:	4663      	mov	r3, ip
 8000e2e:	46ac      	mov	ip, r5
 8000e30:	041f      	lsls	r7, r3, #16
 8000e32:	0c3f      	lsrs	r7, r7, #16
 8000e34:	0436      	lsls	r6, r6, #16
 8000e36:	19f6      	adds	r6, r6, r7
 8000e38:	44b4      	add	ip, r6
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	9304      	str	r3, [sp, #16]
 8000e3e:	465b      	mov	r3, fp
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	469c      	mov	ip, r3
 8000e44:	465b      	mov	r3, fp
 8000e46:	041f      	lsls	r7, r3, #16
 8000e48:	0c3f      	lsrs	r7, r7, #16
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	4343      	muls	r3, r0
 8000e4e:	4699      	mov	r9, r3
 8000e50:	4663      	mov	r3, ip
 8000e52:	4343      	muls	r3, r0
 8000e54:	469a      	mov	sl, r3
 8000e56:	464b      	mov	r3, r9
 8000e58:	4660      	mov	r0, ip
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	469b      	mov	fp, r3
 8000e5e:	4348      	muls	r0, r1
 8000e60:	4379      	muls	r1, r7
 8000e62:	4451      	add	r1, sl
 8000e64:	4459      	add	r1, fp
 8000e66:	458a      	cmp	sl, r1
 8000e68:	d903      	bls.n	8000e72 <__aeabi_dmul+0x252>
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	025b      	lsls	r3, r3, #9
 8000e6e:	469a      	mov	sl, r3
 8000e70:	4450      	add	r0, sl
 8000e72:	0c0b      	lsrs	r3, r1, #16
 8000e74:	469a      	mov	sl, r3
 8000e76:	464b      	mov	r3, r9
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	003b      	movs	r3, r7
 8000e80:	4363      	muls	r3, r4
 8000e82:	0409      	lsls	r1, r1, #16
 8000e84:	4645      	mov	r5, r8
 8000e86:	4449      	add	r1, r9
 8000e88:	4699      	mov	r9, r3
 8000e8a:	4663      	mov	r3, ip
 8000e8c:	435c      	muls	r4, r3
 8000e8e:	436b      	muls	r3, r5
 8000e90:	469c      	mov	ip, r3
 8000e92:	464b      	mov	r3, r9
 8000e94:	0c1b      	lsrs	r3, r3, #16
 8000e96:	4698      	mov	r8, r3
 8000e98:	436f      	muls	r7, r5
 8000e9a:	193f      	adds	r7, r7, r4
 8000e9c:	4447      	add	r7, r8
 8000e9e:	4450      	add	r0, sl
 8000ea0:	42bc      	cmp	r4, r7
 8000ea2:	d903      	bls.n	8000eac <__aeabi_dmul+0x28c>
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	4698      	mov	r8, r3
 8000eaa:	44c4      	add	ip, r8
 8000eac:	9b04      	ldr	r3, [sp, #16]
 8000eae:	9d00      	ldr	r5, [sp, #0]
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4445      	add	r5, r8
 8000eb4:	42b5      	cmp	r5, r6
 8000eb6:	41b6      	sbcs	r6, r6
 8000eb8:	4273      	negs	r3, r6
 8000eba:	4698      	mov	r8, r3
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	041e      	lsls	r6, r3, #16
 8000ec0:	9b05      	ldr	r3, [sp, #20]
 8000ec2:	043c      	lsls	r4, r7, #16
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	0c36      	lsrs	r6, r6, #16
 8000ec8:	19a4      	adds	r4, r4, r6
 8000eca:	444c      	add	r4, r9
 8000ecc:	46a1      	mov	r9, r4
 8000ece:	4683      	mov	fp, r0
 8000ed0:	186e      	adds	r6, r5, r1
 8000ed2:	44c1      	add	r9, r8
 8000ed4:	428e      	cmp	r6, r1
 8000ed6:	4189      	sbcs	r1, r1
 8000ed8:	44cb      	add	fp, r9
 8000eda:	465d      	mov	r5, fp
 8000edc:	4249      	negs	r1, r1
 8000ede:	186d      	adds	r5, r5, r1
 8000ee0:	429c      	cmp	r4, r3
 8000ee2:	41a4      	sbcs	r4, r4
 8000ee4:	45c1      	cmp	r9, r8
 8000ee6:	419b      	sbcs	r3, r3
 8000ee8:	4583      	cmp	fp, r0
 8000eea:	4180      	sbcs	r0, r0
 8000eec:	428d      	cmp	r5, r1
 8000eee:	4189      	sbcs	r1, r1
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	4264      	negs	r4, r4
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	9b03      	ldr	r3, [sp, #12]
 8000efa:	4249      	negs	r1, r1
 8000efc:	4301      	orrs	r1, r0
 8000efe:	0270      	lsls	r0, r6, #9
 8000f00:	0c3f      	lsrs	r7, r7, #16
 8000f02:	4318      	orrs	r0, r3
 8000f04:	19e4      	adds	r4, r4, r7
 8000f06:	1e47      	subs	r7, r0, #1
 8000f08:	41b8      	sbcs	r0, r7
 8000f0a:	1864      	adds	r4, r4, r1
 8000f0c:	4464      	add	r4, ip
 8000f0e:	0df6      	lsrs	r6, r6, #23
 8000f10:	0261      	lsls	r1, r4, #9
 8000f12:	4330      	orrs	r0, r6
 8000f14:	0dec      	lsrs	r4, r5, #23
 8000f16:	026e      	lsls	r6, r5, #9
 8000f18:	430c      	orrs	r4, r1
 8000f1a:	4330      	orrs	r0, r6
 8000f1c:	01c9      	lsls	r1, r1, #7
 8000f1e:	d400      	bmi.n	8000f22 <__aeabi_dmul+0x302>
 8000f20:	e0f1      	b.n	8001106 <__aeabi_dmul+0x4e6>
 8000f22:	2101      	movs	r1, #1
 8000f24:	0843      	lsrs	r3, r0, #1
 8000f26:	4001      	ands	r1, r0
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	07e0      	lsls	r0, r4, #31
 8000f2c:	4318      	orrs	r0, r3
 8000f2e:	0864      	lsrs	r4, r4, #1
 8000f30:	4915      	ldr	r1, [pc, #84]	; (8000f88 <__aeabi_dmul+0x368>)
 8000f32:	9b02      	ldr	r3, [sp, #8]
 8000f34:	468c      	mov	ip, r1
 8000f36:	4463      	add	r3, ip
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_dmul+0x31e>
 8000f3c:	e097      	b.n	800106e <__aeabi_dmul+0x44e>
 8000f3e:	0741      	lsls	r1, r0, #29
 8000f40:	d009      	beq.n	8000f56 <__aeabi_dmul+0x336>
 8000f42:	210f      	movs	r1, #15
 8000f44:	4001      	ands	r1, r0
 8000f46:	2904      	cmp	r1, #4
 8000f48:	d005      	beq.n	8000f56 <__aeabi_dmul+0x336>
 8000f4a:	1d01      	adds	r1, r0, #4
 8000f4c:	4281      	cmp	r1, r0
 8000f4e:	4180      	sbcs	r0, r0
 8000f50:	4240      	negs	r0, r0
 8000f52:	1824      	adds	r4, r4, r0
 8000f54:	0008      	movs	r0, r1
 8000f56:	01e1      	lsls	r1, r4, #7
 8000f58:	d506      	bpl.n	8000f68 <__aeabi_dmul+0x348>
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	00c9      	lsls	r1, r1, #3
 8000f5e:	468c      	mov	ip, r1
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <__aeabi_dmul+0x36c>)
 8000f62:	401c      	ands	r4, r3
 8000f64:	9b02      	ldr	r3, [sp, #8]
 8000f66:	4463      	add	r3, ip
 8000f68:	4909      	ldr	r1, [pc, #36]	; (8000f90 <__aeabi_dmul+0x370>)
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dmul+0x350>
 8000f6e:	e710      	b.n	8000d92 <__aeabi_dmul+0x172>
 8000f70:	0761      	lsls	r1, r4, #29
 8000f72:	08c5      	lsrs	r5, r0, #3
 8000f74:	0264      	lsls	r4, r4, #9
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	430d      	orrs	r5, r1
 8000f7a:	0b24      	lsrs	r4, r4, #12
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	e6c1      	b.n	8000d04 <__aeabi_dmul+0xe4>
 8000f80:	000007ff 	.word	0x000007ff
 8000f84:	fffffc01 	.word	0xfffffc01
 8000f88:	000003ff 	.word	0x000003ff
 8000f8c:	feffffff 	.word	0xfeffffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	464b      	mov	r3, r9
 8000f96:	4323      	orrs	r3, r4
 8000f98:	d059      	beq.n	800104e <__aeabi_dmul+0x42e>
 8000f9a:	2c00      	cmp	r4, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dmul+0x380>
 8000f9e:	e0a3      	b.n	80010e8 <__aeabi_dmul+0x4c8>
 8000fa0:	0020      	movs	r0, r4
 8000fa2:	f000 f9cd 	bl	8001340 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0003      	movs	r3, r0
 8000faa:	390b      	subs	r1, #11
 8000fac:	221d      	movs	r2, #29
 8000fae:	1a52      	subs	r2, r2, r1
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	40d1      	lsrs	r1, r2
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	3808      	subs	r0, #8
 8000fba:	4082      	lsls	r2, r0
 8000fbc:	4084      	lsls	r4, r0
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	430c      	orrs	r4, r1
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <__aeabi_dmul+0x574>)
 8000fc4:	1aeb      	subs	r3, r5, r3
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4463      	add	r3, ip
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	407a      	eors	r2, r7
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2e0a      	cmp	r6, #10
 8000fdc:	dd00      	ble.n	8000fe0 <__aeabi_dmul+0x3c0>
 8000fde:	e667      	b.n	8000cb0 <__aeabi_dmul+0x90>
 8000fe0:	e683      	b.n	8000cea <__aeabi_dmul+0xca>
 8000fe2:	465b      	mov	r3, fp
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	d02a      	beq.n	8001040 <__aeabi_dmul+0x420>
 8000fea:	465b      	mov	r3, fp
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d06d      	beq.n	80010cc <__aeabi_dmul+0x4ac>
 8000ff0:	4658      	mov	r0, fp
 8000ff2:	f000 f9a5 	bl	8001340 <__clzsi2>
 8000ff6:	0001      	movs	r1, r0
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	390b      	subs	r1, #11
 8000ffc:	221d      	movs	r2, #29
 8000ffe:	1a52      	subs	r2, r2, r1
 8001000:	0021      	movs	r1, r4
 8001002:	0018      	movs	r0, r3
 8001004:	465d      	mov	r5, fp
 8001006:	40d1      	lsrs	r1, r2
 8001008:	3808      	subs	r0, #8
 800100a:	4085      	lsls	r5, r0
 800100c:	000a      	movs	r2, r1
 800100e:	4084      	lsls	r4, r0
 8001010:	432a      	orrs	r2, r5
 8001012:	4693      	mov	fp, r2
 8001014:	46a2      	mov	sl, r4
 8001016:	4d5f      	ldr	r5, [pc, #380]	; (8001194 <__aeabi_dmul+0x574>)
 8001018:	2600      	movs	r6, #0
 800101a:	1aed      	subs	r5, r5, r3
 800101c:	2300      	movs	r3, #0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	e625      	b.n	8000c6e <__aeabi_dmul+0x4e>
 8001022:	465b      	mov	r3, fp
 8001024:	4303      	orrs	r3, r0
 8001026:	469a      	mov	sl, r3
 8001028:	d105      	bne.n	8001036 <__aeabi_dmul+0x416>
 800102a:	2300      	movs	r3, #0
 800102c:	469b      	mov	fp, r3
 800102e:	3302      	adds	r3, #2
 8001030:	2608      	movs	r6, #8
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	e61b      	b.n	8000c6e <__aeabi_dmul+0x4e>
 8001036:	2303      	movs	r3, #3
 8001038:	4682      	mov	sl, r0
 800103a:	260c      	movs	r6, #12
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	e616      	b.n	8000c6e <__aeabi_dmul+0x4e>
 8001040:	2300      	movs	r3, #0
 8001042:	469b      	mov	fp, r3
 8001044:	3301      	adds	r3, #1
 8001046:	2604      	movs	r6, #4
 8001048:	2500      	movs	r5, #0
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	e60f      	b.n	8000c6e <__aeabi_dmul+0x4e>
 800104e:	4642      	mov	r2, r8
 8001050:	3301      	adds	r3, #1
 8001052:	9501      	str	r5, [sp, #4]
 8001054:	431e      	orrs	r6, r3
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	407a      	eors	r2, r7
 800105a:	3301      	adds	r3, #1
 800105c:	2400      	movs	r4, #0
 800105e:	2000      	movs	r0, #0
 8001060:	2101      	movs	r1, #1
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2e0a      	cmp	r6, #10
 8001068:	dd00      	ble.n	800106c <__aeabi_dmul+0x44c>
 800106a:	e621      	b.n	8000cb0 <__aeabi_dmul+0x90>
 800106c:	e63d      	b.n	8000cea <__aeabi_dmul+0xca>
 800106e:	2101      	movs	r1, #1
 8001070:	1ac9      	subs	r1, r1, r3
 8001072:	2938      	cmp	r1, #56	; 0x38
 8001074:	dd00      	ble.n	8001078 <__aeabi_dmul+0x458>
 8001076:	e642      	b.n	8000cfe <__aeabi_dmul+0xde>
 8001078:	291f      	cmp	r1, #31
 800107a:	dd47      	ble.n	800110c <__aeabi_dmul+0x4ec>
 800107c:	261f      	movs	r6, #31
 800107e:	0025      	movs	r5, r4
 8001080:	4276      	negs	r6, r6
 8001082:	1af3      	subs	r3, r6, r3
 8001084:	40dd      	lsrs	r5, r3
 8001086:	002b      	movs	r3, r5
 8001088:	2920      	cmp	r1, #32
 800108a:	d005      	beq.n	8001098 <__aeabi_dmul+0x478>
 800108c:	4942      	ldr	r1, [pc, #264]	; (8001198 <__aeabi_dmul+0x578>)
 800108e:	9d02      	ldr	r5, [sp, #8]
 8001090:	468c      	mov	ip, r1
 8001092:	4465      	add	r5, ip
 8001094:	40ac      	lsls	r4, r5
 8001096:	4320      	orrs	r0, r4
 8001098:	1e41      	subs	r1, r0, #1
 800109a:	4188      	sbcs	r0, r1
 800109c:	4318      	orrs	r0, r3
 800109e:	2307      	movs	r3, #7
 80010a0:	001d      	movs	r5, r3
 80010a2:	2400      	movs	r4, #0
 80010a4:	4005      	ands	r5, r0
 80010a6:	4203      	tst	r3, r0
 80010a8:	d04a      	beq.n	8001140 <__aeabi_dmul+0x520>
 80010aa:	230f      	movs	r3, #15
 80010ac:	2400      	movs	r4, #0
 80010ae:	4003      	ands	r3, r0
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d042      	beq.n	800113a <__aeabi_dmul+0x51a>
 80010b4:	1d03      	adds	r3, r0, #4
 80010b6:	4283      	cmp	r3, r0
 80010b8:	4180      	sbcs	r0, r0
 80010ba:	4240      	negs	r0, r0
 80010bc:	1824      	adds	r4, r4, r0
 80010be:	0018      	movs	r0, r3
 80010c0:	0223      	lsls	r3, r4, #8
 80010c2:	d53a      	bpl.n	800113a <__aeabi_dmul+0x51a>
 80010c4:	2301      	movs	r3, #1
 80010c6:	2400      	movs	r4, #0
 80010c8:	2500      	movs	r5, #0
 80010ca:	e61b      	b.n	8000d04 <__aeabi_dmul+0xe4>
 80010cc:	f000 f938 	bl	8001340 <__clzsi2>
 80010d0:	0001      	movs	r1, r0
 80010d2:	0003      	movs	r3, r0
 80010d4:	3115      	adds	r1, #21
 80010d6:	3320      	adds	r3, #32
 80010d8:	291c      	cmp	r1, #28
 80010da:	dd8f      	ble.n	8000ffc <__aeabi_dmul+0x3dc>
 80010dc:	3808      	subs	r0, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	4084      	lsls	r4, r0
 80010e2:	4692      	mov	sl, r2
 80010e4:	46a3      	mov	fp, r4
 80010e6:	e796      	b.n	8001016 <__aeabi_dmul+0x3f6>
 80010e8:	f000 f92a 	bl	8001340 <__clzsi2>
 80010ec:	0001      	movs	r1, r0
 80010ee:	0003      	movs	r3, r0
 80010f0:	3115      	adds	r1, #21
 80010f2:	3320      	adds	r3, #32
 80010f4:	291c      	cmp	r1, #28
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_dmul+0x4da>
 80010f8:	e758      	b.n	8000fac <__aeabi_dmul+0x38c>
 80010fa:	0002      	movs	r2, r0
 80010fc:	464c      	mov	r4, r9
 80010fe:	3a08      	subs	r2, #8
 8001100:	2000      	movs	r0, #0
 8001102:	4094      	lsls	r4, r2
 8001104:	e75d      	b.n	8000fc2 <__aeabi_dmul+0x3a2>
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	e711      	b.n	8000f30 <__aeabi_dmul+0x310>
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <__aeabi_dmul+0x57c>)
 800110e:	0026      	movs	r6, r4
 8001110:	469c      	mov	ip, r3
 8001112:	0003      	movs	r3, r0
 8001114:	9d02      	ldr	r5, [sp, #8]
 8001116:	40cb      	lsrs	r3, r1
 8001118:	4465      	add	r5, ip
 800111a:	40ae      	lsls	r6, r5
 800111c:	431e      	orrs	r6, r3
 800111e:	0003      	movs	r3, r0
 8001120:	40ab      	lsls	r3, r5
 8001122:	1e58      	subs	r0, r3, #1
 8001124:	4183      	sbcs	r3, r0
 8001126:	0030      	movs	r0, r6
 8001128:	4318      	orrs	r0, r3
 800112a:	40cc      	lsrs	r4, r1
 800112c:	0743      	lsls	r3, r0, #29
 800112e:	d0c7      	beq.n	80010c0 <__aeabi_dmul+0x4a0>
 8001130:	230f      	movs	r3, #15
 8001132:	4003      	ands	r3, r0
 8001134:	2b04      	cmp	r3, #4
 8001136:	d1bd      	bne.n	80010b4 <__aeabi_dmul+0x494>
 8001138:	e7c2      	b.n	80010c0 <__aeabi_dmul+0x4a0>
 800113a:	0765      	lsls	r5, r4, #29
 800113c:	0264      	lsls	r4, r4, #9
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	08c0      	lsrs	r0, r0, #3
 8001142:	2300      	movs	r3, #0
 8001144:	4305      	orrs	r5, r0
 8001146:	e5dd      	b.n	8000d04 <__aeabi_dmul+0xe4>
 8001148:	2500      	movs	r5, #0
 800114a:	2302      	movs	r3, #2
 800114c:	2e0f      	cmp	r6, #15
 800114e:	d10c      	bne.n	800116a <__aeabi_dmul+0x54a>
 8001150:	2480      	movs	r4, #128	; 0x80
 8001152:	465b      	mov	r3, fp
 8001154:	0324      	lsls	r4, r4, #12
 8001156:	4223      	tst	r3, r4
 8001158:	d00e      	beq.n	8001178 <__aeabi_dmul+0x558>
 800115a:	4221      	tst	r1, r4
 800115c:	d10c      	bne.n	8001178 <__aeabi_dmul+0x558>
 800115e:	430c      	orrs	r4, r1
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	003a      	movs	r2, r7
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <__aeabi_dmul+0x580>)
 8001166:	0b24      	lsrs	r4, r4, #12
 8001168:	e5cc      	b.n	8000d04 <__aeabi_dmul+0xe4>
 800116a:	2e0b      	cmp	r6, #11
 800116c:	d000      	beq.n	8001170 <__aeabi_dmul+0x550>
 800116e:	e5a2      	b.n	8000cb6 <__aeabi_dmul+0x96>
 8001170:	468b      	mov	fp, r1
 8001172:	46aa      	mov	sl, r5
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	e5f7      	b.n	8000d68 <__aeabi_dmul+0x148>
 8001178:	2480      	movs	r4, #128	; 0x80
 800117a:	465b      	mov	r3, fp
 800117c:	0324      	lsls	r4, r4, #12
 800117e:	431c      	orrs	r4, r3
 8001180:	0324      	lsls	r4, r4, #12
 8001182:	4642      	mov	r2, r8
 8001184:	4655      	mov	r5, sl
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <__aeabi_dmul+0x580>)
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	e5bb      	b.n	8000d04 <__aeabi_dmul+0xe4>
 800118c:	464d      	mov	r5, r9
 800118e:	0021      	movs	r1, r4
 8001190:	2303      	movs	r3, #3
 8001192:	e7db      	b.n	800114c <__aeabi_dmul+0x52c>
 8001194:	fffffc0d 	.word	0xfffffc0d
 8001198:	0000043e 	.word	0x0000043e
 800119c:	0000041e 	.word	0x0000041e
 80011a0:	000007ff 	.word	0x000007ff

080011a4 <__aeabi_f2d>:
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	0fc4      	lsrs	r4, r0, #31
 80011ac:	20fe      	movs	r0, #254	; 0xfe
 80011ae:	0e1b      	lsrs	r3, r3, #24
 80011b0:	1c59      	adds	r1, r3, #1
 80011b2:	0a55      	lsrs	r5, r2, #9
 80011b4:	4208      	tst	r0, r1
 80011b6:	d00c      	beq.n	80011d2 <__aeabi_f2d+0x2e>
 80011b8:	21e0      	movs	r1, #224	; 0xe0
 80011ba:	0089      	lsls	r1, r1, #2
 80011bc:	468c      	mov	ip, r1
 80011be:	076d      	lsls	r5, r5, #29
 80011c0:	0b12      	lsrs	r2, r2, #12
 80011c2:	4463      	add	r3, ip
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	4313      	orrs	r3, r2
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4323      	orrs	r3, r4
 80011cc:	0028      	movs	r0, r5
 80011ce:	0019      	movs	r1, r3
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d114      	bne.n	8001200 <__aeabi_f2d+0x5c>
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	d01b      	beq.n	8001212 <__aeabi_f2d+0x6e>
 80011da:	0028      	movs	r0, r5
 80011dc:	f000 f8b0 	bl	8001340 <__clzsi2>
 80011e0:	280a      	cmp	r0, #10
 80011e2:	dc1c      	bgt.n	800121e <__aeabi_f2d+0x7a>
 80011e4:	230b      	movs	r3, #11
 80011e6:	002a      	movs	r2, r5
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	40da      	lsrs	r2, r3
 80011ec:	0003      	movs	r3, r0
 80011ee:	3315      	adds	r3, #21
 80011f0:	409d      	lsls	r5, r3
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <__aeabi_f2d+0x88>)
 80011f4:	0312      	lsls	r2, r2, #12
 80011f6:	1a1b      	subs	r3, r3, r0
 80011f8:	055b      	lsls	r3, r3, #21
 80011fa:	0b12      	lsrs	r2, r2, #12
 80011fc:	0d5b      	lsrs	r3, r3, #21
 80011fe:	e7e1      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001200:	2d00      	cmp	r5, #0
 8001202:	d009      	beq.n	8001218 <__aeabi_f2d+0x74>
 8001204:	0b13      	lsrs	r3, r2, #12
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	0312      	lsls	r2, r2, #12
 800120a:	431a      	orrs	r2, r3
 800120c:	076d      	lsls	r5, r5, #29
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <__aeabi_f2d+0x8c>)
 8001210:	e7d8      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001212:	2300      	movs	r3, #0
 8001214:	2200      	movs	r2, #0
 8001216:	e7d5      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001218:	2200      	movs	r2, #0
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <__aeabi_f2d+0x8c>)
 800121c:	e7d2      	b.n	80011c4 <__aeabi_f2d+0x20>
 800121e:	0003      	movs	r3, r0
 8001220:	002a      	movs	r2, r5
 8001222:	3b0b      	subs	r3, #11
 8001224:	409a      	lsls	r2, r3
 8001226:	2500      	movs	r5, #0
 8001228:	e7e3      	b.n	80011f2 <__aeabi_f2d+0x4e>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	00000389 	.word	0x00000389
 8001230:	000007ff 	.word	0x000007ff

08001234 <__aeabi_d2f>:
 8001234:	0002      	movs	r2, r0
 8001236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001238:	004b      	lsls	r3, r1, #1
 800123a:	030d      	lsls	r5, r1, #12
 800123c:	0f40      	lsrs	r0, r0, #29
 800123e:	0d5b      	lsrs	r3, r3, #21
 8001240:	0fcc      	lsrs	r4, r1, #31
 8001242:	0a6d      	lsrs	r5, r5, #9
 8001244:	493a      	ldr	r1, [pc, #232]	; (8001330 <__aeabi_d2f+0xfc>)
 8001246:	4305      	orrs	r5, r0
 8001248:	1c58      	adds	r0, r3, #1
 800124a:	00d7      	lsls	r7, r2, #3
 800124c:	4208      	tst	r0, r1
 800124e:	d00a      	beq.n	8001266 <__aeabi_d2f+0x32>
 8001250:	4938      	ldr	r1, [pc, #224]	; (8001334 <__aeabi_d2f+0x100>)
 8001252:	1859      	adds	r1, r3, r1
 8001254:	29fe      	cmp	r1, #254	; 0xfe
 8001256:	dd16      	ble.n	8001286 <__aeabi_d2f+0x52>
 8001258:	20ff      	movs	r0, #255	; 0xff
 800125a:	2200      	movs	r2, #0
 800125c:	05c0      	lsls	r0, r0, #23
 800125e:	4310      	orrs	r0, r2
 8001260:	07e4      	lsls	r4, r4, #31
 8001262:	4320      	orrs	r0, r4
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <__aeabi_d2f+0x44>
 800126a:	433d      	orrs	r5, r7
 800126c:	d026      	beq.n	80012bc <__aeabi_d2f+0x88>
 800126e:	2205      	movs	r2, #5
 8001270:	0192      	lsls	r2, r2, #6
 8001272:	0a52      	lsrs	r2, r2, #9
 8001274:	b2d8      	uxtb	r0, r3
 8001276:	e7f1      	b.n	800125c <__aeabi_d2f+0x28>
 8001278:	432f      	orrs	r7, r5
 800127a:	d0ed      	beq.n	8001258 <__aeabi_d2f+0x24>
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	03d2      	lsls	r2, r2, #15
 8001280:	20ff      	movs	r0, #255	; 0xff
 8001282:	432a      	orrs	r2, r5
 8001284:	e7ea      	b.n	800125c <__aeabi_d2f+0x28>
 8001286:	2900      	cmp	r1, #0
 8001288:	dd1b      	ble.n	80012c2 <__aeabi_d2f+0x8e>
 800128a:	0192      	lsls	r2, r2, #6
 800128c:	1e50      	subs	r0, r2, #1
 800128e:	4182      	sbcs	r2, r0
 8001290:	00ed      	lsls	r5, r5, #3
 8001292:	0f7f      	lsrs	r7, r7, #29
 8001294:	432a      	orrs	r2, r5
 8001296:	433a      	orrs	r2, r7
 8001298:	0753      	lsls	r3, r2, #29
 800129a:	d047      	beq.n	800132c <__aeabi_d2f+0xf8>
 800129c:	230f      	movs	r3, #15
 800129e:	4013      	ands	r3, r2
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_d2f+0x72>
 80012a4:	3204      	adds	r2, #4
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	04db      	lsls	r3, r3, #19
 80012aa:	4013      	ands	r3, r2
 80012ac:	d03e      	beq.n	800132c <__aeabi_d2f+0xf8>
 80012ae:	1c48      	adds	r0, r1, #1
 80012b0:	29fe      	cmp	r1, #254	; 0xfe
 80012b2:	d0d1      	beq.n	8001258 <__aeabi_d2f+0x24>
 80012b4:	0192      	lsls	r2, r2, #6
 80012b6:	0a52      	lsrs	r2, r2, #9
 80012b8:	b2c0      	uxtb	r0, r0
 80012ba:	e7cf      	b.n	800125c <__aeabi_d2f+0x28>
 80012bc:	2000      	movs	r0, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	e7cc      	b.n	800125c <__aeabi_d2f+0x28>
 80012c2:	000a      	movs	r2, r1
 80012c4:	3217      	adds	r2, #23
 80012c6:	db2f      	blt.n	8001328 <__aeabi_d2f+0xf4>
 80012c8:	2680      	movs	r6, #128	; 0x80
 80012ca:	0436      	lsls	r6, r6, #16
 80012cc:	432e      	orrs	r6, r5
 80012ce:	251e      	movs	r5, #30
 80012d0:	1a6d      	subs	r5, r5, r1
 80012d2:	2d1f      	cmp	r5, #31
 80012d4:	dd11      	ble.n	80012fa <__aeabi_d2f+0xc6>
 80012d6:	2202      	movs	r2, #2
 80012d8:	4252      	negs	r2, r2
 80012da:	1a52      	subs	r2, r2, r1
 80012dc:	0031      	movs	r1, r6
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	2d20      	cmp	r5, #32
 80012e2:	d004      	beq.n	80012ee <__aeabi_d2f+0xba>
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <__aeabi_d2f+0x104>)
 80012e6:	4694      	mov	ip, r2
 80012e8:	4463      	add	r3, ip
 80012ea:	409e      	lsls	r6, r3
 80012ec:	4337      	orrs	r7, r6
 80012ee:	003a      	movs	r2, r7
 80012f0:	1e53      	subs	r3, r2, #1
 80012f2:	419a      	sbcs	r2, r3
 80012f4:	430a      	orrs	r2, r1
 80012f6:	2100      	movs	r1, #0
 80012f8:	e7ce      	b.n	8001298 <__aeabi_d2f+0x64>
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <__aeabi_d2f+0x108>)
 80012fc:	0038      	movs	r0, r7
 80012fe:	4694      	mov	ip, r2
 8001300:	4463      	add	r3, ip
 8001302:	4098      	lsls	r0, r3
 8001304:	003a      	movs	r2, r7
 8001306:	1e41      	subs	r1, r0, #1
 8001308:	4188      	sbcs	r0, r1
 800130a:	409e      	lsls	r6, r3
 800130c:	40ea      	lsrs	r2, r5
 800130e:	4330      	orrs	r0, r6
 8001310:	4302      	orrs	r2, r0
 8001312:	2100      	movs	r1, #0
 8001314:	0753      	lsls	r3, r2, #29
 8001316:	d1c1      	bne.n	800129c <__aeabi_d2f+0x68>
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0013      	movs	r3, r2
 800131c:	04c9      	lsls	r1, r1, #19
 800131e:	2001      	movs	r0, #1
 8001320:	400b      	ands	r3, r1
 8001322:	420a      	tst	r2, r1
 8001324:	d1c6      	bne.n	80012b4 <__aeabi_d2f+0x80>
 8001326:	e7a3      	b.n	8001270 <__aeabi_d2f+0x3c>
 8001328:	2300      	movs	r3, #0
 800132a:	e7a0      	b.n	800126e <__aeabi_d2f+0x3a>
 800132c:	000b      	movs	r3, r1
 800132e:	e79f      	b.n	8001270 <__aeabi_d2f+0x3c>
 8001330:	000007fe 	.word	0x000007fe
 8001334:	fffffc80 	.word	0xfffffc80
 8001338:	fffffca2 	.word	0xfffffca2
 800133c:	fffffc82 	.word	0xfffffc82

08001340 <__clzsi2>:
 8001340:	211c      	movs	r1, #28
 8001342:	2301      	movs	r3, #1
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	4298      	cmp	r0, r3
 8001348:	d301      	bcc.n	800134e <__clzsi2+0xe>
 800134a:	0c00      	lsrs	r0, r0, #16
 800134c:	3910      	subs	r1, #16
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	4298      	cmp	r0, r3
 8001352:	d301      	bcc.n	8001358 <__clzsi2+0x18>
 8001354:	0a00      	lsrs	r0, r0, #8
 8001356:	3908      	subs	r1, #8
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	4298      	cmp	r0, r3
 800135c:	d301      	bcc.n	8001362 <__clzsi2+0x22>
 800135e:	0900      	lsrs	r0, r0, #4
 8001360:	3904      	subs	r1, #4
 8001362:	a202      	add	r2, pc, #8	; (adr r2, 800136c <__clzsi2+0x2c>)
 8001364:	5c10      	ldrb	r0, [r2, r0]
 8001366:	1840      	adds	r0, r0, r1
 8001368:	4770      	bx	lr
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	02020304 	.word	0x02020304
 8001370:	01010101 	.word	0x01010101
	...

0800137c <SPIx_WriteRead>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b087      	sub	sp, #28
 8001380:	af02      	add	r7, sp, #8
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]

	uint8_t receivedbyte = 0;
 8001388:	240f      	movs	r4, #15
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &Byte, (uint8_t*) &receivedbyte,
 8001390:	193a      	adds	r2, r7, r4
 8001392:	1df9      	adds	r1, r7, #7
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <SPIx_WriteRead+0x34>)
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	f001 fb43 	bl	8002a28 <HAL_SPI_TransmitReceive>
			1, SPIx_TIMEOUT_MAX);

	return receivedbyte;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b005      	add	sp, #20
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000028 	.word	0x20000028

080013b4 <GYRO_IO_Write>:

void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	0008      	movs	r0, r1
 80013be:	0011      	movs	r1, r2
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	003b      	movs	r3, r7
 80013c8:	1c0a      	adds	r2, r1, #0
 80013ca:	801a      	strh	r2, [r3, #0]
	if (NumByteToWrite > 0x01)
 80013cc:	003b      	movs	r3, r7
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d905      	bls.n	80013e0 <GYRO_IO_Write+0x2c>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 80013d4:	1cfb      	adds	r3, r7, #3
 80013d6:	1cfa      	adds	r2, r7, #3
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	430a      	orrs	r2, r1
 80013de:	701a      	strb	r2, [r3, #0]
	}
	GYRO_CS_LOW();
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <GYRO_IO_Write+0x7c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 fd76 	bl	8001ed8 <HAL_GPIO_WritePin>

	SPIx_WriteRead(WriteAddr);
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ffc3 	bl	800137c <SPIx_WriteRead>

	while (NumByteToWrite >= 0x01)
 80013f6:	e00c      	b.n	8001412 <GYRO_IO_Write+0x5e>
	{
		SPIx_WriteRead(*pBuffer);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ffbd 	bl	800137c <SPIx_WriteRead>
		NumByteToWrite--;
 8001402:	003b      	movs	r3, r7
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	003b      	movs	r3, r7
 8001408:	3a01      	subs	r2, #1
 800140a:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01)
 8001412:	003b      	movs	r3, r7
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <GYRO_IO_Write+0x44>
	}

	GYRO_CS_HIGH();
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <GYRO_IO_Write+0x7c>)
 800141c:	2201      	movs	r2, #1
 800141e:	2101      	movs	r1, #1
 8001420:	0018      	movs	r0, r3
 8001422:	f000 fd59 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	48000800 	.word	0x48000800

08001434 <GYRO_IO_Read>:

void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	0008      	movs	r0, r1
 800143e:	0011      	movs	r1, r2
 8001440:	1cfb      	adds	r3, r7, #3
 8001442:	1c02      	adds	r2, r0, #0
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	003b      	movs	r3, r7
 8001448:	1c0a      	adds	r2, r1, #0
 800144a:	801a      	strh	r2, [r3, #0]
	if (NumByteToRead > 0x01)
 800144c:	003b      	movs	r3, r7
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d907      	bls.n	8001464 <GYRO_IO_Read+0x30>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001454:	1cfb      	adds	r3, r7, #3
 8001456:	1cfa      	adds	r2, r7, #3
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	2140      	movs	r1, #64	; 0x40
 800145c:	4249      	negs	r1, r1
 800145e:	430a      	orrs	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e006      	b.n	8001472 <GYRO_IO_Read+0x3e>
	}
	else
	{
		ReadAddr |= (uint8_t) READWRITE_CMD;
 8001464:	1cfb      	adds	r3, r7, #3
 8001466:	1cfa      	adds	r2, r7, #3
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	4249      	negs	r1, r1
 800146e:	430a      	orrs	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
	}
	GYRO_CS_LOW();
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <GYRO_IO_Read+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	2101      	movs	r1, #1
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fd2d 	bl	8001ed8 <HAL_GPIO_WritePin>

	SPIx_WriteRead(ReadAddr);
 800147e:	1cfb      	adds	r3, r7, #3
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff7a 	bl	800137c <SPIx_WriteRead>

	while (NumByteToRead > 0x00)
 8001488:	e00e      	b.n	80014a8 <GYRO_IO_Read+0x74>
	{
		*pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff76 	bl	800137c <SPIx_WriteRead>
 8001490:	0003      	movs	r3, r0
 8001492:	001a      	movs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8001498:	003b      	movs	r3, r7
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	003b      	movs	r3, r7
 800149e:	3a01      	subs	r2, #1
 80014a0:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
	while (NumByteToRead > 0x00)
 80014a8:	003b      	movs	r3, r7
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ec      	bne.n	800148a <GYRO_IO_Read+0x56>
	}

	GYRO_CS_HIGH();
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <GYRO_IO_Read+0x90>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fd0e 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	48000800 	.word	0x48000800

080014c8 <GYRO_ReadXYZ_AngRate>:

void GYRO_ReadXYZ_AngRate(float *Data)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	float sensitivity = 0.00875;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <GYRO_ReadXYZ_AngRate+0xb0>)
 80014d2:	61fb      	str	r3, [r7, #28]
	uint8_t tmpbuffer[6] =
 80014d4:	2414      	movs	r4, #20
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	809a      	strh	r2, [r3, #4]
	{ 0 };
	int16_t RawData[3] =
 80014e0:	230c      	movs	r3, #12
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	0018      	movs	r0, r3
 80014e6:	2306      	movs	r3, #6
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f001 fdf4 	bl	80030d8 <memset>
	{ 0 };

	GYRO_IO_Read(tmpbuffer, L3GD20_OUT_X_L_ADDR, 6);
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2206      	movs	r2, #6
 80014f4:	2128      	movs	r1, #40	; 0x28
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff ff9c 	bl	8001434 <GYRO_IO_Read>

	for (int i = 0; i < 3; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	e018      	b.n	8001534 <GYRO_ReadXYZ_AngRate+0x6c>
	{
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i + 1] << 8)
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	3301      	adds	r3, #1
 8001508:	2114      	movs	r1, #20
 800150a:	187a      	adds	r2, r7, r1
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	b29b      	uxth	r3, r3
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b29a      	uxth	r2, r3
				+ tmpbuffer[2 * i]);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	1879      	adds	r1, r7, r1
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	b29b      	uxth	r3, r3
 800151e:	18d3      	adds	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i + 1] << 8)
 8001522:	b219      	sxth	r1, r3
 8001524:	230c      	movs	r3, #12
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 3; i++)
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	2b02      	cmp	r3, #2
 8001538:	dde3      	ble.n	8001502 <GYRO_ReadXYZ_AngRate+0x3a>
	}

	for (int i = 0; i < 3; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
 800153e:	e013      	b.n	8001568 <GYRO_ReadXYZ_AngRate+0xa0>
	{
		Data[i] = (float) (RawData[i] * sensitivity);
 8001540:	230c      	movs	r3, #12
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	6a3a      	ldr	r2, [r7, #32]
 8001546:	0052      	lsls	r2, r2, #1
 8001548:	5ed3      	ldrsh	r3, [r2, r3]
 800154a:	0018      	movs	r0, r3
 800154c:	f7fe ffb6 	bl	80004bc <__aeabi_i2f>
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	18d4      	adds	r4, r2, r3
 8001558:	69f9      	ldr	r1, [r7, #28]
 800155a:	f7fe fe61 	bl	8000220 <__aeabi_fmul>
 800155e:	1c03      	adds	r3, r0, #0
 8001560:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	3301      	adds	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	2b02      	cmp	r3, #2
 800156c:	dde8      	ble.n	8001540 <GYRO_ReadXYZ_AngRate+0x78>
	}
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b00b      	add	sp, #44	; 0x2c
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	3c0f5c29 	.word	0x3c0f5c29

0800157c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001582:	f000 f9f5 	bl	8001970 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001586:	f000 f865 	bl	8001654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800158a:	f000 f8dd 	bl	8001748 <MX_GPIO_Init>
	MX_SPI2_Init();
 800158e:	f000 f89d 	bl	80016cc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	// Включаем оси
	uint8_t ctrl = 0x0f;
 8001592:	211a      	movs	r1, #26
 8001594:	187b      	adds	r3, r7, r1
 8001596:	220f      	movs	r2, #15
 8001598:	701a      	strb	r2, [r3, #0]
	GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1, 1);
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2201      	movs	r2, #1
 800159e:	2120      	movs	r1, #32
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ff07 	bl	80013b4 <GYRO_IO_Write>

	/* USER CODE END 2 */
	uint8_t address_whoami = 0x0F;
 80015a6:	211b      	movs	r1, #27
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	220f      	movs	r2, #15
 80015ac:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	GYRO_IO_Read(&data, address_whoami, 1);
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	7819      	ldrb	r1, [r3, #0]
 80015b2:	2319      	movs	r3, #25
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2201      	movs	r2, #1
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ff3b 	bl	8001434 <GYRO_IO_Read>

	float Data_AngRate[3] =
 80015be:	230c      	movs	r3, #12
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	0018      	movs	r0, r3
 80015c4:	230c      	movs	r3, #12
 80015c6:	001a      	movs	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	f001 fd85 	bl	80030d8 <memset>
	{ 0 };
	float Data_Ang[3] =
 80015ce:	003b      	movs	r3, r7
 80015d0:	0018      	movs	r0, r3
 80015d2:	230c      	movs	r3, #12
 80015d4:	001a      	movs	r2, r3
 80015d6:	2100      	movs	r1, #0
 80015d8:	f001 fd7e 	bl	80030d8 <memset>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 80015dc:	230c      	movs	r3, #12
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ff71 	bl	80014c8 <GYRO_ReadXYZ_AngRate>
		for (int i = 0; i < 3; ++i)
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e028      	b.n	800163e <main+0xc2>
		{
			Data_Ang[i] += Data_AngRate[i] * 0.02;
 80015ec:	003b      	movs	r3, r7
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	58d3      	ldr	r3, [r2, r3]
 80015f4:	1c18      	adds	r0, r3, #0
 80015f6:	f7ff fdd5 	bl	80011a4 <__aeabi_f2d>
 80015fa:	0004      	movs	r4, r0
 80015fc:	000d      	movs	r5, r1
 80015fe:	230c      	movs	r3, #12
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	58d3      	ldr	r3, [r2, r3]
 8001608:	1c18      	adds	r0, r3, #0
 800160a:	f7ff fdcb 	bl	80011a4 <__aeabi_f2d>
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <main+0xd0>)
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <main+0xd4>)
 8001612:	f7ff fb05 	bl	8000c20 <__aeabi_dmul>
 8001616:	0002      	movs	r2, r0
 8001618:	000b      	movs	r3, r1
 800161a:	0020      	movs	r0, r4
 800161c:	0029      	movs	r1, r5
 800161e:	f7fe ff9f 	bl	8000560 <__aeabi_dadd>
 8001622:	0002      	movs	r2, r0
 8001624:	000b      	movs	r3, r1
 8001626:	0010      	movs	r0, r2
 8001628:	0019      	movs	r1, r3
 800162a:	f7ff fe03 	bl	8001234 <__aeabi_d2f>
 800162e:	1c01      	adds	r1, r0, #0
 8001630:	003b      	movs	r3, r7
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	50d1      	str	r1, [r2, r3]
		for (int i = 0; i < 3; ++i)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2b02      	cmp	r3, #2
 8001642:	ddd3      	ble.n	80015ec <main+0x70>
		}
		HAL_Delay(20);
 8001644:	2014      	movs	r0, #20
 8001646:	f000 f9f7 	bl	8001a38 <HAL_Delay>
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 800164a:	e7c7      	b.n	80015dc <main+0x60>
 800164c:	47ae147b 	.word	0x47ae147b
 8001650:	3f947ae1 	.word	0x3f947ae1

08001654 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b093      	sub	sp, #76	; 0x4c
 8001658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800165a:	2414      	movs	r4, #20
 800165c:	193b      	adds	r3, r7, r4
 800165e:	0018      	movs	r0, r3
 8001660:	2334      	movs	r3, #52	; 0x34
 8001662:	001a      	movs	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	f001 fd37 	bl	80030d8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	0018      	movs	r0, r3
 800166e:	2310      	movs	r3, #16
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f001 fd30 	bl	80030d8 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2220      	movs	r2, #32
 800167c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2201      	movs	r2, #1
 8001682:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	193b      	adds	r3, r7, r4
 800168c:	0018      	movs	r0, r3
 800168e:	f000 fc41 	bl	8001f14 <HAL_RCC_OscConfig>
 8001692:	1e03      	subs	r3, r0, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x46>
	{
		Error_Handler();
 8001696:	f000 f8ad 	bl	80017f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2203      	movs	r2, #3
 80016a4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2101      	movs	r1, #1
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 ffb2 	bl	8002620 <HAL_RCC_ClockConfig>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x70>
	{
		Error_Handler();
 80016c0:	f000 f898 	bl	80017f4 <Error_Handler>
	}
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b013      	add	sp, #76	; 0x4c
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_SPI2_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <MX_SPI2_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_SPI2_Init+0x74>)
 80016d8:	2282      	movs	r2, #130	; 0x82
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_SPI2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_SPI2_Init+0x74>)
 80016e6:	22e0      	movs	r2, #224	; 0xe0
 80016e8:	00d2      	lsls	r2, r2, #3
 80016ea:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI2_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_SPI2_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI2_Init+0x74>)
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI2_Init+0x74>)
 8001702:	2210      	movs	r2, #16
 8001704:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI2_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI2_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_SPI2_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI2_Init+0x74>)
 800171a:	2207      	movs	r2, #7
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_SPI2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_SPI2_Init+0x74>)
 8001726:	2208      	movs	r2, #8
 8001728:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <MX_SPI2_Init+0x74>)
 800172c:	0018      	movs	r0, r3
 800172e:	f001 f8c3 	bl	80028b8 <HAL_SPI_Init>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d001      	beq.n	800173a <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8001736:	f000 f85d 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000028 	.word	0x20000028
 8001744:	40003800 	.word	0x40003800

08001748 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800174e:	240c      	movs	r4, #12
 8001750:	193b      	adds	r3, r7, r4
 8001752:	0018      	movs	r0, r3
 8001754:	2314      	movs	r3, #20
 8001756:	001a      	movs	r2, r3
 8001758:	2100      	movs	r1, #0
 800175a:	f001 fcbd 	bl	80030d8 <memset>
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MX_GPIO_Init+0xa4>)
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_GPIO_Init+0xa4>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	03c9      	lsls	r1, r1, #15
 8001768:	430a      	orrs	r2, r1
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_GPIO_Init+0xa4>)
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	03db      	lsls	r3, r3, #15
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_GPIO_Init+0xa4>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_GPIO_Init+0xa4>)
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0309      	lsls	r1, r1, #12
 8001784:	430a      	orrs	r2, r1
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_GPIO_Init+0xa4>)
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	031b      	lsls	r3, r3, #12
 8001790:	4013      	ands	r3, r2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_GPIO_Init+0xa4>)
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_GPIO_Init+0xa4>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	02c9      	lsls	r1, r1, #11
 80017a0:	430a      	orrs	r2, r1
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_GPIO_Init+0xa4>)
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	02db      	lsls	r3, r3, #11
 80017ac:	4013      	ands	r3, r2
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GYROSCOPE_CS_GPIO_Port, GYROSCOPE_CS_Pin, GPIO_PIN_RESET);
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_GPIO_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	0018      	movs	r0, r3
 80017ba:	f000 fb8d 	bl	8001ed8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GYROSCOPE_CS_Pin */
	GPIO_InitStruct.Pin = GYROSCOPE_CS_Pin;
 80017be:	0021      	movs	r1, r4
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2201      	movs	r2, #1
 80017ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2201      	movs	r2, #1
 80017d6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GYROSCOPE_CS_GPIO_Port, &GPIO_InitStruct);
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <MX_GPIO_Init+0xa8>)
 80017dc:	0019      	movs	r1, r3
 80017de:	0010      	movs	r0, r2
 80017e0:	f000 fa02 	bl	8001be8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b009      	add	sp, #36	; 0x24
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	48000800 	.word	0x48000800

080017f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x44>)
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_MspInit+0x44>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x44>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_MspInit+0x44>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_MspInit+0x44>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_MspInit+0x44>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	2414      	movs	r4, #20
 8001852:	193b      	adds	r3, r7, r4
 8001854:	0018      	movs	r0, r3
 8001856:	2314      	movs	r3, #20
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f001 fc3c 	bl	80030d8 <memset>
  if(hspi->Instance==SPI2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_SPI_MspInit+0x90>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d132      	bne.n	80018d0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_SPI_MspInit+0x94>)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_SPI_MspInit+0x94>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	01c9      	lsls	r1, r1, #7
 8001874:	430a      	orrs	r2, r1
 8001876:	61da      	str	r2, [r3, #28]
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_SPI_MspInit+0x94>)
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	01db      	lsls	r3, r3, #7
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_SPI_MspInit+0x94>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_SPI_MspInit+0x94>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	02c9      	lsls	r1, r1, #11
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_SPI_MspInit+0x94>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	02db      	lsls	r3, r3, #11
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	22e0      	movs	r2, #224	; 0xe0
 80018a6:	0212      	lsls	r2, r2, #8
 80018a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2202      	movs	r2, #2
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2203      	movs	r2, #3
 80018bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_SPI_MspInit+0x98>)
 80018c8:	0019      	movs	r1, r3
 80018ca:	0010      	movs	r0, r2
 80018cc:	f000 f98c 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b00b      	add	sp, #44	; 0x2c
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	40003800 	.word	0x40003800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 f87a 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001920:	f7ff fff7 	bl	8001912 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	; (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <LoopForever+0xe>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	; (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800194a:	f001 fbcd 	bl	80030e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194e:	f7ff fe15 	bl	800157c <main>

08001952 <LoopForever>:

LoopForever:
    b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
  ldr   r0, =_estack
 8001954:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001960:	08003180 	.word	0x08003180
  ldr r2, =_sbss
 8001964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001968:	20000090 	.word	0x20000090

0800196c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_COMP_IRQHandler>
	...

08001970 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <HAL_Init+0x24>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_Init+0x24>)
 800197a:	2110      	movs	r1, #16
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f809 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001986:	f7ff ff3b 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_InitTick+0x5c>)
 80019a2:	681c      	ldr	r4, [r3, #0]
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_InitTick+0x60>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	0019      	movs	r1, r3
 80019aa:	23fa      	movs	r3, #250	; 0xfa
 80019ac:	0098      	lsls	r0, r3, #2
 80019ae:	f7fe fbab 	bl	8000108 <__udivsi3>
 80019b2:	0003      	movs	r3, r0
 80019b4:	0019      	movs	r1, r3
 80019b6:	0020      	movs	r0, r4
 80019b8:	f7fe fba6 	bl	8000108 <__udivsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f905 	bl	8001bce <HAL_SYSTICK_Config>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d001      	beq.n	80019cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00f      	b.n	80019ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d80b      	bhi.n	80019ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	2301      	movs	r3, #1
 80019d6:	425b      	negs	r3, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 f8e2 	bl	8001ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_InitTick+0x64>)
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b003      	add	sp, #12
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	001a      	movs	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	18d2      	adds	r2, r2, r3
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	2000008c 	.word	0x2000008c

08001a24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	2000008c 	.word	0x2000008c

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	001a      	movs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	f7ff ffe0 	bl	8001a24 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000008 	.word	0x20000008

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0002      	movs	r2, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	d828      	bhi.n	8001ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <__NVIC_SetPriority+0xd4>)
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	33c0      	adds	r3, #192	; 0xc0
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	589b      	ldr	r3, [r3, r2]
 8001aa6:	1dfa      	adds	r2, r7, #7
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	0011      	movs	r1, r2
 8001aac:	2203      	movs	r2, #3
 8001aae:	400a      	ands	r2, r1
 8001ab0:	00d2      	lsls	r2, r2, #3
 8001ab2:	21ff      	movs	r1, #255	; 0xff
 8001ab4:	4091      	lsls	r1, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	43d2      	mvns	r2, r2
 8001aba:	401a      	ands	r2, r3
 8001abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	019b      	lsls	r3, r3, #6
 8001ac2:	22ff      	movs	r2, #255	; 0xff
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	2303      	movs	r3, #3
 8001ace:	4003      	ands	r3, r0
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <__NVIC_SetPriority+0xd4>)
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	33c0      	adds	r3, #192	; 0xc0
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ae6:	e031      	b.n	8001b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <__NVIC_SetPriority+0xd8>)
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	0019      	movs	r1, r3
 8001af0:	230f      	movs	r3, #15
 8001af2:	400b      	ands	r3, r1
 8001af4:	3b08      	subs	r3, #8
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3306      	adds	r3, #6
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	3304      	adds	r3, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1dfa      	adds	r2, r7, #7
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	0011      	movs	r1, r2
 8001b08:	2203      	movs	r2, #3
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	00d2      	lsls	r2, r2, #3
 8001b0e:	21ff      	movs	r1, #255	; 0xff
 8001b10:	4091      	lsls	r1, r2
 8001b12:	000a      	movs	r2, r1
 8001b14:	43d2      	mvns	r2, r2
 8001b16:	401a      	ands	r2, r3
 8001b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	401a      	ands	r2, r3
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	0018      	movs	r0, r3
 8001b28:	2303      	movs	r3, #3
 8001b2a:	4003      	ands	r3, r0
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <__NVIC_SetPriority+0xd8>)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	001c      	movs	r4, r3
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	430a      	orrs	r2, r1
 8001b42:	3306      	adds	r3, #6
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	18c3      	adds	r3, r0, r3
 8001b48:	3304      	adds	r3, #4
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b003      	add	sp, #12
 8001b52:	bd90      	pop	{r4, r7, pc}
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1e5a      	subs	r2, r3, #1
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	045b      	lsls	r3, r3, #17
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d301      	bcc.n	8001b74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b70:	2301      	movs	r3, #1
 8001b72:	e010      	b.n	8001b96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <SysTick_Config+0x44>)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	425b      	negs	r3, r3
 8001b80:	2103      	movs	r1, #3
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff ff7c 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x44>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x44>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	210f      	movs	r1, #15
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff ffbf 	bl	8001b5c <SysTick_Config>
 8001bde:	0003      	movs	r3, r0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e155      	b.n	8001ea4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4091      	lsls	r1, r2
 8001c02:	000a      	movs	r2, r1
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <HAL_GPIO_Init+0x28>
 8001c0e:	e146      	b.n	8001e9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d005      	beq.n	8001c28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d130      	bne.n	8001c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	2201      	movs	r2, #1
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d017      	beq.n	8001cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d123      	bne.n	8001d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	58d3      	ldr	r3, [r2, r3]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2107      	movs	r1, #7
 8001cfe:	400b      	ands	r3, r1
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	409a      	lsls	r2, r3
 8001d28:	0013      	movs	r3, r2
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23c0      	movs	r3, #192	; 0xc0
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	d100      	bne.n	8001d5c <HAL_GPIO_Init+0x174>
 8001d5a:	e0a0      	b.n	8001e9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5c:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_GPIO_Init+0x2d4>)
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_GPIO_Init+0x2d4>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	619a      	str	r2, [r3, #24]
 8001d68:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <HAL_GPIO_Init+0x2d4>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	589b      	ldr	r3, [r3, r2]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2203      	movs	r2, #3
 8001d86:	4013      	ands	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	0013      	movs	r3, r2
 8001d90:	43da      	mvns	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	2390      	movs	r3, #144	; 0x90
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a47      	ldr	r2, [pc, #284]	; (8001ec4 <HAL_GPIO_Init+0x2dc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x1ea>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x1e6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <HAL_GPIO_Init+0x2e4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a44      	ldr	r2, [pc, #272]	; (8001ed0 <HAL_GPIO_Init+0x2e8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x1de>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x1f0>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x1f0>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x1f0>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x1f0>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x1f0>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	2103      	movs	r1, #3
 8001ddc:	400a      	ands	r2, r1
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	035b      	lsls	r3, r3, #13
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	039b      	lsls	r3, r3, #14
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43da      	mvns	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	40da      	lsrs	r2, r3
 8001eac:	1e13      	subs	r3, r2, #0
 8001eae:	d000      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ca>
 8001eb0:	e6a2      	b.n	8001bf8 <HAL_GPIO_Init+0x10>
  } 
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b006      	add	sp, #24
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	48000400 	.word	0x48000400
 8001ec8:	48000800 	.word	0x48000800
 8001ecc:	48000c00 	.word	0x48000c00
 8001ed0:	48001000 	.word	0x48001000
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	0008      	movs	r0, r1
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	1c02      	adds	r2, r0, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	1c7b      	adds	r3, r7, #1
 8001eec:	1c0a      	adds	r2, r1, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef0:	1c7b      	adds	r3, r7, #1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef8:	1cbb      	adds	r3, r7, #2
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f02:	1cbb      	adds	r3, r7, #2
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f000 fb76 	bl	8002614 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_OscConfig+0x20>
 8001f32:	e08e      	b.n	8002052 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f34:	4bc5      	ldr	r3, [pc, #788]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	220c      	movs	r2, #12
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00e      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f40:	4bc2      	ldr	r3, [pc, #776]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d117      	bne.n	8001f7c <HAL_RCC_OscConfig+0x68>
 8001f4c:	4bbf      	ldr	r3, [pc, #764]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	401a      	ands	r2, r3
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	025b      	lsls	r3, r3, #9
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d10e      	bne.n	8001f7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4bbb      	ldr	r3, [pc, #748]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d100      	bne.n	8001f6c <HAL_RCC_OscConfig+0x58>
 8001f6a:	e071      	b.n	8002050 <HAL_RCC_OscConfig+0x13c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d000      	beq.n	8001f76 <HAL_RCC_OscConfig+0x62>
 8001f74:	e06c      	b.n	8002050 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f000 fb4c 	bl	8002614 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x80>
 8001f84:	4bb1      	ldr	r3, [pc, #708]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4bb0      	ldr	r3, [pc, #704]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0249      	lsls	r1, r1, #9
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e02f      	b.n	8001ff4 <HAL_RCC_OscConfig+0xe0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xa2>
 8001f9c:	4bab      	ldr	r3, [pc, #684]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4baa      	ldr	r3, [pc, #680]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fa2:	49ab      	ldr	r1, [pc, #684]	; (8002250 <HAL_RCC_OscConfig+0x33c>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4ba8      	ldr	r3, [pc, #672]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4ba7      	ldr	r3, [pc, #668]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fae:	49a9      	ldr	r1, [pc, #676]	; (8002254 <HAL_RCC_OscConfig+0x340>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e01e      	b.n	8001ff4 <HAL_RCC_OscConfig+0xe0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10e      	bne.n	8001fdc <HAL_RCC_OscConfig+0xc8>
 8001fbe:	4ba3      	ldr	r3, [pc, #652]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4ba2      	ldr	r3, [pc, #648]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	02c9      	lsls	r1, r1, #11
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4b9f      	ldr	r3, [pc, #636]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0249      	lsls	r1, r1, #9
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xe0>
 8001fdc:	4b9b      	ldr	r3, [pc, #620]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b9a      	ldr	r3, [pc, #616]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fe2:	499b      	ldr	r1, [pc, #620]	; (8002250 <HAL_RCC_OscConfig+0x33c>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b98      	ldr	r3, [pc, #608]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b97      	ldr	r3, [pc, #604]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8001fee:	4999      	ldr	r1, [pc, #612]	; (8002254 <HAL_RCC_OscConfig+0x340>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d014      	beq.n	8002026 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fd12 	bl	8001a24 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002006:	f7ff fd0d 	bl	8001a24 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e2fd      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002018:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0xf2>
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7ff fcfd 	bl	8001a24 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fcf8 	bl	8001a24 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2e8      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x11c>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d100      	bne.n	800205e <HAL_RCC_OscConfig+0x14a>
 800205c:	e06c      	b.n	8002138 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	220c      	movs	r2, #12
 8002064:	4013      	ands	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002068:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	220c      	movs	r2, #12
 800206e:	4013      	ands	r3, r2
 8002070:	2b08      	cmp	r3, #8
 8002072:	d11f      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1a0>
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	401a      	ands	r2, r3
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	429a      	cmp	r2, r3
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b71      	ldr	r3, [pc, #452]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d005      	beq.n	800209c <HAL_RCC_OscConfig+0x188>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e2bb      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b6b      	ldr	r3, [pc, #428]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	22f8      	movs	r2, #248	; 0xf8
 80020a2:	4393      	bics	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00da      	lsls	r2, r3, #3
 80020ac:	4b67      	ldr	r3, [pc, #412]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e041      	b.n	8002138 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d024      	beq.n	8002106 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fcac 	bl	8001a24 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff fca7 	bl	8001a24 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e297      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d0f1      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	22f8      	movs	r2, #248	; 0xf8
 80020f4:	4393      	bics	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00da      	lsls	r2, r3, #3
 80020fe:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e018      	b.n	8002138 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800210c:	2101      	movs	r1, #1
 800210e:	438a      	bics	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff fc87 	bl	8001a24 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff fc82 	bl	8001a24 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e272      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d1f1      	bne.n	800211c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	4013      	ands	r3, r2
 8002140:	d036      	beq.n	80021b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d019      	beq.n	800217e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800214c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002150:	2101      	movs	r1, #1
 8002152:	430a      	orrs	r2, r1
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fc65 	bl	8001a24 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff fc60 	bl	8001a24 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e250      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d0f1      	beq.n	8002160 <HAL_RCC_OscConfig+0x24c>
 800217c:	e018      	b.n	80021b0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002184:	2101      	movs	r1, #1
 8002186:	438a      	bics	r2, r1
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fc4b 	bl	8001a24 <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fc46 	bl	8001a24 <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e236      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d1f1      	bne.n	8002194 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2204      	movs	r2, #4
 80021b6:	4013      	ands	r3, r2
 80021b8:	d100      	bne.n	80021bc <HAL_RCC_OscConfig+0x2a8>
 80021ba:	e0b5      	b.n	8002328 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021bc:	201f      	movs	r0, #31
 80021be:	183b      	adds	r3, r7, r0
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	4013      	ands	r3, r2
 80021ce:	d110      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0549      	lsls	r1, r1, #21
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x338>)
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	055b      	lsls	r3, r3, #21
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x344>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_RCC_OscConfig+0x344>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x344>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0049      	lsls	r1, r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220c:	f7ff fc0a 	bl	8001a24 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff fc05 	bl	8001a24 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1f5      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x344>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10f      	bne.n	800225c <HAL_RCC_OscConfig+0x348>
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_OscConfig+0x338>)
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <HAL_RCC_OscConfig+0x338>)
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	e036      	b.n	80022b8 <HAL_RCC_OscConfig+0x3a4>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	fffeffff 	.word	0xfffeffff
 8002254:	fffbffff 	.word	0xfffbffff
 8002258:	40007000 	.word	0x40007000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x36a>
 8002264:	4bca      	ldr	r3, [pc, #808]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	4bc9      	ldr	r3, [pc, #804]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	4bc7      	ldr	r3, [pc, #796]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4bc6      	ldr	r3, [pc, #792]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	e01c      	b.n	80022b8 <HAL_RCC_OscConfig+0x3a4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x38c>
 8002286:	4bc2      	ldr	r3, [pc, #776]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	4bc1      	ldr	r3, [pc, #772]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800228c:	2104      	movs	r1, #4
 800228e:	430a      	orrs	r2, r1
 8002290:	621a      	str	r2, [r3, #32]
 8002292:	4bbf      	ldr	r3, [pc, #764]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002294:	6a1a      	ldr	r2, [r3, #32]
 8002296:	4bbe      	ldr	r3, [pc, #760]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	621a      	str	r2, [r3, #32]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0x3a4>
 80022a0:	4bbb      	ldr	r3, [pc, #748]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	4bba      	ldr	r3, [pc, #744]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	438a      	bics	r2, r1
 80022aa:	621a      	str	r2, [r3, #32]
 80022ac:	4bb8      	ldr	r3, [pc, #736]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4bb7      	ldr	r3, [pc, #732]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	2104      	movs	r1, #4
 80022b4:	438a      	bics	r2, r1
 80022b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d014      	beq.n	80022ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fbb0 	bl	8001a24 <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	e009      	b.n	80022de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7ff fbab 	bl	8001a24 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	4aaf      	ldr	r2, [pc, #700]	; (8002594 <HAL_RCC_OscConfig+0x680>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e19a      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4bac      	ldr	r3, [pc, #688]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x3b6>
 80022e8:	e013      	b.n	8002312 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fb9b 	bl	8001a24 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	e009      	b.n	8002308 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff fb96 	bl	8001a24 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4aa5      	ldr	r2, [pc, #660]	; (8002594 <HAL_RCC_OscConfig+0x680>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e185      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4ba1      	ldr	r3, [pc, #644]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002312:	231f      	movs	r3, #31
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b9c      	ldr	r3, [pc, #624]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002322:	499d      	ldr	r1, [pc, #628]	; (8002598 <HAL_RCC_OscConfig+0x684>)
 8002324:	400a      	ands	r2, r1
 8002326:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d12a      	bne.n	8002390 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800233a:	4b95      	ldr	r3, [pc, #596]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800233c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233e:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002340:	2104      	movs	r1, #4
 8002342:	430a      	orrs	r2, r1
 8002344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002346:	4b92      	ldr	r3, [pc, #584]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234a:	4b91      	ldr	r3, [pc, #580]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800234c:	2101      	movs	r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff fb67 	bl	8001a24 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800235c:	f7ff fb62 	bl	8001a24 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e152      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d0f1      	beq.n	800235c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002378:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	22f8      	movs	r2, #248	; 0xf8
 800237e:	4393      	bics	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	00da      	lsls	r2, r3, #3
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
 800238e:	e034      	b.n	80023fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	3305      	adds	r3, #5
 8002396:	d111      	bne.n	80023bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002398:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800239a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239c:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800239e:	2104      	movs	r1, #4
 80023a0:	438a      	bics	r2, r1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023a4:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	22f8      	movs	r2, #248	; 0xf8
 80023aa:	4393      	bics	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	00da      	lsls	r2, r3, #3
 80023b4:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	e01e      	b.n	80023fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023bc:	4b74      	ldr	r3, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023c2:	2104      	movs	r1, #4
 80023c4:	430a      	orrs	r2, r1
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023cc:	4b70      	ldr	r3, [pc, #448]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fb26 	bl	8001a24 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023de:	f7ff fb21 	bl	8001a24 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e111      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f0:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80023f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1f1      	bne.n	80023de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	4013      	ands	r3, r2
 8002402:	d05c      	beq.n	80024be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002404:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	220c      	movs	r2, #12
 800240a:	4013      	ands	r3, r2
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d00e      	beq.n	800242e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002410:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	220c      	movs	r2, #12
 8002416:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002418:	2b08      	cmp	r3, #8
 800241a:	d114      	bne.n	8002446 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800241c:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	401a      	ands	r2, r3
 8002426:	23c0      	movs	r3, #192	; 0xc0
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	429a      	cmp	r2, r3
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800242e:	4b58      	ldr	r3, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	4013      	ands	r3, r2
 8002438:	d040      	beq.n	80024bc <HAL_RCC_OscConfig+0x5a8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d03c      	beq.n	80024bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0e6      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01b      	beq.n	8002486 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002452:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	0249      	lsls	r1, r1, #9
 8002458:	430a      	orrs	r2, r1
 800245a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fae2 	bl	8001a24 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002466:	f7ff fadd 	bl	8001a24 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0cd      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002478:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800247a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	4013      	ands	r3, r2
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x552>
 8002484:	e01b      	b.n	80024be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800248c:	4943      	ldr	r1, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0x688>)
 800248e:	400a      	ands	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fac7 	bl	8001a24 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249c:	f7ff fac2 	bl	8001a24 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0b2      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80024b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x588>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d100      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5b4>
 80024c6:	e0a4      	b.n	8002612 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	220c      	movs	r2, #12
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d100      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5c2>
 80024d4:	e078      	b.n	80025c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d14c      	bne.n	8002578 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 80024e4:	492e      	ldr	r1, [pc, #184]	; (80025a0 <HAL_RCC_OscConfig+0x68c>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff fa9b 	bl	8001a24 <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff fa96 	bl	8001a24 <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e086      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	049b      	lsls	r3, r3, #18
 800250e:	4013      	ands	r3, r2
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	220f      	movs	r2, #15
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002522:	430a      	orrs	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_RCC_OscConfig+0x690>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	431a      	orrs	r2, r3
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0449      	lsls	r1, r1, #17
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fa69 	bl	8001a24 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff fa64 	bl	8001a24 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e054      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	049b      	lsls	r3, r3, #18
 8002572:	4013      	ands	r3, r2
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x644>
 8002576:	e04c      	b.n	8002612 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_RCC_OscConfig+0x67c>)
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x68c>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fa4e 	bl	8001a24 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x6a6>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40021000 	.word	0x40021000
 8002594:	00001388 	.word	0x00001388
 8002598:	efffffff 	.word	0xefffffff
 800259c:	fffeffff 	.word	0xfffeffff
 80025a0:	feffffff 	.word	0xfeffffff
 80025a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff fa3c 	bl	8001a24 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e02c      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_RCC_OscConfig+0x708>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x694>
 80025c6:	e024      	b.n	8002612 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e01f      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_OscConfig+0x708>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_RCC_OscConfig+0x708>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	23c0      	movs	r3, #192	; 0xc0
 80025e4:	025b      	lsls	r3, r3, #9
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10e      	bne.n	800260e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	220f      	movs	r2, #15
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	23f0      	movs	r3, #240	; 0xf0
 8002602:	039b      	lsls	r3, r3, #14
 8002604:	401a      	ands	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b008      	add	sp, #32
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0bf      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	4013      	ands	r3, r2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d911      	bls.n	8002666 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2202      	movs	r2, #2
 800266c:	4013      	ands	r3, r2
 800266e:	d015      	beq.n	800269c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2204      	movs	r2, #4
 8002676:	4013      	ands	r3, r2
 8002678:	d006      	beq.n	8002688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002680:	21e0      	movs	r1, #224	; 0xe0
 8002682:	00c9      	lsls	r1, r1, #3
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	22f0      	movs	r2, #240	; 0xf0
 800268e:	4393      	bics	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d04c      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	d120      	bne.n	80026fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	049b      	lsls	r3, r3, #18
 80026ce:	4013      	ands	r3, r2
 80026d0:	d114      	bne.n	80026fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 80026e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	4013      	ands	r3, r2
 80026e8:	d108      	bne.n	80026fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e062      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2202      	movs	r2, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e05b      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fc:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7ff f988 	bl	8001a24 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7ff f983 	bl	8001a24 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_RCC_ClockConfig+0x1a4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e042      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	220c      	movs	r2, #12
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1ec      	bne.n	800271a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d211      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4393      	bics	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x19c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e020      	b.n	80027b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2204      	movs	r2, #4
 8002778:	4013      	ands	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_RCC_ClockConfig+0x1a8>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002790:	f000 f820 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002794:	0001      	movs	r1, r0
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	220f      	movs	r2, #15
 800279e:	4013      	ands	r3, r2
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1ac>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	000a      	movs	r2, r1
 80027a6:	40da      	lsrs	r2, r3
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1b0>)
 80027aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f7ff f8f3 	bl	8001998 <HAL_InitTick>
  
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	00001388 	.word	0x00001388
 80027c8:	fffff8ff 	.word	0xfffff8ff
 80027cc:	08003148 	.word	0x08003148
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	220c      	movs	r2, #12
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d046      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0xb8>
 80027fe:	d848      	bhi.n	8002892 <HAL_RCC_GetSysClockFreq+0xbe>
 8002800:	2b04      	cmp	r3, #4
 8002802:	d002      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002804:	2b08      	cmp	r3, #8
 8002806:	d003      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x3c>
 8002808:	e043      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800280c:	613b      	str	r3, [r7, #16]
      break;
 800280e:	e043      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	220f      	movs	r2, #15
 8002816:	4013      	ands	r3, r2
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_RCC_GetSysClockFreq+0xd8>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	220f      	movs	r2, #15
 8002824:	4013      	ands	r3, r2
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	401a      	ands	r2, r3
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	025b      	lsls	r3, r3, #9
 8002838:	429a      	cmp	r2, r3
 800283a:	d109      	bne.n	8002850 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	481a      	ldr	r0, [pc, #104]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002840:	f7fd fc62 	bl	8000108 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	001a      	movs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4353      	muls	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e01a      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	025b      	lsls	r3, r3, #9
 8002856:	401a      	ands	r2, r3
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	429a      	cmp	r2, r3
 800285e:	d109      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4814      	ldr	r0, [pc, #80]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002864:	f7fd fc50 	bl	8000108 <__udivsi3>
 8002868:	0003      	movs	r3, r0
 800286a:	001a      	movs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4353      	muls	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e008      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002878:	f7fd fc46 	bl	8000108 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	001a      	movs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4353      	muls	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	613b      	str	r3, [r7, #16]
      break;
 800288a:	e005      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800288e:	613b      	str	r3, [r7, #16]
      break;
 8002890:	e002      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002894:	613b      	str	r3, [r7, #16]
      break;
 8002896:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002898:	693b      	ldr	r3, [r7, #16]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40021000 	.word	0x40021000
 80028a8:	007a1200 	.word	0x007a1200
 80028ac:	08003158 	.word	0x08003158
 80028b0:	08003168 	.word	0x08003168
 80028b4:	02dc6c00 	.word	0x02dc6c00

080028b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a8      	b.n	8002a1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	2382      	movs	r3, #130	; 0x82
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	429a      	cmp	r2, r3
 80028dc:	d009      	beq.n	80028f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
 80028e4:	e005      	b.n	80028f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	225d      	movs	r2, #93	; 0x5d
 80028fc:	5c9b      	ldrb	r3, [r3, r2]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	225c      	movs	r2, #92	; 0x5c
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f7fe ff9a 	bl	8001848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	225d      	movs	r2, #93	; 0x5d
 8002918:	2102      	movs	r1, #2
 800291a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	438a      	bics	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	23e0      	movs	r3, #224	; 0xe0
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	429a      	cmp	r2, r3
 8002936:	d902      	bls.n	800293e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e002      	b.n	8002944 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	015b      	lsls	r3, r3, #5
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	23f0      	movs	r3, #240	; 0xf0
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	429a      	cmp	r2, r3
 800294e:	d008      	beq.n	8002962 <HAL_SPI_Init+0xaa>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	23e0      	movs	r3, #224	; 0xe0
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	429a      	cmp	r2, r3
 800295a:	d002      	beq.n	8002962 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2382      	movs	r3, #130	; 0x82
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	2384      	movs	r3, #132	; 0x84
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2102      	movs	r1, #2
 800297e:	400b      	ands	r3, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2101      	movs	r1, #1
 8002988:	400b      	ands	r3, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6999      	ldr	r1, [r3, #24]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	400b      	ands	r3, r1
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2138      	movs	r1, #56	; 0x38
 800299e:	400b      	ands	r3, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	400b      	ands	r3, r1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	0011      	movs	r1, r2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	401a      	ands	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	2204      	movs	r2, #4
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2110      	movs	r1, #16
 80029d0:	400b      	ands	r3, r1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	2108      	movs	r1, #8
 80029da:	400b      	ands	r3, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	23f0      	movs	r3, #240	; 0xf0
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	400b      	ands	r3, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	0011      	movs	r1, r2
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	015b      	lsls	r3, r3, #5
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4907      	ldr	r1, [pc, #28]	; (8002a24 <HAL_SPI_Init+0x16c>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	225d      	movs	r2, #93	; 0x5d
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	fffff7ff 	.word	0xfffff7ff

08002a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	001a      	movs	r2, r3
 8002a36:	1cbb      	adds	r3, r7, #2
 8002a38:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a3e:	2323      	movs	r3, #35	; 0x23
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	225c      	movs	r2, #92	; 0x5c
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x2c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e1c4      	b.n	8002dde <HAL_SPI_TransmitReceive+0x3b6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	225c      	movs	r2, #92	; 0x5c
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a5c:	f7fe ffe2 	bl	8001a24 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a64:	201b      	movs	r0, #27
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	215d      	movs	r1, #93	; 0x5d
 8002a6c:	5c52      	ldrb	r2, [r2, r1]
 8002a6e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a76:	2312      	movs	r3, #18
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	1cba      	adds	r2, r7, #2
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a80:	183b      	adds	r3, r7, r0
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d011      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x84>
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	2382      	movs	r3, #130	; 0x82
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d107      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x7a>
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d004      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002aa2:	2323      	movs	r3, #35	; 0x23
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002aaa:	e191      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x98>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x98>
 8002ab8:	1cbb      	adds	r3, r7, #2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ac0:	2323      	movs	r3, #35	; 0x23
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ac8:	e182      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	225d      	movs	r2, #93	; 0x5d
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	225d      	movs	r2, #93	; 0x5d
 8002ada:	2105      	movs	r1, #5
 8002adc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1cba      	adds	r2, r7, #2
 8002aee:	2146      	movs	r1, #70	; 0x46
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1cba      	adds	r2, r7, #2
 8002af8:	2144      	movs	r1, #68	; 0x44
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1cba      	adds	r2, r7, #2
 8002b08:	8812      	ldrh	r2, [r2, #0]
 8002b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1cba      	adds	r2, r7, #2
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	23e0      	movs	r3, #224	; 0xe0
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d908      	bls.n	8002b3e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	49ac      	ldr	r1, [pc, #688]	; (8002de8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e008      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0149      	lsls	r1, r1, #5
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d007      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	23e0      	movs	r3, #224	; 0xe0
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d800      	bhi.n	8002b7c <HAL_SPI_TransmitReceive+0x154>
 8002b7a:	e083      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x168>
 8002b84:	2312      	movs	r3, #18
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d000      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x168>
 8002b8e:	e06d      	b.n	8002c6c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb4:	e05a      	b.n	8002c6c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d11b      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1d4>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x1d4>
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d113      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d11c      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x21c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2246      	movs	r2, #70	; 0x46
 8002c0e:	5a9b      	ldrh	r3, [r3, r2]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	b292      	uxth	r2, r2
 8002c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2246      	movs	r2, #70	; 0x46
 8002c32:	5a9b      	ldrh	r3, [r3, r2]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2246      	movs	r2, #70	; 0x46
 8002c3e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c44:	f7fe feee 	bl	8001a24 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d80b      	bhi.n	8002c6c <HAL_SPI_TransmitReceive+0x244>
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	3301      	adds	r3, #1
 8002c58:	d008      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002c5a:	2323      	movs	r3, #35	; 0x23
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2203      	movs	r2, #3
 8002c60:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	225d      	movs	r2, #93	; 0x5d
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
        goto error;
 8002c6a:	e0b1      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d19f      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x18e>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2246      	movs	r2, #70	; 0x46
 8002c7a:	5a9b      	ldrh	r3, [r3, r2]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d199      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x18e>
 8002c82:	e089      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x270>
 8002c8c:	2312      	movs	r3, #18
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d000      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x270>
 8002c96:	e074      	b.n	8002d82 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cbe:	e060      	b.n	8002d82 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d11c      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x2e0>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x2e0>
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d114      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d11e      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x32c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2246      	movs	r2, #70	; 0x46
 8002d1a:	5a9b      	ldrh	r3, [r3, r2]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	001a      	movs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2246      	movs	r2, #70	; 0x46
 8002d42:	5a9b      	ldrh	r3, [r3, r2]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2246      	movs	r2, #70	; 0x46
 8002d4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d54:	f7fe fe66 	bl	8001a24 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d802      	bhi.n	8002d6a <HAL_SPI_TransmitReceive+0x342>
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	3301      	adds	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x348>
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002d70:	2323      	movs	r3, #35	; 0x23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2203      	movs	r2, #3
 8002d76:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	225d      	movs	r2, #93	; 0x5d
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002d80:	e026      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d199      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x298>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2246      	movs	r2, #70	; 0x46
 8002d90:	5a9b      	ldrh	r3, [r3, r2]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d193      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f954 	bl	800304c <SPI_EndRxTxTransaction>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002da8:	2323      	movs	r3, #35	; 0x23
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002dbe:	2323      	movs	r3, #35	; 0x23
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e003      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	225d      	movs	r2, #93	; 0x5d
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	225c      	movs	r2, #92	; 0x5c
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dd8:	2323      	movs	r3, #35	; 0x23
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b00a      	add	sp, #40	; 0x28
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	ffffefff 	.word	0xffffefff

08002dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dfc:	f7fe fe12 	bl	8001a24 <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e0c:	f7fe fe0a 	bl	8001a24 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	015b      	lsls	r3, r3, #5
 8002e1a:	0d1b      	lsrs	r3, r3, #20
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	4353      	muls	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e22:	e058      	b.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	d055      	beq.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e2a:	f7fe fdfb 	bl	8001a24 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d902      	bls.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d142      	bne.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	21e0      	movs	r1, #224	; 0xe0
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	2382      	movs	r3, #130	; 0x82
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d113      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d005      	beq.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2140      	movs	r1, #64	; 0x40
 8002e80:	438a      	bics	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	019b      	lsls	r3, r3, #6
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d110      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	491a      	ldr	r1, [pc, #104]	; (8002f04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0189      	lsls	r1, r1, #6
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	225d      	movs	r2, #93	; 0x5d
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	225c      	movs	r2, #92	; 0x5c
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e017      	b.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	425a      	negs	r2, r3
 8002ee6:	4153      	adcs	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	001a      	movs	r2, r3
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d197      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b008      	add	sp, #32
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000000 	.word	0x20000000
 8002f04:	ffffdfff 	.word	0xffffdfff

08002f08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f16:	2317      	movs	r3, #23
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f1e:	f7fe fd81 	bl	8001a24 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f2e:	f7fe fd79 	bl	8001a24 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	0013      	movs	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	00da      	lsls	r2, r3, #3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	0d1b      	lsrs	r3, r3, #20
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	4353      	muls	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f54:	e068      	b.n	8003028 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	23c0      	movs	r3, #192	; 0xc0
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10a      	bne.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	2117      	movs	r1, #23
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	d055      	beq.n	8003028 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7c:	f7fe fd52 	bl	8001a24 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d902      	bls.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d142      	bne.n	8003018 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	21e0      	movs	r1, #224	; 0xe0
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	2382      	movs	r3, #130	; 0x82
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d113      	bne.n	8002fd6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d005      	beq.n	8002fc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d107      	bne.n	8002fd6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d110      	bne.n	8003004 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4916      	ldr	r1, [pc, #88]	; (8003048 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	0189      	lsls	r1, r1, #6
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	225d      	movs	r2, #93	; 0x5d
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	225c      	movs	r2, #92	; 0x5c
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e010      	b.n	800303a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3b01      	subs	r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d18e      	bne.n	8002f56 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b00a      	add	sp, #40	; 0x28
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000000 	.word	0x20000000
 8003048:	ffffdfff 	.word	0xffffdfff

0800304c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	23c0      	movs	r3, #192	; 0xc0
 800305c:	0159      	lsls	r1, r3, #5
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	0013      	movs	r3, r2
 8003066:	2200      	movs	r2, #0
 8003068:	f7ff ff4e 	bl	8002f08 <SPI_WaitFifoStateUntilTimeout>
 800306c:	1e03      	subs	r3, r0, #0
 800306e:	d007      	beq.n	8003080 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	2220      	movs	r2, #32
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e027      	b.n	80030d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	0013      	movs	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	f7ff fead 	bl	8002dec <SPI_WaitFlagStateUntilTimeout>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d007      	beq.n	80030a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	2220      	movs	r2, #32
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e014      	b.n	80030d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	23c0      	movs	r3, #192	; 0xc0
 80030aa:	00d9      	lsls	r1, r3, #3
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	0013      	movs	r3, r2
 80030b4:	2200      	movs	r2, #0
 80030b6:	f7ff ff27 	bl	8002f08 <SPI_WaitFifoStateUntilTimeout>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d007      	beq.n	80030ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	2220      	movs	r2, #32
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e000      	b.n	80030d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <memset>:
 80030d8:	0003      	movs	r3, r0
 80030da:	1882      	adds	r2, r0, r2
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	7019      	strb	r1, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <__libc_init_array>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	2600      	movs	r6, #0
 80030ec:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__libc_init_array+0x38>)
 80030ee:	4d0d      	ldr	r5, [pc, #52]	; (8003124 <__libc_init_array+0x3c>)
 80030f0:	1b64      	subs	r4, r4, r5
 80030f2:	10a4      	asrs	r4, r4, #2
 80030f4:	42a6      	cmp	r6, r4
 80030f6:	d109      	bne.n	800310c <__libc_init_array+0x24>
 80030f8:	2600      	movs	r6, #0
 80030fa:	f000 f819 	bl	8003130 <_init>
 80030fe:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <__libc_init_array+0x40>)
 8003100:	4d0a      	ldr	r5, [pc, #40]	; (800312c <__libc_init_array+0x44>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	42a6      	cmp	r6, r4
 8003108:	d105      	bne.n	8003116 <__libc_init_array+0x2e>
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	00b3      	lsls	r3, r6, #2
 800310e:	58eb      	ldr	r3, [r5, r3]
 8003110:	4798      	blx	r3
 8003112:	3601      	adds	r6, #1
 8003114:	e7ee      	b.n	80030f4 <__libc_init_array+0xc>
 8003116:	00b3      	lsls	r3, r6, #2
 8003118:	58eb      	ldr	r3, [r5, r3]
 800311a:	4798      	blx	r3
 800311c:	3601      	adds	r6, #1
 800311e:	e7f2      	b.n	8003106 <__libc_init_array+0x1e>
 8003120:	08003178 	.word	0x08003178
 8003124:	08003178 	.word	0x08003178
 8003128:	0800317c 	.word	0x0800317c
 800312c:	08003178 	.word	0x08003178

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr


TASK2_GYROSCOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003808  08003808  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003808  08003808  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000005c  0800386c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800386c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049d6  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001136  00000000  00000000  00024a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  00025bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000403  00000000  00000000  00026138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018774  00000000  00000000  0002653b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e4c  00000000  00000000  0003ecaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d8c2  00000000  00000000  00045afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015d0  00000000  00000000  000d33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d4990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003738 	.word	0x08003738

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003738 	.word	0x08003738

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9b9 	bl	80005a0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f945 	bl	80004c8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9ab 	bl	80005a0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a1 	bl	80005a0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f951 	bl	8000514 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f947 	bl	8000514 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fdiv>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	464f      	mov	r7, r9
 8000298:	4646      	mov	r6, r8
 800029a:	46d6      	mov	lr, sl
 800029c:	0245      	lsls	r5, r0, #9
 800029e:	b5c0      	push	{r6, r7, lr}
 80002a0:	0047      	lsls	r7, r0, #1
 80002a2:	1c0c      	adds	r4, r1, #0
 80002a4:	0a6d      	lsrs	r5, r5, #9
 80002a6:	0e3f      	lsrs	r7, r7, #24
 80002a8:	0fc6      	lsrs	r6, r0, #31
 80002aa:	2f00      	cmp	r7, #0
 80002ac:	d100      	bne.n	80002b0 <__aeabi_fdiv+0x1c>
 80002ae:	e06f      	b.n	8000390 <__aeabi_fdiv+0xfc>
 80002b0:	2fff      	cmp	r7, #255	; 0xff
 80002b2:	d100      	bne.n	80002b6 <__aeabi_fdiv+0x22>
 80002b4:	e074      	b.n	80003a0 <__aeabi_fdiv+0x10c>
 80002b6:	2300      	movs	r3, #0
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	4699      	mov	r9, r3
 80002bc:	469a      	mov	sl, r3
 80002be:	00ed      	lsls	r5, r5, #3
 80002c0:	04d2      	lsls	r2, r2, #19
 80002c2:	4315      	orrs	r5, r2
 80002c4:	3f7f      	subs	r7, #127	; 0x7f
 80002c6:	0263      	lsls	r3, r4, #9
 80002c8:	0a5b      	lsrs	r3, r3, #9
 80002ca:	4698      	mov	r8, r3
 80002cc:	0063      	lsls	r3, r4, #1
 80002ce:	0e1b      	lsrs	r3, r3, #24
 80002d0:	0fe4      	lsrs	r4, r4, #31
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d04d      	beq.n	8000372 <__aeabi_fdiv+0xde>
 80002d6:	2bff      	cmp	r3, #255	; 0xff
 80002d8:	d045      	beq.n	8000366 <__aeabi_fdiv+0xd2>
 80002da:	4642      	mov	r2, r8
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	00d2      	lsls	r2, r2, #3
 80002e0:	04c9      	lsls	r1, r1, #19
 80002e2:	4311      	orrs	r1, r2
 80002e4:	4688      	mov	r8, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	3b7f      	subs	r3, #127	; 0x7f
 80002ea:	0031      	movs	r1, r6
 80002ec:	1aff      	subs	r7, r7, r3
 80002ee:	464b      	mov	r3, r9
 80002f0:	4061      	eors	r1, r4
 80002f2:	b2c9      	uxtb	r1, r1
 80002f4:	2b0f      	cmp	r3, #15
 80002f6:	d900      	bls.n	80002fa <__aeabi_fdiv+0x66>
 80002f8:	e0b8      	b.n	800046c <__aeabi_fdiv+0x1d8>
 80002fa:	4870      	ldr	r0, [pc, #448]	; (80004bc <__aeabi_fdiv+0x228>)
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	58c3      	ldr	r3, [r0, r3]
 8000300:	469f      	mov	pc, r3
 8000302:	2300      	movs	r3, #0
 8000304:	4698      	mov	r8, r3
 8000306:	0026      	movs	r6, r4
 8000308:	4645      	mov	r5, r8
 800030a:	4692      	mov	sl, r2
 800030c:	4653      	mov	r3, sl
 800030e:	2b02      	cmp	r3, #2
 8000310:	d100      	bne.n	8000314 <__aeabi_fdiv+0x80>
 8000312:	e08d      	b.n	8000430 <__aeabi_fdiv+0x19c>
 8000314:	2b03      	cmp	r3, #3
 8000316:	d100      	bne.n	800031a <__aeabi_fdiv+0x86>
 8000318:	e0a1      	b.n	800045e <__aeabi_fdiv+0x1ca>
 800031a:	2b01      	cmp	r3, #1
 800031c:	d018      	beq.n	8000350 <__aeabi_fdiv+0xbc>
 800031e:	003b      	movs	r3, r7
 8000320:	337f      	adds	r3, #127	; 0x7f
 8000322:	2b00      	cmp	r3, #0
 8000324:	dd6d      	ble.n	8000402 <__aeabi_fdiv+0x16e>
 8000326:	076a      	lsls	r2, r5, #29
 8000328:	d004      	beq.n	8000334 <__aeabi_fdiv+0xa0>
 800032a:	220f      	movs	r2, #15
 800032c:	402a      	ands	r2, r5
 800032e:	2a04      	cmp	r2, #4
 8000330:	d000      	beq.n	8000334 <__aeabi_fdiv+0xa0>
 8000332:	3504      	adds	r5, #4
 8000334:	012a      	lsls	r2, r5, #4
 8000336:	d503      	bpl.n	8000340 <__aeabi_fdiv+0xac>
 8000338:	4b61      	ldr	r3, [pc, #388]	; (80004c0 <__aeabi_fdiv+0x22c>)
 800033a:	401d      	ands	r5, r3
 800033c:	003b      	movs	r3, r7
 800033e:	3380      	adds	r3, #128	; 0x80
 8000340:	2bfe      	cmp	r3, #254	; 0xfe
 8000342:	dd00      	ble.n	8000346 <__aeabi_fdiv+0xb2>
 8000344:	e074      	b.n	8000430 <__aeabi_fdiv+0x19c>
 8000346:	01aa      	lsls	r2, r5, #6
 8000348:	0a52      	lsrs	r2, r2, #9
 800034a:	b2d8      	uxtb	r0, r3
 800034c:	e002      	b.n	8000354 <__aeabi_fdiv+0xc0>
 800034e:	000e      	movs	r6, r1
 8000350:	2000      	movs	r0, #0
 8000352:	2200      	movs	r2, #0
 8000354:	05c0      	lsls	r0, r0, #23
 8000356:	07f6      	lsls	r6, r6, #31
 8000358:	4310      	orrs	r0, r2
 800035a:	4330      	orrs	r0, r6
 800035c:	bce0      	pop	{r5, r6, r7}
 800035e:	46ba      	mov	sl, r7
 8000360:	46b1      	mov	r9, r6
 8000362:	46a8      	mov	r8, r5
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	4643      	mov	r3, r8
 8000368:	2b00      	cmp	r3, #0
 800036a:	d13f      	bne.n	80003ec <__aeabi_fdiv+0x158>
 800036c:	2202      	movs	r2, #2
 800036e:	3fff      	subs	r7, #255	; 0xff
 8000370:	e003      	b.n	800037a <__aeabi_fdiv+0xe6>
 8000372:	4643      	mov	r3, r8
 8000374:	2b00      	cmp	r3, #0
 8000376:	d12d      	bne.n	80003d4 <__aeabi_fdiv+0x140>
 8000378:	2201      	movs	r2, #1
 800037a:	0031      	movs	r1, r6
 800037c:	464b      	mov	r3, r9
 800037e:	4061      	eors	r1, r4
 8000380:	b2c9      	uxtb	r1, r1
 8000382:	4313      	orrs	r3, r2
 8000384:	2b0f      	cmp	r3, #15
 8000386:	d838      	bhi.n	80003fa <__aeabi_fdiv+0x166>
 8000388:	484e      	ldr	r0, [pc, #312]	; (80004c4 <__aeabi_fdiv+0x230>)
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	58c3      	ldr	r3, [r0, r3]
 800038e:	469f      	mov	pc, r3
 8000390:	2d00      	cmp	r5, #0
 8000392:	d113      	bne.n	80003bc <__aeabi_fdiv+0x128>
 8000394:	2304      	movs	r3, #4
 8000396:	4699      	mov	r9, r3
 8000398:	3b03      	subs	r3, #3
 800039a:	2700      	movs	r7, #0
 800039c:	469a      	mov	sl, r3
 800039e:	e792      	b.n	80002c6 <__aeabi_fdiv+0x32>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d105      	bne.n	80003b0 <__aeabi_fdiv+0x11c>
 80003a4:	2308      	movs	r3, #8
 80003a6:	4699      	mov	r9, r3
 80003a8:	3b06      	subs	r3, #6
 80003aa:	27ff      	movs	r7, #255	; 0xff
 80003ac:	469a      	mov	sl, r3
 80003ae:	e78a      	b.n	80002c6 <__aeabi_fdiv+0x32>
 80003b0:	230c      	movs	r3, #12
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b09      	subs	r3, #9
 80003b6:	27ff      	movs	r7, #255	; 0xff
 80003b8:	469a      	mov	sl, r3
 80003ba:	e784      	b.n	80002c6 <__aeabi_fdiv+0x32>
 80003bc:	0028      	movs	r0, r5
 80003be:	f001 f9f9 	bl	80017b4 <__clzsi2>
 80003c2:	2776      	movs	r7, #118	; 0x76
 80003c4:	1f43      	subs	r3, r0, #5
 80003c6:	409d      	lsls	r5, r3
 80003c8:	2300      	movs	r3, #0
 80003ca:	427f      	negs	r7, r7
 80003cc:	4699      	mov	r9, r3
 80003ce:	469a      	mov	sl, r3
 80003d0:	1a3f      	subs	r7, r7, r0
 80003d2:	e778      	b.n	80002c6 <__aeabi_fdiv+0x32>
 80003d4:	4640      	mov	r0, r8
 80003d6:	f001 f9ed 	bl	80017b4 <__clzsi2>
 80003da:	4642      	mov	r2, r8
 80003dc:	1f43      	subs	r3, r0, #5
 80003de:	409a      	lsls	r2, r3
 80003e0:	2376      	movs	r3, #118	; 0x76
 80003e2:	425b      	negs	r3, r3
 80003e4:	4690      	mov	r8, r2
 80003e6:	1a1b      	subs	r3, r3, r0
 80003e8:	2200      	movs	r2, #0
 80003ea:	e77e      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003ec:	2303      	movs	r3, #3
 80003ee:	464a      	mov	r2, r9
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	33fc      	adds	r3, #252	; 0xfc
 80003f6:	2203      	movs	r2, #3
 80003f8:	e777      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003fa:	000e      	movs	r6, r1
 80003fc:	20ff      	movs	r0, #255	; 0xff
 80003fe:	2200      	movs	r2, #0
 8000400:	e7a8      	b.n	8000354 <__aeabi_fdiv+0xc0>
 8000402:	2201      	movs	r2, #1
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	2b1b      	cmp	r3, #27
 8000408:	dca2      	bgt.n	8000350 <__aeabi_fdiv+0xbc>
 800040a:	379e      	adds	r7, #158	; 0x9e
 800040c:	002a      	movs	r2, r5
 800040e:	40bd      	lsls	r5, r7
 8000410:	40da      	lsrs	r2, r3
 8000412:	1e6b      	subs	r3, r5, #1
 8000414:	419d      	sbcs	r5, r3
 8000416:	4315      	orrs	r5, r2
 8000418:	076a      	lsls	r2, r5, #29
 800041a:	d004      	beq.n	8000426 <__aeabi_fdiv+0x192>
 800041c:	220f      	movs	r2, #15
 800041e:	402a      	ands	r2, r5
 8000420:	2a04      	cmp	r2, #4
 8000422:	d000      	beq.n	8000426 <__aeabi_fdiv+0x192>
 8000424:	3504      	adds	r5, #4
 8000426:	016a      	lsls	r2, r5, #5
 8000428:	d544      	bpl.n	80004b4 <__aeabi_fdiv+0x220>
 800042a:	2001      	movs	r0, #1
 800042c:	2200      	movs	r2, #0
 800042e:	e791      	b.n	8000354 <__aeabi_fdiv+0xc0>
 8000430:	20ff      	movs	r0, #255	; 0xff
 8000432:	2200      	movs	r2, #0
 8000434:	e78e      	b.n	8000354 <__aeabi_fdiv+0xc0>
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	2600      	movs	r6, #0
 800043a:	20ff      	movs	r0, #255	; 0xff
 800043c:	03d2      	lsls	r2, r2, #15
 800043e:	e789      	b.n	8000354 <__aeabi_fdiv+0xc0>
 8000440:	2300      	movs	r3, #0
 8000442:	4698      	mov	r8, r3
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	03d2      	lsls	r2, r2, #15
 8000448:	4215      	tst	r5, r2
 800044a:	d008      	beq.n	800045e <__aeabi_fdiv+0x1ca>
 800044c:	4643      	mov	r3, r8
 800044e:	4213      	tst	r3, r2
 8000450:	d105      	bne.n	800045e <__aeabi_fdiv+0x1ca>
 8000452:	431a      	orrs	r2, r3
 8000454:	0252      	lsls	r2, r2, #9
 8000456:	0026      	movs	r6, r4
 8000458:	20ff      	movs	r0, #255	; 0xff
 800045a:	0a52      	lsrs	r2, r2, #9
 800045c:	e77a      	b.n	8000354 <__aeabi_fdiv+0xc0>
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	03d2      	lsls	r2, r2, #15
 8000462:	432a      	orrs	r2, r5
 8000464:	0252      	lsls	r2, r2, #9
 8000466:	20ff      	movs	r0, #255	; 0xff
 8000468:	0a52      	lsrs	r2, r2, #9
 800046a:	e773      	b.n	8000354 <__aeabi_fdiv+0xc0>
 800046c:	4642      	mov	r2, r8
 800046e:	016b      	lsls	r3, r5, #5
 8000470:	0155      	lsls	r5, r2, #5
 8000472:	42ab      	cmp	r3, r5
 8000474:	d21a      	bcs.n	80004ac <__aeabi_fdiv+0x218>
 8000476:	201b      	movs	r0, #27
 8000478:	2200      	movs	r2, #0
 800047a:	3f01      	subs	r7, #1
 800047c:	2601      	movs	r6, #1
 800047e:	001c      	movs	r4, r3
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	2c00      	cmp	r4, #0
 8000486:	db01      	blt.n	800048c <__aeabi_fdiv+0x1f8>
 8000488:	429d      	cmp	r5, r3
 800048a:	d801      	bhi.n	8000490 <__aeabi_fdiv+0x1fc>
 800048c:	1b5b      	subs	r3, r3, r5
 800048e:	4332      	orrs	r2, r6
 8000490:	3801      	subs	r0, #1
 8000492:	2800      	cmp	r0, #0
 8000494:	d1f3      	bne.n	800047e <__aeabi_fdiv+0x1ea>
 8000496:	1e58      	subs	r0, r3, #1
 8000498:	4183      	sbcs	r3, r0
 800049a:	4313      	orrs	r3, r2
 800049c:	001d      	movs	r5, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	337f      	adds	r3, #127	; 0x7f
 80004a2:	000e      	movs	r6, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dd00      	ble.n	80004aa <__aeabi_fdiv+0x216>
 80004a8:	e73d      	b.n	8000326 <__aeabi_fdiv+0x92>
 80004aa:	e7aa      	b.n	8000402 <__aeabi_fdiv+0x16e>
 80004ac:	201a      	movs	r0, #26
 80004ae:	2201      	movs	r2, #1
 80004b0:	1b5b      	subs	r3, r3, r5
 80004b2:	e7e3      	b.n	800047c <__aeabi_fdiv+0x1e8>
 80004b4:	01aa      	lsls	r2, r5, #6
 80004b6:	2000      	movs	r0, #0
 80004b8:	0a52      	lsrs	r2, r2, #9
 80004ba:	e74b      	b.n	8000354 <__aeabi_fdiv+0xc0>
 80004bc:	08003750 	.word	0x08003750
 80004c0:	f7ffffff 	.word	0xf7ffffff
 80004c4:	08003790 	.word	0x08003790

080004c8 <__eqsf2>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0042      	lsls	r2, r0, #1
 80004cc:	0245      	lsls	r5, r0, #9
 80004ce:	024e      	lsls	r6, r1, #9
 80004d0:	004c      	lsls	r4, r1, #1
 80004d2:	0fc3      	lsrs	r3, r0, #31
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	2001      	movs	r0, #1
 80004d8:	0e12      	lsrs	r2, r2, #24
 80004da:	0a76      	lsrs	r6, r6, #9
 80004dc:	0e24      	lsrs	r4, r4, #24
 80004de:	0fc9      	lsrs	r1, r1, #31
 80004e0:	2aff      	cmp	r2, #255	; 0xff
 80004e2:	d006      	beq.n	80004f2 <__eqsf2+0x2a>
 80004e4:	2cff      	cmp	r4, #255	; 0xff
 80004e6:	d003      	beq.n	80004f0 <__eqsf2+0x28>
 80004e8:	42a2      	cmp	r2, r4
 80004ea:	d101      	bne.n	80004f0 <__eqsf2+0x28>
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	d006      	beq.n	80004fe <__eqsf2+0x36>
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d1fc      	bne.n	80004f0 <__eqsf2+0x28>
 80004f6:	2cff      	cmp	r4, #255	; 0xff
 80004f8:	d1fa      	bne.n	80004f0 <__eqsf2+0x28>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d1f8      	bne.n	80004f0 <__eqsf2+0x28>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d006      	beq.n	8000510 <__eqsf2+0x48>
 8000502:	2001      	movs	r0, #1
 8000504:	2a00      	cmp	r2, #0
 8000506:	d1f3      	bne.n	80004f0 <__eqsf2+0x28>
 8000508:	0028      	movs	r0, r5
 800050a:	1e43      	subs	r3, r0, #1
 800050c:	4198      	sbcs	r0, r3
 800050e:	e7ef      	b.n	80004f0 <__eqsf2+0x28>
 8000510:	2000      	movs	r0, #0
 8000512:	e7ed      	b.n	80004f0 <__eqsf2+0x28>

08000514 <__gesf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	0245      	lsls	r5, r0, #9
 800051a:	024e      	lsls	r6, r1, #9
 800051c:	004c      	lsls	r4, r1, #1
 800051e:	0fc3      	lsrs	r3, r0, #31
 8000520:	0a6d      	lsrs	r5, r5, #9
 8000522:	0e12      	lsrs	r2, r2, #24
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc8      	lsrs	r0, r1, #31
 800052a:	2aff      	cmp	r2, #255	; 0xff
 800052c:	d01b      	beq.n	8000566 <__gesf2+0x52>
 800052e:	2cff      	cmp	r4, #255	; 0xff
 8000530:	d00e      	beq.n	8000550 <__gesf2+0x3c>
 8000532:	2a00      	cmp	r2, #0
 8000534:	d11b      	bne.n	800056e <__gesf2+0x5a>
 8000536:	2c00      	cmp	r4, #0
 8000538:	d101      	bne.n	800053e <__gesf2+0x2a>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d01c      	beq.n	8000578 <__gesf2+0x64>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d00c      	beq.n	800055c <__gesf2+0x48>
 8000542:	4283      	cmp	r3, r0
 8000544:	d01c      	beq.n	8000580 <__gesf2+0x6c>
 8000546:	2102      	movs	r1, #2
 8000548:	1e58      	subs	r0, r3, #1
 800054a:	4008      	ands	r0, r1
 800054c:	3801      	subs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2e00      	cmp	r6, #0
 8000552:	d122      	bne.n	800059a <__gesf2+0x86>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f4      	bne.n	8000542 <__gesf2+0x2e>
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1f2      	bne.n	8000542 <__gesf2+0x2e>
 800055c:	2800      	cmp	r0, #0
 800055e:	d1f6      	bne.n	800054e <__gesf2+0x3a>
 8000560:	2001      	movs	r0, #1
 8000562:	4240      	negs	r0, r0
 8000564:	e7f3      	b.n	800054e <__gesf2+0x3a>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d117      	bne.n	800059a <__gesf2+0x86>
 800056a:	2cff      	cmp	r4, #255	; 0xff
 800056c:	d0f0      	beq.n	8000550 <__gesf2+0x3c>
 800056e:	2c00      	cmp	r4, #0
 8000570:	d1e7      	bne.n	8000542 <__gesf2+0x2e>
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1e5      	bne.n	8000542 <__gesf2+0x2e>
 8000576:	e7e6      	b.n	8000546 <__gesf2+0x32>
 8000578:	2000      	movs	r0, #0
 800057a:	2d00      	cmp	r5, #0
 800057c:	d0e7      	beq.n	800054e <__gesf2+0x3a>
 800057e:	e7e2      	b.n	8000546 <__gesf2+0x32>
 8000580:	42a2      	cmp	r2, r4
 8000582:	dc05      	bgt.n	8000590 <__gesf2+0x7c>
 8000584:	dbea      	blt.n	800055c <__gesf2+0x48>
 8000586:	42b5      	cmp	r5, r6
 8000588:	d802      	bhi.n	8000590 <__gesf2+0x7c>
 800058a:	d3e7      	bcc.n	800055c <__gesf2+0x48>
 800058c:	2000      	movs	r0, #0
 800058e:	e7de      	b.n	800054e <__gesf2+0x3a>
 8000590:	4243      	negs	r3, r0
 8000592:	4158      	adcs	r0, r3
 8000594:	0040      	lsls	r0, r0, #1
 8000596:	3801      	subs	r0, #1
 8000598:	e7d9      	b.n	800054e <__gesf2+0x3a>
 800059a:	2002      	movs	r0, #2
 800059c:	4240      	negs	r0, r0
 800059e:	e7d6      	b.n	800054e <__gesf2+0x3a>

080005a0 <__lesf2>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	0042      	lsls	r2, r0, #1
 80005a4:	0245      	lsls	r5, r0, #9
 80005a6:	024e      	lsls	r6, r1, #9
 80005a8:	004c      	lsls	r4, r1, #1
 80005aa:	0fc3      	lsrs	r3, r0, #31
 80005ac:	0a6d      	lsrs	r5, r5, #9
 80005ae:	0e12      	lsrs	r2, r2, #24
 80005b0:	0a76      	lsrs	r6, r6, #9
 80005b2:	0e24      	lsrs	r4, r4, #24
 80005b4:	0fc8      	lsrs	r0, r1, #31
 80005b6:	2aff      	cmp	r2, #255	; 0xff
 80005b8:	d00b      	beq.n	80005d2 <__lesf2+0x32>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d00d      	beq.n	80005da <__lesf2+0x3a>
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d11f      	bne.n	8000602 <__lesf2+0x62>
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d116      	bne.n	80005f4 <__lesf2+0x54>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d114      	bne.n	80005f4 <__lesf2+0x54>
 80005ca:	2000      	movs	r0, #0
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d010      	beq.n	80005f2 <__lesf2+0x52>
 80005d0:	e009      	b.n	80005e6 <__lesf2+0x46>
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d10c      	bne.n	80005f0 <__lesf2+0x50>
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d113      	bne.n	8000602 <__lesf2+0x62>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d108      	bne.n	80005f0 <__lesf2+0x50>
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d008      	beq.n	80005f4 <__lesf2+0x54>
 80005e2:	4283      	cmp	r3, r0
 80005e4:	d012      	beq.n	800060c <__lesf2+0x6c>
 80005e6:	2102      	movs	r1, #2
 80005e8:	1e58      	subs	r0, r3, #1
 80005ea:	4008      	ands	r0, r1
 80005ec:	3801      	subs	r0, #1
 80005ee:	e000      	b.n	80005f2 <__lesf2+0x52>
 80005f0:	2002      	movs	r0, #2
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d1f4      	bne.n	80005e2 <__lesf2+0x42>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d1fa      	bne.n	80005f2 <__lesf2+0x52>
 80005fc:	2001      	movs	r0, #1
 80005fe:	4240      	negs	r0, r0
 8000600:	e7f7      	b.n	80005f2 <__lesf2+0x52>
 8000602:	2c00      	cmp	r4, #0
 8000604:	d1ed      	bne.n	80005e2 <__lesf2+0x42>
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1eb      	bne.n	80005e2 <__lesf2+0x42>
 800060a:	e7ec      	b.n	80005e6 <__lesf2+0x46>
 800060c:	42a2      	cmp	r2, r4
 800060e:	dc05      	bgt.n	800061c <__lesf2+0x7c>
 8000610:	dbf2      	blt.n	80005f8 <__lesf2+0x58>
 8000612:	42b5      	cmp	r5, r6
 8000614:	d802      	bhi.n	800061c <__lesf2+0x7c>
 8000616:	d3ef      	bcc.n	80005f8 <__lesf2+0x58>
 8000618:	2000      	movs	r0, #0
 800061a:	e7ea      	b.n	80005f2 <__lesf2+0x52>
 800061c:	4243      	negs	r3, r0
 800061e:	4158      	adcs	r0, r3
 8000620:	0040      	lsls	r0, r0, #1
 8000622:	3801      	subs	r0, #1
 8000624:	e7e5      	b.n	80005f2 <__lesf2+0x52>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__aeabi_fmul>:
 8000628:	0243      	lsls	r3, r0, #9
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	4699      	mov	r9, r3
 8000634:	46d6      	mov	lr, sl
 8000636:	0fc3      	lsrs	r3, r0, #31
 8000638:	0045      	lsls	r5, r0, #1
 800063a:	4698      	mov	r8, r3
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	464b      	mov	r3, r9
 8000640:	1c0f      	adds	r7, r1, #0
 8000642:	0e2d      	lsrs	r5, r5, #24
 8000644:	d100      	bne.n	8000648 <__aeabi_fmul+0x20>
 8000646:	e0cb      	b.n	80007e0 <__aeabi_fmul+0x1b8>
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d100      	bne.n	800064e <__aeabi_fmul+0x26>
 800064c:	e0cf      	b.n	80007ee <__aeabi_fmul+0x1c6>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	04d2      	lsls	r2, r2, #19
 8000654:	431a      	orrs	r2, r3
 8000656:	2300      	movs	r3, #0
 8000658:	4691      	mov	r9, r2
 800065a:	2600      	movs	r6, #0
 800065c:	469a      	mov	sl, r3
 800065e:	3d7f      	subs	r5, #127	; 0x7f
 8000660:	027c      	lsls	r4, r7, #9
 8000662:	007b      	lsls	r3, r7, #1
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	0e1b      	lsrs	r3, r3, #24
 8000668:	0fff      	lsrs	r7, r7, #31
 800066a:	2b00      	cmp	r3, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fmul+0x48>
 800066e:	e0a9      	b.n	80007c4 <__aeabi_fmul+0x19c>
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d011      	beq.n	8000698 <__aeabi_fmul+0x70>
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	00e4      	lsls	r4, r4, #3
 8000678:	04d2      	lsls	r2, r2, #19
 800067a:	4314      	orrs	r4, r2
 800067c:	4642      	mov	r2, r8
 800067e:	3b7f      	subs	r3, #127	; 0x7f
 8000680:	195b      	adds	r3, r3, r5
 8000682:	407a      	eors	r2, r7
 8000684:	2000      	movs	r0, #0
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	1c5d      	adds	r5, r3, #1
 800068a:	2e0a      	cmp	r6, #10
 800068c:	dd13      	ble.n	80006b6 <__aeabi_fmul+0x8e>
 800068e:	003a      	movs	r2, r7
 8000690:	2e0b      	cmp	r6, #11
 8000692:	d047      	beq.n	8000724 <__aeabi_fmul+0xfc>
 8000694:	4647      	mov	r7, r8
 8000696:	e03f      	b.n	8000718 <__aeabi_fmul+0xf0>
 8000698:	002b      	movs	r3, r5
 800069a:	33ff      	adds	r3, #255	; 0xff
 800069c:	2c00      	cmp	r4, #0
 800069e:	d11e      	bne.n	80006de <__aeabi_fmul+0xb6>
 80006a0:	2202      	movs	r2, #2
 80006a2:	4316      	orrs	r6, r2
 80006a4:	4642      	mov	r2, r8
 80006a6:	3501      	adds	r5, #1
 80006a8:	407a      	eors	r2, r7
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	35ff      	adds	r5, #255	; 0xff
 80006ae:	2e0a      	cmp	r6, #10
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fmul+0x8c>
 80006b2:	e0e4      	b.n	800087e <__aeabi_fmul+0x256>
 80006b4:	2002      	movs	r0, #2
 80006b6:	2e02      	cmp	r6, #2
 80006b8:	dc1c      	bgt.n	80006f4 <__aeabi_fmul+0xcc>
 80006ba:	3e01      	subs	r6, #1
 80006bc:	2e01      	cmp	r6, #1
 80006be:	d842      	bhi.n	8000746 <__aeabi_fmul+0x11e>
 80006c0:	2802      	cmp	r0, #2
 80006c2:	d03d      	beq.n	8000740 <__aeabi_fmul+0x118>
 80006c4:	2801      	cmp	r0, #1
 80006c6:	d166      	bne.n	8000796 <__aeabi_fmul+0x16e>
 80006c8:	2000      	movs	r0, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	05c0      	lsls	r0, r0, #23
 80006ce:	4308      	orrs	r0, r1
 80006d0:	07d2      	lsls	r2, r2, #31
 80006d2:	4310      	orrs	r0, r2
 80006d4:	bce0      	pop	{r5, r6, r7}
 80006d6:	46ba      	mov	sl, r7
 80006d8:	46b1      	mov	r9, r6
 80006da:	46a8      	mov	r8, r5
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	2203      	movs	r2, #3
 80006e0:	4316      	orrs	r6, r2
 80006e2:	4642      	mov	r2, r8
 80006e4:	3501      	adds	r5, #1
 80006e6:	407a      	eors	r2, r7
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	35ff      	adds	r5, #255	; 0xff
 80006ec:	2e0a      	cmp	r6, #10
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_fmul+0xca>
 80006f0:	e0e4      	b.n	80008bc <__aeabi_fmul+0x294>
 80006f2:	2003      	movs	r0, #3
 80006f4:	2101      	movs	r1, #1
 80006f6:	40b1      	lsls	r1, r6
 80006f8:	26a6      	movs	r6, #166	; 0xa6
 80006fa:	00f6      	lsls	r6, r6, #3
 80006fc:	4231      	tst	r1, r6
 80006fe:	d10a      	bne.n	8000716 <__aeabi_fmul+0xee>
 8000700:	2690      	movs	r6, #144	; 0x90
 8000702:	00b6      	lsls	r6, r6, #2
 8000704:	4231      	tst	r1, r6
 8000706:	d116      	bne.n	8000736 <__aeabi_fmul+0x10e>
 8000708:	3eb9      	subs	r6, #185	; 0xb9
 800070a:	3eff      	subs	r6, #255	; 0xff
 800070c:	420e      	tst	r6, r1
 800070e:	d01a      	beq.n	8000746 <__aeabi_fmul+0x11e>
 8000710:	46a1      	mov	r9, r4
 8000712:	4682      	mov	sl, r0
 8000714:	e000      	b.n	8000718 <__aeabi_fmul+0xf0>
 8000716:	0017      	movs	r7, r2
 8000718:	4653      	mov	r3, sl
 800071a:	003a      	movs	r2, r7
 800071c:	2b02      	cmp	r3, #2
 800071e:	d00f      	beq.n	8000740 <__aeabi_fmul+0x118>
 8000720:	464c      	mov	r4, r9
 8000722:	4650      	mov	r0, sl
 8000724:	2803      	cmp	r0, #3
 8000726:	d1cd      	bne.n	80006c4 <__aeabi_fmul+0x9c>
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	03c9      	lsls	r1, r1, #15
 800072c:	4321      	orrs	r1, r4
 800072e:	0249      	lsls	r1, r1, #9
 8000730:	20ff      	movs	r0, #255	; 0xff
 8000732:	0a49      	lsrs	r1, r1, #9
 8000734:	e7ca      	b.n	80006cc <__aeabi_fmul+0xa4>
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	2200      	movs	r2, #0
 800073a:	20ff      	movs	r0, #255	; 0xff
 800073c:	03c9      	lsls	r1, r1, #15
 800073e:	e7c5      	b.n	80006cc <__aeabi_fmul+0xa4>
 8000740:	20ff      	movs	r0, #255	; 0xff
 8000742:	2100      	movs	r1, #0
 8000744:	e7c2      	b.n	80006cc <__aeabi_fmul+0xa4>
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	4649      	mov	r1, r9
 800074a:	0424      	lsls	r4, r4, #16
 800074c:	0c24      	lsrs	r4, r4, #16
 800074e:	0027      	movs	r7, r4
 8000750:	0c0e      	lsrs	r6, r1, #16
 8000752:	0409      	lsls	r1, r1, #16
 8000754:	0c09      	lsrs	r1, r1, #16
 8000756:	4374      	muls	r4, r6
 8000758:	434f      	muls	r7, r1
 800075a:	4346      	muls	r6, r0
 800075c:	4348      	muls	r0, r1
 800075e:	0c39      	lsrs	r1, r7, #16
 8000760:	1900      	adds	r0, r0, r4
 8000762:	1809      	adds	r1, r1, r0
 8000764:	428c      	cmp	r4, r1
 8000766:	d903      	bls.n	8000770 <__aeabi_fmul+0x148>
 8000768:	2080      	movs	r0, #128	; 0x80
 800076a:	0240      	lsls	r0, r0, #9
 800076c:	4684      	mov	ip, r0
 800076e:	4466      	add	r6, ip
 8000770:	043f      	lsls	r7, r7, #16
 8000772:	0408      	lsls	r0, r1, #16
 8000774:	0c3f      	lsrs	r7, r7, #16
 8000776:	19c0      	adds	r0, r0, r7
 8000778:	0184      	lsls	r4, r0, #6
 800077a:	1e67      	subs	r7, r4, #1
 800077c:	41bc      	sbcs	r4, r7
 800077e:	0c09      	lsrs	r1, r1, #16
 8000780:	0e80      	lsrs	r0, r0, #26
 8000782:	1989      	adds	r1, r1, r6
 8000784:	4304      	orrs	r4, r0
 8000786:	0189      	lsls	r1, r1, #6
 8000788:	430c      	orrs	r4, r1
 800078a:	0109      	lsls	r1, r1, #4
 800078c:	d571      	bpl.n	8000872 <__aeabi_fmul+0x24a>
 800078e:	2301      	movs	r3, #1
 8000790:	0861      	lsrs	r1, r4, #1
 8000792:	401c      	ands	r4, r3
 8000794:	430c      	orrs	r4, r1
 8000796:	002b      	movs	r3, r5
 8000798:	337f      	adds	r3, #127	; 0x7f
 800079a:	2b00      	cmp	r3, #0
 800079c:	dd51      	ble.n	8000842 <__aeabi_fmul+0x21a>
 800079e:	0761      	lsls	r1, r4, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fmul+0x184>
 80007a2:	210f      	movs	r1, #15
 80007a4:	4021      	ands	r1, r4
 80007a6:	2904      	cmp	r1, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fmul+0x184>
 80007aa:	3404      	adds	r4, #4
 80007ac:	0121      	lsls	r1, r4, #4
 80007ae:	d503      	bpl.n	80007b8 <__aeabi_fmul+0x190>
 80007b0:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <__aeabi_fmul+0x298>)
 80007b2:	401c      	ands	r4, r3
 80007b4:	002b      	movs	r3, r5
 80007b6:	3380      	adds	r3, #128	; 0x80
 80007b8:	2bfe      	cmp	r3, #254	; 0xfe
 80007ba:	dcc1      	bgt.n	8000740 <__aeabi_fmul+0x118>
 80007bc:	01a1      	lsls	r1, r4, #6
 80007be:	0a49      	lsrs	r1, r1, #9
 80007c0:	b2d8      	uxtb	r0, r3
 80007c2:	e783      	b.n	80006cc <__aeabi_fmul+0xa4>
 80007c4:	2c00      	cmp	r4, #0
 80007c6:	d12c      	bne.n	8000822 <__aeabi_fmul+0x1fa>
 80007c8:	2301      	movs	r3, #1
 80007ca:	4642      	mov	r2, r8
 80007cc:	431e      	orrs	r6, r3
 80007ce:	002b      	movs	r3, r5
 80007d0:	407a      	eors	r2, r7
 80007d2:	2001      	movs	r0, #1
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	1c5d      	adds	r5, r3, #1
 80007d8:	2e0a      	cmp	r6, #10
 80007da:	dd00      	ble.n	80007de <__aeabi_fmul+0x1b6>
 80007dc:	e757      	b.n	800068e <__aeabi_fmul+0x66>
 80007de:	e76a      	b.n	80006b6 <__aeabi_fmul+0x8e>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d110      	bne.n	8000806 <__aeabi_fmul+0x1de>
 80007e4:	2301      	movs	r3, #1
 80007e6:	2604      	movs	r6, #4
 80007e8:	2500      	movs	r5, #0
 80007ea:	469a      	mov	sl, r3
 80007ec:	e738      	b.n	8000660 <__aeabi_fmul+0x38>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d104      	bne.n	80007fc <__aeabi_fmul+0x1d4>
 80007f2:	2302      	movs	r3, #2
 80007f4:	2608      	movs	r6, #8
 80007f6:	25ff      	movs	r5, #255	; 0xff
 80007f8:	469a      	mov	sl, r3
 80007fa:	e731      	b.n	8000660 <__aeabi_fmul+0x38>
 80007fc:	2303      	movs	r3, #3
 80007fe:	260c      	movs	r6, #12
 8000800:	25ff      	movs	r5, #255	; 0xff
 8000802:	469a      	mov	sl, r3
 8000804:	e72c      	b.n	8000660 <__aeabi_fmul+0x38>
 8000806:	4648      	mov	r0, r9
 8000808:	f000 ffd4 	bl	80017b4 <__clzsi2>
 800080c:	464a      	mov	r2, r9
 800080e:	1f43      	subs	r3, r0, #5
 8000810:	2576      	movs	r5, #118	; 0x76
 8000812:	409a      	lsls	r2, r3
 8000814:	2300      	movs	r3, #0
 8000816:	426d      	negs	r5, r5
 8000818:	4691      	mov	r9, r2
 800081a:	2600      	movs	r6, #0
 800081c:	469a      	mov	sl, r3
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	e71e      	b.n	8000660 <__aeabi_fmul+0x38>
 8000822:	0020      	movs	r0, r4
 8000824:	f000 ffc6 	bl	80017b4 <__clzsi2>
 8000828:	4642      	mov	r2, r8
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	409c      	lsls	r4, r3
 800082e:	1a2b      	subs	r3, r5, r0
 8000830:	3b76      	subs	r3, #118	; 0x76
 8000832:	407a      	eors	r2, r7
 8000834:	2000      	movs	r0, #0
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	1c5d      	adds	r5, r3, #1
 800083a:	2e0a      	cmp	r6, #10
 800083c:	dd00      	ble.n	8000840 <__aeabi_fmul+0x218>
 800083e:	e726      	b.n	800068e <__aeabi_fmul+0x66>
 8000840:	e739      	b.n	80006b6 <__aeabi_fmul+0x8e>
 8000842:	2101      	movs	r1, #1
 8000844:	1acb      	subs	r3, r1, r3
 8000846:	2b1b      	cmp	r3, #27
 8000848:	dd00      	ble.n	800084c <__aeabi_fmul+0x224>
 800084a:	e73d      	b.n	80006c8 <__aeabi_fmul+0xa0>
 800084c:	359e      	adds	r5, #158	; 0x9e
 800084e:	0021      	movs	r1, r4
 8000850:	40ac      	lsls	r4, r5
 8000852:	40d9      	lsrs	r1, r3
 8000854:	1e63      	subs	r3, r4, #1
 8000856:	419c      	sbcs	r4, r3
 8000858:	4321      	orrs	r1, r4
 800085a:	074b      	lsls	r3, r1, #29
 800085c:	d004      	beq.n	8000868 <__aeabi_fmul+0x240>
 800085e:	230f      	movs	r3, #15
 8000860:	400b      	ands	r3, r1
 8000862:	2b04      	cmp	r3, #4
 8000864:	d000      	beq.n	8000868 <__aeabi_fmul+0x240>
 8000866:	3104      	adds	r1, #4
 8000868:	014b      	lsls	r3, r1, #5
 800086a:	d504      	bpl.n	8000876 <__aeabi_fmul+0x24e>
 800086c:	2001      	movs	r0, #1
 800086e:	2100      	movs	r1, #0
 8000870:	e72c      	b.n	80006cc <__aeabi_fmul+0xa4>
 8000872:	001d      	movs	r5, r3
 8000874:	e78f      	b.n	8000796 <__aeabi_fmul+0x16e>
 8000876:	0189      	lsls	r1, r1, #6
 8000878:	2000      	movs	r0, #0
 800087a:	0a49      	lsrs	r1, r1, #9
 800087c:	e726      	b.n	80006cc <__aeabi_fmul+0xa4>
 800087e:	2302      	movs	r3, #2
 8000880:	2e0f      	cmp	r6, #15
 8000882:	d10c      	bne.n	800089e <__aeabi_fmul+0x276>
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	464b      	mov	r3, r9
 8000888:	03c9      	lsls	r1, r1, #15
 800088a:	420b      	tst	r3, r1
 800088c:	d00d      	beq.n	80008aa <__aeabi_fmul+0x282>
 800088e:	420c      	tst	r4, r1
 8000890:	d10b      	bne.n	80008aa <__aeabi_fmul+0x282>
 8000892:	4321      	orrs	r1, r4
 8000894:	0249      	lsls	r1, r1, #9
 8000896:	003a      	movs	r2, r7
 8000898:	20ff      	movs	r0, #255	; 0xff
 800089a:	0a49      	lsrs	r1, r1, #9
 800089c:	e716      	b.n	80006cc <__aeabi_fmul+0xa4>
 800089e:	2e0b      	cmp	r6, #11
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fmul+0x27c>
 80008a2:	e6f7      	b.n	8000694 <__aeabi_fmul+0x6c>
 80008a4:	46a1      	mov	r9, r4
 80008a6:	469a      	mov	sl, r3
 80008a8:	e736      	b.n	8000718 <__aeabi_fmul+0xf0>
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	464b      	mov	r3, r9
 80008ae:	03c9      	lsls	r1, r1, #15
 80008b0:	4319      	orrs	r1, r3
 80008b2:	0249      	lsls	r1, r1, #9
 80008b4:	4642      	mov	r2, r8
 80008b6:	20ff      	movs	r0, #255	; 0xff
 80008b8:	0a49      	lsrs	r1, r1, #9
 80008ba:	e707      	b.n	80006cc <__aeabi_fmul+0xa4>
 80008bc:	2303      	movs	r3, #3
 80008be:	e7df      	b.n	8000880 <__aeabi_fmul+0x258>
 80008c0:	f7ffffff 	.word	0xf7ffffff

080008c4 <__aeabi_fcmpun>:
 80008c4:	0243      	lsls	r3, r0, #9
 80008c6:	024a      	lsls	r2, r1, #9
 80008c8:	0040      	lsls	r0, r0, #1
 80008ca:	0049      	lsls	r1, r1, #1
 80008cc:	0a5b      	lsrs	r3, r3, #9
 80008ce:	0a52      	lsrs	r2, r2, #9
 80008d0:	0e09      	lsrs	r1, r1, #24
 80008d2:	0e00      	lsrs	r0, r0, #24
 80008d4:	28ff      	cmp	r0, #255	; 0xff
 80008d6:	d006      	beq.n	80008e6 <__aeabi_fcmpun+0x22>
 80008d8:	2000      	movs	r0, #0
 80008da:	29ff      	cmp	r1, #255	; 0xff
 80008dc:	d102      	bne.n	80008e4 <__aeabi_fcmpun+0x20>
 80008de:	1e53      	subs	r3, r2, #1
 80008e0:	419a      	sbcs	r2, r3
 80008e2:	0010      	movs	r0, r2
 80008e4:	4770      	bx	lr
 80008e6:	38fe      	subs	r0, #254	; 0xfe
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1fb      	bne.n	80008e4 <__aeabi_fcmpun+0x20>
 80008ec:	e7f4      	b.n	80008d8 <__aeabi_fcmpun+0x14>
 80008ee:	46c0      	nop			; (mov r8, r8)

080008f0 <__aeabi_f2iz>:
 80008f0:	0241      	lsls	r1, r0, #9
 80008f2:	0042      	lsls	r2, r0, #1
 80008f4:	0fc3      	lsrs	r3, r0, #31
 80008f6:	0a49      	lsrs	r1, r1, #9
 80008f8:	2000      	movs	r0, #0
 80008fa:	0e12      	lsrs	r2, r2, #24
 80008fc:	2a7e      	cmp	r2, #126	; 0x7e
 80008fe:	dd03      	ble.n	8000908 <__aeabi_f2iz+0x18>
 8000900:	2a9d      	cmp	r2, #157	; 0x9d
 8000902:	dd02      	ble.n	800090a <__aeabi_f2iz+0x1a>
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <__aeabi_f2iz+0x3c>)
 8000906:	1898      	adds	r0, r3, r2
 8000908:	4770      	bx	lr
 800090a:	2080      	movs	r0, #128	; 0x80
 800090c:	0400      	lsls	r0, r0, #16
 800090e:	4301      	orrs	r1, r0
 8000910:	2a95      	cmp	r2, #149	; 0x95
 8000912:	dc07      	bgt.n	8000924 <__aeabi_f2iz+0x34>
 8000914:	2096      	movs	r0, #150	; 0x96
 8000916:	1a82      	subs	r2, r0, r2
 8000918:	40d1      	lsrs	r1, r2
 800091a:	4248      	negs	r0, r1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f3      	bne.n	8000908 <__aeabi_f2iz+0x18>
 8000920:	0008      	movs	r0, r1
 8000922:	e7f1      	b.n	8000908 <__aeabi_f2iz+0x18>
 8000924:	3a96      	subs	r2, #150	; 0x96
 8000926:	4091      	lsls	r1, r2
 8000928:	e7f7      	b.n	800091a <__aeabi_f2iz+0x2a>
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	7fffffff 	.word	0x7fffffff

08000930 <__aeabi_i2f>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	2800      	cmp	r0, #0
 8000934:	d013      	beq.n	800095e <__aeabi_i2f+0x2e>
 8000936:	17c3      	asrs	r3, r0, #31
 8000938:	18c5      	adds	r5, r0, r3
 800093a:	405d      	eors	r5, r3
 800093c:	0fc4      	lsrs	r4, r0, #31
 800093e:	0028      	movs	r0, r5
 8000940:	f000 ff38 	bl	80017b4 <__clzsi2>
 8000944:	239e      	movs	r3, #158	; 0x9e
 8000946:	0001      	movs	r1, r0
 8000948:	1a1b      	subs	r3, r3, r0
 800094a:	2b96      	cmp	r3, #150	; 0x96
 800094c:	dc0f      	bgt.n	800096e <__aeabi_i2f+0x3e>
 800094e:	2808      	cmp	r0, #8
 8000950:	d031      	beq.n	80009b6 <__aeabi_i2f+0x86>
 8000952:	3908      	subs	r1, #8
 8000954:	408d      	lsls	r5, r1
 8000956:	026d      	lsls	r5, r5, #9
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	b2d8      	uxtb	r0, r3
 800095c:	e002      	b.n	8000964 <__aeabi_i2f+0x34>
 800095e:	2400      	movs	r4, #0
 8000960:	2000      	movs	r0, #0
 8000962:	2500      	movs	r5, #0
 8000964:	05c0      	lsls	r0, r0, #23
 8000966:	4328      	orrs	r0, r5
 8000968:	07e4      	lsls	r4, r4, #31
 800096a:	4320      	orrs	r0, r4
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2b99      	cmp	r3, #153	; 0x99
 8000970:	dd0c      	ble.n	800098c <__aeabi_i2f+0x5c>
 8000972:	2205      	movs	r2, #5
 8000974:	1a12      	subs	r2, r2, r0
 8000976:	0028      	movs	r0, r5
 8000978:	40d0      	lsrs	r0, r2
 800097a:	0002      	movs	r2, r0
 800097c:	0008      	movs	r0, r1
 800097e:	301b      	adds	r0, #27
 8000980:	4085      	lsls	r5, r0
 8000982:	0028      	movs	r0, r5
 8000984:	1e45      	subs	r5, r0, #1
 8000986:	41a8      	sbcs	r0, r5
 8000988:	4302      	orrs	r2, r0
 800098a:	0015      	movs	r5, r2
 800098c:	2905      	cmp	r1, #5
 800098e:	dc16      	bgt.n	80009be <__aeabi_i2f+0x8e>
 8000990:	002a      	movs	r2, r5
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <__aeabi_i2f+0xa0>)
 8000994:	4002      	ands	r2, r0
 8000996:	076e      	lsls	r6, r5, #29
 8000998:	d009      	beq.n	80009ae <__aeabi_i2f+0x7e>
 800099a:	260f      	movs	r6, #15
 800099c:	4035      	ands	r5, r6
 800099e:	2d04      	cmp	r5, #4
 80009a0:	d005      	beq.n	80009ae <__aeabi_i2f+0x7e>
 80009a2:	3204      	adds	r2, #4
 80009a4:	0155      	lsls	r5, r2, #5
 80009a6:	d502      	bpl.n	80009ae <__aeabi_i2f+0x7e>
 80009a8:	239f      	movs	r3, #159	; 0x9f
 80009aa:	4002      	ands	r2, r0
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	0192      	lsls	r2, r2, #6
 80009b0:	0a55      	lsrs	r5, r2, #9
 80009b2:	b2d8      	uxtb	r0, r3
 80009b4:	e7d6      	b.n	8000964 <__aeabi_i2f+0x34>
 80009b6:	026d      	lsls	r5, r5, #9
 80009b8:	2096      	movs	r0, #150	; 0x96
 80009ba:	0a6d      	lsrs	r5, r5, #9
 80009bc:	e7d2      	b.n	8000964 <__aeabi_i2f+0x34>
 80009be:	1f4a      	subs	r2, r1, #5
 80009c0:	4095      	lsls	r5, r2
 80009c2:	002a      	movs	r2, r5
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <__aeabi_i2f+0xa0>)
 80009c6:	4002      	ands	r2, r0
 80009c8:	076e      	lsls	r6, r5, #29
 80009ca:	d0f0      	beq.n	80009ae <__aeabi_i2f+0x7e>
 80009cc:	e7e5      	b.n	800099a <__aeabi_i2f+0x6a>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	fbffffff 	.word	0xfbffffff

080009d4 <__aeabi_dadd>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	464f      	mov	r7, r9
 80009d8:	4646      	mov	r6, r8
 80009da:	46d6      	mov	lr, sl
 80009dc:	0004      	movs	r4, r0
 80009de:	b5c0      	push	{r6, r7, lr}
 80009e0:	001f      	movs	r7, r3
 80009e2:	030b      	lsls	r3, r1, #12
 80009e4:	0010      	movs	r0, r2
 80009e6:	004e      	lsls	r6, r1, #1
 80009e8:	0a5b      	lsrs	r3, r3, #9
 80009ea:	0fcd      	lsrs	r5, r1, #31
 80009ec:	0f61      	lsrs	r1, r4, #29
 80009ee:	007a      	lsls	r2, r7, #1
 80009f0:	4319      	orrs	r1, r3
 80009f2:	00e3      	lsls	r3, r4, #3
 80009f4:	033c      	lsls	r4, r7, #12
 80009f6:	0fff      	lsrs	r7, r7, #31
 80009f8:	46bc      	mov	ip, r7
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	0f47      	lsrs	r7, r0, #29
 80009fe:	4327      	orrs	r7, r4
 8000a00:	0d76      	lsrs	r6, r6, #21
 8000a02:	0d52      	lsrs	r2, r2, #21
 8000a04:	00c0      	lsls	r0, r0, #3
 8000a06:	46b9      	mov	r9, r7
 8000a08:	4680      	mov	r8, r0
 8000a0a:	1ab7      	subs	r7, r6, r2
 8000a0c:	4565      	cmp	r5, ip
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x3e>
 8000a10:	e09b      	b.n	8000b4a <__aeabi_dadd+0x176>
 8000a12:	2f00      	cmp	r7, #0
 8000a14:	dc00      	bgt.n	8000a18 <__aeabi_dadd+0x44>
 8000a16:	e084      	b.n	8000b22 <__aeabi_dadd+0x14e>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x4a>
 8000a1c:	e0be      	b.n	8000b9c <__aeabi_dadd+0x1c8>
 8000a1e:	4ac8      	ldr	r2, [pc, #800]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000a20:	4296      	cmp	r6, r2
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x52>
 8000a24:	e124      	b.n	8000c70 <__aeabi_dadd+0x29c>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	464c      	mov	r4, r9
 8000a2a:	0412      	lsls	r2, r2, #16
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	46a1      	mov	r9, r4
 8000a30:	2f38      	cmp	r7, #56	; 0x38
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x62>
 8000a34:	e167      	b.n	8000d06 <__aeabi_dadd+0x332>
 8000a36:	2f1f      	cmp	r7, #31
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dadd+0x68>
 8000a3a:	e1d6      	b.n	8000dea <__aeabi_dadd+0x416>
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	464c      	mov	r4, r9
 8000a40:	1bd2      	subs	r2, r2, r7
 8000a42:	4094      	lsls	r4, r2
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4644      	mov	r4, r8
 8000a48:	40fc      	lsrs	r4, r7
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	4654      	mov	r4, sl
 8000a4e:	4304      	orrs	r4, r0
 8000a50:	4640      	mov	r0, r8
 8000a52:	4090      	lsls	r0, r2
 8000a54:	1e42      	subs	r2, r0, #1
 8000a56:	4190      	sbcs	r0, r2
 8000a58:	464a      	mov	r2, r9
 8000a5a:	40fa      	lsrs	r2, r7
 8000a5c:	4304      	orrs	r4, r0
 8000a5e:	1a89      	subs	r1, r1, r2
 8000a60:	1b1c      	subs	r4, r3, r4
 8000a62:	42a3      	cmp	r3, r4
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	4252      	negs	r2, r2
 8000a68:	1a8b      	subs	r3, r1, r2
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	d400      	bmi.n	8000a74 <__aeabi_dadd+0xa0>
 8000a72:	e0d4      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000a74:	4653      	mov	r3, sl
 8000a76:	025a      	lsls	r2, r3, #9
 8000a78:	0a53      	lsrs	r3, r2, #9
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0xb0>
 8000a82:	e104      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000a84:	4650      	mov	r0, sl
 8000a86:	f000 fe95 	bl	80017b4 <__clzsi2>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	2220      	movs	r2, #32
 8000a90:	0020      	movs	r0, r4
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4651      	mov	r1, sl
 8000a96:	40d0      	lsrs	r0, r2
 8000a98:	4099      	lsls	r1, r3
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	409c      	lsls	r4, r3
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	42b3      	cmp	r3, r6
 8000aa2:	da00      	bge.n	8000aa6 <__aeabi_dadd+0xd2>
 8000aa4:	e102      	b.n	8000cac <__aeabi_dadd+0x2d8>
 8000aa6:	1b9b      	subs	r3, r3, r6
 8000aa8:	1c59      	adds	r1, r3, #1
 8000aaa:	291f      	cmp	r1, #31
 8000aac:	dd00      	ble.n	8000ab0 <__aeabi_dadd+0xdc>
 8000aae:	e0a7      	b.n	8000c00 <__aeabi_dadd+0x22c>
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	0026      	movs	r6, r4
 8000ab6:	1a5b      	subs	r3, r3, r1
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	4098      	lsls	r0, r3
 8000abc:	40ce      	lsrs	r6, r1
 8000abe:	40ca      	lsrs	r2, r1
 8000ac0:	1e63      	subs	r3, r4, #1
 8000ac2:	419c      	sbcs	r4, r3
 8000ac4:	4330      	orrs	r0, r6
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	4304      	orrs	r4, r0
 8000acc:	0763      	lsls	r3, r4, #29
 8000ace:	d009      	beq.n	8000ae4 <__aeabi_dadd+0x110>
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	4023      	ands	r3, r4
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d005      	beq.n	8000ae4 <__aeabi_dadd+0x110>
 8000ad8:	1d23      	adds	r3, r4, #4
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	41a4      	sbcs	r4, r4
 8000ade:	4264      	negs	r4, r4
 8000ae0:	44a2      	add	sl, r4
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_dadd+0x118>
 8000aea:	e09b      	b.n	8000c24 <__aeabi_dadd+0x250>
 8000aec:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000aee:	3601      	adds	r6, #1
 8000af0:	429e      	cmp	r6, r3
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x122>
 8000af4:	e0b8      	b.n	8000c68 <__aeabi_dadd+0x294>
 8000af6:	4653      	mov	r3, sl
 8000af8:	4992      	ldr	r1, [pc, #584]	; (8000d44 <__aeabi_dadd+0x370>)
 8000afa:	08e4      	lsrs	r4, r4, #3
 8000afc:	400b      	ands	r3, r1
 8000afe:	0019      	movs	r1, r3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4323      	orrs	r3, r4
 8000b04:	0572      	lsls	r2, r6, #21
 8000b06:	024c      	lsls	r4, r1, #9
 8000b08:	0b24      	lsrs	r4, r4, #12
 8000b0a:	0d52      	lsrs	r2, r2, #21
 8000b0c:	0512      	lsls	r2, r2, #20
 8000b0e:	07ed      	lsls	r5, r5, #31
 8000b10:	4322      	orrs	r2, r4
 8000b12:	432a      	orrs	r2, r5
 8000b14:	0018      	movs	r0, r3
 8000b16:	0011      	movs	r1, r2
 8000b18:	bce0      	pop	{r5, r6, r7}
 8000b1a:	46ba      	mov	sl, r7
 8000b1c:	46b1      	mov	r9, r6
 8000b1e:	46a8      	mov	r8, r5
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d048      	beq.n	8000bb8 <__aeabi_dadd+0x1e4>
 8000b26:	1b97      	subs	r7, r2, r6
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x15a>
 8000b2c:	e10e      	b.n	8000d4c <__aeabi_dadd+0x378>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	431c      	orrs	r4, r3
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x162>
 8000b34:	e1b7      	b.n	8000ea6 <__aeabi_dadd+0x4d2>
 8000b36:	1e7c      	subs	r4, r7, #1
 8000b38:	2f01      	cmp	r7, #1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x16a>
 8000b3c:	e226      	b.n	8000f8c <__aeabi_dadd+0x5b8>
 8000b3e:	4d80      	ldr	r5, [pc, #512]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000b40:	42af      	cmp	r7, r5
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x172>
 8000b44:	e1d5      	b.n	8000ef2 <__aeabi_dadd+0x51e>
 8000b46:	0027      	movs	r7, r4
 8000b48:	e107      	b.n	8000d5a <__aeabi_dadd+0x386>
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	dc00      	bgt.n	8000b50 <__aeabi_dadd+0x17c>
 8000b4e:	e0b2      	b.n	8000cb6 <__aeabi_dadd+0x2e2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d047      	beq.n	8000be4 <__aeabi_dadd+0x210>
 8000b54:	4a7a      	ldr	r2, [pc, #488]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000b56:	4296      	cmp	r6, r2
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x188>
 8000b5a:	e089      	b.n	8000c70 <__aeabi_dadd+0x29c>
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	464c      	mov	r4, r9
 8000b60:	0412      	lsls	r2, r2, #16
 8000b62:	4314      	orrs	r4, r2
 8000b64:	46a1      	mov	r9, r4
 8000b66:	2f38      	cmp	r7, #56	; 0x38
 8000b68:	dc6b      	bgt.n	8000c42 <__aeabi_dadd+0x26e>
 8000b6a:	2f1f      	cmp	r7, #31
 8000b6c:	dc00      	bgt.n	8000b70 <__aeabi_dadd+0x19c>
 8000b6e:	e16e      	b.n	8000e4e <__aeabi_dadd+0x47a>
 8000b70:	003a      	movs	r2, r7
 8000b72:	4648      	mov	r0, r9
 8000b74:	3a20      	subs	r2, #32
 8000b76:	40d0      	lsrs	r0, r2
 8000b78:	4684      	mov	ip, r0
 8000b7a:	2f20      	cmp	r7, #32
 8000b7c:	d007      	beq.n	8000b8e <__aeabi_dadd+0x1ba>
 8000b7e:	2240      	movs	r2, #64	; 0x40
 8000b80:	4648      	mov	r0, r9
 8000b82:	1bd2      	subs	r2, r2, r7
 8000b84:	4090      	lsls	r0, r2
 8000b86:	0002      	movs	r2, r0
 8000b88:	4640      	mov	r0, r8
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	4680      	mov	r8, r0
 8000b8e:	4640      	mov	r0, r8
 8000b90:	1e42      	subs	r2, r0, #1
 8000b92:	4190      	sbcs	r0, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	0004      	movs	r4, r0
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	e057      	b.n	8000c4c <__aeabi_dadd+0x278>
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	4302      	orrs	r2, r0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x1d0>
 8000ba2:	e103      	b.n	8000dac <__aeabi_dadd+0x3d8>
 8000ba4:	1e7a      	subs	r2, r7, #1
 8000ba6:	2f01      	cmp	r7, #1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x1d8>
 8000baa:	e193      	b.n	8000ed4 <__aeabi_dadd+0x500>
 8000bac:	4c64      	ldr	r4, [pc, #400]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000bae:	42a7      	cmp	r7, r4
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x1e0>
 8000bb2:	e18a      	b.n	8000eca <__aeabi_dadd+0x4f6>
 8000bb4:	0017      	movs	r7, r2
 8000bb6:	e73b      	b.n	8000a30 <__aeabi_dadd+0x5c>
 8000bb8:	4c63      	ldr	r4, [pc, #396]	; (8000d48 <__aeabi_dadd+0x374>)
 8000bba:	1c72      	adds	r2, r6, #1
 8000bbc:	4222      	tst	r2, r4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x1ee>
 8000bc0:	e0e0      	b.n	8000d84 <__aeabi_dadd+0x3b0>
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dadd+0x1f8>
 8000bca:	e174      	b.n	8000eb6 <__aeabi_dadd+0x4e2>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x1fe>
 8000bd0:	e1d0      	b.n	8000f74 <__aeabi_dadd+0x5a0>
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4302      	orrs	r2, r0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x206>
 8000bd8:	e1e3      	b.n	8000fa2 <__aeabi_dadd+0x5ce>
 8000bda:	074a      	lsls	r2, r1, #29
 8000bdc:	08db      	lsrs	r3, r3, #3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	e029      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x218>
 8000bea:	e17d      	b.n	8000ee8 <__aeabi_dadd+0x514>
 8000bec:	1e7a      	subs	r2, r7, #1
 8000bee:	2f01      	cmp	r7, #1
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x220>
 8000bf2:	e0e0      	b.n	8000db6 <__aeabi_dadd+0x3e2>
 8000bf4:	4c52      	ldr	r4, [pc, #328]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000bf6:	42a7      	cmp	r7, r4
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x228>
 8000bfa:	e166      	b.n	8000eca <__aeabi_dadd+0x4f6>
 8000bfc:	0017      	movs	r7, r2
 8000bfe:	e7b2      	b.n	8000b66 <__aeabi_dadd+0x192>
 8000c00:	0010      	movs	r0, r2
 8000c02:	3b1f      	subs	r3, #31
 8000c04:	40d8      	lsrs	r0, r3
 8000c06:	2920      	cmp	r1, #32
 8000c08:	d003      	beq.n	8000c12 <__aeabi_dadd+0x23e>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	4314      	orrs	r4, r2
 8000c12:	1e63      	subs	r3, r4, #1
 8000c14:	419c      	sbcs	r4, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	2600      	movs	r6, #0
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4304      	orrs	r4, r0
 8000c1e:	0763      	lsls	r3, r4, #29
 8000c20:	d000      	beq.n	8000c24 <__aeabi_dadd+0x250>
 8000c22:	e755      	b.n	8000ad0 <__aeabi_dadd+0xfc>
 8000c24:	4652      	mov	r2, sl
 8000c26:	08e3      	lsrs	r3, r4, #3
 8000c28:	0752      	lsls	r2, r2, #29
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	0037      	movs	r7, r6
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	4a43      	ldr	r2, [pc, #268]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c34:	4297      	cmp	r7, r2
 8000c36:	d01f      	beq.n	8000c78 <__aeabi_dadd+0x2a4>
 8000c38:	0309      	lsls	r1, r1, #12
 8000c3a:	057a      	lsls	r2, r7, #21
 8000c3c:	0b0c      	lsrs	r4, r1, #12
 8000c3e:	0d52      	lsrs	r2, r2, #21
 8000c40:	e764      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c42:	4642      	mov	r2, r8
 8000c44:	464c      	mov	r4, r9
 8000c46:	4314      	orrs	r4, r2
 8000c48:	1e62      	subs	r2, r4, #1
 8000c4a:	4194      	sbcs	r4, r2
 8000c4c:	18e4      	adds	r4, r4, r3
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	4192      	sbcs	r2, r2
 8000c52:	4252      	negs	r2, r2
 8000c54:	4692      	mov	sl, r2
 8000c56:	448a      	add	sl, r1
 8000c58:	4653      	mov	r3, sl
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	d5df      	bpl.n	8000c1e <__aeabi_dadd+0x24a>
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c60:	3601      	adds	r6, #1
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d000      	beq.n	8000c68 <__aeabi_dadd+0x294>
 8000c66:	e0b3      	b.n	8000dd0 <__aeabi_dadd+0x3fc>
 8000c68:	0032      	movs	r2, r6
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e74d      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	001a      	movs	r2, r3
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x2ac>
 8000c7e:	e200      	b.n	8001082 <__aeabi_dadd+0x6ae>
 8000c80:	2480      	movs	r4, #128	; 0x80
 8000c82:	0324      	lsls	r4, r4, #12
 8000c84:	430c      	orrs	r4, r1
 8000c86:	0324      	lsls	r4, r4, #12
 8000c88:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	e73e      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c8e:	0020      	movs	r0, r4
 8000c90:	f000 fd90 	bl	80017b4 <__clzsi2>
 8000c94:	0003      	movs	r3, r0
 8000c96:	3318      	adds	r3, #24
 8000c98:	2b1f      	cmp	r3, #31
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_dadd+0x2ca>
 8000c9c:	e6f7      	b.n	8000a8e <__aeabi_dadd+0xba>
 8000c9e:	0022      	movs	r2, r4
 8000ca0:	3808      	subs	r0, #8
 8000ca2:	4082      	lsls	r2, r0
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	42b3      	cmp	r3, r6
 8000ca8:	db00      	blt.n	8000cac <__aeabi_dadd+0x2d8>
 8000caa:	e6fc      	b.n	8000aa6 <__aeabi_dadd+0xd2>
 8000cac:	1af6      	subs	r6, r6, r3
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <__aeabi_dadd+0x370>)
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4692      	mov	sl, r2
 8000cb4:	e70a      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d02b      	beq.n	8000d12 <__aeabi_dadd+0x33e>
 8000cba:	1b97      	subs	r7, r2, r6
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x2ee>
 8000cc0:	e0b8      	b.n	8000e34 <__aeabi_dadd+0x460>
 8000cc2:	4c1f      	ldr	r4, [pc, #124]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x2f6>
 8000cc8:	e11c      	b.n	8000f04 <__aeabi_dadd+0x530>
 8000cca:	2480      	movs	r4, #128	; 0x80
 8000ccc:	0424      	lsls	r4, r4, #16
 8000cce:	4321      	orrs	r1, r4
 8000cd0:	2f38      	cmp	r7, #56	; 0x38
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0x302>
 8000cd4:	e11e      	b.n	8000f14 <__aeabi_dadd+0x540>
 8000cd6:	2f1f      	cmp	r7, #31
 8000cd8:	dd00      	ble.n	8000cdc <__aeabi_dadd+0x308>
 8000cda:	e19e      	b.n	800101a <__aeabi_dadd+0x646>
 8000cdc:	2620      	movs	r6, #32
 8000cde:	000c      	movs	r4, r1
 8000ce0:	1bf6      	subs	r6, r6, r7
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	40f8      	lsrs	r0, r7
 8000cea:	1e5e      	subs	r6, r3, #1
 8000cec:	41b3      	sbcs	r3, r6
 8000cee:	40f9      	lsrs	r1, r7
 8000cf0:	4304      	orrs	r4, r0
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	4489      	add	r9, r1
 8000cf6:	4444      	add	r4, r8
 8000cf8:	4544      	cmp	r4, r8
 8000cfa:	419b      	sbcs	r3, r3
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	444b      	add	r3, r9
 8000d00:	469a      	mov	sl, r3
 8000d02:	0016      	movs	r6, r2
 8000d04:	e7a8      	b.n	8000c58 <__aeabi_dadd+0x284>
 8000d06:	4642      	mov	r2, r8
 8000d08:	464c      	mov	r4, r9
 8000d0a:	4314      	orrs	r4, r2
 8000d0c:	1e62      	subs	r2, r4, #1
 8000d0e:	4194      	sbcs	r4, r2
 8000d10:	e6a6      	b.n	8000a60 <__aeabi_dadd+0x8c>
 8000d12:	4c0d      	ldr	r4, [pc, #52]	; (8000d48 <__aeabi_dadd+0x374>)
 8000d14:	1c72      	adds	r2, r6, #1
 8000d16:	4222      	tst	r2, r4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x348>
 8000d1a:	e0a8      	b.n	8000e6e <__aeabi_dadd+0x49a>
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x352>
 8000d24:	e10a      	b.n	8000f3c <__aeabi_dadd+0x568>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x358>
 8000d2a:	e15e      	b.n	8000fea <__aeabi_dadd+0x616>
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dadd+0x360>
 8000d32:	e161      	b.n	8000ff8 <__aeabi_dadd+0x624>
 8000d34:	074a      	lsls	r2, r1, #29
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c9      	lsrs	r1, r1, #3
 8000d3c:	e77c      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	000007ff 	.word	0x000007ff
 8000d44:	ff7fffff 	.word	0xff7fffff
 8000d48:	000007fe 	.word	0x000007fe
 8000d4c:	4ccf      	ldr	r4, [pc, #828]	; (800108c <__aeabi_dadd+0x6b8>)
 8000d4e:	42a2      	cmp	r2, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x380>
 8000d52:	e0ce      	b.n	8000ef2 <__aeabi_dadd+0x51e>
 8000d54:	2480      	movs	r4, #128	; 0x80
 8000d56:	0424      	lsls	r4, r4, #16
 8000d58:	4321      	orrs	r1, r4
 8000d5a:	2f38      	cmp	r7, #56	; 0x38
 8000d5c:	dc5b      	bgt.n	8000e16 <__aeabi_dadd+0x442>
 8000d5e:	2f1f      	cmp	r7, #31
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_dadd+0x390>
 8000d62:	e0dc      	b.n	8000f1e <__aeabi_dadd+0x54a>
 8000d64:	2520      	movs	r5, #32
 8000d66:	000c      	movs	r4, r1
 8000d68:	1bed      	subs	r5, r5, r7
 8000d6a:	001e      	movs	r6, r3
 8000d6c:	40ab      	lsls	r3, r5
 8000d6e:	40ac      	lsls	r4, r5
 8000d70:	40fe      	lsrs	r6, r7
 8000d72:	1e5d      	subs	r5, r3, #1
 8000d74:	41ab      	sbcs	r3, r5
 8000d76:	4334      	orrs	r4, r6
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	431c      	orrs	r4, r3
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	1a5b      	subs	r3, r3, r1
 8000d80:	4699      	mov	r9, r3
 8000d82:	e04c      	b.n	8000e1e <__aeabi_dadd+0x44a>
 8000d84:	464a      	mov	r2, r9
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	1a88      	subs	r0, r1, r2
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4192      	sbcs	r2, r2
 8000d8e:	4252      	negs	r2, r2
 8000d90:	4692      	mov	sl, r2
 8000d92:	0002      	movs	r2, r0
 8000d94:	4650      	mov	r0, sl
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d478      	bmi.n	8000e90 <__aeabi_dadd+0x4bc>
 8000d9e:	4653      	mov	r3, sl
 8000da0:	4323      	orrs	r3, r4
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dadd+0x3d2>
 8000da4:	e66a      	b.n	8000a7c <__aeabi_dadd+0xa8>
 8000da6:	2100      	movs	r1, #0
 8000da8:	2500      	movs	r5, #0
 8000daa:	e745      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000dac:	074a      	lsls	r2, r1, #29
 8000dae:	08db      	lsrs	r3, r3, #3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	08c9      	lsrs	r1, r1, #3
 8000db4:	e73d      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000db6:	181c      	adds	r4, r3, r0
 8000db8:	429c      	cmp	r4, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	4449      	add	r1, r9
 8000dbe:	468a      	mov	sl, r1
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	449a      	add	sl, r3
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	d400      	bmi.n	8000dce <__aeabi_dadd+0x3fa>
 8000dcc:	e727      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000dce:	2602      	movs	r6, #2
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	4baf      	ldr	r3, [pc, #700]	; (8001090 <__aeabi_dadd+0x6bc>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	4021      	ands	r1, r4
 8000ddc:	0862      	lsrs	r2, r4, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	07dc      	lsls	r4, r3, #31
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	469a      	mov	sl, r3
 8000de6:	4314      	orrs	r4, r2
 8000de8:	e670      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000dea:	003a      	movs	r2, r7
 8000dec:	464c      	mov	r4, r9
 8000dee:	3a20      	subs	r2, #32
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	46a4      	mov	ip, r4
 8000df4:	2f20      	cmp	r7, #32
 8000df6:	d007      	beq.n	8000e08 <__aeabi_dadd+0x434>
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	4648      	mov	r0, r9
 8000dfc:	1bd2      	subs	r2, r2, r7
 8000dfe:	4090      	lsls	r0, r2
 8000e00:	0002      	movs	r2, r0
 8000e02:	4640      	mov	r0, r8
 8000e04:	4310      	orrs	r0, r2
 8000e06:	4680      	mov	r8, r0
 8000e08:	4640      	mov	r0, r8
 8000e0a:	1e42      	subs	r2, r0, #1
 8000e0c:	4190      	sbcs	r0, r2
 8000e0e:	4662      	mov	r2, ip
 8000e10:	0004      	movs	r4, r0
 8000e12:	4314      	orrs	r4, r2
 8000e14:	e624      	b.n	8000a60 <__aeabi_dadd+0x8c>
 8000e16:	4319      	orrs	r1, r3
 8000e18:	000c      	movs	r4, r1
 8000e1a:	1e63      	subs	r3, r4, #1
 8000e1c:	419c      	sbcs	r4, r3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	1b1c      	subs	r4, r3, r4
 8000e22:	45a0      	cmp	r8, r4
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	4649      	mov	r1, r9
 8000e28:	425b      	negs	r3, r3
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	469a      	mov	sl, r3
 8000e2e:	4665      	mov	r5, ip
 8000e30:	0016      	movs	r6, r2
 8000e32:	e61b      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000e34:	000c      	movs	r4, r1
 8000e36:	431c      	orrs	r4, r3
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x468>
 8000e3a:	e0c7      	b.n	8000fcc <__aeabi_dadd+0x5f8>
 8000e3c:	1e7c      	subs	r4, r7, #1
 8000e3e:	2f01      	cmp	r7, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x470>
 8000e42:	e0f9      	b.n	8001038 <__aeabi_dadd+0x664>
 8000e44:	4e91      	ldr	r6, [pc, #580]	; (800108c <__aeabi_dadd+0x6b8>)
 8000e46:	42b7      	cmp	r7, r6
 8000e48:	d05c      	beq.n	8000f04 <__aeabi_dadd+0x530>
 8000e4a:	0027      	movs	r7, r4
 8000e4c:	e740      	b.n	8000cd0 <__aeabi_dadd+0x2fc>
 8000e4e:	2220      	movs	r2, #32
 8000e50:	464c      	mov	r4, r9
 8000e52:	4640      	mov	r0, r8
 8000e54:	1bd2      	subs	r2, r2, r7
 8000e56:	4094      	lsls	r4, r2
 8000e58:	40f8      	lsrs	r0, r7
 8000e5a:	4304      	orrs	r4, r0
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4090      	lsls	r0, r2
 8000e60:	1e42      	subs	r2, r0, #1
 8000e62:	4190      	sbcs	r0, r2
 8000e64:	464a      	mov	r2, r9
 8000e66:	40fa      	lsrs	r2, r7
 8000e68:	4304      	orrs	r4, r0
 8000e6a:	1889      	adds	r1, r1, r2
 8000e6c:	e6ee      	b.n	8000c4c <__aeabi_dadd+0x278>
 8000e6e:	4c87      	ldr	r4, [pc, #540]	; (800108c <__aeabi_dadd+0x6b8>)
 8000e70:	42a2      	cmp	r2, r4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x4a2>
 8000e74:	e6f9      	b.n	8000c6a <__aeabi_dadd+0x296>
 8000e76:	1818      	adds	r0, r3, r0
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	4449      	add	r1, r9
 8000e7e:	425b      	negs	r3, r3
 8000e80:	18cb      	adds	r3, r1, r3
 8000e82:	07dc      	lsls	r4, r3, #31
 8000e84:	0840      	lsrs	r0, r0, #1
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	469a      	mov	sl, r3
 8000e8a:	0016      	movs	r6, r2
 8000e8c:	4304      	orrs	r4, r0
 8000e8e:	e6c6      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000e90:	4642      	mov	r2, r8
 8000e92:	1ad4      	subs	r4, r2, r3
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	4180      	sbcs	r0, r0
 8000e98:	464b      	mov	r3, r9
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	1a0b      	subs	r3, r1, r0
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	4665      	mov	r5, ip
 8000ea4:	e5ea      	b.n	8000a7c <__aeabi_dadd+0xa8>
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	075b      	lsls	r3, r3, #29
 8000eae:	4665      	mov	r5, ip
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	08d1      	lsrs	r1, r2, #3
 8000eb4:	e6bd      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x4e8>
 8000eba:	e08e      	b.n	8000fda <__aeabi_dadd+0x606>
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	d117      	bne.n	8000ef2 <__aeabi_dadd+0x51e>
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	0309      	lsls	r1, r1, #12
 8000ec8:	e6da      	b.n	8000c80 <__aeabi_dadd+0x2ac>
 8000eca:	074a      	lsls	r2, r1, #29
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	08c9      	lsrs	r1, r1, #3
 8000ed2:	e6d1      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000ed4:	1a1c      	subs	r4, r3, r0
 8000ed6:	464a      	mov	r2, r9
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	1a89      	subs	r1, r1, r2
 8000ede:	425b      	negs	r3, r3
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2601      	movs	r6, #1
 8000ee6:	e5c1      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000ee8:	074a      	lsls	r2, r1, #29
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	08c9      	lsrs	r1, r1, #3
 8000ef0:	e69f      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	08d8      	lsrs	r0, r3, #3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	464a      	mov	r2, r9
 8000efa:	075b      	lsls	r3, r3, #29
 8000efc:	4665      	mov	r5, ip
 8000efe:	4303      	orrs	r3, r0
 8000f00:	08d1      	lsrs	r1, r2, #3
 8000f02:	e6b9      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f04:	4643      	mov	r3, r8
 8000f06:	08d8      	lsrs	r0, r3, #3
 8000f08:	464b      	mov	r3, r9
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	075b      	lsls	r3, r3, #29
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	08d1      	lsrs	r1, r2, #3
 8000f12:	e6b1      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f14:	4319      	orrs	r1, r3
 8000f16:	000c      	movs	r4, r1
 8000f18:	1e63      	subs	r3, r4, #1
 8000f1a:	419c      	sbcs	r4, r3
 8000f1c:	e6eb      	b.n	8000cf6 <__aeabi_dadd+0x322>
 8000f1e:	003c      	movs	r4, r7
 8000f20:	000d      	movs	r5, r1
 8000f22:	3c20      	subs	r4, #32
 8000f24:	40e5      	lsrs	r5, r4
 8000f26:	2f20      	cmp	r7, #32
 8000f28:	d003      	beq.n	8000f32 <__aeabi_dadd+0x55e>
 8000f2a:	2440      	movs	r4, #64	; 0x40
 8000f2c:	1be4      	subs	r4, r4, r7
 8000f2e:	40a1      	lsls	r1, r4
 8000f30:	430b      	orrs	r3, r1
 8000f32:	001c      	movs	r4, r3
 8000f34:	1e63      	subs	r3, r4, #1
 8000f36:	419c      	sbcs	r4, r3
 8000f38:	432c      	orrs	r4, r5
 8000f3a:	e770      	b.n	8000e1e <__aeabi_dadd+0x44a>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d0e1      	beq.n	8000f04 <__aeabi_dadd+0x530>
 8000f40:	464a      	mov	r2, r9
 8000f42:	4302      	orrs	r2, r0
 8000f44:	d0c1      	beq.n	8000eca <__aeabi_dadd+0x4f6>
 8000f46:	074a      	lsls	r2, r1, #29
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	08c9      	lsrs	r1, r1, #3
 8000f50:	0312      	lsls	r2, r2, #12
 8000f52:	4211      	tst	r1, r2
 8000f54:	d008      	beq.n	8000f68 <__aeabi_dadd+0x594>
 8000f56:	4648      	mov	r0, r9
 8000f58:	08c4      	lsrs	r4, r0, #3
 8000f5a:	4214      	tst	r4, r2
 8000f5c:	d104      	bne.n	8000f68 <__aeabi_dadd+0x594>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0021      	movs	r1, r4
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	0742      	lsls	r2, r0, #29
 8000f66:	4313      	orrs	r3, r2
 8000f68:	0f5a      	lsrs	r2, r3, #29
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	0752      	lsls	r2, r2, #29
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	e681      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f74:	464b      	mov	r3, r9
 8000f76:	4303      	orrs	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x5a8>
 8000f7a:	e714      	b.n	8000da6 <__aeabi_dadd+0x3d2>
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	464a      	mov	r2, r9
 8000f80:	08c0      	lsrs	r0, r0, #3
 8000f82:	075b      	lsls	r3, r3, #29
 8000f84:	4665      	mov	r5, ip
 8000f86:	4303      	orrs	r3, r0
 8000f88:	08d1      	lsrs	r1, r2, #3
 8000f8a:	e655      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000f8c:	1ac4      	subs	r4, r0, r3
 8000f8e:	45a0      	cmp	r8, r4
 8000f90:	4180      	sbcs	r0, r0
 8000f92:	464b      	mov	r3, r9
 8000f94:	4240      	negs	r0, r0
 8000f96:	1a59      	subs	r1, r3, r1
 8000f98:	1a0b      	subs	r3, r1, r0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	2601      	movs	r6, #1
 8000fa0:	e564      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000fa2:	1a1c      	subs	r4, r3, r0
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	4180      	sbcs	r0, r0
 8000faa:	1a8a      	subs	r2, r1, r2
 8000fac:	4240      	negs	r0, r0
 8000fae:	1a12      	subs	r2, r2, r0
 8000fb0:	4692      	mov	sl, r2
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	d549      	bpl.n	800104a <__aeabi_dadd+0x676>
 8000fb6:	4642      	mov	r2, r8
 8000fb8:	1ad4      	subs	r4, r2, r3
 8000fba:	45a0      	cmp	r8, r4
 8000fbc:	4180      	sbcs	r0, r0
 8000fbe:	464b      	mov	r3, r9
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	1a59      	subs	r1, r3, r1
 8000fc4:	1a0b      	subs	r3, r1, r0
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	4665      	mov	r5, ip
 8000fca:	e57f      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000fcc:	464b      	mov	r3, r9
 8000fce:	464a      	mov	r2, r9
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	075b      	lsls	r3, r3, #29
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	08d1      	lsrs	r1, r2, #3
 8000fd8:	e62b      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000fda:	464a      	mov	r2, r9
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	4302      	orrs	r2, r0
 8000fe0:	d138      	bne.n	8001054 <__aeabi_dadd+0x680>
 8000fe2:	074a      	lsls	r2, r1, #29
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	08c9      	lsrs	r1, r1, #3
 8000fe8:	e646      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000fea:	464b      	mov	r3, r9
 8000fec:	464a      	mov	r2, r9
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	075b      	lsls	r3, r3, #29
 8000ff2:	4303      	orrs	r3, r0
 8000ff4:	08d1      	lsrs	r1, r2, #3
 8000ff6:	e61f      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000ff8:	181c      	adds	r4, r3, r0
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	4449      	add	r1, r9
 8001000:	468a      	mov	sl, r1
 8001002:	425b      	negs	r3, r3
 8001004:	449a      	add	sl, r3
 8001006:	4653      	mov	r3, sl
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	d400      	bmi.n	800100e <__aeabi_dadd+0x63a>
 800100c:	e607      	b.n	8000c1e <__aeabi_dadd+0x24a>
 800100e:	4652      	mov	r2, sl
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <__aeabi_dadd+0x6bc>)
 8001012:	2601      	movs	r6, #1
 8001014:	401a      	ands	r2, r3
 8001016:	4692      	mov	sl, r2
 8001018:	e601      	b.n	8000c1e <__aeabi_dadd+0x24a>
 800101a:	003c      	movs	r4, r7
 800101c:	000e      	movs	r6, r1
 800101e:	3c20      	subs	r4, #32
 8001020:	40e6      	lsrs	r6, r4
 8001022:	2f20      	cmp	r7, #32
 8001024:	d003      	beq.n	800102e <__aeabi_dadd+0x65a>
 8001026:	2440      	movs	r4, #64	; 0x40
 8001028:	1be4      	subs	r4, r4, r7
 800102a:	40a1      	lsls	r1, r4
 800102c:	430b      	orrs	r3, r1
 800102e:	001c      	movs	r4, r3
 8001030:	1e63      	subs	r3, r4, #1
 8001032:	419c      	sbcs	r4, r3
 8001034:	4334      	orrs	r4, r6
 8001036:	e65e      	b.n	8000cf6 <__aeabi_dadd+0x322>
 8001038:	4443      	add	r3, r8
 800103a:	4283      	cmp	r3, r0
 800103c:	4180      	sbcs	r0, r0
 800103e:	4449      	add	r1, r9
 8001040:	468a      	mov	sl, r1
 8001042:	4240      	negs	r0, r0
 8001044:	001c      	movs	r4, r3
 8001046:	4482      	add	sl, r0
 8001048:	e6bc      	b.n	8000dc4 <__aeabi_dadd+0x3f0>
 800104a:	4653      	mov	r3, sl
 800104c:	4323      	orrs	r3, r4
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x67e>
 8001050:	e6a9      	b.n	8000da6 <__aeabi_dadd+0x3d2>
 8001052:	e5e4      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8001054:	074a      	lsls	r2, r1, #29
 8001056:	4313      	orrs	r3, r2
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	0312      	lsls	r2, r2, #12
 800105e:	4211      	tst	r1, r2
 8001060:	d009      	beq.n	8001076 <__aeabi_dadd+0x6a2>
 8001062:	4648      	mov	r0, r9
 8001064:	08c4      	lsrs	r4, r0, #3
 8001066:	4214      	tst	r4, r2
 8001068:	d105      	bne.n	8001076 <__aeabi_dadd+0x6a2>
 800106a:	4643      	mov	r3, r8
 800106c:	4665      	mov	r5, ip
 800106e:	0021      	movs	r1, r4
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	0742      	lsls	r2, r0, #29
 8001074:	4313      	orrs	r3, r2
 8001076:	0f5a      	lsrs	r2, r3, #29
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	0752      	lsls	r2, r2, #29
 800107e:	4313      	orrs	r3, r2
 8001080:	e5fa      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8001082:	2300      	movs	r3, #0
 8001084:	4a01      	ldr	r2, [pc, #4]	; (800108c <__aeabi_dadd+0x6b8>)
 8001086:	001c      	movs	r4, r3
 8001088:	e540      	b.n	8000b0c <__aeabi_dadd+0x138>
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	000007ff 	.word	0x000007ff
 8001090:	ff7fffff 	.word	0xff7fffff

08001094 <__aeabi_dmul>:
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	4645      	mov	r5, r8
 8001098:	46de      	mov	lr, fp
 800109a:	4657      	mov	r7, sl
 800109c:	464e      	mov	r6, r9
 800109e:	b5e0      	push	{r5, r6, r7, lr}
 80010a0:	001f      	movs	r7, r3
 80010a2:	030b      	lsls	r3, r1, #12
 80010a4:	0b1b      	lsrs	r3, r3, #12
 80010a6:	469b      	mov	fp, r3
 80010a8:	004d      	lsls	r5, r1, #1
 80010aa:	0fcb      	lsrs	r3, r1, #31
 80010ac:	0004      	movs	r4, r0
 80010ae:	4691      	mov	r9, r2
 80010b0:	4698      	mov	r8, r3
 80010b2:	b087      	sub	sp, #28
 80010b4:	0d6d      	lsrs	r5, r5, #21
 80010b6:	d100      	bne.n	80010ba <__aeabi_dmul+0x26>
 80010b8:	e1cd      	b.n	8001456 <__aeabi_dmul+0x3c2>
 80010ba:	4bce      	ldr	r3, [pc, #824]	; (80013f4 <__aeabi_dmul+0x360>)
 80010bc:	429d      	cmp	r5, r3
 80010be:	d100      	bne.n	80010c2 <__aeabi_dmul+0x2e>
 80010c0:	e1e9      	b.n	8001496 <__aeabi_dmul+0x402>
 80010c2:	465a      	mov	r2, fp
 80010c4:	0f43      	lsrs	r3, r0, #29
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	0412      	lsls	r2, r2, #16
 80010ce:	431a      	orrs	r2, r3
 80010d0:	00c3      	lsls	r3, r0, #3
 80010d2:	469a      	mov	sl, r3
 80010d4:	4bc8      	ldr	r3, [pc, #800]	; (80013f8 <__aeabi_dmul+0x364>)
 80010d6:	4693      	mov	fp, r2
 80010d8:	469c      	mov	ip, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	2600      	movs	r6, #0
 80010de:	4465      	add	r5, ip
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	033c      	lsls	r4, r7, #12
 80010e4:	007b      	lsls	r3, r7, #1
 80010e6:	4648      	mov	r0, r9
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	0d5b      	lsrs	r3, r3, #21
 80010ec:	0fff      	lsrs	r7, r7, #31
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dmul+0x60>
 80010f2:	e189      	b.n	8001408 <__aeabi_dmul+0x374>
 80010f4:	4abf      	ldr	r2, [pc, #764]	; (80013f4 <__aeabi_dmul+0x360>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <__aeabi_dmul+0x9a>
 80010fa:	0f42      	lsrs	r2, r0, #29
 80010fc:	00e4      	lsls	r4, r4, #3
 80010fe:	4322      	orrs	r2, r4
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	0424      	lsls	r4, r4, #16
 8001104:	4314      	orrs	r4, r2
 8001106:	4abc      	ldr	r2, [pc, #752]	; (80013f8 <__aeabi_dmul+0x364>)
 8001108:	2100      	movs	r1, #0
 800110a:	4694      	mov	ip, r2
 800110c:	4642      	mov	r2, r8
 800110e:	4463      	add	r3, ip
 8001110:	195b      	adds	r3, r3, r5
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	9b01      	ldr	r3, [sp, #4]
 8001116:	407a      	eors	r2, r7
 8001118:	3301      	adds	r3, #1
 800111a:	00c0      	lsls	r0, r0, #3
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2e0a      	cmp	r6, #10
 8001122:	dd1c      	ble.n	800115e <__aeabi_dmul+0xca>
 8001124:	003a      	movs	r2, r7
 8001126:	2e0b      	cmp	r6, #11
 8001128:	d05e      	beq.n	80011e8 <__aeabi_dmul+0x154>
 800112a:	4647      	mov	r7, r8
 800112c:	e056      	b.n	80011dc <__aeabi_dmul+0x148>
 800112e:	4649      	mov	r1, r9
 8001130:	4bb0      	ldr	r3, [pc, #704]	; (80013f4 <__aeabi_dmul+0x360>)
 8001132:	4321      	orrs	r1, r4
 8001134:	18eb      	adds	r3, r5, r3
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2900      	cmp	r1, #0
 800113a:	d12a      	bne.n	8001192 <__aeabi_dmul+0xfe>
 800113c:	2080      	movs	r0, #128	; 0x80
 800113e:	2202      	movs	r2, #2
 8001140:	0100      	lsls	r0, r0, #4
 8001142:	002b      	movs	r3, r5
 8001144:	4684      	mov	ip, r0
 8001146:	4316      	orrs	r6, r2
 8001148:	4642      	mov	r2, r8
 800114a:	4463      	add	r3, ip
 800114c:	407a      	eors	r2, r7
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2e0a      	cmp	r6, #10
 8001154:	dd00      	ble.n	8001158 <__aeabi_dmul+0xc4>
 8001156:	e231      	b.n	80015bc <__aeabi_dmul+0x528>
 8001158:	2000      	movs	r0, #0
 800115a:	2400      	movs	r4, #0
 800115c:	2102      	movs	r1, #2
 800115e:	2e02      	cmp	r6, #2
 8001160:	dc26      	bgt.n	80011b0 <__aeabi_dmul+0x11c>
 8001162:	3e01      	subs	r6, #1
 8001164:	2e01      	cmp	r6, #1
 8001166:	d852      	bhi.n	800120e <__aeabi_dmul+0x17a>
 8001168:	2902      	cmp	r1, #2
 800116a:	d04c      	beq.n	8001206 <__aeabi_dmul+0x172>
 800116c:	2901      	cmp	r1, #1
 800116e:	d000      	beq.n	8001172 <__aeabi_dmul+0xde>
 8001170:	e118      	b.n	80013a4 <__aeabi_dmul+0x310>
 8001172:	2300      	movs	r3, #0
 8001174:	2400      	movs	r4, #0
 8001176:	2500      	movs	r5, #0
 8001178:	051b      	lsls	r3, r3, #20
 800117a:	4323      	orrs	r3, r4
 800117c:	07d2      	lsls	r2, r2, #31
 800117e:	4313      	orrs	r3, r2
 8001180:	0028      	movs	r0, r5
 8001182:	0019      	movs	r1, r3
 8001184:	b007      	add	sp, #28
 8001186:	bcf0      	pop	{r4, r5, r6, r7}
 8001188:	46bb      	mov	fp, r7
 800118a:	46b2      	mov	sl, r6
 800118c:	46a9      	mov	r9, r5
 800118e:	46a0      	mov	r8, r4
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	2203      	movs	r2, #3
 8001196:	0109      	lsls	r1, r1, #4
 8001198:	002b      	movs	r3, r5
 800119a:	468c      	mov	ip, r1
 800119c:	4316      	orrs	r6, r2
 800119e:	4642      	mov	r2, r8
 80011a0:	4463      	add	r3, ip
 80011a2:	407a      	eors	r2, r7
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2e0a      	cmp	r6, #10
 80011aa:	dd00      	ble.n	80011ae <__aeabi_dmul+0x11a>
 80011ac:	e228      	b.n	8001600 <__aeabi_dmul+0x56c>
 80011ae:	2103      	movs	r1, #3
 80011b0:	2501      	movs	r5, #1
 80011b2:	40b5      	lsls	r5, r6
 80011b4:	46ac      	mov	ip, r5
 80011b6:	26a6      	movs	r6, #166	; 0xa6
 80011b8:	4663      	mov	r3, ip
 80011ba:	00f6      	lsls	r6, r6, #3
 80011bc:	4035      	ands	r5, r6
 80011be:	4233      	tst	r3, r6
 80011c0:	d10b      	bne.n	80011da <__aeabi_dmul+0x146>
 80011c2:	2690      	movs	r6, #144	; 0x90
 80011c4:	00b6      	lsls	r6, r6, #2
 80011c6:	4233      	tst	r3, r6
 80011c8:	d118      	bne.n	80011fc <__aeabi_dmul+0x168>
 80011ca:	3eb9      	subs	r6, #185	; 0xb9
 80011cc:	3eff      	subs	r6, #255	; 0xff
 80011ce:	421e      	tst	r6, r3
 80011d0:	d01d      	beq.n	800120e <__aeabi_dmul+0x17a>
 80011d2:	46a3      	mov	fp, r4
 80011d4:	4682      	mov	sl, r0
 80011d6:	9100      	str	r1, [sp, #0]
 80011d8:	e000      	b.n	80011dc <__aeabi_dmul+0x148>
 80011da:	0017      	movs	r7, r2
 80011dc:	9900      	ldr	r1, [sp, #0]
 80011de:	003a      	movs	r2, r7
 80011e0:	2902      	cmp	r1, #2
 80011e2:	d010      	beq.n	8001206 <__aeabi_dmul+0x172>
 80011e4:	465c      	mov	r4, fp
 80011e6:	4650      	mov	r0, sl
 80011e8:	2903      	cmp	r1, #3
 80011ea:	d1bf      	bne.n	800116c <__aeabi_dmul+0xd8>
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	031b      	lsls	r3, r3, #12
 80011f0:	431c      	orrs	r4, r3
 80011f2:	0324      	lsls	r4, r4, #12
 80011f4:	0005      	movs	r5, r0
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <__aeabi_dmul+0x360>)
 80011f8:	0b24      	lsrs	r4, r4, #12
 80011fa:	e7bd      	b.n	8001178 <__aeabi_dmul+0xe4>
 80011fc:	2480      	movs	r4, #128	; 0x80
 80011fe:	2200      	movs	r2, #0
 8001200:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <__aeabi_dmul+0x360>)
 8001202:	0324      	lsls	r4, r4, #12
 8001204:	e7b8      	b.n	8001178 <__aeabi_dmul+0xe4>
 8001206:	2400      	movs	r4, #0
 8001208:	2500      	movs	r5, #0
 800120a:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <__aeabi_dmul+0x360>)
 800120c:	e7b4      	b.n	8001178 <__aeabi_dmul+0xe4>
 800120e:	4653      	mov	r3, sl
 8001210:	041e      	lsls	r6, r3, #16
 8001212:	0c36      	lsrs	r6, r6, #16
 8001214:	0c1f      	lsrs	r7, r3, #16
 8001216:	0033      	movs	r3, r6
 8001218:	0c01      	lsrs	r1, r0, #16
 800121a:	0400      	lsls	r0, r0, #16
 800121c:	0c00      	lsrs	r0, r0, #16
 800121e:	4343      	muls	r3, r0
 8001220:	4698      	mov	r8, r3
 8001222:	0003      	movs	r3, r0
 8001224:	437b      	muls	r3, r7
 8001226:	4699      	mov	r9, r3
 8001228:	0033      	movs	r3, r6
 800122a:	434b      	muls	r3, r1
 800122c:	469c      	mov	ip, r3
 800122e:	4643      	mov	r3, r8
 8001230:	000d      	movs	r5, r1
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	469a      	mov	sl, r3
 8001236:	437d      	muls	r5, r7
 8001238:	44cc      	add	ip, r9
 800123a:	44d4      	add	ip, sl
 800123c:	9500      	str	r5, [sp, #0]
 800123e:	45e1      	cmp	r9, ip
 8001240:	d904      	bls.n	800124c <__aeabi_dmul+0x1b8>
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	4699      	mov	r9, r3
 8001248:	444d      	add	r5, r9
 800124a:	9500      	str	r5, [sp, #0]
 800124c:	4663      	mov	r3, ip
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	001d      	movs	r5, r3
 8001252:	4663      	mov	r3, ip
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	469c      	mov	ip, r3
 8001258:	4643      	mov	r3, r8
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	4698      	mov	r8, r3
 8001260:	4663      	mov	r3, ip
 8001262:	4443      	add	r3, r8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	0c23      	lsrs	r3, r4, #16
 8001268:	4698      	mov	r8, r3
 800126a:	0033      	movs	r3, r6
 800126c:	0424      	lsls	r4, r4, #16
 800126e:	0c24      	lsrs	r4, r4, #16
 8001270:	4363      	muls	r3, r4
 8001272:	469c      	mov	ip, r3
 8001274:	0023      	movs	r3, r4
 8001276:	437b      	muls	r3, r7
 8001278:	4699      	mov	r9, r3
 800127a:	4643      	mov	r3, r8
 800127c:	435e      	muls	r6, r3
 800127e:	435f      	muls	r7, r3
 8001280:	444e      	add	r6, r9
 8001282:	4663      	mov	r3, ip
 8001284:	46b2      	mov	sl, r6
 8001286:	0c1e      	lsrs	r6, r3, #16
 8001288:	4456      	add	r6, sl
 800128a:	45b1      	cmp	r9, r6
 800128c:	d903      	bls.n	8001296 <__aeabi_dmul+0x202>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	4699      	mov	r9, r3
 8001294:	444f      	add	r7, r9
 8001296:	0c33      	lsrs	r3, r6, #16
 8001298:	4699      	mov	r9, r3
 800129a:	003b      	movs	r3, r7
 800129c:	444b      	add	r3, r9
 800129e:	9305      	str	r3, [sp, #20]
 80012a0:	4663      	mov	r3, ip
 80012a2:	46ac      	mov	ip, r5
 80012a4:	041f      	lsls	r7, r3, #16
 80012a6:	0c3f      	lsrs	r7, r7, #16
 80012a8:	0436      	lsls	r6, r6, #16
 80012aa:	19f6      	adds	r6, r6, r7
 80012ac:	44b4      	add	ip, r6
 80012ae:	4663      	mov	r3, ip
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	465b      	mov	r3, fp
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	469c      	mov	ip, r3
 80012b8:	465b      	mov	r3, fp
 80012ba:	041f      	lsls	r7, r3, #16
 80012bc:	0c3f      	lsrs	r7, r7, #16
 80012be:	003b      	movs	r3, r7
 80012c0:	4343      	muls	r3, r0
 80012c2:	4699      	mov	r9, r3
 80012c4:	4663      	mov	r3, ip
 80012c6:	4343      	muls	r3, r0
 80012c8:	469a      	mov	sl, r3
 80012ca:	464b      	mov	r3, r9
 80012cc:	4660      	mov	r0, ip
 80012ce:	0c1b      	lsrs	r3, r3, #16
 80012d0:	469b      	mov	fp, r3
 80012d2:	4348      	muls	r0, r1
 80012d4:	4379      	muls	r1, r7
 80012d6:	4451      	add	r1, sl
 80012d8:	4459      	add	r1, fp
 80012da:	458a      	cmp	sl, r1
 80012dc:	d903      	bls.n	80012e6 <__aeabi_dmul+0x252>
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	469a      	mov	sl, r3
 80012e4:	4450      	add	r0, sl
 80012e6:	0c0b      	lsrs	r3, r1, #16
 80012e8:	469a      	mov	sl, r3
 80012ea:	464b      	mov	r3, r9
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	4699      	mov	r9, r3
 80012f2:	003b      	movs	r3, r7
 80012f4:	4363      	muls	r3, r4
 80012f6:	0409      	lsls	r1, r1, #16
 80012f8:	4645      	mov	r5, r8
 80012fa:	4449      	add	r1, r9
 80012fc:	4699      	mov	r9, r3
 80012fe:	4663      	mov	r3, ip
 8001300:	435c      	muls	r4, r3
 8001302:	436b      	muls	r3, r5
 8001304:	469c      	mov	ip, r3
 8001306:	464b      	mov	r3, r9
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	4698      	mov	r8, r3
 800130c:	436f      	muls	r7, r5
 800130e:	193f      	adds	r7, r7, r4
 8001310:	4447      	add	r7, r8
 8001312:	4450      	add	r0, sl
 8001314:	42bc      	cmp	r4, r7
 8001316:	d903      	bls.n	8001320 <__aeabi_dmul+0x28c>
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	4698      	mov	r8, r3
 800131e:	44c4      	add	ip, r8
 8001320:	9b04      	ldr	r3, [sp, #16]
 8001322:	9d00      	ldr	r5, [sp, #0]
 8001324:	4698      	mov	r8, r3
 8001326:	4445      	add	r5, r8
 8001328:	42b5      	cmp	r5, r6
 800132a:	41b6      	sbcs	r6, r6
 800132c:	4273      	negs	r3, r6
 800132e:	4698      	mov	r8, r3
 8001330:	464b      	mov	r3, r9
 8001332:	041e      	lsls	r6, r3, #16
 8001334:	9b05      	ldr	r3, [sp, #20]
 8001336:	043c      	lsls	r4, r7, #16
 8001338:	4699      	mov	r9, r3
 800133a:	0c36      	lsrs	r6, r6, #16
 800133c:	19a4      	adds	r4, r4, r6
 800133e:	444c      	add	r4, r9
 8001340:	46a1      	mov	r9, r4
 8001342:	4683      	mov	fp, r0
 8001344:	186e      	adds	r6, r5, r1
 8001346:	44c1      	add	r9, r8
 8001348:	428e      	cmp	r6, r1
 800134a:	4189      	sbcs	r1, r1
 800134c:	44cb      	add	fp, r9
 800134e:	465d      	mov	r5, fp
 8001350:	4249      	negs	r1, r1
 8001352:	186d      	adds	r5, r5, r1
 8001354:	429c      	cmp	r4, r3
 8001356:	41a4      	sbcs	r4, r4
 8001358:	45c1      	cmp	r9, r8
 800135a:	419b      	sbcs	r3, r3
 800135c:	4583      	cmp	fp, r0
 800135e:	4180      	sbcs	r0, r0
 8001360:	428d      	cmp	r5, r1
 8001362:	4189      	sbcs	r1, r1
 8001364:	425b      	negs	r3, r3
 8001366:	4264      	negs	r4, r4
 8001368:	431c      	orrs	r4, r3
 800136a:	4240      	negs	r0, r0
 800136c:	9b03      	ldr	r3, [sp, #12]
 800136e:	4249      	negs	r1, r1
 8001370:	4301      	orrs	r1, r0
 8001372:	0270      	lsls	r0, r6, #9
 8001374:	0c3f      	lsrs	r7, r7, #16
 8001376:	4318      	orrs	r0, r3
 8001378:	19e4      	adds	r4, r4, r7
 800137a:	1e47      	subs	r7, r0, #1
 800137c:	41b8      	sbcs	r0, r7
 800137e:	1864      	adds	r4, r4, r1
 8001380:	4464      	add	r4, ip
 8001382:	0df6      	lsrs	r6, r6, #23
 8001384:	0261      	lsls	r1, r4, #9
 8001386:	4330      	orrs	r0, r6
 8001388:	0dec      	lsrs	r4, r5, #23
 800138a:	026e      	lsls	r6, r5, #9
 800138c:	430c      	orrs	r4, r1
 800138e:	4330      	orrs	r0, r6
 8001390:	01c9      	lsls	r1, r1, #7
 8001392:	d400      	bmi.n	8001396 <__aeabi_dmul+0x302>
 8001394:	e0f1      	b.n	800157a <__aeabi_dmul+0x4e6>
 8001396:	2101      	movs	r1, #1
 8001398:	0843      	lsrs	r3, r0, #1
 800139a:	4001      	ands	r1, r0
 800139c:	430b      	orrs	r3, r1
 800139e:	07e0      	lsls	r0, r4, #31
 80013a0:	4318      	orrs	r0, r3
 80013a2:	0864      	lsrs	r4, r4, #1
 80013a4:	4915      	ldr	r1, [pc, #84]	; (80013fc <__aeabi_dmul+0x368>)
 80013a6:	9b02      	ldr	r3, [sp, #8]
 80013a8:	468c      	mov	ip, r1
 80013aa:	4463      	add	r3, ip
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dmul+0x31e>
 80013b0:	e097      	b.n	80014e2 <__aeabi_dmul+0x44e>
 80013b2:	0741      	lsls	r1, r0, #29
 80013b4:	d009      	beq.n	80013ca <__aeabi_dmul+0x336>
 80013b6:	210f      	movs	r1, #15
 80013b8:	4001      	ands	r1, r0
 80013ba:	2904      	cmp	r1, #4
 80013bc:	d005      	beq.n	80013ca <__aeabi_dmul+0x336>
 80013be:	1d01      	adds	r1, r0, #4
 80013c0:	4281      	cmp	r1, r0
 80013c2:	4180      	sbcs	r0, r0
 80013c4:	4240      	negs	r0, r0
 80013c6:	1824      	adds	r4, r4, r0
 80013c8:	0008      	movs	r0, r1
 80013ca:	01e1      	lsls	r1, r4, #7
 80013cc:	d506      	bpl.n	80013dc <__aeabi_dmul+0x348>
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	00c9      	lsls	r1, r1, #3
 80013d2:	468c      	mov	ip, r1
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <__aeabi_dmul+0x36c>)
 80013d6:	401c      	ands	r4, r3
 80013d8:	9b02      	ldr	r3, [sp, #8]
 80013da:	4463      	add	r3, ip
 80013dc:	4909      	ldr	r1, [pc, #36]	; (8001404 <__aeabi_dmul+0x370>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dmul+0x350>
 80013e2:	e710      	b.n	8001206 <__aeabi_dmul+0x172>
 80013e4:	0761      	lsls	r1, r4, #29
 80013e6:	08c5      	lsrs	r5, r0, #3
 80013e8:	0264      	lsls	r4, r4, #9
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	430d      	orrs	r5, r1
 80013ee:	0b24      	lsrs	r4, r4, #12
 80013f0:	0d5b      	lsrs	r3, r3, #21
 80013f2:	e6c1      	b.n	8001178 <__aeabi_dmul+0xe4>
 80013f4:	000007ff 	.word	0x000007ff
 80013f8:	fffffc01 	.word	0xfffffc01
 80013fc:	000003ff 	.word	0x000003ff
 8001400:	feffffff 	.word	0xfeffffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	464b      	mov	r3, r9
 800140a:	4323      	orrs	r3, r4
 800140c:	d059      	beq.n	80014c2 <__aeabi_dmul+0x42e>
 800140e:	2c00      	cmp	r4, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_dmul+0x380>
 8001412:	e0a3      	b.n	800155c <__aeabi_dmul+0x4c8>
 8001414:	0020      	movs	r0, r4
 8001416:	f000 f9cd 	bl	80017b4 <__clzsi2>
 800141a:	0001      	movs	r1, r0
 800141c:	0003      	movs	r3, r0
 800141e:	390b      	subs	r1, #11
 8001420:	221d      	movs	r2, #29
 8001422:	1a52      	subs	r2, r2, r1
 8001424:	4649      	mov	r1, r9
 8001426:	0018      	movs	r0, r3
 8001428:	40d1      	lsrs	r1, r2
 800142a:	464a      	mov	r2, r9
 800142c:	3808      	subs	r0, #8
 800142e:	4082      	lsls	r2, r0
 8001430:	4084      	lsls	r4, r0
 8001432:	0010      	movs	r0, r2
 8001434:	430c      	orrs	r4, r1
 8001436:	4a74      	ldr	r2, [pc, #464]	; (8001608 <__aeabi_dmul+0x574>)
 8001438:	1aeb      	subs	r3, r5, r3
 800143a:	4694      	mov	ip, r2
 800143c:	4642      	mov	r2, r8
 800143e:	4463      	add	r3, ip
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	407a      	eors	r2, r7
 8001446:	3301      	adds	r3, #1
 8001448:	2100      	movs	r1, #0
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2e0a      	cmp	r6, #10
 8001450:	dd00      	ble.n	8001454 <__aeabi_dmul+0x3c0>
 8001452:	e667      	b.n	8001124 <__aeabi_dmul+0x90>
 8001454:	e683      	b.n	800115e <__aeabi_dmul+0xca>
 8001456:	465b      	mov	r3, fp
 8001458:	4303      	orrs	r3, r0
 800145a:	469a      	mov	sl, r3
 800145c:	d02a      	beq.n	80014b4 <__aeabi_dmul+0x420>
 800145e:	465b      	mov	r3, fp
 8001460:	2b00      	cmp	r3, #0
 8001462:	d06d      	beq.n	8001540 <__aeabi_dmul+0x4ac>
 8001464:	4658      	mov	r0, fp
 8001466:	f000 f9a5 	bl	80017b4 <__clzsi2>
 800146a:	0001      	movs	r1, r0
 800146c:	0003      	movs	r3, r0
 800146e:	390b      	subs	r1, #11
 8001470:	221d      	movs	r2, #29
 8001472:	1a52      	subs	r2, r2, r1
 8001474:	0021      	movs	r1, r4
 8001476:	0018      	movs	r0, r3
 8001478:	465d      	mov	r5, fp
 800147a:	40d1      	lsrs	r1, r2
 800147c:	3808      	subs	r0, #8
 800147e:	4085      	lsls	r5, r0
 8001480:	000a      	movs	r2, r1
 8001482:	4084      	lsls	r4, r0
 8001484:	432a      	orrs	r2, r5
 8001486:	4693      	mov	fp, r2
 8001488:	46a2      	mov	sl, r4
 800148a:	4d5f      	ldr	r5, [pc, #380]	; (8001608 <__aeabi_dmul+0x574>)
 800148c:	2600      	movs	r6, #0
 800148e:	1aed      	subs	r5, r5, r3
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	e625      	b.n	80010e2 <__aeabi_dmul+0x4e>
 8001496:	465b      	mov	r3, fp
 8001498:	4303      	orrs	r3, r0
 800149a:	469a      	mov	sl, r3
 800149c:	d105      	bne.n	80014aa <__aeabi_dmul+0x416>
 800149e:	2300      	movs	r3, #0
 80014a0:	469b      	mov	fp, r3
 80014a2:	3302      	adds	r3, #2
 80014a4:	2608      	movs	r6, #8
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	e61b      	b.n	80010e2 <__aeabi_dmul+0x4e>
 80014aa:	2303      	movs	r3, #3
 80014ac:	4682      	mov	sl, r0
 80014ae:	260c      	movs	r6, #12
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	e616      	b.n	80010e2 <__aeabi_dmul+0x4e>
 80014b4:	2300      	movs	r3, #0
 80014b6:	469b      	mov	fp, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	2604      	movs	r6, #4
 80014bc:	2500      	movs	r5, #0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	e60f      	b.n	80010e2 <__aeabi_dmul+0x4e>
 80014c2:	4642      	mov	r2, r8
 80014c4:	3301      	adds	r3, #1
 80014c6:	9501      	str	r5, [sp, #4]
 80014c8:	431e      	orrs	r6, r3
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	407a      	eors	r2, r7
 80014ce:	3301      	adds	r3, #1
 80014d0:	2400      	movs	r4, #0
 80014d2:	2000      	movs	r0, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2e0a      	cmp	r6, #10
 80014dc:	dd00      	ble.n	80014e0 <__aeabi_dmul+0x44c>
 80014de:	e621      	b.n	8001124 <__aeabi_dmul+0x90>
 80014e0:	e63d      	b.n	800115e <__aeabi_dmul+0xca>
 80014e2:	2101      	movs	r1, #1
 80014e4:	1ac9      	subs	r1, r1, r3
 80014e6:	2938      	cmp	r1, #56	; 0x38
 80014e8:	dd00      	ble.n	80014ec <__aeabi_dmul+0x458>
 80014ea:	e642      	b.n	8001172 <__aeabi_dmul+0xde>
 80014ec:	291f      	cmp	r1, #31
 80014ee:	dd47      	ble.n	8001580 <__aeabi_dmul+0x4ec>
 80014f0:	261f      	movs	r6, #31
 80014f2:	0025      	movs	r5, r4
 80014f4:	4276      	negs	r6, r6
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	40dd      	lsrs	r5, r3
 80014fa:	002b      	movs	r3, r5
 80014fc:	2920      	cmp	r1, #32
 80014fe:	d005      	beq.n	800150c <__aeabi_dmul+0x478>
 8001500:	4942      	ldr	r1, [pc, #264]	; (800160c <__aeabi_dmul+0x578>)
 8001502:	9d02      	ldr	r5, [sp, #8]
 8001504:	468c      	mov	ip, r1
 8001506:	4465      	add	r5, ip
 8001508:	40ac      	lsls	r4, r5
 800150a:	4320      	orrs	r0, r4
 800150c:	1e41      	subs	r1, r0, #1
 800150e:	4188      	sbcs	r0, r1
 8001510:	4318      	orrs	r0, r3
 8001512:	2307      	movs	r3, #7
 8001514:	001d      	movs	r5, r3
 8001516:	2400      	movs	r4, #0
 8001518:	4005      	ands	r5, r0
 800151a:	4203      	tst	r3, r0
 800151c:	d04a      	beq.n	80015b4 <__aeabi_dmul+0x520>
 800151e:	230f      	movs	r3, #15
 8001520:	2400      	movs	r4, #0
 8001522:	4003      	ands	r3, r0
 8001524:	2b04      	cmp	r3, #4
 8001526:	d042      	beq.n	80015ae <__aeabi_dmul+0x51a>
 8001528:	1d03      	adds	r3, r0, #4
 800152a:	4283      	cmp	r3, r0
 800152c:	4180      	sbcs	r0, r0
 800152e:	4240      	negs	r0, r0
 8001530:	1824      	adds	r4, r4, r0
 8001532:	0018      	movs	r0, r3
 8001534:	0223      	lsls	r3, r4, #8
 8001536:	d53a      	bpl.n	80015ae <__aeabi_dmul+0x51a>
 8001538:	2301      	movs	r3, #1
 800153a:	2400      	movs	r4, #0
 800153c:	2500      	movs	r5, #0
 800153e:	e61b      	b.n	8001178 <__aeabi_dmul+0xe4>
 8001540:	f000 f938 	bl	80017b4 <__clzsi2>
 8001544:	0001      	movs	r1, r0
 8001546:	0003      	movs	r3, r0
 8001548:	3115      	adds	r1, #21
 800154a:	3320      	adds	r3, #32
 800154c:	291c      	cmp	r1, #28
 800154e:	dd8f      	ble.n	8001470 <__aeabi_dmul+0x3dc>
 8001550:	3808      	subs	r0, #8
 8001552:	2200      	movs	r2, #0
 8001554:	4084      	lsls	r4, r0
 8001556:	4692      	mov	sl, r2
 8001558:	46a3      	mov	fp, r4
 800155a:	e796      	b.n	800148a <__aeabi_dmul+0x3f6>
 800155c:	f000 f92a 	bl	80017b4 <__clzsi2>
 8001560:	0001      	movs	r1, r0
 8001562:	0003      	movs	r3, r0
 8001564:	3115      	adds	r1, #21
 8001566:	3320      	adds	r3, #32
 8001568:	291c      	cmp	r1, #28
 800156a:	dc00      	bgt.n	800156e <__aeabi_dmul+0x4da>
 800156c:	e758      	b.n	8001420 <__aeabi_dmul+0x38c>
 800156e:	0002      	movs	r2, r0
 8001570:	464c      	mov	r4, r9
 8001572:	3a08      	subs	r2, #8
 8001574:	2000      	movs	r0, #0
 8001576:	4094      	lsls	r4, r2
 8001578:	e75d      	b.n	8001436 <__aeabi_dmul+0x3a2>
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	e711      	b.n	80013a4 <__aeabi_dmul+0x310>
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <__aeabi_dmul+0x57c>)
 8001582:	0026      	movs	r6, r4
 8001584:	469c      	mov	ip, r3
 8001586:	0003      	movs	r3, r0
 8001588:	9d02      	ldr	r5, [sp, #8]
 800158a:	40cb      	lsrs	r3, r1
 800158c:	4465      	add	r5, ip
 800158e:	40ae      	lsls	r6, r5
 8001590:	431e      	orrs	r6, r3
 8001592:	0003      	movs	r3, r0
 8001594:	40ab      	lsls	r3, r5
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	4183      	sbcs	r3, r0
 800159a:	0030      	movs	r0, r6
 800159c:	4318      	orrs	r0, r3
 800159e:	40cc      	lsrs	r4, r1
 80015a0:	0743      	lsls	r3, r0, #29
 80015a2:	d0c7      	beq.n	8001534 <__aeabi_dmul+0x4a0>
 80015a4:	230f      	movs	r3, #15
 80015a6:	4003      	ands	r3, r0
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d1bd      	bne.n	8001528 <__aeabi_dmul+0x494>
 80015ac:	e7c2      	b.n	8001534 <__aeabi_dmul+0x4a0>
 80015ae:	0765      	lsls	r5, r4, #29
 80015b0:	0264      	lsls	r4, r4, #9
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	08c0      	lsrs	r0, r0, #3
 80015b6:	2300      	movs	r3, #0
 80015b8:	4305      	orrs	r5, r0
 80015ba:	e5dd      	b.n	8001178 <__aeabi_dmul+0xe4>
 80015bc:	2500      	movs	r5, #0
 80015be:	2302      	movs	r3, #2
 80015c0:	2e0f      	cmp	r6, #15
 80015c2:	d10c      	bne.n	80015de <__aeabi_dmul+0x54a>
 80015c4:	2480      	movs	r4, #128	; 0x80
 80015c6:	465b      	mov	r3, fp
 80015c8:	0324      	lsls	r4, r4, #12
 80015ca:	4223      	tst	r3, r4
 80015cc:	d00e      	beq.n	80015ec <__aeabi_dmul+0x558>
 80015ce:	4221      	tst	r1, r4
 80015d0:	d10c      	bne.n	80015ec <__aeabi_dmul+0x558>
 80015d2:	430c      	orrs	r4, r1
 80015d4:	0324      	lsls	r4, r4, #12
 80015d6:	003a      	movs	r2, r7
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <__aeabi_dmul+0x580>)
 80015da:	0b24      	lsrs	r4, r4, #12
 80015dc:	e5cc      	b.n	8001178 <__aeabi_dmul+0xe4>
 80015de:	2e0b      	cmp	r6, #11
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dmul+0x550>
 80015e2:	e5a2      	b.n	800112a <__aeabi_dmul+0x96>
 80015e4:	468b      	mov	fp, r1
 80015e6:	46aa      	mov	sl, r5
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	e5f7      	b.n	80011dc <__aeabi_dmul+0x148>
 80015ec:	2480      	movs	r4, #128	; 0x80
 80015ee:	465b      	mov	r3, fp
 80015f0:	0324      	lsls	r4, r4, #12
 80015f2:	431c      	orrs	r4, r3
 80015f4:	0324      	lsls	r4, r4, #12
 80015f6:	4642      	mov	r2, r8
 80015f8:	4655      	mov	r5, sl
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__aeabi_dmul+0x580>)
 80015fc:	0b24      	lsrs	r4, r4, #12
 80015fe:	e5bb      	b.n	8001178 <__aeabi_dmul+0xe4>
 8001600:	464d      	mov	r5, r9
 8001602:	0021      	movs	r1, r4
 8001604:	2303      	movs	r3, #3
 8001606:	e7db      	b.n	80015c0 <__aeabi_dmul+0x52c>
 8001608:	fffffc0d 	.word	0xfffffc0d
 800160c:	0000043e 	.word	0x0000043e
 8001610:	0000041e 	.word	0x0000041e
 8001614:	000007ff 	.word	0x000007ff

08001618 <__aeabi_f2d>:
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	0242      	lsls	r2, r0, #9
 800161c:	0043      	lsls	r3, r0, #1
 800161e:	0fc4      	lsrs	r4, r0, #31
 8001620:	20fe      	movs	r0, #254	; 0xfe
 8001622:	0e1b      	lsrs	r3, r3, #24
 8001624:	1c59      	adds	r1, r3, #1
 8001626:	0a55      	lsrs	r5, r2, #9
 8001628:	4208      	tst	r0, r1
 800162a:	d00c      	beq.n	8001646 <__aeabi_f2d+0x2e>
 800162c:	21e0      	movs	r1, #224	; 0xe0
 800162e:	0089      	lsls	r1, r1, #2
 8001630:	468c      	mov	ip, r1
 8001632:	076d      	lsls	r5, r5, #29
 8001634:	0b12      	lsrs	r2, r2, #12
 8001636:	4463      	add	r3, ip
 8001638:	051b      	lsls	r3, r3, #20
 800163a:	4313      	orrs	r3, r2
 800163c:	07e4      	lsls	r4, r4, #31
 800163e:	4323      	orrs	r3, r4
 8001640:	0028      	movs	r0, r5
 8001642:	0019      	movs	r1, r3
 8001644:	bd70      	pop	{r4, r5, r6, pc}
 8001646:	2b00      	cmp	r3, #0
 8001648:	d114      	bne.n	8001674 <__aeabi_f2d+0x5c>
 800164a:	2d00      	cmp	r5, #0
 800164c:	d01b      	beq.n	8001686 <__aeabi_f2d+0x6e>
 800164e:	0028      	movs	r0, r5
 8001650:	f000 f8b0 	bl	80017b4 <__clzsi2>
 8001654:	280a      	cmp	r0, #10
 8001656:	dc1c      	bgt.n	8001692 <__aeabi_f2d+0x7a>
 8001658:	230b      	movs	r3, #11
 800165a:	002a      	movs	r2, r5
 800165c:	1a1b      	subs	r3, r3, r0
 800165e:	40da      	lsrs	r2, r3
 8001660:	0003      	movs	r3, r0
 8001662:	3315      	adds	r3, #21
 8001664:	409d      	lsls	r5, r3
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <__aeabi_f2d+0x88>)
 8001668:	0312      	lsls	r2, r2, #12
 800166a:	1a1b      	subs	r3, r3, r0
 800166c:	055b      	lsls	r3, r3, #21
 800166e:	0b12      	lsrs	r2, r2, #12
 8001670:	0d5b      	lsrs	r3, r3, #21
 8001672:	e7e1      	b.n	8001638 <__aeabi_f2d+0x20>
 8001674:	2d00      	cmp	r5, #0
 8001676:	d009      	beq.n	800168c <__aeabi_f2d+0x74>
 8001678:	0b13      	lsrs	r3, r2, #12
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	0312      	lsls	r2, r2, #12
 800167e:	431a      	orrs	r2, r3
 8001680:	076d      	lsls	r5, r5, #29
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <__aeabi_f2d+0x8c>)
 8001684:	e7d8      	b.n	8001638 <__aeabi_f2d+0x20>
 8001686:	2300      	movs	r3, #0
 8001688:	2200      	movs	r2, #0
 800168a:	e7d5      	b.n	8001638 <__aeabi_f2d+0x20>
 800168c:	2200      	movs	r2, #0
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <__aeabi_f2d+0x8c>)
 8001690:	e7d2      	b.n	8001638 <__aeabi_f2d+0x20>
 8001692:	0003      	movs	r3, r0
 8001694:	002a      	movs	r2, r5
 8001696:	3b0b      	subs	r3, #11
 8001698:	409a      	lsls	r2, r3
 800169a:	2500      	movs	r5, #0
 800169c:	e7e3      	b.n	8001666 <__aeabi_f2d+0x4e>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	00000389 	.word	0x00000389
 80016a4:	000007ff 	.word	0x000007ff

080016a8 <__aeabi_d2f>:
 80016a8:	0002      	movs	r2, r0
 80016aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ac:	004b      	lsls	r3, r1, #1
 80016ae:	030d      	lsls	r5, r1, #12
 80016b0:	0f40      	lsrs	r0, r0, #29
 80016b2:	0d5b      	lsrs	r3, r3, #21
 80016b4:	0fcc      	lsrs	r4, r1, #31
 80016b6:	0a6d      	lsrs	r5, r5, #9
 80016b8:	493a      	ldr	r1, [pc, #232]	; (80017a4 <__aeabi_d2f+0xfc>)
 80016ba:	4305      	orrs	r5, r0
 80016bc:	1c58      	adds	r0, r3, #1
 80016be:	00d7      	lsls	r7, r2, #3
 80016c0:	4208      	tst	r0, r1
 80016c2:	d00a      	beq.n	80016da <__aeabi_d2f+0x32>
 80016c4:	4938      	ldr	r1, [pc, #224]	; (80017a8 <__aeabi_d2f+0x100>)
 80016c6:	1859      	adds	r1, r3, r1
 80016c8:	29fe      	cmp	r1, #254	; 0xfe
 80016ca:	dd16      	ble.n	80016fa <__aeabi_d2f+0x52>
 80016cc:	20ff      	movs	r0, #255	; 0xff
 80016ce:	2200      	movs	r2, #0
 80016d0:	05c0      	lsls	r0, r0, #23
 80016d2:	4310      	orrs	r0, r2
 80016d4:	07e4      	lsls	r4, r4, #31
 80016d6:	4320      	orrs	r0, r4
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <__aeabi_d2f+0x44>
 80016de:	433d      	orrs	r5, r7
 80016e0:	d026      	beq.n	8001730 <__aeabi_d2f+0x88>
 80016e2:	2205      	movs	r2, #5
 80016e4:	0192      	lsls	r2, r2, #6
 80016e6:	0a52      	lsrs	r2, r2, #9
 80016e8:	b2d8      	uxtb	r0, r3
 80016ea:	e7f1      	b.n	80016d0 <__aeabi_d2f+0x28>
 80016ec:	432f      	orrs	r7, r5
 80016ee:	d0ed      	beq.n	80016cc <__aeabi_d2f+0x24>
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	03d2      	lsls	r2, r2, #15
 80016f4:	20ff      	movs	r0, #255	; 0xff
 80016f6:	432a      	orrs	r2, r5
 80016f8:	e7ea      	b.n	80016d0 <__aeabi_d2f+0x28>
 80016fa:	2900      	cmp	r1, #0
 80016fc:	dd1b      	ble.n	8001736 <__aeabi_d2f+0x8e>
 80016fe:	0192      	lsls	r2, r2, #6
 8001700:	1e50      	subs	r0, r2, #1
 8001702:	4182      	sbcs	r2, r0
 8001704:	00ed      	lsls	r5, r5, #3
 8001706:	0f7f      	lsrs	r7, r7, #29
 8001708:	432a      	orrs	r2, r5
 800170a:	433a      	orrs	r2, r7
 800170c:	0753      	lsls	r3, r2, #29
 800170e:	d047      	beq.n	80017a0 <__aeabi_d2f+0xf8>
 8001710:	230f      	movs	r3, #15
 8001712:	4013      	ands	r3, r2
 8001714:	2b04      	cmp	r3, #4
 8001716:	d000      	beq.n	800171a <__aeabi_d2f+0x72>
 8001718:	3204      	adds	r2, #4
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	04db      	lsls	r3, r3, #19
 800171e:	4013      	ands	r3, r2
 8001720:	d03e      	beq.n	80017a0 <__aeabi_d2f+0xf8>
 8001722:	1c48      	adds	r0, r1, #1
 8001724:	29fe      	cmp	r1, #254	; 0xfe
 8001726:	d0d1      	beq.n	80016cc <__aeabi_d2f+0x24>
 8001728:	0192      	lsls	r2, r2, #6
 800172a:	0a52      	lsrs	r2, r2, #9
 800172c:	b2c0      	uxtb	r0, r0
 800172e:	e7cf      	b.n	80016d0 <__aeabi_d2f+0x28>
 8001730:	2000      	movs	r0, #0
 8001732:	2200      	movs	r2, #0
 8001734:	e7cc      	b.n	80016d0 <__aeabi_d2f+0x28>
 8001736:	000a      	movs	r2, r1
 8001738:	3217      	adds	r2, #23
 800173a:	db2f      	blt.n	800179c <__aeabi_d2f+0xf4>
 800173c:	2680      	movs	r6, #128	; 0x80
 800173e:	0436      	lsls	r6, r6, #16
 8001740:	432e      	orrs	r6, r5
 8001742:	251e      	movs	r5, #30
 8001744:	1a6d      	subs	r5, r5, r1
 8001746:	2d1f      	cmp	r5, #31
 8001748:	dd11      	ble.n	800176e <__aeabi_d2f+0xc6>
 800174a:	2202      	movs	r2, #2
 800174c:	4252      	negs	r2, r2
 800174e:	1a52      	subs	r2, r2, r1
 8001750:	0031      	movs	r1, r6
 8001752:	40d1      	lsrs	r1, r2
 8001754:	2d20      	cmp	r5, #32
 8001756:	d004      	beq.n	8001762 <__aeabi_d2f+0xba>
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <__aeabi_d2f+0x104>)
 800175a:	4694      	mov	ip, r2
 800175c:	4463      	add	r3, ip
 800175e:	409e      	lsls	r6, r3
 8001760:	4337      	orrs	r7, r6
 8001762:	003a      	movs	r2, r7
 8001764:	1e53      	subs	r3, r2, #1
 8001766:	419a      	sbcs	r2, r3
 8001768:	430a      	orrs	r2, r1
 800176a:	2100      	movs	r1, #0
 800176c:	e7ce      	b.n	800170c <__aeabi_d2f+0x64>
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <__aeabi_d2f+0x108>)
 8001770:	0038      	movs	r0, r7
 8001772:	4694      	mov	ip, r2
 8001774:	4463      	add	r3, ip
 8001776:	4098      	lsls	r0, r3
 8001778:	003a      	movs	r2, r7
 800177a:	1e41      	subs	r1, r0, #1
 800177c:	4188      	sbcs	r0, r1
 800177e:	409e      	lsls	r6, r3
 8001780:	40ea      	lsrs	r2, r5
 8001782:	4330      	orrs	r0, r6
 8001784:	4302      	orrs	r2, r0
 8001786:	2100      	movs	r1, #0
 8001788:	0753      	lsls	r3, r2, #29
 800178a:	d1c1      	bne.n	8001710 <__aeabi_d2f+0x68>
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0013      	movs	r3, r2
 8001790:	04c9      	lsls	r1, r1, #19
 8001792:	2001      	movs	r0, #1
 8001794:	400b      	ands	r3, r1
 8001796:	420a      	tst	r2, r1
 8001798:	d1c6      	bne.n	8001728 <__aeabi_d2f+0x80>
 800179a:	e7a3      	b.n	80016e4 <__aeabi_d2f+0x3c>
 800179c:	2300      	movs	r3, #0
 800179e:	e7a0      	b.n	80016e2 <__aeabi_d2f+0x3a>
 80017a0:	000b      	movs	r3, r1
 80017a2:	e79f      	b.n	80016e4 <__aeabi_d2f+0x3c>
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc80 	.word	0xfffffc80
 80017ac:	fffffca2 	.word	0xfffffca2
 80017b0:	fffffc82 	.word	0xfffffc82

080017b4 <__clzsi2>:
 80017b4:	211c      	movs	r1, #28
 80017b6:	2301      	movs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	4298      	cmp	r0, r3
 80017bc:	d301      	bcc.n	80017c2 <__clzsi2+0xe>
 80017be:	0c00      	lsrs	r0, r0, #16
 80017c0:	3910      	subs	r1, #16
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	4298      	cmp	r0, r3
 80017c6:	d301      	bcc.n	80017cc <__clzsi2+0x18>
 80017c8:	0a00      	lsrs	r0, r0, #8
 80017ca:	3908      	subs	r1, #8
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	4298      	cmp	r0, r3
 80017d0:	d301      	bcc.n	80017d6 <__clzsi2+0x22>
 80017d2:	0900      	lsrs	r0, r0, #4
 80017d4:	3904      	subs	r1, #4
 80017d6:	a202      	add	r2, pc, #8	; (adr r2, 80017e0 <__clzsi2+0x2c>)
 80017d8:	5c10      	ldrb	r0, [r2, r0]
 80017da:	1840      	adds	r0, r0, r1
 80017dc:	4770      	bx	lr
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	02020304 	.word	0x02020304
 80017e4:	01010101 	.word	0x01010101
	...

080017f0 <SPIx_WriteRead>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	0002      	movs	r2, r0
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	701a      	strb	r2, [r3, #0]

	uint8_t receivedbyte = 0;
 80017fc:	240f      	movs	r4, #15
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &Byte, (uint8_t*) &receivedbyte,
 8001804:	193a      	adds	r2, r7, r4
 8001806:	1df9      	adds	r1, r7, #7
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <SPIx_WriteRead+0x34>)
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	f001 fb67 	bl	8002ee4 <HAL_SPI_TransmitReceive>
			1, SPIx_TIMEOUT_MAX);

	return receivedbyte;
 8001816:	193b      	adds	r3, r7, r4
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b005      	add	sp, #20
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000078 	.word	0x20000078

08001828 <GYRO_IO_Write>:

void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	0008      	movs	r0, r1
 8001832:	0011      	movs	r1, r2
 8001834:	1cfb      	adds	r3, r7, #3
 8001836:	1c02      	adds	r2, r0, #0
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	003b      	movs	r3, r7
 800183c:	1c0a      	adds	r2, r1, #0
 800183e:	801a      	strh	r2, [r3, #0]
	if (NumByteToWrite > 0x01)
 8001840:	003b      	movs	r3, r7
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d905      	bls.n	8001854 <GYRO_IO_Write+0x2c>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8001848:	1cfb      	adds	r3, r7, #3
 800184a:	1cfa      	adds	r2, r7, #3
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	2140      	movs	r1, #64	; 0x40
 8001850:	430a      	orrs	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
	}
	GYRO_CS_LOW();
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <GYRO_IO_Write+0x7c>)
 8001856:	2200      	movs	r2, #0
 8001858:	2101      	movs	r1, #1
 800185a:	0018      	movs	r0, r3
 800185c:	f000 fd9a 	bl	8002394 <HAL_GPIO_WritePin>

	SPIx_WriteRead(WriteAddr);
 8001860:	1cfb      	adds	r3, r7, #3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ffc3 	bl	80017f0 <SPIx_WriteRead>

	while (NumByteToWrite >= 0x01)
 800186a:	e00c      	b.n	8001886 <GYRO_IO_Write+0x5e>
	{
		SPIx_WriteRead(*pBuffer);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ffbd 	bl	80017f0 <SPIx_WriteRead>
		NumByteToWrite--;
 8001876:	003b      	movs	r3, r7
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	003b      	movs	r3, r7
 800187c:	3a01      	subs	r2, #1
 800187e:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01)
 8001886:	003b      	movs	r3, r7
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ee      	bne.n	800186c <GYRO_IO_Write+0x44>
	}

	GYRO_CS_HIGH();
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <GYRO_IO_Write+0x7c>)
 8001890:	2201      	movs	r2, #1
 8001892:	2101      	movs	r1, #1
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fd7d 	bl	8002394 <HAL_GPIO_WritePin>
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	48000800 	.word	0x48000800

080018a8 <GYRO_IO_Read>:

void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	0008      	movs	r0, r1
 80018b2:	0011      	movs	r1, r2
 80018b4:	1cfb      	adds	r3, r7, #3
 80018b6:	1c02      	adds	r2, r0, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	003b      	movs	r3, r7
 80018bc:	1c0a      	adds	r2, r1, #0
 80018be:	801a      	strh	r2, [r3, #0]
	if (NumByteToRead > 0x01)
 80018c0:	003b      	movs	r3, r7
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d907      	bls.n	80018d8 <GYRO_IO_Read+0x30>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 80018c8:	1cfb      	adds	r3, r7, #3
 80018ca:	1cfa      	adds	r2, r7, #3
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	2140      	movs	r1, #64	; 0x40
 80018d0:	4249      	negs	r1, r1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e006      	b.n	80018e6 <GYRO_IO_Read+0x3e>
	}
	else
	{
		ReadAddr |= (uint8_t) READWRITE_CMD;
 80018d8:	1cfb      	adds	r3, r7, #3
 80018da:	1cfa      	adds	r2, r7, #3
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	4249      	negs	r1, r1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	}
	GYRO_CS_LOW();
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <GYRO_IO_Read+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	2101      	movs	r1, #1
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 fd51 	bl	8002394 <HAL_GPIO_WritePin>

	SPIx_WriteRead(ReadAddr);
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff ff7a 	bl	80017f0 <SPIx_WriteRead>

	while (NumByteToRead > 0x00)
 80018fc:	e00e      	b.n	800191c <GYRO_IO_Read+0x74>
	{
		*pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ff76 	bl	80017f0 <SPIx_WriteRead>
 8001904:	0003      	movs	r3, r0
 8001906:	001a      	movs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 800190c:	003b      	movs	r3, r7
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	003b      	movs	r3, r7
 8001912:	3a01      	subs	r2, #1
 8001914:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
	while (NumByteToRead > 0x00)
 800191c:	003b      	movs	r3, r7
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ec      	bne.n	80018fe <GYRO_IO_Read+0x56>
	}

	GYRO_CS_HIGH();
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <GYRO_IO_Read+0x90>)
 8001926:	2201      	movs	r2, #1
 8001928:	2101      	movs	r1, #1
 800192a:	0018      	movs	r0, r3
 800192c:	f000 fd32 	bl	8002394 <HAL_GPIO_WritePin>
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	48000800 	.word	0x48000800

0800193c <GYRO_ReadXYZ_AngRate>:

void GYRO_ReadXYZ_AngRate(float *Data)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	float sensitivity = 0.07;
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <GYRO_ReadXYZ_AngRate+0xe4>)
 8001946:	61fb      	str	r3, [r7, #28]
	uint8_t tmpbuffer[6] =
 8001948:	2414      	movs	r4, #20
 800194a:	193b      	adds	r3, r7, r4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	809a      	strh	r2, [r3, #4]
	{ 0 };
	int16_t RawData[3] =
 8001954:	230c      	movs	r3, #12
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	0018      	movs	r0, r3
 800195a:	2306      	movs	r3, #6
 800195c:	001a      	movs	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	f001 fe18 	bl	8003594 <memset>
	{ 0 };

	GYRO_IO_Read(tmpbuffer, L3GD20_OUT_X_L_ADDR, 6);
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2206      	movs	r2, #6
 8001968:	2128      	movs	r1, #40	; 0x28
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff ff9c 	bl	80018a8 <GYRO_IO_Read>

	for (int i = 0; i < 3; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e018      	b.n	80019a8 <GYRO_ReadXYZ_AngRate+0x6c>
	{
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i + 1] << 8)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3301      	adds	r3, #1
 800197c:	2114      	movs	r1, #20
 800197e:	187a      	adds	r2, r7, r1
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	b29b      	uxth	r3, r3
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b29a      	uxth	r2, r3
				+ tmpbuffer[2 * i]);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	1879      	adds	r1, r7, r1
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	b29b      	uxth	r3, r3
 8001992:	18d3      	adds	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i + 1] << 8)
 8001996:	b219      	sxth	r1, r3
 8001998:	230c      	movs	r3, #12
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 3; i++)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	dde3      	ble.n	8001976 <GYRO_ReadXYZ_AngRate+0x3a>
	}

	for (int i = 0; i < 3; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	e02d      	b.n	8001a10 <GYRO_ReadXYZ_AngRate+0xd4>
	{
		Data[i] = (float) (RawData[i] * sensitivity);
 80019b4:	230c      	movs	r3, #12
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	0052      	lsls	r2, r2, #1
 80019bc:	5ed3      	ldrsh	r3, [r2, r3]
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe ffb6 	bl	8000930 <__aeabi_i2f>
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	18d4      	adds	r4, r2, r3
 80019cc:	69f9      	ldr	r1, [r7, #28]
 80019ce:	f7fe fe2b 	bl	8000628 <__aeabi_fmul>
 80019d2:	1c03      	adds	r3, r0, #0
 80019d4:	6023      	str	r3, [r4, #0]
		if (abs(Data[i]) < 0.0001)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	18d3      	adds	r3, r2, r3
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1c18      	adds	r0, r3, #0
 80019e2:	f7fe ff85 	bl	80008f0 <__aeabi_f2iz>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	db0f      	blt.n	8001a0a <GYRO_ReadXYZ_AngRate+0xce>
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1c18      	adds	r0, r3, #0
 80019f6:	f7fe ff7b 	bl	80008f0 <__aeabi_f2iz>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	dc05      	bgt.n	8001a0a <GYRO_ReadXYZ_AngRate+0xce>
			Data[i] = 0;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	ddce      	ble.n	80019b4 <GYRO_ReadXYZ_AngRate+0x78>
	}

}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b00b      	add	sp, #44	; 0x2c
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	3d8f5c29 	.word	0x3d8f5c29

08001a24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a2a:	f000 f9ff 	bl	8001e2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a2e:	f000 f86f 	bl	8001b10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a32:	f000 f8e7 	bl	8001c04 <MX_GPIO_Init>
	MX_SPI2_Init();
 8001a36:	f000 f8a7 	bl	8001b88 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	// Включаем оси и настраиваем чувствительность 2000dps
	uint8_t ctrl = 0x0f;
 8001a3a:	1cbb      	adds	r3, r7, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	701a      	strb	r2, [r3, #0]
	GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1, 1);
 8001a40:	1cbb      	adds	r3, r7, #2
 8001a42:	2201      	movs	r2, #1
 8001a44:	2120      	movs	r1, #32
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff feee 	bl	8001828 <GYRO_IO_Write>
	ctrl = 0x30;
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	2230      	movs	r2, #48	; 0x30
 8001a50:	701a      	strb	r2, [r3, #0]
	GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4, 1);
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	2201      	movs	r2, #1
 8001a56:	2123      	movs	r1, #35	; 0x23
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff fee5 	bl	8001828 <GYRO_IO_Write>

	/* USER CODE END 2 */
	uint8_t address_whoami = 0x0F;
 8001a5e:	1cfb      	adds	r3, r7, #3
 8001a60:	220f      	movs	r2, #15
 8001a62:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	GYRO_IO_Read(&data, address_whoami, 1);
 8001a64:	1cfb      	adds	r3, r7, #3
 8001a66:	7819      	ldrb	r1, [r3, #0]
 8001a68:	1c7b      	adds	r3, r7, #1
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ff1b 	bl	80018a8 <GYRO_IO_Read>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <main+0xd8>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff61 	bl	800193c <GYRO_ReadXYZ_AngRate>
		for (int i = 0; i < 3; ++i)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e035      	b.n	8001aec <main+0xc8>
		{
			Data_Ang[i] += Data_AngRate[i] * 0.05;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <main+0xdc>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	58d3      	ldr	r3, [r2, r3]
 8001a88:	1c18      	adds	r0, r3, #0
 8001a8a:	f7ff fdc5 	bl	8001618 <__aeabi_f2d>
 8001a8e:	0004      	movs	r4, r0
 8001a90:	000d      	movs	r5, r1
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <main+0xd8>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	58d3      	ldr	r3, [r2, r3]
 8001a9a:	1c18      	adds	r0, r3, #0
 8001a9c:	f7ff fdbc 	bl	8001618 <__aeabi_f2d>
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <main+0xe0>)
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <main+0xe4>)
 8001aa4:	f7ff faf6 	bl	8001094 <__aeabi_dmul>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	000b      	movs	r3, r1
 8001aac:	0020      	movs	r0, r4
 8001aae:	0029      	movs	r1, r5
 8001ab0:	f7fe ff90 	bl	80009d4 <__aeabi_dadd>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	0010      	movs	r0, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	f7ff fdf4 	bl	80016a8 <__aeabi_d2f>
 8001ac0:	1c01      	adds	r1, r0, #0
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <main+0xdc>)
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	50d1      	str	r1, [r2, r3]
			Data_Ang[i] = fmodf(Data_Ang[i], 360.0);
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <main+0xdc>)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	58d3      	ldr	r3, [r2, r3]
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <main+0xe8>)
 8001ad4:	1c11      	adds	r1, r2, #0
 8001ad6:	1c18      	adds	r0, r3, #0
 8001ad8:	f001 fd8e 	bl	80035f8 <fmodf>
 8001adc:	1c01      	adds	r1, r0, #0
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <main+0xdc>)
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	50d1      	str	r1, [r2, r3]
		for (int i = 0; i < 3; ++i)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	ddc6      	ble.n	8001a80 <main+0x5c>
		}
		HAL_Delay(50);
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f000 f9fe 	bl	8001ef4 <HAL_Delay>
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 8001af8:	e7bb      	b.n	8001a72 <main+0x4e>
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	200000dc 	.word	0x200000dc
 8001b00:	200000e8 	.word	0x200000e8
 8001b04:	9999999a 	.word	0x9999999a
 8001b08:	3fa99999 	.word	0x3fa99999
 8001b0c:	43b40000 	.word	0x43b40000

08001b10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b093      	sub	sp, #76	; 0x4c
 8001b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001b16:	2414      	movs	r4, #20
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	2334      	movs	r3, #52	; 0x34
 8001b1e:	001a      	movs	r2, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	f001 fd37 	bl	8003594 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	0018      	movs	r0, r3
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	2100      	movs	r1, #0
 8001b30:	f001 fd30 	bl	8003594 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	2220      	movs	r2, #32
 8001b38:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fc41 	bl	80023d0 <HAL_RCC_OscConfig>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8001b52:	f000 f8ad 	bl	8001cb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2203      	movs	r2, #3
 8001b60:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2101      	movs	r1, #1
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 ffb2 	bl	8002adc <HAL_RCC_ClockConfig>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001b7c:	f000 f898 	bl	8001cb0 <Error_Handler>
	}
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b013      	add	sp, #76	; 0x4c
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <MX_SPI2_Init+0x78>)
 8001b90:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001b94:	2282      	movs	r2, #130	; 0x82
 8001b96:	0052      	lsls	r2, r2, #1
 8001b98:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001ba2:	22e0      	movs	r2, #224	; 0xe0
 8001ba4:	00d2      	lsls	r2, r2, #3
 8001ba6:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001be2:	2208      	movs	r2, #8
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <MX_SPI2_Init+0x74>)
 8001be8:	0018      	movs	r0, r3
 8001bea:	f001 f8c3 	bl	8002d74 <HAL_SPI_Init>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8001bf2:	f000 f85d 	bl	8001cb0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000078 	.word	0x20000078
 8001c00:	40003800 	.word	0x40003800

08001c04 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c0a:	240c      	movs	r4, #12
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2314      	movs	r3, #20
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f001 fcbd 	bl	8003594 <memset>
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	03c9      	lsls	r1, r1, #15
 8001c24:	430a      	orrs	r2, r1
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	03db      	lsls	r3, r3, #15
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0309      	lsls	r1, r1, #12
 8001c40:	430a      	orrs	r2, r1
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	031b      	lsls	r3, r3, #12
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	02c9      	lsls	r1, r1, #11
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_GPIO_Init+0xa4>)
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	02db      	lsls	r3, r3, #11
 8001c68:	4013      	ands	r3, r2
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GYROSCOPE_CS_GPIO_Port, GYROSCOPE_CS_Pin, GPIO_PIN_RESET);
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_GPIO_Init+0xa8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	2101      	movs	r1, #1
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 fb8d 	bl	8002394 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GYROSCOPE_CS_Pin */
	GPIO_InitStruct.Pin = GYROSCOPE_CS_Pin;
 8001c7a:	0021      	movs	r1, r4
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2201      	movs	r2, #1
 8001c86:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2201      	movs	r2, #1
 8001c92:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GYROSCOPE_CS_GPIO_Port, &GPIO_InitStruct);
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <MX_GPIO_Init+0xa8>)
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f000 fa02 	bl	80020a4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b009      	add	sp, #36	; 0x24
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000800 	.word	0x48000800

08001cb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0549      	lsls	r1, r1, #21
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_MspInit+0x44>)
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	055b      	lsls	r3, r3, #21
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	2414      	movs	r4, #20
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	0018      	movs	r0, r3
 8001d12:	2314      	movs	r3, #20
 8001d14:	001a      	movs	r2, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	f001 fc3c 	bl	8003594 <memset>
  if(hspi->Instance==SPI2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_SPI_MspInit+0x90>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d132      	bne.n	8001d8c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	01c9      	lsls	r1, r1, #7
 8001d30:	430a      	orrs	r2, r1
 8001d32:	61da      	str	r2, [r3, #28]
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	02c9      	lsls	r1, r1, #11
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_SPI_MspInit+0x94>)
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	02db      	lsls	r3, r3, #11
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	22e0      	movs	r2, #224	; 0xe0
 8001d62:	0212      	lsls	r2, r2, #8
 8001d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	0021      	movs	r1, r4
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2203      	movs	r2, #3
 8001d78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_SPI_MspInit+0x98>)
 8001d84:	0019      	movs	r1, r3
 8001d86:	0010      	movs	r0, r2
 8001d88:	f000 f98c 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b00b      	add	sp, #44	; 0x2c
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	40003800 	.word	0x40003800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f87a 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ddc:	f7ff fff7 	bl	8001dce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de2:	490d      	ldr	r1, [pc, #52]	; (8001e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <LoopForever+0xe>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df8:	4c0a      	ldr	r4, [pc, #40]	; (8001e24 <LoopForever+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e06:	f001 fbd3 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7ff fe0b 	bl	8001a24 <main>

08001e0e <LoopForever>:

LoopForever:
    b LoopForever
 8001e0e:	e7fe      	b.n	8001e0e <LoopForever>
  ldr   r0, =_estack
 8001e10:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e1c:	08003810 	.word	0x08003810
  ldr r2, =_sbss
 8001e20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e24:	20000230 	.word	0x20000230

08001e28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC1_COMP_IRQHandler>
	...

08001e2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_Init+0x24>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_Init+0x24>)
 8001e36:	2110      	movs	r1, #16
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 f809 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e42:	f7ff ff3b 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_InitTick+0x5c>)
 8001e5e:	681c      	ldr	r4, [r3, #0]
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_InitTick+0x60>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	0019      	movs	r1, r3
 8001e66:	23fa      	movs	r3, #250	; 0xfa
 8001e68:	0098      	lsls	r0, r3, #2
 8001e6a:	f7fe f94d 	bl	8000108 <__udivsi3>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	0019      	movs	r1, r3
 8001e72:	0020      	movs	r0, r4
 8001e74:	f7fe f948 	bl	8000108 <__udivsi3>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 f905 	bl	800208a <HAL_SYSTICK_Config>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00f      	b.n	8001ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d80b      	bhi.n	8001ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	2301      	movs	r3, #1
 8001e92:	425b      	negs	r3, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f8e2 	bl	8002060 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_InitTick+0x64>)
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b003      	add	sp, #12
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x1c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_IncTick+0x20>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	18d2      	adds	r2, r2, r3
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_IncTick+0x20>)
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	200000f4 	.word	0x200000f4

08001ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_GetTick+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	200000f4 	.word	0x200000f4

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	001a      	movs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	f7ff ffe0 	bl	8001ee0 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000008 	.word	0x20000008

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f50:	d828      	bhi.n	8001fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <__NVIC_SetPriority+0xd4>)
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	33c0      	adds	r3, #192	; 0xc0
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	589b      	ldr	r3, [r3, r2]
 8001f62:	1dfa      	adds	r2, r7, #7
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	0011      	movs	r1, r2
 8001f68:	2203      	movs	r2, #3
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	00d2      	lsls	r2, r2, #3
 8001f6e:	21ff      	movs	r1, #255	; 0xff
 8001f70:	4091      	lsls	r1, r2
 8001f72:	000a      	movs	r2, r1
 8001f74:	43d2      	mvns	r2, r2
 8001f76:	401a      	ands	r2, r3
 8001f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	401a      	ands	r2, r3
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	2303      	movs	r3, #3
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f90:	481f      	ldr	r0, [pc, #124]	; (8002010 <__NVIC_SetPriority+0xd4>)
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	33c0      	adds	r3, #192	; 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fa2:	e031      	b.n	8002008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <__NVIC_SetPriority+0xd8>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	0019      	movs	r1, r3
 8001fac:	230f      	movs	r3, #15
 8001fae:	400b      	ands	r3, r1
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1dfa      	adds	r2, r7, #7
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	21ff      	movs	r1, #255	; 0xff
 8001fcc:	4091      	lsls	r1, r2
 8001fce:	000a      	movs	r2, r1
 8001fd0:	43d2      	mvns	r2, r2
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	401a      	ands	r2, r3
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	4003      	ands	r3, r0
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <__NVIC_SetPriority+0xd8>)
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	001c      	movs	r4, r3
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	4023      	ands	r3, r4
 8001ff8:	3b08      	subs	r3, #8
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	3306      	adds	r3, #6
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	18c3      	adds	r3, r0, r3
 8002004:	3304      	adds	r3, #4
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b003      	add	sp, #12
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	045b      	lsls	r3, r3, #17
 8002028:	429a      	cmp	r2, r3
 800202a:	d301      	bcc.n	8002030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202c:	2301      	movs	r3, #1
 800202e:	e010      	b.n	8002052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <SysTick_Config+0x44>)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	3a01      	subs	r2, #1
 8002036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002038:	2301      	movs	r3, #1
 800203a:	425b      	negs	r3, r3
 800203c:	2103      	movs	r1, #3
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff ff7c 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x44>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x44>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	210f      	movs	r1, #15
 800206c:	187b      	adds	r3, r7, r1
 800206e:	1c02      	adds	r2, r0, #0
 8002070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	187b      	adds	r3, r7, r1
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff ffbf 	bl	8002018 <SysTick_Config>
 800209a:	0003      	movs	r3, r0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b2:	e155      	b.n	8002360 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_GPIO_Init+0x28>
 80020ca:	e146      	b.n	800235a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d005      	beq.n	80020e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	409a      	lsls	r2, r3
 80020f2:	0013      	movs	r3, r2
 80020f4:	43da      	mvns	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	409a      	lsls	r2, r3
 8002106:	0013      	movs	r3, r2
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	2201      	movs	r2, #1
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	4013      	ands	r3, r2
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	58d3      	ldr	r3, [r2, r3]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2207      	movs	r2, #7
 80021a0:	4013      	ands	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	43da      	mvns	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2107      	movs	r1, #7
 80021ba:	400b      	ands	r3, r1
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	6939      	ldr	r1, [r7, #16]
 80021d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	409a      	lsls	r2, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	43da      	mvns	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2203      	movs	r2, #3
 80021f4:	401a      	ands	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	0013      	movs	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d100      	bne.n	8002218 <HAL_GPIO_Init+0x174>
 8002216:	e0a0      	b.n	800235a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_GPIO_Init+0x2d4>)
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x2d4>)
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_GPIO_Init+0x2d4>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_GPIO_Init+0x2d8>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	589b      	ldr	r3, [r3, r2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	43da      	mvns	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	2390      	movs	r3, #144	; 0x90
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	429a      	cmp	r2, r3
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x1ee>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_GPIO_Init+0x2dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x1ea>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a46      	ldr	r2, [pc, #280]	; (8002384 <HAL_GPIO_Init+0x2e0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x1e6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <HAL_GPIO_Init+0x2e4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x1e2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_GPIO_Init+0x2e8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x1de>
 800227e:	2304      	movs	r3, #4
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x1f0>
 8002282:	2305      	movs	r3, #5
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x1f0>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x1f0>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x1f0>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x1f0>
 8002292:	2300      	movs	r3, #0
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	2103      	movs	r1, #3
 8002298:	400a      	ands	r2, r1
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <HAL_GPIO_Init+0x2d8>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	035b      	lsls	r3, r3, #13
 80022ca:	4013      	ands	r3, r2
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	039b      	lsls	r3, r3, #14
 80022f4:	4013      	ands	r3, r2
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43da      	mvns	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43da      	mvns	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	025b      	lsls	r3, r3, #9
 8002348:	4013      	ands	r3, r2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	40da      	lsrs	r2, r3
 8002368:	1e13      	subs	r3, r2, #0
 800236a:	d000      	beq.n	800236e <HAL_GPIO_Init+0x2ca>
 800236c:	e6a2      	b.n	80020b4 <HAL_GPIO_Init+0x10>
  } 
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b006      	add	sp, #24
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000
 8002380:	48000400 	.word	0x48000400
 8002384:	48000800 	.word	0x48000800
 8002388:	48000c00 	.word	0x48000c00
 800238c:	48001000 	.word	0x48001000
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	0008      	movs	r0, r1
 800239e:	0011      	movs	r1, r2
 80023a0:	1cbb      	adds	r3, r7, #2
 80023a2:	1c02      	adds	r2, r0, #0
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	1c7b      	adds	r3, r7, #1
 80023a8:	1c0a      	adds	r2, r1, #0
 80023aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	1c7b      	adds	r3, r7, #1
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b4:	1cbb      	adds	r3, r7, #2
 80023b6:	881a      	ldrh	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023be:	1cbb      	adds	r3, r7, #2
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f000 fb76 	bl	8002ad0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	d100      	bne.n	80023f0 <HAL_RCC_OscConfig+0x20>
 80023ee:	e08e      	b.n	800250e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f0:	4bc5      	ldr	r3, [pc, #788]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	220c      	movs	r2, #12
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00e      	beq.n	800241a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4bc2      	ldr	r3, [pc, #776]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	220c      	movs	r2, #12
 8002402:	4013      	ands	r3, r2
 8002404:	2b08      	cmp	r3, #8
 8002406:	d117      	bne.n	8002438 <HAL_RCC_OscConfig+0x68>
 8002408:	4bbf      	ldr	r3, [pc, #764]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	23c0      	movs	r3, #192	; 0xc0
 800240e:	025b      	lsls	r3, r3, #9
 8002410:	401a      	ands	r2, r3
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	025b      	lsls	r3, r3, #9
 8002416:	429a      	cmp	r2, r3
 8002418:	d10e      	bne.n	8002438 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4bbb      	ldr	r3, [pc, #748]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d100      	bne.n	8002428 <HAL_RCC_OscConfig+0x58>
 8002426:	e071      	b.n	800250c <HAL_RCC_OscConfig+0x13c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d000      	beq.n	8002432 <HAL_RCC_OscConfig+0x62>
 8002430:	e06c      	b.n	800250c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	f000 fb4c 	bl	8002ad0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x80>
 8002440:	4bb1      	ldr	r3, [pc, #708]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4bb0      	ldr	r3, [pc, #704]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0249      	lsls	r1, r1, #9
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e02f      	b.n	80024b0 <HAL_RCC_OscConfig+0xe0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0xa2>
 8002458:	4bab      	ldr	r3, [pc, #684]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4baa      	ldr	r3, [pc, #680]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800245e:	49ab      	ldr	r1, [pc, #684]	; (800270c <HAL_RCC_OscConfig+0x33c>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	4ba8      	ldr	r3, [pc, #672]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4ba7      	ldr	r3, [pc, #668]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800246a:	49a9      	ldr	r1, [pc, #676]	; (8002710 <HAL_RCC_OscConfig+0x340>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e01e      	b.n	80024b0 <HAL_RCC_OscConfig+0xe0>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d10e      	bne.n	8002498 <HAL_RCC_OscConfig+0xc8>
 800247a:	4ba3      	ldr	r3, [pc, #652]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4ba2      	ldr	r3, [pc, #648]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	02c9      	lsls	r1, r1, #11
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4b9f      	ldr	r3, [pc, #636]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	0249      	lsls	r1, r1, #9
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xe0>
 8002498:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b9a      	ldr	r3, [pc, #616]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800249e:	499b      	ldr	r1, [pc, #620]	; (800270c <HAL_RCC_OscConfig+0x33c>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b98      	ldr	r3, [pc, #608]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b97      	ldr	r3, [pc, #604]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80024aa:	4999      	ldr	r1, [pc, #612]	; (8002710 <HAL_RCC_OscConfig+0x340>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d014      	beq.n	80024e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fd12 	bl	8001ee0 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c2:	f7ff fd0d 	bl	8001ee0 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e2fd      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0xf2>
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff fcfd 	bl	8001ee0 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fcf8 	bl	8001ee0 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e2e8      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	4013      	ands	r3, r2
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x11c>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <HAL_RCC_OscConfig+0x14a>
 8002518:	e06c      	b.n	80025f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	220c      	movs	r2, #12
 8002520:	4013      	ands	r3, r2
 8002522:	d00e      	beq.n	8002542 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	220c      	movs	r2, #12
 800252a:	4013      	ands	r3, r2
 800252c:	2b08      	cmp	r3, #8
 800252e:	d11f      	bne.n	8002570 <HAL_RCC_OscConfig+0x1a0>
 8002530:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	401a      	ands	r2, r3
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	429a      	cmp	r2, r3
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x188>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e2bb      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	22f8      	movs	r2, #248	; 0xf8
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00da      	lsls	r2, r3, #3
 8002568:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e041      	b.n	80025f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d024      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b62      	ldr	r3, [pc, #392]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800257e:	2101      	movs	r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fcac 	bl	8001ee0 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff fca7 	bl	8001ee0 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e297      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2202      	movs	r2, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d0f1      	beq.n	800258e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	22f8      	movs	r2, #248	; 0xf8
 80025b0:	4393      	bics	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00da      	lsls	r2, r3, #3
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	438a      	bics	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fc87 	bl	8001ee0 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d8:	f7ff fc82 	bl	8001ee0 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e272      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d1f1      	bne.n	80025d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2208      	movs	r2, #8
 80025fa:	4013      	ands	r3, r2
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800260c:	2101      	movs	r1, #1
 800260e:	430a      	orrs	r2, r1
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fc65 	bl	8001ee0 <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fc60 	bl	8001ee0 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e250      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d0f1      	beq.n	800261c <HAL_RCC_OscConfig+0x24c>
 8002638:	e018      	b.n	800266c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800263c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263e:	4b32      	ldr	r3, [pc, #200]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002640:	2101      	movs	r1, #1
 8002642:	438a      	bics	r2, r1
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fc4b 	bl	8001ee0 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fc46 	bl	8001ee0 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e236      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	d1f1      	bne.n	8002650 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2204      	movs	r2, #4
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_RCC_OscConfig+0x2a8>
 8002676:	e0b5      	b.n	80027e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002678:	201f      	movs	r0, #31
 800267a:	183b      	adds	r3, r7, r0
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	055b      	lsls	r3, r3, #21
 8002688:	4013      	ands	r3, r2
 800268a:	d110      	bne.n	80026ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0549      	lsls	r1, r1, #21
 8002696:	430a      	orrs	r2, r1
 8002698:	61da      	str	r2, [r3, #28]
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026a8:	183b      	adds	r3, r7, r0
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_OscConfig+0x344>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	d11a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCC_OscConfig+0x344>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x344>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0049      	lsls	r1, r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c8:	f7ff fc0a 	bl	8001ee0 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff fc05 	bl	8001ee0 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1f5      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x344>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10f      	bne.n	8002718 <HAL_RCC_OscConfig+0x348>
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	4b02      	ldr	r3, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	621a      	str	r2, [r3, #32]
 8002704:	e036      	b.n	8002774 <HAL_RCC_OscConfig+0x3a4>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	40021000 	.word	0x40021000
 800270c:	fffeffff 	.word	0xfffeffff
 8002710:	fffbffff 	.word	0xfffbffff
 8002714:	40007000 	.word	0x40007000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x36a>
 8002720:	4bca      	ldr	r3, [pc, #808]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4bc9      	ldr	r3, [pc, #804]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	4bc7      	ldr	r3, [pc, #796]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4bc6      	ldr	r3, [pc, #792]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002732:	2104      	movs	r1, #4
 8002734:	438a      	bics	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x3a4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x38c>
 8002742:	4bc2      	ldr	r3, [pc, #776]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4bc1      	ldr	r3, [pc, #772]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002748:	2104      	movs	r1, #4
 800274a:	430a      	orrs	r2, r1
 800274c:	621a      	str	r2, [r3, #32]
 800274e:	4bbf      	ldr	r3, [pc, #764]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	4bbe      	ldr	r3, [pc, #760]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	621a      	str	r2, [r3, #32]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x3a4>
 800275c:	4bbb      	ldr	r3, [pc, #748]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	4bba      	ldr	r3, [pc, #744]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002762:	2101      	movs	r1, #1
 8002764:	438a      	bics	r2, r1
 8002766:	621a      	str	r2, [r3, #32]
 8002768:	4bb8      	ldr	r3, [pc, #736]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	4bb7      	ldr	r3, [pc, #732]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800276e:	2104      	movs	r1, #4
 8002770:	438a      	bics	r2, r1
 8002772:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7ff fbb0 	bl	8001ee0 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e009      	b.n	800279a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fbab 	bl	8001ee0 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4aaf      	ldr	r2, [pc, #700]	; (8002a50 <HAL_RCC_OscConfig+0x680>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e19a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4bac      	ldr	r3, [pc, #688]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x3b6>
 80027a4:	e013      	b.n	80027ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7ff fb9b 	bl	8001ee0 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e009      	b.n	80027c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff fb96 	bl	8001ee0 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	4aa5      	ldr	r2, [pc, #660]	; (8002a50 <HAL_RCC_OscConfig+0x680>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e185      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4ba1      	ldr	r3, [pc, #644]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ce:	231f      	movs	r3, #31
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	4b9b      	ldr	r3, [pc, #620]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80027de:	499d      	ldr	r1, [pc, #628]	; (8002a54 <HAL_RCC_OscConfig+0x684>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2210      	movs	r2, #16
 80027ea:	4013      	ands	r3, r2
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12a      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027f6:	4b95      	ldr	r3, [pc, #596]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fa:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80027fc:	2104      	movs	r1, #4
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002802:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002806:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff fb67 	bl	8001ee0 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002818:	f7ff fb62 	bl	8001ee0 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e152      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d0f1      	beq.n	8002818 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002834:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	22f8      	movs	r2, #248	; 0xf8
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	00da      	lsls	r2, r3, #3
 8002844:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002846:	430a      	orrs	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e034      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	3305      	adds	r3, #5
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002854:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002858:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002860:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	22f8      	movs	r2, #248	; 0xf8
 8002866:	4393      	bics	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	00da      	lsls	r2, r3, #3
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002872:	430a      	orrs	r2, r1
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002878:	4b74      	ldr	r3, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800287e:	2104      	movs	r1, #4
 8002880:	430a      	orrs	r2, r1
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002884:	4b71      	ldr	r3, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002888:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7ff fb26 	bl	8001ee0 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800289a:	f7ff fb21 	bl	8001ee0 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e111      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028ac:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d1f1      	bne.n	800289a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2220      	movs	r2, #32
 80028bc:	4013      	ands	r3, r2
 80028be:	d05c      	beq.n	800297a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028c0:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	220c      	movs	r2, #12
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d00e      	beq.n	80028ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028cc:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	220c      	movs	r2, #12
 80028d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d114      	bne.n	8002902 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028d8:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	401a      	ands	r2, r3
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	025b      	lsls	r3, r3, #9
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028ea:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80028ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	4013      	ands	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_RCC_OscConfig+0x5a8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d03c      	beq.n	8002978 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0e6      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01b      	beq.n	8002942 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800290c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290e:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0249      	lsls	r1, r1, #9
 8002914:	430a      	orrs	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fae2 	bl	8001ee0 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002922:	f7ff fadd 	bl	8001ee0 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0cd      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	4013      	ands	r3, r2
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x552>
 8002940:	e01b      	b.n	800297a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002942:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002948:	4943      	ldr	r1, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x688>)
 800294a:	400a      	ands	r2, r1
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7ff fac7 	bl	8001ee0 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002958:	f7ff fac2 	bl	8001ee0 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b2      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	4013      	ands	r3, r2
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x588>
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002978:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d100      	bne.n	8002984 <HAL_RCC_OscConfig+0x5b4>
 8002982:	e0a4      	b.n	8002ace <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	220c      	movs	r2, #12
 800298a:	4013      	ands	r3, r2
 800298c:	2b08      	cmp	r3, #8
 800298e:	d100      	bne.n	8002992 <HAL_RCC_OscConfig+0x5c2>
 8002990:	e078      	b.n	8002a84 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2b02      	cmp	r3, #2
 8002998:	d14c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029a0:	492e      	ldr	r1, [pc, #184]	; (8002a5c <HAL_RCC_OscConfig+0x68c>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fa9b 	bl	8001ee0 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fa96 	bl	8001ee0 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e086      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	220f      	movs	r2, #15
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_RCC_OscConfig+0x690>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	431a      	orrs	r2, r3
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0449      	lsls	r1, r1, #17
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fa69 	bl	8001ee0 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff fa64 	bl	8001ee0 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e054      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	049b      	lsls	r3, r3, #18
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x644>
 8002a32:	e04c      	b.n	8002ace <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <HAL_RCC_OscConfig+0x67c>)
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <HAL_RCC_OscConfig+0x68c>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fa4e 	bl	8001ee0 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x6a6>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	00001388 	.word	0x00001388
 8002a54:	efffffff 	.word	0xefffffff
 8002a58:	fffeffff 	.word	0xfffeffff
 8002a5c:	feffffff 	.word	0xfeffffff
 8002a60:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff fa3c 	bl	8001ee0 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e02c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_RCC_OscConfig+0x708>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	049b      	lsls	r3, r3, #18
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x694>
 8002a82:	e024      	b.n	8002ace <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_RCC_OscConfig+0x708>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_OscConfig+0x708>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	23c0      	movs	r3, #192	; 0xc0
 8002aa0:	025b      	lsls	r3, r3, #9
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d10e      	bne.n	8002aca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	220f      	movs	r2, #15
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	23f0      	movs	r3, #240	; 0xf0
 8002abe:	039b      	lsls	r3, r3, #14
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b008      	add	sp, #32
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0bf      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d911      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0a6      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d006      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b3c:	21e0      	movs	r1, #224	; 0xe0
 8002b3e:	00c9      	lsls	r1, r1, #3
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	22f0      	movs	r2, #240	; 0xf0
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d04c      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d120      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07a      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	049b      	lsls	r3, r3, #18
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d114      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06e      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e062      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e05b      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7ff f988 	bl	8001ee0 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd6:	f7ff f983 	bl	8001ee0 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_RCC_ClockConfig+0x1a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e042      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	220c      	movs	r2, #12
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1ec      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d211      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x19c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e020      	b.n	8002c70 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_RCC_ClockConfig+0x1a8>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c4c:	f000 f820 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c50:	0001      	movs	r1, r0
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1a0>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	220f      	movs	r2, #15
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1ac>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	000a      	movs	r2, r1
 8002c62:	40da      	lsrs	r2, r3
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1b0>)
 8002c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f7ff f8f3 	bl	8001e54 <HAL_InitTick>
  
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	00001388 	.word	0x00001388
 8002c84:	fffff8ff 	.word	0xfffff8ff
 8002c88:	080037d0 	.word	0x080037d0
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d046      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0xb8>
 8002cba:	d848      	bhi.n	8002d4e <HAL_RCC_GetSysClockFreq+0xbe>
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d002      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x3c>
 8002cc4:	e043      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc6:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cc8:	613b      	str	r3, [r7, #16]
      break;
 8002cca:	e043      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	220f      	movs	r2, #15
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	401a      	ands	r2, r3
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	481a      	ldr	r0, [pc, #104]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cfc:	f7fd fa04 	bl	8000108 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	001a      	movs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4353      	muls	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e01a      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	025b      	lsls	r3, r3, #9
 8002d12:	401a      	ands	r2, r3
 8002d14:	23c0      	movs	r3, #192	; 0xc0
 8002d16:	025b      	lsls	r3, r3, #9
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d109      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d20:	f7fd f9f2 	bl	8000108 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	001a      	movs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4353      	muls	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	480c      	ldr	r0, [pc, #48]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d34:	f7fd f9e8 	bl	8000108 <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4353      	muls	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	613b      	str	r3, [r7, #16]
      break;
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d4a:	613b      	str	r3, [r7, #16]
      break;
 8002d4c:	e002      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d50:	613b      	str	r3, [r7, #16]
      break;
 8002d52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d54:	693b      	ldr	r3, [r7, #16]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	080037e0 	.word	0x080037e0
 8002d6c:	080037f0 	.word	0x080037f0
 8002d70:	02dc6c00 	.word	0x02dc6c00

08002d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0a8      	b.n	8002ed8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	2382      	movs	r3, #130	; 0x82
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d009      	beq.n	8002dae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
 8002da0:	e005      	b.n	8002dae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	225d      	movs	r2, #93	; 0x5d
 8002db8:	5c9b      	ldrb	r3, [r3, r2]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	225c      	movs	r2, #92	; 0x5c
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe ff9a 	bl	8001d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	225d      	movs	r2, #93	; 0x5d
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	23e0      	movs	r3, #224	; 0xe0
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d902      	bls.n	8002dfa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e002      	b.n	8002e00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	015b      	lsls	r3, r3, #5
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	23f0      	movs	r3, #240	; 0xf0
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d008      	beq.n	8002e1e <HAL_SPI_Init+0xaa>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	23e0      	movs	r3, #224	; 0xe0
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	2382      	movs	r3, #130	; 0x82
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	2384      	movs	r3, #132	; 0x84
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	400b      	ands	r3, r1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2101      	movs	r1, #1
 8002e44:	400b      	ands	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6999      	ldr	r1, [r3, #24]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	400b      	ands	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2138      	movs	r1, #56	; 0x38
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	400b      	ands	r3, r1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	0011      	movs	r1, r2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	401a      	ands	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	2204      	movs	r2, #4
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	2108      	movs	r1, #8
 8002e96:	400b      	ands	r3, r1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	23f0      	movs	r3, #240	; 0xf0
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <HAL_SPI_Init+0x16c>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	225d      	movs	r2, #93	; 0x5d
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	fffff7ff 	.word	0xfffff7ff

08002ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	1cbb      	adds	r3, r7, #2
 8002ef4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002efa:	2323      	movs	r3, #35	; 0x23
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	225c      	movs	r2, #92	; 0x5c
 8002f06:	5c9b      	ldrb	r3, [r3, r2]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x2c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e1c4      	b.n	800329a <HAL_SPI_TransmitReceive+0x3b6>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	225c      	movs	r2, #92	; 0x5c
 8002f14:	2101      	movs	r1, #1
 8002f16:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f18:	f7fe ffe2 	bl	8001ee0 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f20:	201b      	movs	r0, #27
 8002f22:	183b      	adds	r3, r7, r0
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	215d      	movs	r1, #93	; 0x5d
 8002f28:	5c52      	ldrb	r2, [r2, r1]
 8002f2a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f32:	2312      	movs	r3, #18
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	1cba      	adds	r2, r7, #2
 8002f38:	8812      	ldrh	r2, [r2, #0]
 8002f3a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d011      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x84>
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	2382      	movs	r3, #130	; 0x82
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d107      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x7a>
 8002f56:	183b      	adds	r3, r7, r0
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d004      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002f5e:	2323      	movs	r3, #35	; 0x23
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f66:	e191      	b.n	800328c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x98>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x98>
 8002f74:	1cbb      	adds	r3, r7, #2
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002f7c:	2323      	movs	r3, #35	; 0x23
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f84:	e182      	b.n	800328c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	225d      	movs	r2, #93	; 0x5d
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d003      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	225d      	movs	r2, #93	; 0x5d
 8002f96:	2105      	movs	r1, #5
 8002f98:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1cba      	adds	r2, r7, #2
 8002faa:	2146      	movs	r1, #70	; 0x46
 8002fac:	8812      	ldrh	r2, [r2, #0]
 8002fae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1cba      	adds	r2, r7, #2
 8002fb4:	2144      	movs	r1, #68	; 0x44
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1cba      	adds	r2, r7, #2
 8002fc4:	8812      	ldrh	r2, [r2, #0]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1cba      	adds	r2, r7, #2
 8002fcc:	8812      	ldrh	r2, [r2, #0]
 8002fce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	23e0      	movs	r3, #224	; 0xe0
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d908      	bls.n	8002ffa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	49ac      	ldr	r1, [pc, #688]	; (80032a4 <HAL_SPI_TransmitReceive+0x3c0>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	e008      	b.n	800300c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0149      	lsls	r1, r1, #5
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	4013      	ands	r3, r2
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d007      	beq.n	800302a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	23e0      	movs	r3, #224	; 0xe0
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	429a      	cmp	r2, r3
 8003034:	d800      	bhi.n	8003038 <HAL_SPI_TransmitReceive+0x154>
 8003036:	e083      	b.n	8003140 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_SPI_TransmitReceive+0x168>
 8003040:	2312      	movs	r3, #18
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d000      	beq.n	800304c <HAL_SPI_TransmitReceive+0x168>
 800304a:	e06d      	b.n	8003128 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003070:	e05a      	b.n	8003128 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2202      	movs	r2, #2
 800307a:	4013      	ands	r3, r2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d11b      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x1d4>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x1d4>
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	d113      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2201      	movs	r2, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d11c      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x21c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	5a9b      	ldrh	r3, [r3, r2]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	5a9b      	ldrh	r3, [r3, r2]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b299      	uxth	r1, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2246      	movs	r2, #70	; 0x46
 80030fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003100:	f7fe feee 	bl	8001ee0 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310c:	429a      	cmp	r2, r3
 800310e:	d80b      	bhi.n	8003128 <HAL_SPI_TransmitReceive+0x244>
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	3301      	adds	r3, #1
 8003114:	d008      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003116:	2323      	movs	r3, #35	; 0x23
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2203      	movs	r2, #3
 800311c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	225d      	movs	r2, #93	; 0x5d
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]
        goto error;
 8003126:	e0b1      	b.n	800328c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d19f      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x18e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2246      	movs	r2, #70	; 0x46
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d199      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x18e>
 800313e:	e089      	b.n	8003254 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_SPI_TransmitReceive+0x270>
 8003148:	2312      	movs	r3, #18
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d000      	beq.n	8003154 <HAL_SPI_TransmitReceive+0x270>
 8003152:	e074      	b.n	800323e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317a:	e060      	b.n	800323e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2202      	movs	r2, #2
 8003184:	4013      	ands	r3, r2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d11c      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x2e0>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x2e0>
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	2b01      	cmp	r3, #1
 8003198:	d114      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d11e      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x32c>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2246      	movs	r2, #70	; 0x46
 80031d6:	5a9b      	ldrh	r3, [r3, r2]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	001a      	movs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2246      	movs	r2, #70	; 0x46
 80031fe:	5a9b      	ldrh	r3, [r3, r2]
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b299      	uxth	r1, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2246      	movs	r2, #70	; 0x46
 800320a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003210:	f7fe fe66 	bl	8001ee0 <HAL_GetTick>
 8003214:	0002      	movs	r2, r0
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321c:	429a      	cmp	r2, r3
 800321e:	d802      	bhi.n	8003226 <HAL_SPI_TransmitReceive+0x342>
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	3301      	adds	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_SPI_TransmitReceive+0x348>
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800322c:	2323      	movs	r3, #35	; 0x23
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2203      	movs	r2, #3
 8003232:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	225d      	movs	r2, #93	; 0x5d
 8003238:	2101      	movs	r1, #1
 800323a:	5499      	strb	r1, [r3, r2]
        goto error;
 800323c:	e026      	b.n	800328c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d199      	bne.n	800317c <HAL_SPI_TransmitReceive+0x298>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2246      	movs	r2, #70	; 0x46
 800324c:	5a9b      	ldrh	r3, [r3, r2]
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d193      	bne.n	800317c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f954 	bl	8003508 <SPI_EndRxTxTransaction>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d006      	beq.n	8003272 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003264:	2323      	movs	r3, #35	; 0x23
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800327a:	2323      	movs	r3, #35	; 0x23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e003      	b.n	800328c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	225d      	movs	r2, #93	; 0x5d
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	225c      	movs	r2, #92	; 0x5c
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003294:	2323      	movs	r3, #35	; 0x23
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b00a      	add	sp, #40	; 0x28
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	ffffefff 	.word	0xffffefff

080032a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032b8:	f7fe fe12 	bl	8001ee0 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	18d3      	adds	r3, r2, r3
 80032c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032c8:	f7fe fe0a 	bl	8001ee0 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	0d1b      	lsrs	r3, r3, #20
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	4353      	muls	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032de:	e058      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	d055      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e6:	f7fe fdfb 	bl	8001ee0 <HAL_GetTick>
 80032ea:	0002      	movs	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d902      	bls.n	80032fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d142      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	21e0      	movs	r1, #224	; 0xe0
 8003308:	438a      	bics	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	2382      	movs	r3, #130	; 0x82
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	429a      	cmp	r2, r3
 8003316:	d113      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	429a      	cmp	r2, r3
 8003322:	d005      	beq.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	438a      	bics	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	019b      	lsls	r3, r3, #6
 8003348:	429a      	cmp	r2, r3
 800334a:	d110      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	491a      	ldr	r1, [pc, #104]	; (80033c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003358:	400a      	ands	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0189      	lsls	r1, r1, #6
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	225d      	movs	r2, #93	; 0x5d
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	225c      	movs	r2, #92	; 0x5c
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e017      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	4153      	adcs	r3, r2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	001a      	movs	r2, r3
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d197      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b008      	add	sp, #32
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	20000000 	.word	0x20000000
 80033c0:	ffffdfff 	.word	0xffffdfff

080033c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033d2:	2317      	movs	r3, #23
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033da:	f7fe fd81 	bl	8001ee0 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	18d3      	adds	r3, r2, r3
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033ea:	f7fe fd79 	bl	8001ee0 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	0013      	movs	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	189b      	adds	r3, r3, r2
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	4353      	muls	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003410:	e068      	b.n	80034e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	23c0      	movs	r3, #192	; 0xc0
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	429a      	cmp	r2, r3
 800341a:	d10a      	bne.n	8003432 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	2117      	movs	r1, #23
 800342a:	187b      	adds	r3, r7, r1
 800342c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800342e:	187b      	adds	r3, r7, r1
 8003430:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	d055      	beq.n	80034e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003438:	f7fe fd52 	bl	8001ee0 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	429a      	cmp	r2, r3
 8003446:	d902      	bls.n	800344e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d142      	bne.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	21e0      	movs	r1, #224	; 0xe0
 800345a:	438a      	bics	r2, r1
 800345c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	2382      	movs	r3, #130	; 0x82
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	429a      	cmp	r2, r3
 8003468:	d113      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xce>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	429a      	cmp	r2, r3
 8003474:	d005      	beq.n	8003482 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	429a      	cmp	r2, r3
 8003480:	d107      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2140      	movs	r1, #64	; 0x40
 800348e:	438a      	bics	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	429a      	cmp	r2, r3
 800349c:	d110      	bne.n	80034c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4916      	ldr	r1, [pc, #88]	; (8003504 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0189      	lsls	r1, r1, #6
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	225d      	movs	r2, #93	; 0x5d
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	225c      	movs	r2, #92	; 0x5c
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e010      	b.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d18e      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b00a      	add	sp, #40	; 0x28
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	20000000 	.word	0x20000000
 8003504:	ffffdfff 	.word	0xffffdfff

08003508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	0159      	lsls	r1, r3, #5
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	0013      	movs	r3, r2
 8003522:	2200      	movs	r2, #0
 8003524:	f7ff ff4e 	bl	80033c4 <SPI_WaitFifoStateUntilTimeout>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d007      	beq.n	800353c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	2220      	movs	r2, #32
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e027      	b.n	800358c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	0013      	movs	r3, r2
 8003546:	2200      	movs	r2, #0
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	f7ff fead 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d007      	beq.n	8003562 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	2220      	movs	r2, #32
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e014      	b.n	800358c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	00d9      	lsls	r1, r3, #3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	0013      	movs	r3, r2
 8003570:	2200      	movs	r2, #0
 8003572:	f7ff ff27 	bl	80033c4 <SPI_WaitFifoStateUntilTimeout>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d007      	beq.n	800358a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	2220      	movs	r2, #32
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e000      	b.n	800358c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}

08003594 <memset>:
 8003594:	0003      	movs	r3, r0
 8003596:	1882      	adds	r2, r0, r2
 8003598:	4293      	cmp	r3, r2
 800359a:	d100      	bne.n	800359e <memset+0xa>
 800359c:	4770      	bx	lr
 800359e:	7019      	strb	r1, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	e7f9      	b.n	8003598 <memset+0x4>

080035a4 <__errno>:
 80035a4:	4b01      	ldr	r3, [pc, #4]	; (80035ac <__errno+0x8>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	4770      	bx	lr
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000058 	.word	0x20000058

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	2600      	movs	r6, #0
 80035b4:	4c0c      	ldr	r4, [pc, #48]	; (80035e8 <__libc_init_array+0x38>)
 80035b6:	4d0d      	ldr	r5, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	2600      	movs	r6, #0
 80035c2:	f000 f8b9 	bl	8003738 <_init>
 80035c6:	4c0a      	ldr	r4, [pc, #40]	; (80035f0 <__libc_init_array+0x40>)
 80035c8:	4d0a      	ldr	r5, [pc, #40]	; (80035f4 <__libc_init_array+0x44>)
 80035ca:	1b64      	subs	r4, r4, r5
 80035cc:	10a4      	asrs	r4, r4, #2
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	00b3      	lsls	r3, r6, #2
 80035d6:	58eb      	ldr	r3, [r5, r3]
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	00b3      	lsls	r3, r6, #2
 80035e0:	58eb      	ldr	r3, [r5, r3]
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	08003808 	.word	0x08003808
 80035ec:	08003808 	.word	0x08003808
 80035f0:	0800380c 	.word	0x0800380c
 80035f4:	08003808 	.word	0x08003808

080035f8 <fmodf>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	1c06      	adds	r6, r0, #0
 80035fc:	1c0d      	adds	r5, r1, #0
 80035fe:	f000 f819 	bl	8003634 <__ieee754_fmodf>
 8003602:	1c29      	adds	r1, r5, #0
 8003604:	1c04      	adds	r4, r0, #0
 8003606:	1c30      	adds	r0, r6, #0
 8003608:	f7fd f95c 	bl	80008c4 <__aeabi_fcmpun>
 800360c:	2800      	cmp	r0, #0
 800360e:	d10e      	bne.n	800362e <fmodf+0x36>
 8003610:	2100      	movs	r1, #0
 8003612:	1c28      	adds	r0, r5, #0
 8003614:	f7fc fe10 	bl	8000238 <__aeabi_fcmpeq>
 8003618:	2800      	cmp	r0, #0
 800361a:	d008      	beq.n	800362e <fmodf+0x36>
 800361c:	f7ff ffc2 	bl	80035a4 <__errno>
 8003620:	2321      	movs	r3, #33	; 0x21
 8003622:	2100      	movs	r1, #0
 8003624:	6003      	str	r3, [r0, #0]
 8003626:	1c08      	adds	r0, r1, #0
 8003628:	f7fc fe34 	bl	8000294 <__aeabi_fdiv>
 800362c:	1c04      	adds	r4, r0, #0
 800362e:	1c20      	adds	r0, r4, #0
 8003630:	bd70      	pop	{r4, r5, r6, pc}
	...

08003634 <__ieee754_fmodf>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	004b      	lsls	r3, r1, #1
 8003638:	085f      	lsrs	r7, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <__ieee754_fmodf+0x1c>
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	0043      	lsls	r3, r0, #1
 8003642:	0006      	movs	r6, r0
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	05d2      	lsls	r2, r2, #23
 8003648:	4293      	cmp	r3, r2
 800364a:	da01      	bge.n	8003650 <__ieee754_fmodf+0x1c>
 800364c:	4297      	cmp	r7, r2
 800364e:	dd05      	ble.n	800365c <__ieee754_fmodf+0x28>
 8003650:	f7fc ffea 	bl	8000628 <__aeabi_fmul>
 8003654:	1c01      	adds	r1, r0, #0
 8003656:	f7fc fe1d 	bl	8000294 <__aeabi_fdiv>
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365c:	42bb      	cmp	r3, r7
 800365e:	dbfc      	blt.n	800365a <__ieee754_fmodf+0x26>
 8003660:	0fc4      	lsrs	r4, r0, #31
 8003662:	07e4      	lsls	r4, r4, #31
 8003664:	42bb      	cmp	r3, r7
 8003666:	d103      	bne.n	8003670 <__ieee754_fmodf+0x3c>
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <__ieee754_fmodf+0xfc>)
 800366a:	0f64      	lsrs	r4, r4, #29
 800366c:	58e0      	ldr	r0, [r4, r3]
 800366e:	e7f4      	b.n	800365a <__ieee754_fmodf+0x26>
 8003670:	4210      	tst	r0, r2
 8003672:	d137      	bne.n	80036e4 <__ieee754_fmodf+0xb0>
 8003674:	207e      	movs	r0, #126	; 0x7e
 8003676:	021a      	lsls	r2, r3, #8
 8003678:	4240      	negs	r0, r0
 800367a:	2a00      	cmp	r2, #0
 800367c:	dc2f      	bgt.n	80036de <__ieee754_fmodf+0xaa>
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	05d2      	lsls	r2, r2, #23
 8003682:	420a      	tst	r2, r1
 8003684:	d134      	bne.n	80036f0 <__ieee754_fmodf+0xbc>
 8003686:	227e      	movs	r2, #126	; 0x7e
 8003688:	023d      	lsls	r5, r7, #8
 800368a:	4252      	negs	r2, r2
 800368c:	2d00      	cmp	r5, #0
 800368e:	da2c      	bge.n	80036ea <__ieee754_fmodf+0xb6>
 8003690:	0005      	movs	r5, r0
 8003692:	357e      	adds	r5, #126	; 0x7e
 8003694:	db2f      	blt.n	80036f6 <__ieee754_fmodf+0xc2>
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	0276      	lsls	r6, r6, #9
 800369a:	0a76      	lsrs	r6, r6, #9
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	4333      	orrs	r3, r6
 80036a0:	0015      	movs	r5, r2
 80036a2:	357e      	adds	r5, #126	; 0x7e
 80036a4:	db2c      	blt.n	8003700 <__ieee754_fmodf+0xcc>
 80036a6:	024d      	lsls	r5, r1, #9
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	0a6d      	lsrs	r5, r5, #9
 80036ac:	0409      	lsls	r1, r1, #16
 80036ae:	4329      	orrs	r1, r5
 80036b0:	1a80      	subs	r0, r0, r2
 80036b2:	1a5d      	subs	r5, r3, r1
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d129      	bne.n	800370c <__ieee754_fmodf+0xd8>
 80036b8:	2d00      	cmp	r5, #0
 80036ba:	db00      	blt.n	80036be <__ieee754_fmodf+0x8a>
 80036bc:	002b      	movs	r3, r5
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0d2      	beq.n	8003668 <__ieee754_fmodf+0x34>
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	0409      	lsls	r1, r1, #16
 80036c6:	428b      	cmp	r3, r1
 80036c8:	db27      	blt.n	800371a <__ieee754_fmodf+0xe6>
 80036ca:	0011      	movs	r1, r2
 80036cc:	317e      	adds	r1, #126	; 0x7e
 80036ce:	db27      	blt.n	8003720 <__ieee754_fmodf+0xec>
 80036d0:	4918      	ldr	r1, [pc, #96]	; (8003734 <__ieee754_fmodf+0x100>)
 80036d2:	327f      	adds	r2, #127	; 0x7f
 80036d4:	1858      	adds	r0, r3, r1
 80036d6:	05d2      	lsls	r2, r2, #23
 80036d8:	4320      	orrs	r0, r4
 80036da:	4310      	orrs	r0, r2
 80036dc:	e7bd      	b.n	800365a <__ieee754_fmodf+0x26>
 80036de:	3801      	subs	r0, #1
 80036e0:	0052      	lsls	r2, r2, #1
 80036e2:	e7ca      	b.n	800367a <__ieee754_fmodf+0x46>
 80036e4:	15d8      	asrs	r0, r3, #23
 80036e6:	387f      	subs	r0, #127	; 0x7f
 80036e8:	e7c9      	b.n	800367e <__ieee754_fmodf+0x4a>
 80036ea:	3a01      	subs	r2, #1
 80036ec:	006d      	lsls	r5, r5, #1
 80036ee:	e7cd      	b.n	800368c <__ieee754_fmodf+0x58>
 80036f0:	15fa      	asrs	r2, r7, #23
 80036f2:	3a7f      	subs	r2, #127	; 0x7f
 80036f4:	e7cc      	b.n	8003690 <__ieee754_fmodf+0x5c>
 80036f6:	257e      	movs	r5, #126	; 0x7e
 80036f8:	426d      	negs	r5, r5
 80036fa:	1a2d      	subs	r5, r5, r0
 80036fc:	40ab      	lsls	r3, r5
 80036fe:	e7cf      	b.n	80036a0 <__ieee754_fmodf+0x6c>
 8003700:	217e      	movs	r1, #126	; 0x7e
 8003702:	4249      	negs	r1, r1
 8003704:	1a89      	subs	r1, r1, r2
 8003706:	408f      	lsls	r7, r1
 8003708:	0039      	movs	r1, r7
 800370a:	e7d1      	b.n	80036b0 <__ieee754_fmodf+0x7c>
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2d00      	cmp	r5, #0
 8003710:	db01      	blt.n	8003716 <__ieee754_fmodf+0xe2>
 8003712:	d0a9      	beq.n	8003668 <__ieee754_fmodf+0x34>
 8003714:	006b      	lsls	r3, r5, #1
 8003716:	3801      	subs	r0, #1
 8003718:	e7cb      	b.n	80036b2 <__ieee754_fmodf+0x7e>
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	3a01      	subs	r2, #1
 800371e:	e7d2      	b.n	80036c6 <__ieee754_fmodf+0x92>
 8003720:	217e      	movs	r1, #126	; 0x7e
 8003722:	4249      	negs	r1, r1
 8003724:	1a8a      	subs	r2, r1, r2
 8003726:	4113      	asrs	r3, r2
 8003728:	4323      	orrs	r3, r4
 800372a:	0018      	movs	r0, r3
 800372c:	e795      	b.n	800365a <__ieee754_fmodf+0x26>
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	08003800 	.word	0x08003800
 8003734:	ff800000 	.word	0xff800000

08003738 <_init>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr

08003744 <_fini>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr

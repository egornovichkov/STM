
TASK2_GYROSCOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002ab0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049a3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001136  00000000  00000000  00024a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  00025b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000403  00000000  00000000  000260b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cef  00000000  00000000  000264b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006cd2  00000000  00000000  0003e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f19  00000000  00000000  00044e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000012e4  00000000  00000000  000ced90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a54 	.word	0x08002a54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002a54 	.word	0x08002a54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	0243      	lsls	r3, r0, #9
 8000222:	0a5b      	lsrs	r3, r3, #9
 8000224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000226:	464f      	mov	r7, r9
 8000228:	4646      	mov	r6, r8
 800022a:	4699      	mov	r9, r3
 800022c:	46d6      	mov	lr, sl
 800022e:	0fc3      	lsrs	r3, r0, #31
 8000230:	0045      	lsls	r5, r0, #1
 8000232:	4698      	mov	r8, r3
 8000234:	b5c0      	push	{r6, r7, lr}
 8000236:	464b      	mov	r3, r9
 8000238:	1c0f      	adds	r7, r1, #0
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	d100      	bne.n	8000240 <__aeabi_fmul+0x20>
 800023e:	e0cb      	b.n	80003d8 <__aeabi_fmul+0x1b8>
 8000240:	2dff      	cmp	r5, #255	; 0xff
 8000242:	d100      	bne.n	8000246 <__aeabi_fmul+0x26>
 8000244:	e0cf      	b.n	80003e6 <__aeabi_fmul+0x1c6>
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	04d2      	lsls	r2, r2, #19
 800024c:	431a      	orrs	r2, r3
 800024e:	2300      	movs	r3, #0
 8000250:	4691      	mov	r9, r2
 8000252:	2600      	movs	r6, #0
 8000254:	469a      	mov	sl, r3
 8000256:	3d7f      	subs	r5, #127	; 0x7f
 8000258:	027c      	lsls	r4, r7, #9
 800025a:	007b      	lsls	r3, r7, #1
 800025c:	0a64      	lsrs	r4, r4, #9
 800025e:	0e1b      	lsrs	r3, r3, #24
 8000260:	0fff      	lsrs	r7, r7, #31
 8000262:	2b00      	cmp	r3, #0
 8000264:	d100      	bne.n	8000268 <__aeabi_fmul+0x48>
 8000266:	e0a9      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000268:	2bff      	cmp	r3, #255	; 0xff
 800026a:	d011      	beq.n	8000290 <__aeabi_fmul+0x70>
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	00e4      	lsls	r4, r4, #3
 8000270:	04d2      	lsls	r2, r2, #19
 8000272:	4314      	orrs	r4, r2
 8000274:	4642      	mov	r2, r8
 8000276:	3b7f      	subs	r3, #127	; 0x7f
 8000278:	195b      	adds	r3, r3, r5
 800027a:	407a      	eors	r2, r7
 800027c:	2000      	movs	r0, #0
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	1c5d      	adds	r5, r3, #1
 8000282:	2e0a      	cmp	r6, #10
 8000284:	dd13      	ble.n	80002ae <__aeabi_fmul+0x8e>
 8000286:	003a      	movs	r2, r7
 8000288:	2e0b      	cmp	r6, #11
 800028a:	d047      	beq.n	800031c <__aeabi_fmul+0xfc>
 800028c:	4647      	mov	r7, r8
 800028e:	e03f      	b.n	8000310 <__aeabi_fmul+0xf0>
 8000290:	002b      	movs	r3, r5
 8000292:	33ff      	adds	r3, #255	; 0xff
 8000294:	2c00      	cmp	r4, #0
 8000296:	d11e      	bne.n	80002d6 <__aeabi_fmul+0xb6>
 8000298:	2202      	movs	r2, #2
 800029a:	4316      	orrs	r6, r2
 800029c:	4642      	mov	r2, r8
 800029e:	3501      	adds	r5, #1
 80002a0:	407a      	eors	r2, r7
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	35ff      	adds	r5, #255	; 0xff
 80002a6:	2e0a      	cmp	r6, #10
 80002a8:	dd00      	ble.n	80002ac <__aeabi_fmul+0x8c>
 80002aa:	e0e4      	b.n	8000476 <__aeabi_fmul+0x256>
 80002ac:	2002      	movs	r0, #2
 80002ae:	2e02      	cmp	r6, #2
 80002b0:	dc1c      	bgt.n	80002ec <__aeabi_fmul+0xcc>
 80002b2:	3e01      	subs	r6, #1
 80002b4:	2e01      	cmp	r6, #1
 80002b6:	d842      	bhi.n	800033e <__aeabi_fmul+0x11e>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d03d      	beq.n	8000338 <__aeabi_fmul+0x118>
 80002bc:	2801      	cmp	r0, #1
 80002be:	d166      	bne.n	800038e <__aeabi_fmul+0x16e>
 80002c0:	2000      	movs	r0, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	05c0      	lsls	r0, r0, #23
 80002c6:	4308      	orrs	r0, r1
 80002c8:	07d2      	lsls	r2, r2, #31
 80002ca:	4310      	orrs	r0, r2
 80002cc:	bce0      	pop	{r5, r6, r7}
 80002ce:	46ba      	mov	sl, r7
 80002d0:	46b1      	mov	r9, r6
 80002d2:	46a8      	mov	r8, r5
 80002d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d6:	2203      	movs	r2, #3
 80002d8:	4316      	orrs	r6, r2
 80002da:	4642      	mov	r2, r8
 80002dc:	3501      	adds	r5, #1
 80002de:	407a      	eors	r2, r7
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	35ff      	adds	r5, #255	; 0xff
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd00      	ble.n	80002ea <__aeabi_fmul+0xca>
 80002e8:	e0e4      	b.n	80004b4 <__aeabi_fmul+0x294>
 80002ea:	2003      	movs	r0, #3
 80002ec:	2101      	movs	r1, #1
 80002ee:	40b1      	lsls	r1, r6
 80002f0:	26a6      	movs	r6, #166	; 0xa6
 80002f2:	00f6      	lsls	r6, r6, #3
 80002f4:	4231      	tst	r1, r6
 80002f6:	d10a      	bne.n	800030e <__aeabi_fmul+0xee>
 80002f8:	2690      	movs	r6, #144	; 0x90
 80002fa:	00b6      	lsls	r6, r6, #2
 80002fc:	4231      	tst	r1, r6
 80002fe:	d116      	bne.n	800032e <__aeabi_fmul+0x10e>
 8000300:	3eb9      	subs	r6, #185	; 0xb9
 8000302:	3eff      	subs	r6, #255	; 0xff
 8000304:	420e      	tst	r6, r1
 8000306:	d01a      	beq.n	800033e <__aeabi_fmul+0x11e>
 8000308:	46a1      	mov	r9, r4
 800030a:	4682      	mov	sl, r0
 800030c:	e000      	b.n	8000310 <__aeabi_fmul+0xf0>
 800030e:	0017      	movs	r7, r2
 8000310:	4653      	mov	r3, sl
 8000312:	003a      	movs	r2, r7
 8000314:	2b02      	cmp	r3, #2
 8000316:	d00f      	beq.n	8000338 <__aeabi_fmul+0x118>
 8000318:	464c      	mov	r4, r9
 800031a:	4650      	mov	r0, sl
 800031c:	2803      	cmp	r0, #3
 800031e:	d1cd      	bne.n	80002bc <__aeabi_fmul+0x9c>
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	03c9      	lsls	r1, r1, #15
 8000324:	4321      	orrs	r1, r4
 8000326:	0249      	lsls	r1, r1, #9
 8000328:	20ff      	movs	r0, #255	; 0xff
 800032a:	0a49      	lsrs	r1, r1, #9
 800032c:	e7ca      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	2200      	movs	r2, #0
 8000332:	20ff      	movs	r0, #255	; 0xff
 8000334:	03c9      	lsls	r1, r1, #15
 8000336:	e7c5      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000338:	20ff      	movs	r0, #255	; 0xff
 800033a:	2100      	movs	r1, #0
 800033c:	e7c2      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	4649      	mov	r1, r9
 8000342:	0424      	lsls	r4, r4, #16
 8000344:	0c24      	lsrs	r4, r4, #16
 8000346:	0027      	movs	r7, r4
 8000348:	0c0e      	lsrs	r6, r1, #16
 800034a:	0409      	lsls	r1, r1, #16
 800034c:	0c09      	lsrs	r1, r1, #16
 800034e:	4374      	muls	r4, r6
 8000350:	434f      	muls	r7, r1
 8000352:	4346      	muls	r6, r0
 8000354:	4348      	muls	r0, r1
 8000356:	0c39      	lsrs	r1, r7, #16
 8000358:	1900      	adds	r0, r0, r4
 800035a:	1809      	adds	r1, r1, r0
 800035c:	428c      	cmp	r4, r1
 800035e:	d903      	bls.n	8000368 <__aeabi_fmul+0x148>
 8000360:	2080      	movs	r0, #128	; 0x80
 8000362:	0240      	lsls	r0, r0, #9
 8000364:	4684      	mov	ip, r0
 8000366:	4466      	add	r6, ip
 8000368:	043f      	lsls	r7, r7, #16
 800036a:	0408      	lsls	r0, r1, #16
 800036c:	0c3f      	lsrs	r7, r7, #16
 800036e:	19c0      	adds	r0, r0, r7
 8000370:	0184      	lsls	r4, r0, #6
 8000372:	1e67      	subs	r7, r4, #1
 8000374:	41bc      	sbcs	r4, r7
 8000376:	0c09      	lsrs	r1, r1, #16
 8000378:	0e80      	lsrs	r0, r0, #26
 800037a:	1989      	adds	r1, r1, r6
 800037c:	4304      	orrs	r4, r0
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	430c      	orrs	r4, r1
 8000382:	0109      	lsls	r1, r1, #4
 8000384:	d571      	bpl.n	800046a <__aeabi_fmul+0x24a>
 8000386:	2301      	movs	r3, #1
 8000388:	0861      	lsrs	r1, r4, #1
 800038a:	401c      	ands	r4, r3
 800038c:	430c      	orrs	r4, r1
 800038e:	002b      	movs	r3, r5
 8000390:	337f      	adds	r3, #127	; 0x7f
 8000392:	2b00      	cmp	r3, #0
 8000394:	dd51      	ble.n	800043a <__aeabi_fmul+0x21a>
 8000396:	0761      	lsls	r1, r4, #29
 8000398:	d004      	beq.n	80003a4 <__aeabi_fmul+0x184>
 800039a:	210f      	movs	r1, #15
 800039c:	4021      	ands	r1, r4
 800039e:	2904      	cmp	r1, #4
 80003a0:	d000      	beq.n	80003a4 <__aeabi_fmul+0x184>
 80003a2:	3404      	adds	r4, #4
 80003a4:	0121      	lsls	r1, r4, #4
 80003a6:	d503      	bpl.n	80003b0 <__aeabi_fmul+0x190>
 80003a8:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <__aeabi_fmul+0x298>)
 80003aa:	401c      	ands	r4, r3
 80003ac:	002b      	movs	r3, r5
 80003ae:	3380      	adds	r3, #128	; 0x80
 80003b0:	2bfe      	cmp	r3, #254	; 0xfe
 80003b2:	dcc1      	bgt.n	8000338 <__aeabi_fmul+0x118>
 80003b4:	01a1      	lsls	r1, r4, #6
 80003b6:	0a49      	lsrs	r1, r1, #9
 80003b8:	b2d8      	uxtb	r0, r3
 80003ba:	e783      	b.n	80002c4 <__aeabi_fmul+0xa4>
 80003bc:	2c00      	cmp	r4, #0
 80003be:	d12c      	bne.n	800041a <__aeabi_fmul+0x1fa>
 80003c0:	2301      	movs	r3, #1
 80003c2:	4642      	mov	r2, r8
 80003c4:	431e      	orrs	r6, r3
 80003c6:	002b      	movs	r3, r5
 80003c8:	407a      	eors	r2, r7
 80003ca:	2001      	movs	r0, #1
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	1c5d      	adds	r5, r3, #1
 80003d0:	2e0a      	cmp	r6, #10
 80003d2:	dd00      	ble.n	80003d6 <__aeabi_fmul+0x1b6>
 80003d4:	e757      	b.n	8000286 <__aeabi_fmul+0x66>
 80003d6:	e76a      	b.n	80002ae <__aeabi_fmul+0x8e>
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d110      	bne.n	80003fe <__aeabi_fmul+0x1de>
 80003dc:	2301      	movs	r3, #1
 80003de:	2604      	movs	r6, #4
 80003e0:	2500      	movs	r5, #0
 80003e2:	469a      	mov	sl, r3
 80003e4:	e738      	b.n	8000258 <__aeabi_fmul+0x38>
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d104      	bne.n	80003f4 <__aeabi_fmul+0x1d4>
 80003ea:	2302      	movs	r3, #2
 80003ec:	2608      	movs	r6, #8
 80003ee:	25ff      	movs	r5, #255	; 0xff
 80003f0:	469a      	mov	sl, r3
 80003f2:	e731      	b.n	8000258 <__aeabi_fmul+0x38>
 80003f4:	2303      	movs	r3, #3
 80003f6:	260c      	movs	r6, #12
 80003f8:	25ff      	movs	r5, #255	; 0xff
 80003fa:	469a      	mov	sl, r3
 80003fc:	e72c      	b.n	8000258 <__aeabi_fmul+0x38>
 80003fe:	4648      	mov	r0, r9
 8000400:	f000 fc3e 	bl	8000c80 <__clzsi2>
 8000404:	464a      	mov	r2, r9
 8000406:	1f43      	subs	r3, r0, #5
 8000408:	2576      	movs	r5, #118	; 0x76
 800040a:	409a      	lsls	r2, r3
 800040c:	2300      	movs	r3, #0
 800040e:	426d      	negs	r5, r5
 8000410:	4691      	mov	r9, r2
 8000412:	2600      	movs	r6, #0
 8000414:	469a      	mov	sl, r3
 8000416:	1a2d      	subs	r5, r5, r0
 8000418:	e71e      	b.n	8000258 <__aeabi_fmul+0x38>
 800041a:	0020      	movs	r0, r4
 800041c:	f000 fc30 	bl	8000c80 <__clzsi2>
 8000420:	4642      	mov	r2, r8
 8000422:	1f43      	subs	r3, r0, #5
 8000424:	409c      	lsls	r4, r3
 8000426:	1a2b      	subs	r3, r5, r0
 8000428:	3b76      	subs	r3, #118	; 0x76
 800042a:	407a      	eors	r2, r7
 800042c:	2000      	movs	r0, #0
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	1c5d      	adds	r5, r3, #1
 8000432:	2e0a      	cmp	r6, #10
 8000434:	dd00      	ble.n	8000438 <__aeabi_fmul+0x218>
 8000436:	e726      	b.n	8000286 <__aeabi_fmul+0x66>
 8000438:	e739      	b.n	80002ae <__aeabi_fmul+0x8e>
 800043a:	2101      	movs	r1, #1
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	2b1b      	cmp	r3, #27
 8000440:	dd00      	ble.n	8000444 <__aeabi_fmul+0x224>
 8000442:	e73d      	b.n	80002c0 <__aeabi_fmul+0xa0>
 8000444:	359e      	adds	r5, #158	; 0x9e
 8000446:	0021      	movs	r1, r4
 8000448:	40ac      	lsls	r4, r5
 800044a:	40d9      	lsrs	r1, r3
 800044c:	1e63      	subs	r3, r4, #1
 800044e:	419c      	sbcs	r4, r3
 8000450:	4321      	orrs	r1, r4
 8000452:	074b      	lsls	r3, r1, #29
 8000454:	d004      	beq.n	8000460 <__aeabi_fmul+0x240>
 8000456:	230f      	movs	r3, #15
 8000458:	400b      	ands	r3, r1
 800045a:	2b04      	cmp	r3, #4
 800045c:	d000      	beq.n	8000460 <__aeabi_fmul+0x240>
 800045e:	3104      	adds	r1, #4
 8000460:	014b      	lsls	r3, r1, #5
 8000462:	d504      	bpl.n	800046e <__aeabi_fmul+0x24e>
 8000464:	2001      	movs	r0, #1
 8000466:	2100      	movs	r1, #0
 8000468:	e72c      	b.n	80002c4 <__aeabi_fmul+0xa4>
 800046a:	001d      	movs	r5, r3
 800046c:	e78f      	b.n	800038e <__aeabi_fmul+0x16e>
 800046e:	0189      	lsls	r1, r1, #6
 8000470:	2000      	movs	r0, #0
 8000472:	0a49      	lsrs	r1, r1, #9
 8000474:	e726      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000476:	2302      	movs	r3, #2
 8000478:	2e0f      	cmp	r6, #15
 800047a:	d10c      	bne.n	8000496 <__aeabi_fmul+0x276>
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	464b      	mov	r3, r9
 8000480:	03c9      	lsls	r1, r1, #15
 8000482:	420b      	tst	r3, r1
 8000484:	d00d      	beq.n	80004a2 <__aeabi_fmul+0x282>
 8000486:	420c      	tst	r4, r1
 8000488:	d10b      	bne.n	80004a2 <__aeabi_fmul+0x282>
 800048a:	4321      	orrs	r1, r4
 800048c:	0249      	lsls	r1, r1, #9
 800048e:	003a      	movs	r2, r7
 8000490:	20ff      	movs	r0, #255	; 0xff
 8000492:	0a49      	lsrs	r1, r1, #9
 8000494:	e716      	b.n	80002c4 <__aeabi_fmul+0xa4>
 8000496:	2e0b      	cmp	r6, #11
 8000498:	d000      	beq.n	800049c <__aeabi_fmul+0x27c>
 800049a:	e6f7      	b.n	800028c <__aeabi_fmul+0x6c>
 800049c:	46a1      	mov	r9, r4
 800049e:	469a      	mov	sl, r3
 80004a0:	e736      	b.n	8000310 <__aeabi_fmul+0xf0>
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	464b      	mov	r3, r9
 80004a6:	03c9      	lsls	r1, r1, #15
 80004a8:	4319      	orrs	r1, r3
 80004aa:	0249      	lsls	r1, r1, #9
 80004ac:	4642      	mov	r2, r8
 80004ae:	20ff      	movs	r0, #255	; 0xff
 80004b0:	0a49      	lsrs	r1, r1, #9
 80004b2:	e707      	b.n	80002c4 <__aeabi_fmul+0xa4>
 80004b4:	2303      	movs	r3, #3
 80004b6:	e7df      	b.n	8000478 <__aeabi_fmul+0x258>
 80004b8:	f7ffffff 	.word	0xf7ffffff

080004bc <__aeabi_i2f>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2800      	cmp	r0, #0
 80004c0:	d013      	beq.n	80004ea <__aeabi_i2f+0x2e>
 80004c2:	17c3      	asrs	r3, r0, #31
 80004c4:	18c5      	adds	r5, r0, r3
 80004c6:	405d      	eors	r5, r3
 80004c8:	0fc4      	lsrs	r4, r0, #31
 80004ca:	0028      	movs	r0, r5
 80004cc:	f000 fbd8 	bl	8000c80 <__clzsi2>
 80004d0:	239e      	movs	r3, #158	; 0x9e
 80004d2:	0001      	movs	r1, r0
 80004d4:	1a1b      	subs	r3, r3, r0
 80004d6:	2b96      	cmp	r3, #150	; 0x96
 80004d8:	dc0f      	bgt.n	80004fa <__aeabi_i2f+0x3e>
 80004da:	2808      	cmp	r0, #8
 80004dc:	d031      	beq.n	8000542 <__aeabi_i2f+0x86>
 80004de:	3908      	subs	r1, #8
 80004e0:	408d      	lsls	r5, r1
 80004e2:	026d      	lsls	r5, r5, #9
 80004e4:	0a6d      	lsrs	r5, r5, #9
 80004e6:	b2d8      	uxtb	r0, r3
 80004e8:	e002      	b.n	80004f0 <__aeabi_i2f+0x34>
 80004ea:	2400      	movs	r4, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	2500      	movs	r5, #0
 80004f0:	05c0      	lsls	r0, r0, #23
 80004f2:	4328      	orrs	r0, r5
 80004f4:	07e4      	lsls	r4, r4, #31
 80004f6:	4320      	orrs	r0, r4
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	2b99      	cmp	r3, #153	; 0x99
 80004fc:	dd0c      	ble.n	8000518 <__aeabi_i2f+0x5c>
 80004fe:	2205      	movs	r2, #5
 8000500:	1a12      	subs	r2, r2, r0
 8000502:	0028      	movs	r0, r5
 8000504:	40d0      	lsrs	r0, r2
 8000506:	0002      	movs	r2, r0
 8000508:	0008      	movs	r0, r1
 800050a:	301b      	adds	r0, #27
 800050c:	4085      	lsls	r5, r0
 800050e:	0028      	movs	r0, r5
 8000510:	1e45      	subs	r5, r0, #1
 8000512:	41a8      	sbcs	r0, r5
 8000514:	4302      	orrs	r2, r0
 8000516:	0015      	movs	r5, r2
 8000518:	2905      	cmp	r1, #5
 800051a:	dc16      	bgt.n	800054a <__aeabi_i2f+0x8e>
 800051c:	002a      	movs	r2, r5
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <__aeabi_i2f+0xa0>)
 8000520:	4002      	ands	r2, r0
 8000522:	076e      	lsls	r6, r5, #29
 8000524:	d009      	beq.n	800053a <__aeabi_i2f+0x7e>
 8000526:	260f      	movs	r6, #15
 8000528:	4035      	ands	r5, r6
 800052a:	2d04      	cmp	r5, #4
 800052c:	d005      	beq.n	800053a <__aeabi_i2f+0x7e>
 800052e:	3204      	adds	r2, #4
 8000530:	0155      	lsls	r5, r2, #5
 8000532:	d502      	bpl.n	800053a <__aeabi_i2f+0x7e>
 8000534:	239f      	movs	r3, #159	; 0x9f
 8000536:	4002      	ands	r2, r0
 8000538:	1a5b      	subs	r3, r3, r1
 800053a:	0192      	lsls	r2, r2, #6
 800053c:	0a55      	lsrs	r5, r2, #9
 800053e:	b2d8      	uxtb	r0, r3
 8000540:	e7d6      	b.n	80004f0 <__aeabi_i2f+0x34>
 8000542:	026d      	lsls	r5, r5, #9
 8000544:	2096      	movs	r0, #150	; 0x96
 8000546:	0a6d      	lsrs	r5, r5, #9
 8000548:	e7d2      	b.n	80004f0 <__aeabi_i2f+0x34>
 800054a:	1f4a      	subs	r2, r1, #5
 800054c:	4095      	lsls	r5, r2
 800054e:	002a      	movs	r2, r5
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <__aeabi_i2f+0xa0>)
 8000552:	4002      	ands	r2, r0
 8000554:	076e      	lsls	r6, r5, #29
 8000556:	d0f0      	beq.n	800053a <__aeabi_i2f+0x7e>
 8000558:	e7e5      	b.n	8000526 <__aeabi_i2f+0x6a>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	fbffffff 	.word	0xfbffffff

08000560 <__aeabi_dmul>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4645      	mov	r5, r8
 8000564:	46de      	mov	lr, fp
 8000566:	4657      	mov	r7, sl
 8000568:	464e      	mov	r6, r9
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	001f      	movs	r7, r3
 800056e:	030b      	lsls	r3, r1, #12
 8000570:	0b1b      	lsrs	r3, r3, #12
 8000572:	469b      	mov	fp, r3
 8000574:	004d      	lsls	r5, r1, #1
 8000576:	0fcb      	lsrs	r3, r1, #31
 8000578:	0004      	movs	r4, r0
 800057a:	4691      	mov	r9, r2
 800057c:	4698      	mov	r8, r3
 800057e:	b087      	sub	sp, #28
 8000580:	0d6d      	lsrs	r5, r5, #21
 8000582:	d100      	bne.n	8000586 <__aeabi_dmul+0x26>
 8000584:	e1cd      	b.n	8000922 <__aeabi_dmul+0x3c2>
 8000586:	4bce      	ldr	r3, [pc, #824]	; (80008c0 <__aeabi_dmul+0x360>)
 8000588:	429d      	cmp	r5, r3
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x2e>
 800058c:	e1e9      	b.n	8000962 <__aeabi_dmul+0x402>
 800058e:	465a      	mov	r2, fp
 8000590:	0f43      	lsrs	r3, r0, #29
 8000592:	00d2      	lsls	r2, r2, #3
 8000594:	4313      	orrs	r3, r2
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0412      	lsls	r2, r2, #16
 800059a:	431a      	orrs	r2, r3
 800059c:	00c3      	lsls	r3, r0, #3
 800059e:	469a      	mov	sl, r3
 80005a0:	4bc8      	ldr	r3, [pc, #800]	; (80008c4 <__aeabi_dmul+0x364>)
 80005a2:	4693      	mov	fp, r2
 80005a4:	469c      	mov	ip, r3
 80005a6:	2300      	movs	r3, #0
 80005a8:	2600      	movs	r6, #0
 80005aa:	4465      	add	r5, ip
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	033c      	lsls	r4, r7, #12
 80005b0:	007b      	lsls	r3, r7, #1
 80005b2:	4648      	mov	r0, r9
 80005b4:	0b24      	lsrs	r4, r4, #12
 80005b6:	0d5b      	lsrs	r3, r3, #21
 80005b8:	0fff      	lsrs	r7, r7, #31
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dmul+0x60>
 80005be:	e189      	b.n	80008d4 <__aeabi_dmul+0x374>
 80005c0:	4abf      	ldr	r2, [pc, #764]	; (80008c0 <__aeabi_dmul+0x360>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d019      	beq.n	80005fa <__aeabi_dmul+0x9a>
 80005c6:	0f42      	lsrs	r2, r0, #29
 80005c8:	00e4      	lsls	r4, r4, #3
 80005ca:	4322      	orrs	r2, r4
 80005cc:	2480      	movs	r4, #128	; 0x80
 80005ce:	0424      	lsls	r4, r4, #16
 80005d0:	4314      	orrs	r4, r2
 80005d2:	4abc      	ldr	r2, [pc, #752]	; (80008c4 <__aeabi_dmul+0x364>)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4694      	mov	ip, r2
 80005d8:	4642      	mov	r2, r8
 80005da:	4463      	add	r3, ip
 80005dc:	195b      	adds	r3, r3, r5
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	9b01      	ldr	r3, [sp, #4]
 80005e2:	407a      	eors	r2, r7
 80005e4:	3301      	adds	r3, #1
 80005e6:	00c0      	lsls	r0, r0, #3
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2e0a      	cmp	r6, #10
 80005ee:	dd1c      	ble.n	800062a <__aeabi_dmul+0xca>
 80005f0:	003a      	movs	r2, r7
 80005f2:	2e0b      	cmp	r6, #11
 80005f4:	d05e      	beq.n	80006b4 <__aeabi_dmul+0x154>
 80005f6:	4647      	mov	r7, r8
 80005f8:	e056      	b.n	80006a8 <__aeabi_dmul+0x148>
 80005fa:	4649      	mov	r1, r9
 80005fc:	4bb0      	ldr	r3, [pc, #704]	; (80008c0 <__aeabi_dmul+0x360>)
 80005fe:	4321      	orrs	r1, r4
 8000600:	18eb      	adds	r3, r5, r3
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2900      	cmp	r1, #0
 8000606:	d12a      	bne.n	800065e <__aeabi_dmul+0xfe>
 8000608:	2080      	movs	r0, #128	; 0x80
 800060a:	2202      	movs	r2, #2
 800060c:	0100      	lsls	r0, r0, #4
 800060e:	002b      	movs	r3, r5
 8000610:	4684      	mov	ip, r0
 8000612:	4316      	orrs	r6, r2
 8000614:	4642      	mov	r2, r8
 8000616:	4463      	add	r3, ip
 8000618:	407a      	eors	r2, r7
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2e0a      	cmp	r6, #10
 8000620:	dd00      	ble.n	8000624 <__aeabi_dmul+0xc4>
 8000622:	e231      	b.n	8000a88 <__aeabi_dmul+0x528>
 8000624:	2000      	movs	r0, #0
 8000626:	2400      	movs	r4, #0
 8000628:	2102      	movs	r1, #2
 800062a:	2e02      	cmp	r6, #2
 800062c:	dc26      	bgt.n	800067c <__aeabi_dmul+0x11c>
 800062e:	3e01      	subs	r6, #1
 8000630:	2e01      	cmp	r6, #1
 8000632:	d852      	bhi.n	80006da <__aeabi_dmul+0x17a>
 8000634:	2902      	cmp	r1, #2
 8000636:	d04c      	beq.n	80006d2 <__aeabi_dmul+0x172>
 8000638:	2901      	cmp	r1, #1
 800063a:	d000      	beq.n	800063e <__aeabi_dmul+0xde>
 800063c:	e118      	b.n	8000870 <__aeabi_dmul+0x310>
 800063e:	2300      	movs	r3, #0
 8000640:	2400      	movs	r4, #0
 8000642:	2500      	movs	r5, #0
 8000644:	051b      	lsls	r3, r3, #20
 8000646:	4323      	orrs	r3, r4
 8000648:	07d2      	lsls	r2, r2, #31
 800064a:	4313      	orrs	r3, r2
 800064c:	0028      	movs	r0, r5
 800064e:	0019      	movs	r1, r3
 8000650:	b007      	add	sp, #28
 8000652:	bcf0      	pop	{r4, r5, r6, r7}
 8000654:	46bb      	mov	fp, r7
 8000656:	46b2      	mov	sl, r6
 8000658:	46a9      	mov	r9, r5
 800065a:	46a0      	mov	r8, r4
 800065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	2203      	movs	r2, #3
 8000662:	0109      	lsls	r1, r1, #4
 8000664:	002b      	movs	r3, r5
 8000666:	468c      	mov	ip, r1
 8000668:	4316      	orrs	r6, r2
 800066a:	4642      	mov	r2, r8
 800066c:	4463      	add	r3, ip
 800066e:	407a      	eors	r2, r7
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	2e0a      	cmp	r6, #10
 8000676:	dd00      	ble.n	800067a <__aeabi_dmul+0x11a>
 8000678:	e228      	b.n	8000acc <__aeabi_dmul+0x56c>
 800067a:	2103      	movs	r1, #3
 800067c:	2501      	movs	r5, #1
 800067e:	40b5      	lsls	r5, r6
 8000680:	46ac      	mov	ip, r5
 8000682:	26a6      	movs	r6, #166	; 0xa6
 8000684:	4663      	mov	r3, ip
 8000686:	00f6      	lsls	r6, r6, #3
 8000688:	4035      	ands	r5, r6
 800068a:	4233      	tst	r3, r6
 800068c:	d10b      	bne.n	80006a6 <__aeabi_dmul+0x146>
 800068e:	2690      	movs	r6, #144	; 0x90
 8000690:	00b6      	lsls	r6, r6, #2
 8000692:	4233      	tst	r3, r6
 8000694:	d118      	bne.n	80006c8 <__aeabi_dmul+0x168>
 8000696:	3eb9      	subs	r6, #185	; 0xb9
 8000698:	3eff      	subs	r6, #255	; 0xff
 800069a:	421e      	tst	r6, r3
 800069c:	d01d      	beq.n	80006da <__aeabi_dmul+0x17a>
 800069e:	46a3      	mov	fp, r4
 80006a0:	4682      	mov	sl, r0
 80006a2:	9100      	str	r1, [sp, #0]
 80006a4:	e000      	b.n	80006a8 <__aeabi_dmul+0x148>
 80006a6:	0017      	movs	r7, r2
 80006a8:	9900      	ldr	r1, [sp, #0]
 80006aa:	003a      	movs	r2, r7
 80006ac:	2902      	cmp	r1, #2
 80006ae:	d010      	beq.n	80006d2 <__aeabi_dmul+0x172>
 80006b0:	465c      	mov	r4, fp
 80006b2:	4650      	mov	r0, sl
 80006b4:	2903      	cmp	r1, #3
 80006b6:	d1bf      	bne.n	8000638 <__aeabi_dmul+0xd8>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	031b      	lsls	r3, r3, #12
 80006bc:	431c      	orrs	r4, r3
 80006be:	0324      	lsls	r4, r4, #12
 80006c0:	0005      	movs	r5, r0
 80006c2:	4b7f      	ldr	r3, [pc, #508]	; (80008c0 <__aeabi_dmul+0x360>)
 80006c4:	0b24      	lsrs	r4, r4, #12
 80006c6:	e7bd      	b.n	8000644 <__aeabi_dmul+0xe4>
 80006c8:	2480      	movs	r4, #128	; 0x80
 80006ca:	2200      	movs	r2, #0
 80006cc:	4b7c      	ldr	r3, [pc, #496]	; (80008c0 <__aeabi_dmul+0x360>)
 80006ce:	0324      	lsls	r4, r4, #12
 80006d0:	e7b8      	b.n	8000644 <__aeabi_dmul+0xe4>
 80006d2:	2400      	movs	r4, #0
 80006d4:	2500      	movs	r5, #0
 80006d6:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <__aeabi_dmul+0x360>)
 80006d8:	e7b4      	b.n	8000644 <__aeabi_dmul+0xe4>
 80006da:	4653      	mov	r3, sl
 80006dc:	041e      	lsls	r6, r3, #16
 80006de:	0c36      	lsrs	r6, r6, #16
 80006e0:	0c1f      	lsrs	r7, r3, #16
 80006e2:	0033      	movs	r3, r6
 80006e4:	0c01      	lsrs	r1, r0, #16
 80006e6:	0400      	lsls	r0, r0, #16
 80006e8:	0c00      	lsrs	r0, r0, #16
 80006ea:	4343      	muls	r3, r0
 80006ec:	4698      	mov	r8, r3
 80006ee:	0003      	movs	r3, r0
 80006f0:	437b      	muls	r3, r7
 80006f2:	4699      	mov	r9, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	434b      	muls	r3, r1
 80006f8:	469c      	mov	ip, r3
 80006fa:	4643      	mov	r3, r8
 80006fc:	000d      	movs	r5, r1
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	469a      	mov	sl, r3
 8000702:	437d      	muls	r5, r7
 8000704:	44cc      	add	ip, r9
 8000706:	44d4      	add	ip, sl
 8000708:	9500      	str	r5, [sp, #0]
 800070a:	45e1      	cmp	r9, ip
 800070c:	d904      	bls.n	8000718 <__aeabi_dmul+0x1b8>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	025b      	lsls	r3, r3, #9
 8000712:	4699      	mov	r9, r3
 8000714:	444d      	add	r5, r9
 8000716:	9500      	str	r5, [sp, #0]
 8000718:	4663      	mov	r3, ip
 800071a:	0c1b      	lsrs	r3, r3, #16
 800071c:	001d      	movs	r5, r3
 800071e:	4663      	mov	r3, ip
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	469c      	mov	ip, r3
 8000724:	4643      	mov	r3, r8
 8000726:	041b      	lsls	r3, r3, #16
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	4698      	mov	r8, r3
 800072c:	4663      	mov	r3, ip
 800072e:	4443      	add	r3, r8
 8000730:	9303      	str	r3, [sp, #12]
 8000732:	0c23      	lsrs	r3, r4, #16
 8000734:	4698      	mov	r8, r3
 8000736:	0033      	movs	r3, r6
 8000738:	0424      	lsls	r4, r4, #16
 800073a:	0c24      	lsrs	r4, r4, #16
 800073c:	4363      	muls	r3, r4
 800073e:	469c      	mov	ip, r3
 8000740:	0023      	movs	r3, r4
 8000742:	437b      	muls	r3, r7
 8000744:	4699      	mov	r9, r3
 8000746:	4643      	mov	r3, r8
 8000748:	435e      	muls	r6, r3
 800074a:	435f      	muls	r7, r3
 800074c:	444e      	add	r6, r9
 800074e:	4663      	mov	r3, ip
 8000750:	46b2      	mov	sl, r6
 8000752:	0c1e      	lsrs	r6, r3, #16
 8000754:	4456      	add	r6, sl
 8000756:	45b1      	cmp	r9, r6
 8000758:	d903      	bls.n	8000762 <__aeabi_dmul+0x202>
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	025b      	lsls	r3, r3, #9
 800075e:	4699      	mov	r9, r3
 8000760:	444f      	add	r7, r9
 8000762:	0c33      	lsrs	r3, r6, #16
 8000764:	4699      	mov	r9, r3
 8000766:	003b      	movs	r3, r7
 8000768:	444b      	add	r3, r9
 800076a:	9305      	str	r3, [sp, #20]
 800076c:	4663      	mov	r3, ip
 800076e:	46ac      	mov	ip, r5
 8000770:	041f      	lsls	r7, r3, #16
 8000772:	0c3f      	lsrs	r7, r7, #16
 8000774:	0436      	lsls	r6, r6, #16
 8000776:	19f6      	adds	r6, r6, r7
 8000778:	44b4      	add	ip, r6
 800077a:	4663      	mov	r3, ip
 800077c:	9304      	str	r3, [sp, #16]
 800077e:	465b      	mov	r3, fp
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	469c      	mov	ip, r3
 8000784:	465b      	mov	r3, fp
 8000786:	041f      	lsls	r7, r3, #16
 8000788:	0c3f      	lsrs	r7, r7, #16
 800078a:	003b      	movs	r3, r7
 800078c:	4343      	muls	r3, r0
 800078e:	4699      	mov	r9, r3
 8000790:	4663      	mov	r3, ip
 8000792:	4343      	muls	r3, r0
 8000794:	469a      	mov	sl, r3
 8000796:	464b      	mov	r3, r9
 8000798:	4660      	mov	r0, ip
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	469b      	mov	fp, r3
 800079e:	4348      	muls	r0, r1
 80007a0:	4379      	muls	r1, r7
 80007a2:	4451      	add	r1, sl
 80007a4:	4459      	add	r1, fp
 80007a6:	458a      	cmp	sl, r1
 80007a8:	d903      	bls.n	80007b2 <__aeabi_dmul+0x252>
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	469a      	mov	sl, r3
 80007b0:	4450      	add	r0, sl
 80007b2:	0c0b      	lsrs	r3, r1, #16
 80007b4:	469a      	mov	sl, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	4699      	mov	r9, r3
 80007be:	003b      	movs	r3, r7
 80007c0:	4363      	muls	r3, r4
 80007c2:	0409      	lsls	r1, r1, #16
 80007c4:	4645      	mov	r5, r8
 80007c6:	4449      	add	r1, r9
 80007c8:	4699      	mov	r9, r3
 80007ca:	4663      	mov	r3, ip
 80007cc:	435c      	muls	r4, r3
 80007ce:	436b      	muls	r3, r5
 80007d0:	469c      	mov	ip, r3
 80007d2:	464b      	mov	r3, r9
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	4698      	mov	r8, r3
 80007d8:	436f      	muls	r7, r5
 80007da:	193f      	adds	r7, r7, r4
 80007dc:	4447      	add	r7, r8
 80007de:	4450      	add	r0, sl
 80007e0:	42bc      	cmp	r4, r7
 80007e2:	d903      	bls.n	80007ec <__aeabi_dmul+0x28c>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	025b      	lsls	r3, r3, #9
 80007e8:	4698      	mov	r8, r3
 80007ea:	44c4      	add	ip, r8
 80007ec:	9b04      	ldr	r3, [sp, #16]
 80007ee:	9d00      	ldr	r5, [sp, #0]
 80007f0:	4698      	mov	r8, r3
 80007f2:	4445      	add	r5, r8
 80007f4:	42b5      	cmp	r5, r6
 80007f6:	41b6      	sbcs	r6, r6
 80007f8:	4273      	negs	r3, r6
 80007fa:	4698      	mov	r8, r3
 80007fc:	464b      	mov	r3, r9
 80007fe:	041e      	lsls	r6, r3, #16
 8000800:	9b05      	ldr	r3, [sp, #20]
 8000802:	043c      	lsls	r4, r7, #16
 8000804:	4699      	mov	r9, r3
 8000806:	0c36      	lsrs	r6, r6, #16
 8000808:	19a4      	adds	r4, r4, r6
 800080a:	444c      	add	r4, r9
 800080c:	46a1      	mov	r9, r4
 800080e:	4683      	mov	fp, r0
 8000810:	186e      	adds	r6, r5, r1
 8000812:	44c1      	add	r9, r8
 8000814:	428e      	cmp	r6, r1
 8000816:	4189      	sbcs	r1, r1
 8000818:	44cb      	add	fp, r9
 800081a:	465d      	mov	r5, fp
 800081c:	4249      	negs	r1, r1
 800081e:	186d      	adds	r5, r5, r1
 8000820:	429c      	cmp	r4, r3
 8000822:	41a4      	sbcs	r4, r4
 8000824:	45c1      	cmp	r9, r8
 8000826:	419b      	sbcs	r3, r3
 8000828:	4583      	cmp	fp, r0
 800082a:	4180      	sbcs	r0, r0
 800082c:	428d      	cmp	r5, r1
 800082e:	4189      	sbcs	r1, r1
 8000830:	425b      	negs	r3, r3
 8000832:	4264      	negs	r4, r4
 8000834:	431c      	orrs	r4, r3
 8000836:	4240      	negs	r0, r0
 8000838:	9b03      	ldr	r3, [sp, #12]
 800083a:	4249      	negs	r1, r1
 800083c:	4301      	orrs	r1, r0
 800083e:	0270      	lsls	r0, r6, #9
 8000840:	0c3f      	lsrs	r7, r7, #16
 8000842:	4318      	orrs	r0, r3
 8000844:	19e4      	adds	r4, r4, r7
 8000846:	1e47      	subs	r7, r0, #1
 8000848:	41b8      	sbcs	r0, r7
 800084a:	1864      	adds	r4, r4, r1
 800084c:	4464      	add	r4, ip
 800084e:	0df6      	lsrs	r6, r6, #23
 8000850:	0261      	lsls	r1, r4, #9
 8000852:	4330      	orrs	r0, r6
 8000854:	0dec      	lsrs	r4, r5, #23
 8000856:	026e      	lsls	r6, r5, #9
 8000858:	430c      	orrs	r4, r1
 800085a:	4330      	orrs	r0, r6
 800085c:	01c9      	lsls	r1, r1, #7
 800085e:	d400      	bmi.n	8000862 <__aeabi_dmul+0x302>
 8000860:	e0f1      	b.n	8000a46 <__aeabi_dmul+0x4e6>
 8000862:	2101      	movs	r1, #1
 8000864:	0843      	lsrs	r3, r0, #1
 8000866:	4001      	ands	r1, r0
 8000868:	430b      	orrs	r3, r1
 800086a:	07e0      	lsls	r0, r4, #31
 800086c:	4318      	orrs	r0, r3
 800086e:	0864      	lsrs	r4, r4, #1
 8000870:	4915      	ldr	r1, [pc, #84]	; (80008c8 <__aeabi_dmul+0x368>)
 8000872:	9b02      	ldr	r3, [sp, #8]
 8000874:	468c      	mov	ip, r1
 8000876:	4463      	add	r3, ip
 8000878:	2b00      	cmp	r3, #0
 800087a:	dc00      	bgt.n	800087e <__aeabi_dmul+0x31e>
 800087c:	e097      	b.n	80009ae <__aeabi_dmul+0x44e>
 800087e:	0741      	lsls	r1, r0, #29
 8000880:	d009      	beq.n	8000896 <__aeabi_dmul+0x336>
 8000882:	210f      	movs	r1, #15
 8000884:	4001      	ands	r1, r0
 8000886:	2904      	cmp	r1, #4
 8000888:	d005      	beq.n	8000896 <__aeabi_dmul+0x336>
 800088a:	1d01      	adds	r1, r0, #4
 800088c:	4281      	cmp	r1, r0
 800088e:	4180      	sbcs	r0, r0
 8000890:	4240      	negs	r0, r0
 8000892:	1824      	adds	r4, r4, r0
 8000894:	0008      	movs	r0, r1
 8000896:	01e1      	lsls	r1, r4, #7
 8000898:	d506      	bpl.n	80008a8 <__aeabi_dmul+0x348>
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	00c9      	lsls	r1, r1, #3
 800089e:	468c      	mov	ip, r1
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <__aeabi_dmul+0x36c>)
 80008a2:	401c      	ands	r4, r3
 80008a4:	9b02      	ldr	r3, [sp, #8]
 80008a6:	4463      	add	r3, ip
 80008a8:	4909      	ldr	r1, [pc, #36]	; (80008d0 <__aeabi_dmul+0x370>)
 80008aa:	428b      	cmp	r3, r1
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_dmul+0x350>
 80008ae:	e710      	b.n	80006d2 <__aeabi_dmul+0x172>
 80008b0:	0761      	lsls	r1, r4, #29
 80008b2:	08c5      	lsrs	r5, r0, #3
 80008b4:	0264      	lsls	r4, r4, #9
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	430d      	orrs	r5, r1
 80008ba:	0b24      	lsrs	r4, r4, #12
 80008bc:	0d5b      	lsrs	r3, r3, #21
 80008be:	e6c1      	b.n	8000644 <__aeabi_dmul+0xe4>
 80008c0:	000007ff 	.word	0x000007ff
 80008c4:	fffffc01 	.word	0xfffffc01
 80008c8:	000003ff 	.word	0x000003ff
 80008cc:	feffffff 	.word	0xfeffffff
 80008d0:	000007fe 	.word	0x000007fe
 80008d4:	464b      	mov	r3, r9
 80008d6:	4323      	orrs	r3, r4
 80008d8:	d059      	beq.n	800098e <__aeabi_dmul+0x42e>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dmul+0x380>
 80008de:	e0a3      	b.n	8000a28 <__aeabi_dmul+0x4c8>
 80008e0:	0020      	movs	r0, r4
 80008e2:	f000 f9cd 	bl	8000c80 <__clzsi2>
 80008e6:	0001      	movs	r1, r0
 80008e8:	0003      	movs	r3, r0
 80008ea:	390b      	subs	r1, #11
 80008ec:	221d      	movs	r2, #29
 80008ee:	1a52      	subs	r2, r2, r1
 80008f0:	4649      	mov	r1, r9
 80008f2:	0018      	movs	r0, r3
 80008f4:	40d1      	lsrs	r1, r2
 80008f6:	464a      	mov	r2, r9
 80008f8:	3808      	subs	r0, #8
 80008fa:	4082      	lsls	r2, r0
 80008fc:	4084      	lsls	r4, r0
 80008fe:	0010      	movs	r0, r2
 8000900:	430c      	orrs	r4, r1
 8000902:	4a74      	ldr	r2, [pc, #464]	; (8000ad4 <__aeabi_dmul+0x574>)
 8000904:	1aeb      	subs	r3, r5, r3
 8000906:	4694      	mov	ip, r2
 8000908:	4642      	mov	r2, r8
 800090a:	4463      	add	r3, ip
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9b01      	ldr	r3, [sp, #4]
 8000910:	407a      	eors	r2, r7
 8000912:	3301      	adds	r3, #1
 8000914:	2100      	movs	r1, #0
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	2e0a      	cmp	r6, #10
 800091c:	dd00      	ble.n	8000920 <__aeabi_dmul+0x3c0>
 800091e:	e667      	b.n	80005f0 <__aeabi_dmul+0x90>
 8000920:	e683      	b.n	800062a <__aeabi_dmul+0xca>
 8000922:	465b      	mov	r3, fp
 8000924:	4303      	orrs	r3, r0
 8000926:	469a      	mov	sl, r3
 8000928:	d02a      	beq.n	8000980 <__aeabi_dmul+0x420>
 800092a:	465b      	mov	r3, fp
 800092c:	2b00      	cmp	r3, #0
 800092e:	d06d      	beq.n	8000a0c <__aeabi_dmul+0x4ac>
 8000930:	4658      	mov	r0, fp
 8000932:	f000 f9a5 	bl	8000c80 <__clzsi2>
 8000936:	0001      	movs	r1, r0
 8000938:	0003      	movs	r3, r0
 800093a:	390b      	subs	r1, #11
 800093c:	221d      	movs	r2, #29
 800093e:	1a52      	subs	r2, r2, r1
 8000940:	0021      	movs	r1, r4
 8000942:	0018      	movs	r0, r3
 8000944:	465d      	mov	r5, fp
 8000946:	40d1      	lsrs	r1, r2
 8000948:	3808      	subs	r0, #8
 800094a:	4085      	lsls	r5, r0
 800094c:	000a      	movs	r2, r1
 800094e:	4084      	lsls	r4, r0
 8000950:	432a      	orrs	r2, r5
 8000952:	4693      	mov	fp, r2
 8000954:	46a2      	mov	sl, r4
 8000956:	4d5f      	ldr	r5, [pc, #380]	; (8000ad4 <__aeabi_dmul+0x574>)
 8000958:	2600      	movs	r6, #0
 800095a:	1aed      	subs	r5, r5, r3
 800095c:	2300      	movs	r3, #0
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	e625      	b.n	80005ae <__aeabi_dmul+0x4e>
 8000962:	465b      	mov	r3, fp
 8000964:	4303      	orrs	r3, r0
 8000966:	469a      	mov	sl, r3
 8000968:	d105      	bne.n	8000976 <__aeabi_dmul+0x416>
 800096a:	2300      	movs	r3, #0
 800096c:	469b      	mov	fp, r3
 800096e:	3302      	adds	r3, #2
 8000970:	2608      	movs	r6, #8
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	e61b      	b.n	80005ae <__aeabi_dmul+0x4e>
 8000976:	2303      	movs	r3, #3
 8000978:	4682      	mov	sl, r0
 800097a:	260c      	movs	r6, #12
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	e616      	b.n	80005ae <__aeabi_dmul+0x4e>
 8000980:	2300      	movs	r3, #0
 8000982:	469b      	mov	fp, r3
 8000984:	3301      	adds	r3, #1
 8000986:	2604      	movs	r6, #4
 8000988:	2500      	movs	r5, #0
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	e60f      	b.n	80005ae <__aeabi_dmul+0x4e>
 800098e:	4642      	mov	r2, r8
 8000990:	3301      	adds	r3, #1
 8000992:	9501      	str	r5, [sp, #4]
 8000994:	431e      	orrs	r6, r3
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	407a      	eors	r2, r7
 800099a:	3301      	adds	r3, #1
 800099c:	2400      	movs	r4, #0
 800099e:	2000      	movs	r0, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	9302      	str	r3, [sp, #8]
 80009a6:	2e0a      	cmp	r6, #10
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dmul+0x44c>
 80009aa:	e621      	b.n	80005f0 <__aeabi_dmul+0x90>
 80009ac:	e63d      	b.n	800062a <__aeabi_dmul+0xca>
 80009ae:	2101      	movs	r1, #1
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	2938      	cmp	r1, #56	; 0x38
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_dmul+0x458>
 80009b6:	e642      	b.n	800063e <__aeabi_dmul+0xde>
 80009b8:	291f      	cmp	r1, #31
 80009ba:	dd47      	ble.n	8000a4c <__aeabi_dmul+0x4ec>
 80009bc:	261f      	movs	r6, #31
 80009be:	0025      	movs	r5, r4
 80009c0:	4276      	negs	r6, r6
 80009c2:	1af3      	subs	r3, r6, r3
 80009c4:	40dd      	lsrs	r5, r3
 80009c6:	002b      	movs	r3, r5
 80009c8:	2920      	cmp	r1, #32
 80009ca:	d005      	beq.n	80009d8 <__aeabi_dmul+0x478>
 80009cc:	4942      	ldr	r1, [pc, #264]	; (8000ad8 <__aeabi_dmul+0x578>)
 80009ce:	9d02      	ldr	r5, [sp, #8]
 80009d0:	468c      	mov	ip, r1
 80009d2:	4465      	add	r5, ip
 80009d4:	40ac      	lsls	r4, r5
 80009d6:	4320      	orrs	r0, r4
 80009d8:	1e41      	subs	r1, r0, #1
 80009da:	4188      	sbcs	r0, r1
 80009dc:	4318      	orrs	r0, r3
 80009de:	2307      	movs	r3, #7
 80009e0:	001d      	movs	r5, r3
 80009e2:	2400      	movs	r4, #0
 80009e4:	4005      	ands	r5, r0
 80009e6:	4203      	tst	r3, r0
 80009e8:	d04a      	beq.n	8000a80 <__aeabi_dmul+0x520>
 80009ea:	230f      	movs	r3, #15
 80009ec:	2400      	movs	r4, #0
 80009ee:	4003      	ands	r3, r0
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d042      	beq.n	8000a7a <__aeabi_dmul+0x51a>
 80009f4:	1d03      	adds	r3, r0, #4
 80009f6:	4283      	cmp	r3, r0
 80009f8:	4180      	sbcs	r0, r0
 80009fa:	4240      	negs	r0, r0
 80009fc:	1824      	adds	r4, r4, r0
 80009fe:	0018      	movs	r0, r3
 8000a00:	0223      	lsls	r3, r4, #8
 8000a02:	d53a      	bpl.n	8000a7a <__aeabi_dmul+0x51a>
 8000a04:	2301      	movs	r3, #1
 8000a06:	2400      	movs	r4, #0
 8000a08:	2500      	movs	r5, #0
 8000a0a:	e61b      	b.n	8000644 <__aeabi_dmul+0xe4>
 8000a0c:	f000 f938 	bl	8000c80 <__clzsi2>
 8000a10:	0001      	movs	r1, r0
 8000a12:	0003      	movs	r3, r0
 8000a14:	3115      	adds	r1, #21
 8000a16:	3320      	adds	r3, #32
 8000a18:	291c      	cmp	r1, #28
 8000a1a:	dd8f      	ble.n	800093c <__aeabi_dmul+0x3dc>
 8000a1c:	3808      	subs	r0, #8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4084      	lsls	r4, r0
 8000a22:	4692      	mov	sl, r2
 8000a24:	46a3      	mov	fp, r4
 8000a26:	e796      	b.n	8000956 <__aeabi_dmul+0x3f6>
 8000a28:	f000 f92a 	bl	8000c80 <__clzsi2>
 8000a2c:	0001      	movs	r1, r0
 8000a2e:	0003      	movs	r3, r0
 8000a30:	3115      	adds	r1, #21
 8000a32:	3320      	adds	r3, #32
 8000a34:	291c      	cmp	r1, #28
 8000a36:	dc00      	bgt.n	8000a3a <__aeabi_dmul+0x4da>
 8000a38:	e758      	b.n	80008ec <__aeabi_dmul+0x38c>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	464c      	mov	r4, r9
 8000a3e:	3a08      	subs	r2, #8
 8000a40:	2000      	movs	r0, #0
 8000a42:	4094      	lsls	r4, r2
 8000a44:	e75d      	b.n	8000902 <__aeabi_dmul+0x3a2>
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	e711      	b.n	8000870 <__aeabi_dmul+0x310>
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <__aeabi_dmul+0x57c>)
 8000a4e:	0026      	movs	r6, r4
 8000a50:	469c      	mov	ip, r3
 8000a52:	0003      	movs	r3, r0
 8000a54:	9d02      	ldr	r5, [sp, #8]
 8000a56:	40cb      	lsrs	r3, r1
 8000a58:	4465      	add	r5, ip
 8000a5a:	40ae      	lsls	r6, r5
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	0003      	movs	r3, r0
 8000a60:	40ab      	lsls	r3, r5
 8000a62:	1e58      	subs	r0, r3, #1
 8000a64:	4183      	sbcs	r3, r0
 8000a66:	0030      	movs	r0, r6
 8000a68:	4318      	orrs	r0, r3
 8000a6a:	40cc      	lsrs	r4, r1
 8000a6c:	0743      	lsls	r3, r0, #29
 8000a6e:	d0c7      	beq.n	8000a00 <__aeabi_dmul+0x4a0>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4003      	ands	r3, r0
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d1bd      	bne.n	80009f4 <__aeabi_dmul+0x494>
 8000a78:	e7c2      	b.n	8000a00 <__aeabi_dmul+0x4a0>
 8000a7a:	0765      	lsls	r5, r4, #29
 8000a7c:	0264      	lsls	r4, r4, #9
 8000a7e:	0b24      	lsrs	r4, r4, #12
 8000a80:	08c0      	lsrs	r0, r0, #3
 8000a82:	2300      	movs	r3, #0
 8000a84:	4305      	orrs	r5, r0
 8000a86:	e5dd      	b.n	8000644 <__aeabi_dmul+0xe4>
 8000a88:	2500      	movs	r5, #0
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	2e0f      	cmp	r6, #15
 8000a8e:	d10c      	bne.n	8000aaa <__aeabi_dmul+0x54a>
 8000a90:	2480      	movs	r4, #128	; 0x80
 8000a92:	465b      	mov	r3, fp
 8000a94:	0324      	lsls	r4, r4, #12
 8000a96:	4223      	tst	r3, r4
 8000a98:	d00e      	beq.n	8000ab8 <__aeabi_dmul+0x558>
 8000a9a:	4221      	tst	r1, r4
 8000a9c:	d10c      	bne.n	8000ab8 <__aeabi_dmul+0x558>
 8000a9e:	430c      	orrs	r4, r1
 8000aa0:	0324      	lsls	r4, r4, #12
 8000aa2:	003a      	movs	r2, r7
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <__aeabi_dmul+0x580>)
 8000aa6:	0b24      	lsrs	r4, r4, #12
 8000aa8:	e5cc      	b.n	8000644 <__aeabi_dmul+0xe4>
 8000aaa:	2e0b      	cmp	r6, #11
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dmul+0x550>
 8000aae:	e5a2      	b.n	80005f6 <__aeabi_dmul+0x96>
 8000ab0:	468b      	mov	fp, r1
 8000ab2:	46aa      	mov	sl, r5
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	e5f7      	b.n	80006a8 <__aeabi_dmul+0x148>
 8000ab8:	2480      	movs	r4, #128	; 0x80
 8000aba:	465b      	mov	r3, fp
 8000abc:	0324      	lsls	r4, r4, #12
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	0324      	lsls	r4, r4, #12
 8000ac2:	4642      	mov	r2, r8
 8000ac4:	4655      	mov	r5, sl
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <__aeabi_dmul+0x580>)
 8000ac8:	0b24      	lsrs	r4, r4, #12
 8000aca:	e5bb      	b.n	8000644 <__aeabi_dmul+0xe4>
 8000acc:	464d      	mov	r5, r9
 8000ace:	0021      	movs	r1, r4
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e7db      	b.n	8000a8c <__aeabi_dmul+0x52c>
 8000ad4:	fffffc0d 	.word	0xfffffc0d
 8000ad8:	0000043e 	.word	0x0000043e
 8000adc:	0000041e 	.word	0x0000041e
 8000ae0:	000007ff 	.word	0x000007ff

08000ae4 <__aeabi_f2d>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	0043      	lsls	r3, r0, #1
 8000aea:	0fc4      	lsrs	r4, r0, #31
 8000aec:	20fe      	movs	r0, #254	; 0xfe
 8000aee:	0e1b      	lsrs	r3, r3, #24
 8000af0:	1c59      	adds	r1, r3, #1
 8000af2:	0a55      	lsrs	r5, r2, #9
 8000af4:	4208      	tst	r0, r1
 8000af6:	d00c      	beq.n	8000b12 <__aeabi_f2d+0x2e>
 8000af8:	21e0      	movs	r1, #224	; 0xe0
 8000afa:	0089      	lsls	r1, r1, #2
 8000afc:	468c      	mov	ip, r1
 8000afe:	076d      	lsls	r5, r5, #29
 8000b00:	0b12      	lsrs	r2, r2, #12
 8000b02:	4463      	add	r3, ip
 8000b04:	051b      	lsls	r3, r3, #20
 8000b06:	4313      	orrs	r3, r2
 8000b08:	07e4      	lsls	r4, r4, #31
 8000b0a:	4323      	orrs	r3, r4
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	0019      	movs	r1, r3
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d114      	bne.n	8000b40 <__aeabi_f2d+0x5c>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d01b      	beq.n	8000b52 <__aeabi_f2d+0x6e>
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	f000 f8b0 	bl	8000c80 <__clzsi2>
 8000b20:	280a      	cmp	r0, #10
 8000b22:	dc1c      	bgt.n	8000b5e <__aeabi_f2d+0x7a>
 8000b24:	230b      	movs	r3, #11
 8000b26:	002a      	movs	r2, r5
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	40da      	lsrs	r2, r3
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	3315      	adds	r3, #21
 8000b30:	409d      	lsls	r5, r3
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <__aeabi_f2d+0x88>)
 8000b34:	0312      	lsls	r2, r2, #12
 8000b36:	1a1b      	subs	r3, r3, r0
 8000b38:	055b      	lsls	r3, r3, #21
 8000b3a:	0b12      	lsrs	r2, r2, #12
 8000b3c:	0d5b      	lsrs	r3, r3, #21
 8000b3e:	e7e1      	b.n	8000b04 <__aeabi_f2d+0x20>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d009      	beq.n	8000b58 <__aeabi_f2d+0x74>
 8000b44:	0b13      	lsrs	r3, r2, #12
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0312      	lsls	r2, r2, #12
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	076d      	lsls	r5, r5, #29
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <__aeabi_f2d+0x8c>)
 8000b50:	e7d8      	b.n	8000b04 <__aeabi_f2d+0x20>
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	e7d5      	b.n	8000b04 <__aeabi_f2d+0x20>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <__aeabi_f2d+0x8c>)
 8000b5c:	e7d2      	b.n	8000b04 <__aeabi_f2d+0x20>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	002a      	movs	r2, r5
 8000b62:	3b0b      	subs	r3, #11
 8000b64:	409a      	lsls	r2, r3
 8000b66:	2500      	movs	r5, #0
 8000b68:	e7e3      	b.n	8000b32 <__aeabi_f2d+0x4e>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	00000389 	.word	0x00000389
 8000b70:	000007ff 	.word	0x000007ff

08000b74 <__aeabi_d2f>:
 8000b74:	0002      	movs	r2, r0
 8000b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	030d      	lsls	r5, r1, #12
 8000b7c:	0f40      	lsrs	r0, r0, #29
 8000b7e:	0d5b      	lsrs	r3, r3, #21
 8000b80:	0fcc      	lsrs	r4, r1, #31
 8000b82:	0a6d      	lsrs	r5, r5, #9
 8000b84:	493a      	ldr	r1, [pc, #232]	; (8000c70 <__aeabi_d2f+0xfc>)
 8000b86:	4305      	orrs	r5, r0
 8000b88:	1c58      	adds	r0, r3, #1
 8000b8a:	00d7      	lsls	r7, r2, #3
 8000b8c:	4208      	tst	r0, r1
 8000b8e:	d00a      	beq.n	8000ba6 <__aeabi_d2f+0x32>
 8000b90:	4938      	ldr	r1, [pc, #224]	; (8000c74 <__aeabi_d2f+0x100>)
 8000b92:	1859      	adds	r1, r3, r1
 8000b94:	29fe      	cmp	r1, #254	; 0xfe
 8000b96:	dd16      	ble.n	8000bc6 <__aeabi_d2f+0x52>
 8000b98:	20ff      	movs	r0, #255	; 0xff
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4310      	orrs	r0, r2
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d106      	bne.n	8000bb8 <__aeabi_d2f+0x44>
 8000baa:	433d      	orrs	r5, r7
 8000bac:	d026      	beq.n	8000bfc <__aeabi_d2f+0x88>
 8000bae:	2205      	movs	r2, #5
 8000bb0:	0192      	lsls	r2, r2, #6
 8000bb2:	0a52      	lsrs	r2, r2, #9
 8000bb4:	b2d8      	uxtb	r0, r3
 8000bb6:	e7f1      	b.n	8000b9c <__aeabi_d2f+0x28>
 8000bb8:	432f      	orrs	r7, r5
 8000bba:	d0ed      	beq.n	8000b98 <__aeabi_d2f+0x24>
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	03d2      	lsls	r2, r2, #15
 8000bc0:	20ff      	movs	r0, #255	; 0xff
 8000bc2:	432a      	orrs	r2, r5
 8000bc4:	e7ea      	b.n	8000b9c <__aeabi_d2f+0x28>
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	dd1b      	ble.n	8000c02 <__aeabi_d2f+0x8e>
 8000bca:	0192      	lsls	r2, r2, #6
 8000bcc:	1e50      	subs	r0, r2, #1
 8000bce:	4182      	sbcs	r2, r0
 8000bd0:	00ed      	lsls	r5, r5, #3
 8000bd2:	0f7f      	lsrs	r7, r7, #29
 8000bd4:	432a      	orrs	r2, r5
 8000bd6:	433a      	orrs	r2, r7
 8000bd8:	0753      	lsls	r3, r2, #29
 8000bda:	d047      	beq.n	8000c6c <__aeabi_d2f+0xf8>
 8000bdc:	230f      	movs	r3, #15
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d000      	beq.n	8000be6 <__aeabi_d2f+0x72>
 8000be4:	3204      	adds	r2, #4
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	04db      	lsls	r3, r3, #19
 8000bea:	4013      	ands	r3, r2
 8000bec:	d03e      	beq.n	8000c6c <__aeabi_d2f+0xf8>
 8000bee:	1c48      	adds	r0, r1, #1
 8000bf0:	29fe      	cmp	r1, #254	; 0xfe
 8000bf2:	d0d1      	beq.n	8000b98 <__aeabi_d2f+0x24>
 8000bf4:	0192      	lsls	r2, r2, #6
 8000bf6:	0a52      	lsrs	r2, r2, #9
 8000bf8:	b2c0      	uxtb	r0, r0
 8000bfa:	e7cf      	b.n	8000b9c <__aeabi_d2f+0x28>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	2200      	movs	r2, #0
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x28>
 8000c02:	000a      	movs	r2, r1
 8000c04:	3217      	adds	r2, #23
 8000c06:	db2f      	blt.n	8000c68 <__aeabi_d2f+0xf4>
 8000c08:	2680      	movs	r6, #128	; 0x80
 8000c0a:	0436      	lsls	r6, r6, #16
 8000c0c:	432e      	orrs	r6, r5
 8000c0e:	251e      	movs	r5, #30
 8000c10:	1a6d      	subs	r5, r5, r1
 8000c12:	2d1f      	cmp	r5, #31
 8000c14:	dd11      	ble.n	8000c3a <__aeabi_d2f+0xc6>
 8000c16:	2202      	movs	r2, #2
 8000c18:	4252      	negs	r2, r2
 8000c1a:	1a52      	subs	r2, r2, r1
 8000c1c:	0031      	movs	r1, r6
 8000c1e:	40d1      	lsrs	r1, r2
 8000c20:	2d20      	cmp	r5, #32
 8000c22:	d004      	beq.n	8000c2e <__aeabi_d2f+0xba>
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <__aeabi_d2f+0x104>)
 8000c26:	4694      	mov	ip, r2
 8000c28:	4463      	add	r3, ip
 8000c2a:	409e      	lsls	r6, r3
 8000c2c:	4337      	orrs	r7, r6
 8000c2e:	003a      	movs	r2, r7
 8000c30:	1e53      	subs	r3, r2, #1
 8000c32:	419a      	sbcs	r2, r3
 8000c34:	430a      	orrs	r2, r1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e7ce      	b.n	8000bd8 <__aeabi_d2f+0x64>
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <__aeabi_d2f+0x108>)
 8000c3c:	0038      	movs	r0, r7
 8000c3e:	4694      	mov	ip, r2
 8000c40:	4463      	add	r3, ip
 8000c42:	4098      	lsls	r0, r3
 8000c44:	003a      	movs	r2, r7
 8000c46:	1e41      	subs	r1, r0, #1
 8000c48:	4188      	sbcs	r0, r1
 8000c4a:	409e      	lsls	r6, r3
 8000c4c:	40ea      	lsrs	r2, r5
 8000c4e:	4330      	orrs	r0, r6
 8000c50:	4302      	orrs	r2, r0
 8000c52:	2100      	movs	r1, #0
 8000c54:	0753      	lsls	r3, r2, #29
 8000c56:	d1c1      	bne.n	8000bdc <__aeabi_d2f+0x68>
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	04c9      	lsls	r1, r1, #19
 8000c5e:	2001      	movs	r0, #1
 8000c60:	400b      	ands	r3, r1
 8000c62:	420a      	tst	r2, r1
 8000c64:	d1c6      	bne.n	8000bf4 <__aeabi_d2f+0x80>
 8000c66:	e7a3      	b.n	8000bb0 <__aeabi_d2f+0x3c>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e7a0      	b.n	8000bae <__aeabi_d2f+0x3a>
 8000c6c:	000b      	movs	r3, r1
 8000c6e:	e79f      	b.n	8000bb0 <__aeabi_d2f+0x3c>
 8000c70:	000007fe 	.word	0x000007fe
 8000c74:	fffffc80 	.word	0xfffffc80
 8000c78:	fffffca2 	.word	0xfffffca2
 8000c7c:	fffffc82 	.word	0xfffffc82

08000c80 <__clzsi2>:
 8000c80:	211c      	movs	r1, #28
 8000c82:	2301      	movs	r3, #1
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d301      	bcc.n	8000c8e <__clzsi2+0xe>
 8000c8a:	0c00      	lsrs	r0, r0, #16
 8000c8c:	3910      	subs	r1, #16
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	4298      	cmp	r0, r3
 8000c92:	d301      	bcc.n	8000c98 <__clzsi2+0x18>
 8000c94:	0a00      	lsrs	r0, r0, #8
 8000c96:	3908      	subs	r1, #8
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d301      	bcc.n	8000ca2 <__clzsi2+0x22>
 8000c9e:	0900      	lsrs	r0, r0, #4
 8000ca0:	3904      	subs	r1, #4
 8000ca2:	a202      	add	r2, pc, #8	; (adr r2, 8000cac <__clzsi2+0x2c>)
 8000ca4:	5c10      	ldrb	r0, [r2, r0]
 8000ca6:	1840      	adds	r0, r0, r1
 8000ca8:	4770      	bx	lr
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	02020304 	.word	0x02020304
 8000cb0:	01010101 	.word	0x01010101
	...

08000cbc <SPIx_WriteRead>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	701a      	strb	r2, [r3, #0]

	uint8_t receivedbyte = 0;
 8000cc8:	240f      	movs	r4, #15
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]

	/* Send a Byte through the SPI peripheral */
	/* Read byte from the SPI bus */
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &Byte, (uint8_t*) &receivedbyte,
 8000cd0:	193a      	adds	r2, r7, r4
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <SPIx_WriteRead+0x34>)
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f001 fb35 	bl	800234c <HAL_SPI_TransmitReceive>
			1, SPIx_TIMEOUT_MAX);

	return receivedbyte;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	781b      	ldrb	r3, [r3, #0]
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b005      	add	sp, #20
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000028 	.word	0x20000028

08000cf4 <GYRO_IO_Write>:

void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	0011      	movs	r1, r2
 8000d00:	1cfb      	adds	r3, r7, #3
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	003b      	movs	r3, r7
 8000d08:	1c0a      	adds	r2, r1, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
	/* Configure the MS bit:
	 - When 0, the address will remain unchanged in multiple read/write commands.
	 - When 1, the address will be auto incremented in multiple read/write commands.
	 */
	if (NumByteToWrite > 0x01)
 8000d0c:	003b      	movs	r3, r7
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d905      	bls.n	8000d20 <GYRO_IO_Write+0x2c>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8000d14:	1cfb      	adds	r3, r7, #3
 8000d16:	1cfa      	adds	r2, r7, #3
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
	}
	/* Set chip select Low at the start of the transmission */
	GYRO_CS_LOW();
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <GYRO_IO_Write+0x7c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	2101      	movs	r1, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fd68 	bl	80017fc <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(WriteAddr);
 8000d2c:	1cfb      	adds	r3, r7, #3
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ffc3 	bl	8000cbc <SPIx_WriteRead>

	/* Send the data that will be written into the device (MSB First) */
	while (NumByteToWrite >= 0x01)
 8000d36:	e00c      	b.n	8000d52 <GYRO_IO_Write+0x5e>
	{
		SPIx_WriteRead(*pBuffer);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffbd 	bl	8000cbc <SPIx_WriteRead>
		NumByteToWrite--;
 8000d42:	003b      	movs	r3, r7
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	003b      	movs	r3, r7
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01)
 8000d52:	003b      	movs	r3, r7
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1ee      	bne.n	8000d38 <GYRO_IO_Write+0x44>
	}

	/* Set chip select High at the end of the transmission */
	GYRO_CS_HIGH();
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <GYRO_IO_Write+0x7c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2101      	movs	r1, #1
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fd4b 	bl	80017fc <HAL_GPIO_WritePin>
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	48000800 	.word	0x48000800

08000d74 <GYRO_IO_Read>:

void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	0008      	movs	r0, r1
 8000d7e:	0011      	movs	r1, r2
 8000d80:	1cfb      	adds	r3, r7, #3
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	003b      	movs	r3, r7
 8000d88:	1c0a      	adds	r2, r1, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
	if (NumByteToRead > 0x01)
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d907      	bls.n	8000da4 <GYRO_IO_Read+0x30>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	1cfa      	adds	r2, r7, #3
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	4249      	negs	r1, r1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e006      	b.n	8000db2 <GYRO_IO_Read+0x3e>
	}
	else
	{
		ReadAddr |= (uint8_t) READWRITE_CMD;
 8000da4:	1cfb      	adds	r3, r7, #3
 8000da6:	1cfa      	adds	r2, r7, #3
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	4249      	negs	r1, r1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	}
	/* Set chip select Low at the start of the transmission */
	GYRO_CS_LOW();
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <GYRO_IO_Read+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	2101      	movs	r1, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fd1f 	bl	80017fc <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(ReadAddr);
 8000dbe:	1cfb      	adds	r3, r7, #3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff7a 	bl	8000cbc <SPIx_WriteRead>

	/* Receive the data that will be read from the device (MSB First) */
	while (NumByteToRead > 0x00)
 8000dc8:	e00e      	b.n	8000de8 <GYRO_IO_Read+0x74>
	{
		/* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
		*pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff ff76 	bl	8000cbc <SPIx_WriteRead>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	003b      	movs	r3, r7
 8000dde:	3a01      	subs	r2, #1
 8000de0:	801a      	strh	r2, [r3, #0]
		pBuffer++;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3301      	adds	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
	while (NumByteToRead > 0x00)
 8000de8:	003b      	movs	r3, r7
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ec      	bne.n	8000dca <GYRO_IO_Read+0x56>
	}

	/* Set chip select High at the end of the transmission */
	GYRO_CS_HIGH();
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <GYRO_IO_Read+0x90>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	2101      	movs	r1, #1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fd00 	bl	80017fc <HAL_GPIO_WritePin>
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000800 	.word	0x48000800

08000e08 <GYRO_ReadXYZ_AngRate>:

void GYRO_ReadXYZ_AngRate(float *Data)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	float sensitivity = 0.00875;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <GYRO_ReadXYZ_AngRate+0xb0>)
 8000e12:	61fb      	str	r3, [r7, #28]
	uint8_t tmpbuffer[6] =
 8000e14:	2414      	movs	r4, #20
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	809a      	strh	r2, [r3, #4]
	{ 0 };
	int16_t RawData[3] =
 8000e20:	230c      	movs	r3, #12
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	0018      	movs	r0, r3
 8000e26:	2306      	movs	r3, #6
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f001 fde6 	bl	80029fc <memset>
	{ 0 };

	GYRO_IO_Read(tmpbuffer, L3GD20_OUT_X_L_ADDR, 6);
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	2206      	movs	r2, #6
 8000e34:	2128      	movs	r1, #40	; 0x28
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff9c 	bl	8000d74 <GYRO_IO_Read>

	for (int i = 0; i < 3; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	e018      	b.n	8000e74 <GYRO_ReadXYZ_AngRate+0x6c>
	{
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i] << 8)
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2114      	movs	r1, #20
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b29a      	uxth	r2, r3
				+ tmpbuffer[2 * i + 1]);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	3301      	adds	r3, #1
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	5ccb      	ldrb	r3, [r1, r3]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	18d3      	adds	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
		RawData[i] = (int16_t) (((uint16_t) tmpbuffer[2 * i] << 8)
 8000e62:	b219      	sxth	r1, r3
 8000e64:	230c      	movs	r3, #12
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6a:	0052      	lsls	r2, r2, #1
 8000e6c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 3; i++)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	dde3      	ble.n	8000e42 <GYRO_ReadXYZ_AngRate+0x3a>
	}

	for (int i = 0; i < 3; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
 8000e7e:	e013      	b.n	8000ea8 <GYRO_ReadXYZ_AngRate+0xa0>
	{
		Data[i] = (float) (RawData[i] * sensitivity);
 8000e80:	230c      	movs	r3, #12
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	0052      	lsls	r2, r2, #1
 8000e88:	5ed3      	ldrsh	r3, [r2, r3]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fb16 	bl	80004bc <__aeabi_i2f>
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	18d4      	adds	r4, r2, r3
 8000e98:	69f9      	ldr	r1, [r7, #28]
 8000e9a:	f7ff f9c1 	bl	8000220 <__aeabi_fmul>
 8000e9e:	1c03      	adds	r3, r0, #0
 8000ea0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	dde8      	ble.n	8000e80 <GYRO_ReadXYZ_AngRate+0x78>
	}
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b00b      	add	sp, #44	; 0x2c
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	3c0f5c29 	.word	0x3c0f5c29

08000ebc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec2:	f000 f9e7 	bl	8001294 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ec6:	f000 f857 	bl	8000f78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eca:	f000 f8cf 	bl	800106c <MX_GPIO_Init>
	MX_SPI2_Init();
 8000ece:	f000 f88f 	bl	8000ff0 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	// Включаем оси
	uint8_t ctrl = 0x0f;
 8000ed2:	211a      	movs	r1, #26
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	701a      	strb	r2, [r3, #0]
	GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1, 1);
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff07 	bl	8000cf4 <GYRO_IO_Write>

	/* USER CODE END 2 */
	uint8_t address_whoami = 0x0F;
 8000ee6:	211b      	movs	r1, #27
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	220f      	movs	r2, #15
 8000eec:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	GYRO_IO_Read(&data, address_whoami, 1);
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	2319      	movs	r3, #25
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ff3b 	bl	8000d74 <GYRO_IO_Read>

	float Data_AngRate[3] = {0};
 8000efe:	230c      	movs	r3, #12
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	0018      	movs	r0, r3
 8000f04:	230c      	movs	r3, #12
 8000f06:	001a      	movs	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f001 fd77 	bl	80029fc <memset>
	float Data_Ang[3] = {0};
 8000f0e:	003b      	movs	r3, r7
 8000f10:	0018      	movs	r0, r3
 8000f12:	230c      	movs	r3, #12
 8000f14:	001a      	movs	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	f001 fd70 	bl	80029fc <memset>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ff71 	bl	8000e08 <GYRO_ReadXYZ_AngRate>
		for (int i = 0; i < 3; ++i)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e019      	b.n	8000f60 <main+0xa4>
		{
			Data_Ang[i] = Data_AngRate[i] * 0.02;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	58d3      	ldr	r3, [r2, r3]
 8000f36:	1c18      	adds	r0, r3, #0
 8000f38:	f7ff fdd4 	bl	8000ae4 <__aeabi_f2d>
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <main+0xb4>)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <main+0xb8>)
 8000f40:	f7ff fb0e 	bl	8000560 <__aeabi_dmul>
 8000f44:	0002      	movs	r2, r0
 8000f46:	000b      	movs	r3, r1
 8000f48:	0010      	movs	r0, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	f7ff fe12 	bl	8000b74 <__aeabi_d2f>
 8000f50:	1c01      	adds	r1, r0, #0
 8000f52:	003b      	movs	r3, r7
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	50d1      	str	r1, [r2, r3]
		for (int i = 0; i < 3; ++i)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	dde2      	ble.n	8000f2c <main+0x70>
		}
		HAL_Delay(20);
 8000f66:	2014      	movs	r0, #20
 8000f68:	f000 f9f8 	bl	800135c <HAL_Delay>
		GYRO_ReadXYZ_AngRate(Data_AngRate);
 8000f6c:	e7d6      	b.n	8000f1c <main+0x60>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	47ae147b 	.word	0x47ae147b
 8000f74:	3f947ae1 	.word	0x3f947ae1

08000f78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b093      	sub	sp, #76	; 0x4c
 8000f7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000f7e:	2414      	movs	r4, #20
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	0018      	movs	r0, r3
 8000f84:	2334      	movs	r3, #52	; 0x34
 8000f86:	001a      	movs	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f001 fd37 	bl	80029fc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2310      	movs	r3, #16
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f001 fd30 	bl	80029fc <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fc41 	bl	8001838 <HAL_RCC_OscConfig>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000fba:	f000 f8ad 	bl	8001118 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2101      	movs	r1, #1
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 ffb2 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8000fe4:	f000 f898 	bl	8001118 <Error_Handler>
	}
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b013      	add	sp, #76	; 0x4c
 8000fee:	bd90      	pop	{r4, r7, pc}

08000ff0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_SPI2_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_SPI2_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_SPI2_Init+0x74>)
 8000ffc:	2282      	movs	r2, #130	; 0x82
 8000ffe:	0052      	lsls	r2, r2, #1
 8001000:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_SPI2_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI2_Init+0x74>)
 800100a:	22e0      	movs	r2, #224	; 0xe0
 800100c:	00d2      	lsls	r2, r2, #3
 800100e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_SPI2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI2_Init+0x74>)
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI2_Init+0x74>)
 8001026:	2210      	movs	r2, #16
 8001028:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_SPI2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI2_Init+0x74>)
 800103e:	2207      	movs	r2, #7
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_SPI2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI2_Init+0x74>)
 800104a:	2208      	movs	r2, #8
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <MX_SPI2_Init+0x74>)
 8001050:	0018      	movs	r0, r3
 8001052:	f001 f8c3 	bl	80021dc <HAL_SPI_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 800105a:	f000 f85d 	bl	8001118 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000028 	.word	0x20000028
 8001068:	40003800 	.word	0x40003800

0800106c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001072:	240c      	movs	r4, #12
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0018      	movs	r0, r3
 8001078:	2314      	movs	r3, #20
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f001 fcbd 	bl	80029fc <memset>
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_GPIO_Init+0xa4>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_GPIO_Init+0xa4>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	03c9      	lsls	r1, r1, #15
 800108c:	430a      	orrs	r2, r1
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_GPIO_Init+0xa4>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	03db      	lsls	r3, r3, #15
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0309      	lsls	r1, r1, #12
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	031b      	lsls	r3, r3, #12
 80010b4:	4013      	ands	r3, r2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	02c9      	lsls	r1, r1, #11
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_GPIO_Init+0xa4>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	02db      	lsls	r3, r3, #11
 80010d0:	4013      	ands	r3, r2
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GYROSCOPE_CS_GPIO_Port, GYROSCOPE_CS_Pin, GPIO_PIN_RESET);
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_GPIO_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	2101      	movs	r1, #1
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fb8d 	bl	80017fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GYROSCOPE_CS_Pin */
	GPIO_InitStruct.Pin = GYROSCOPE_CS_Pin;
 80010e2:	0021      	movs	r1, r4
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2201      	movs	r2, #1
 80010ee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2201      	movs	r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GYROSCOPE_CS_GPIO_Port, &GPIO_InitStruct);
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <MX_GPIO_Init+0xa8>)
 8001100:	0019      	movs	r1, r3
 8001102:	0010      	movs	r0, r2
 8001104:	f000 fa02 	bl	800150c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b009      	add	sp, #36	; 0x24
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800

08001118 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x44>)
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_MspInit+0x44>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	619a      	str	r2, [r3, #24]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x44>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x44>)
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x44>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	430a      	orrs	r2, r1
 800114e:	61da      	str	r2, [r3, #28]
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_MspInit+0x44>)
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	4013      	ands	r3, r2
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	2414      	movs	r4, #20
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f001 fc3c 	bl	80029fc <memset>
  if(hspi->Instance==SPI2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_SPI_MspInit+0x90>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d132      	bne.n	80011f4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_SPI_MspInit+0x94>)
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_SPI_MspInit+0x94>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	01c9      	lsls	r1, r1, #7
 8001198:	430a      	orrs	r2, r1
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_SPI_MspInit+0x94>)
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_SPI_MspInit+0x94>)
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_SPI_MspInit+0x94>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	02c9      	lsls	r1, r1, #11
 80011b4:	430a      	orrs	r2, r1
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_SPI_MspInit+0x94>)
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	02db      	lsls	r3, r3, #11
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	22e0      	movs	r2, #224	; 0xe0
 80011ca:	0212      	lsls	r2, r2, #8
 80011cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	0021      	movs	r1, r4
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2202      	movs	r2, #2
 80011d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2203      	movs	r2, #3
 80011e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_SPI_MspInit+0x98>)
 80011ec:	0019      	movs	r1, r3
 80011ee:	0010      	movs	r0, r2
 80011f0:	f000 f98c 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b00b      	add	sp, #44	; 0x2c
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	40003800 	.word	0x40003800
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f87a 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001242:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff fff7 	bl	8001236 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopForever+0x6>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopForever+0xe>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopForever+0x16>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800126e:	f001 fbcd 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001272:	f7ff fe23 	bl	8000ebc <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   r0, =_estack
 8001278:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001284:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 8001288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800128c:	20000090 	.word	0x20000090

08001290 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC1_COMP_IRQHandler>
	...

08001294 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_Init+0x24>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_Init+0x24>)
 800129e:	2110      	movs	r1, #16
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f809 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff ff3b 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_InitTick+0x5c>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	0019      	movs	r1, r3
 80012ce:	23fa      	movs	r3, #250	; 0xfa
 80012d0:	0098      	lsls	r0, r3, #2
 80012d2:	f7fe ff19 	bl	8000108 <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	0019      	movs	r1, r3
 80012da:	0020      	movs	r0, r4
 80012dc:	f7fe ff14 	bl	8000108 <__udivsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f905 	bl	80014f2 <HAL_SYSTICK_Config>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00f      	b.n	8001310 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d80b      	bhi.n	800130e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2301      	movs	r3, #1
 80012fa:	425b      	negs	r3, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f8e2 	bl	80014c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_InitTick+0x64>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	18d2      	adds	r2, r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_IncTick+0x20>)
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20000008 	.word	0x20000008
 8001344:	2000008c 	.word	0x2000008c

08001348 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	2000008c 	.word	0x2000008c

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff0 	bl	8001348 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	001a      	movs	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	189b      	adds	r3, r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	f7ff ffe0 	bl	8001348 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b7f      	cmp	r3, #127	; 0x7f
 80013b8:	d828      	bhi.n	800140c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <__NVIC_SetPriority+0xd4>)
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	33c0      	adds	r3, #192	; 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	589b      	ldr	r3, [r3, r2]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	; 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	481f      	ldr	r0, [pc, #124]	; (8001478 <__NVIC_SetPriority+0xd4>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	430a      	orrs	r2, r1
 8001404:	33c0      	adds	r3, #192	; 0xc0
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140a:	e031      	b.n	8001470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <__NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0019      	movs	r1, r3
 8001414:	230f      	movs	r3, #15
 8001416:	400b      	ands	r3, r1
 8001418:	3b08      	subs	r3, #8
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3306      	adds	r3, #6
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	; 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <__NVIC_SetPriority+0xd8>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	001c      	movs	r4, r3
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	3b08      	subs	r3, #8
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	430a      	orrs	r2, r1
 8001466:	3306      	adds	r3, #6
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	18c3      	adds	r3, r0, r3
 800146c:	3304      	adds	r3, #4
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b003      	add	sp, #12
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	045b      	lsls	r3, r3, #17
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001494:	2301      	movs	r3, #1
 8001496:	e010      	b.n	80014ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <SysTick_Config+0x44>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	3a01      	subs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a0:	2301      	movs	r3, #1
 80014a2:	425b      	negs	r3, r3
 80014a4:	2103      	movs	r1, #3
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff ff7c 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x44>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x44>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	210f      	movs	r1, #15
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ffbf 	bl	8001480 <SysTick_Config>
 8001502:	0003      	movs	r3, r0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e155      	b.n	80017c8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4091      	lsls	r1, r2
 8001526:	000a      	movs	r2, r1
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d100      	bne.n	8001534 <HAL_GPIO_Init+0x28>
 8001532:	e146      	b.n	80017c2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001548:	2b02      	cmp	r3, #2
 800154a:	d130      	bne.n	80015ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	409a      	lsls	r2, r3
 800155a:	0013      	movs	r3, r2
 800155c:	43da      	mvns	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	409a      	lsls	r2, r3
 800156e:	0013      	movs	r3, r2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001582:	2201      	movs	r2, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	2201      	movs	r2, #1
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d017      	beq.n	80015ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d123      	bne.n	800163e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	58d3      	ldr	r3, [r2, r3]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2207      	movs	r2, #7
 8001608:	4013      	ands	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2107      	movs	r1, #7
 8001622:	400b      	ands	r3, r1
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	6939      	ldr	r1, [r7, #16]
 800163c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2203      	movs	r2, #3
 800165c:	401a      	ands	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	23c0      	movs	r3, #192	; 0xc0
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	4013      	ands	r3, r2
 800167c:	d100      	bne.n	8001680 <HAL_GPIO_Init+0x174>
 800167e:	e0a0      	b.n	80017c2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_GPIO_Init+0x2d4>)
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <HAL_GPIO_Init+0x2d4>)
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	619a      	str	r2, [r3, #24]
 800168c:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_GPIO_Init+0x2d4>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	589b      	ldr	r3, [r3, r2]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	2390      	movs	r3, #144	; 0x90
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x2dc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x1ea>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a46      	ldr	r2, [pc, #280]	; (80017ec <HAL_GPIO_Init+0x2e0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x1e6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x1e2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_GPIO_Init+0x2e8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x1de>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x1f0>
 80016ea:	2305      	movs	r3, #5
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x1f0>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x1f0>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x1f0>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x1f0>
 80016fa:	2300      	movs	r3, #0
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	2103      	movs	r1, #3
 8001700:	400a      	ands	r2, r1
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	035b      	lsls	r3, r3, #13
 8001732:	4013      	ands	r3, r2
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43da      	mvns	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	039b      	lsls	r3, r3, #14
 800175c:	4013      	ands	r3, r2
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43da      	mvns	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	4013      	ands	r3, r2
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	40da      	lsrs	r2, r3
 80017d0:	1e13      	subs	r3, r2, #0
 80017d2:	d000      	beq.n	80017d6 <HAL_GPIO_Init+0x2ca>
 80017d4:	e6a2      	b.n	800151c <HAL_GPIO_Init+0x10>
  } 
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b006      	add	sp, #24
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48001000 	.word	0x48001000
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	0008      	movs	r0, r1
 8001806:	0011      	movs	r1, r2
 8001808:	1cbb      	adds	r3, r7, #2
 800180a:	1c02      	adds	r2, r0, #0
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	1c7b      	adds	r3, r7, #1
 8001810:	1c0a      	adds	r2, r1, #0
 8001812:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	1c7b      	adds	r3, r7, #1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181c:	1cbb      	adds	r3, r7, #2
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	1cbb      	adds	r3, r7, #2
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 fb76 	bl	8001f38 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_RCC_OscConfig+0x20>
 8001856:	e08e      	b.n	8001976 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001858:	4bc5      	ldr	r3, [pc, #788]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
 8001860:	2b04      	cmp	r3, #4
 8001862:	d00e      	beq.n	8001882 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001864:	4bc2      	ldr	r3, [pc, #776]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d117      	bne.n	80018a0 <HAL_RCC_OscConfig+0x68>
 8001870:	4bbf      	ldr	r3, [pc, #764]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	025b      	lsls	r3, r3, #9
 8001878:	401a      	ands	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	429a      	cmp	r2, r3
 8001880:	d10e      	bne.n	80018a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	4bbb      	ldr	r3, [pc, #748]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_RCC_OscConfig+0x58>
 800188e:	e071      	b.n	8001974 <HAL_RCC_OscConfig+0x13c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d000      	beq.n	800189a <HAL_RCC_OscConfig+0x62>
 8001898:	e06c      	b.n	8001974 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f000 fb4c 	bl	8001f38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x80>
 80018a8:	4bb1      	ldr	r3, [pc, #708]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4bb0      	ldr	r3, [pc, #704]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	0249      	lsls	r1, r1, #9
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e02f      	b.n	8001918 <HAL_RCC_OscConfig+0xe0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0xa2>
 80018c0:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4baa      	ldr	r3, [pc, #680]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018c6:	49ab      	ldr	r1, [pc, #684]	; (8001b74 <HAL_RCC_OscConfig+0x33c>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	4ba8      	ldr	r3, [pc, #672]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4ba7      	ldr	r3, [pc, #668]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018d2:	49a9      	ldr	r1, [pc, #676]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e01e      	b.n	8001918 <HAL_RCC_OscConfig+0xe0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10e      	bne.n	8001900 <HAL_RCC_OscConfig+0xc8>
 80018e2:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4ba2      	ldr	r3, [pc, #648]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	02c9      	lsls	r1, r1, #11
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b9f      	ldr	r3, [pc, #636]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b9e      	ldr	r3, [pc, #632]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0249      	lsls	r1, r1, #9
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xe0>
 8001900:	4b9b      	ldr	r3, [pc, #620]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001906:	499b      	ldr	r1, [pc, #620]	; (8001b74 <HAL_RCC_OscConfig+0x33c>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	4b98      	ldr	r3, [pc, #608]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b97      	ldr	r3, [pc, #604]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001912:	4999      	ldr	r1, [pc, #612]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d014      	beq.n	800194a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fd12 	bl	8001348 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192a:	f7ff fd0d 	bl	8001348 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e2fd      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0xf2>
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fcfd 	bl	8001348 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fcf8 	bl	8001348 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e2e8      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b82      	ldr	r3, [pc, #520]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x11c>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x14a>
 8001980:	e06c      	b.n	8001a5c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	220c      	movs	r2, #12
 8001988:	4013      	ands	r3, r2
 800198a:	d00e      	beq.n	80019aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800198c:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	220c      	movs	r2, #12
 8001992:	4013      	ands	r3, r2
 8001994:	2b08      	cmp	r3, #8
 8001996:	d11f      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1a0>
 8001998:	4b75      	ldr	r3, [pc, #468]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	025b      	lsls	r3, r3, #9
 80019a0:	401a      	ands	r2, r3
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x188>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e2bb      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	22f8      	movs	r2, #248	; 0xf8
 80019c6:	4393      	bics	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00da      	lsls	r2, r3, #3
 80019d0:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e041      	b.n	8001a5c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d024      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fcac 	bl	8001348 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fca7 	bl	8001348 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e297      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d0f1      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	22f8      	movs	r2, #248	; 0xf8
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00da      	lsls	r2, r3, #3
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fc87 	bl	8001348 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc82 	bl	8001348 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e272      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1f1      	bne.n	8001a40 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	4013      	ands	r3, r2
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fc65 	bl	8001348 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fc60 	bl	8001348 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e250      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0f1      	beq.n	8001a84 <HAL_RCC_OscConfig+0x24c>
 8001aa0:	e018      	b.n	8001ad4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	438a      	bics	r2, r1
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fc4b 	bl	8001348 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fc46 	bl	8001348 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e236      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d1f1      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	4013      	ands	r3, r2
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2a8>
 8001ade:	e0b5      	b.n	8001c4c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	201f      	movs	r0, #31
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	055b      	lsls	r3, r3, #21
 8001af0:	4013      	ands	r3, r2
 8001af2:	d110      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0549      	lsls	r1, r1, #21
 8001afe:	430a      	orrs	r2, r1
 8001b00:	61da      	str	r2, [r3, #28]
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	055b      	lsls	r3, r3, #21
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_RCC_OscConfig+0x344>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d11a      	bne.n	8001b58 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_RCC_OscConfig+0x344>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x344>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0049      	lsls	r1, r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc0a 	bl	8001348 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff fc05 	bl	8001348 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f5      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_OscConfig+0x344>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10f      	bne.n	8001b80 <HAL_RCC_OscConfig+0x348>
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b66:	2101      	movs	r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	621a      	str	r2, [r3, #32]
 8001b6c:	e036      	b.n	8001bdc <HAL_RCC_OscConfig+0x3a4>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	fffeffff 	.word	0xfffeffff
 8001b78:	fffbffff 	.word	0xfffbffff
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x36a>
 8001b88:	4bca      	ldr	r3, [pc, #808]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	4bc9      	ldr	r3, [pc, #804]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
 8001b94:	4bc7      	ldr	r3, [pc, #796]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	4bc6      	ldr	r3, [pc, #792]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x3a4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x38c>
 8001baa:	4bc2      	ldr	r3, [pc, #776]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4bc1      	ldr	r3, [pc, #772]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	621a      	str	r2, [r3, #32]
 8001bb6:	4bbf      	ldr	r3, [pc, #764]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	4bbe      	ldr	r3, [pc, #760]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x3a4>
 8001bc4:	4bbb      	ldr	r3, [pc, #748]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	4bba      	ldr	r3, [pc, #744]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	621a      	str	r2, [r3, #32]
 8001bd0:	4bb8      	ldr	r3, [pc, #736]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	4bb7      	ldr	r3, [pc, #732]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	438a      	bics	r2, r1
 8001bda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d014      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fbb0 	bl	8001348 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fbab 	bl	8001348 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4aaf      	ldr	r2, [pc, #700]	; (8001eb8 <HAL_RCC_OscConfig+0x680>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e19a      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4bac      	ldr	r3, [pc, #688]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x3b6>
 8001c0c:	e013      	b.n	8001c36 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb9b 	bl	8001348 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e009      	b.n	8001c2c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb96 	bl	8001348 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4aa5      	ldr	r2, [pc, #660]	; (8001eb8 <HAL_RCC_OscConfig+0x680>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e185      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	4ba1      	ldr	r3, [pc, #644]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c36:	231f      	movs	r3, #31
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b9c      	ldr	r3, [pc, #624]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	4b9b      	ldr	r3, [pc, #620]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c46:	499d      	ldr	r1, [pc, #628]	; (8001ebc <HAL_RCC_OscConfig+0x684>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	4013      	ands	r3, r2
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d12a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c5e:	4b95      	ldr	r3, [pc, #596]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c62:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c64:	2104      	movs	r1, #4
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c6a:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6e:	4b91      	ldr	r3, [pc, #580]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb67 	bl	8001348 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c80:	f7ff fb62 	bl	8001348 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e152      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0f1      	beq.n	8001c80 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c9c:	4b85      	ldr	r3, [pc, #532]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	22f8      	movs	r2, #248	; 0xf8
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	00da      	lsls	r2, r3, #3
 8001cac:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb2:	e034      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	3305      	adds	r3, #5
 8001cba:	d111      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cbc:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cc8:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	22f8      	movs	r2, #248	; 0xf8
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	00da      	lsls	r2, r3, #3
 8001cd8:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	e01e      	b.n	8001d1e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ce0:	4b74      	ldr	r3, [pc, #464]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce4:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cec:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf0:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fb26 	bl	8001348 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d02:	f7ff fb21 	bl	8001348 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e111      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f1      	bne.n	8001d02 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2220      	movs	r2, #32
 8001d24:	4013      	ands	r3, r2
 8001d26:	d05c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d00e      	beq.n	8001d52 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d34:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	220c      	movs	r2, #12
 8001d3a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d114      	bne.n	8001d6a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d40:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	23c0      	movs	r3, #192	; 0xc0
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	401a      	ands	r2, r3
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d52:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d040      	beq.n	8001de0 <HAL_RCC_OscConfig+0x5a8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d03c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0e6      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01b      	beq.n	8001daa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d72:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d76:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0249      	lsls	r1, r1, #9
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fae2 	bl	8001348 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8a:	f7ff fadd 	bl	8001348 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0cd      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x552>
 8001da8:	e01b      	b.n	8001de2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001db0:	4943      	ldr	r1, [pc, #268]	; (8001ec0 <HAL_RCC_OscConfig+0x688>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fac7 	bl	8001348 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc0:	f7ff fac2 	bl	8001348 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b2      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x588>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001de0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <HAL_RCC_OscConfig+0x5b4>
 8001dea:	e0a4      	b.n	8001f36 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	220c      	movs	r2, #12
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5c2>
 8001df8:	e078      	b.n	8001eec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d14c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e08:	492e      	ldr	r1, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x68c>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fa9b 	bl	8001348 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff fa96 	bl	8001348 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e086      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	049b      	lsls	r3, r3, #18
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <HAL_RCC_OscConfig+0x690>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0449      	lsls	r1, r1, #17
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff fa69 	bl	8001348 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff fa64 	bl	8001348 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e054      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	049b      	lsls	r3, r3, #18
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x644>
 8001e9a:	e04c      	b.n	8001f36 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x68c>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa4e 	bl	8001348 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x6a6>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00001388 	.word	0x00001388
 8001ebc:	efffffff 	.word	0xefffffff
 8001ec0:	fffeffff 	.word	0xfffeffff
 8001ec4:	feffffff 	.word	0xfeffffff
 8001ec8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fa3c 	bl	8001348 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e02c      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_RCC_OscConfig+0x708>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x694>
 8001eea:	e024      	b.n	8001f36 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e01f      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_OscConfig+0x708>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_RCC_OscConfig+0x708>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	23c0      	movs	r3, #192	; 0xc0
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10e      	bne.n	8001f32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	220f      	movs	r2, #15
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	23f0      	movs	r3, #240	; 0xf0
 8001f26:	039b      	lsls	r3, r3, #14
 8001f28:	401a      	ands	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b008      	add	sp, #32
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0bf      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d911      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0a6      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d006      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa4:	21e0      	movs	r1, #224	; 0xe0
 8001fa6:	00c9      	lsls	r1, r1, #3
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	22f0      	movs	r2, #240	; 0xf0
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d04c      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d120      	bne.n	8002020 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07a      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d114      	bne.n	8002020 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06e      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8002004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d108      	bne.n	8002020 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e062      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e05b      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7ff f988 	bl	8001348 <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e009      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7ff f983 	bl	8001348 <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1a4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e042      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	220c      	movs	r2, #12
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1ec      	bne.n	800203e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d211      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_RCC_ClockConfig+0x19c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e020      	b.n	80020d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_RCC_ClockConfig+0x1a8>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b4:	f000 f820 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b8:	0001      	movs	r1, r0
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x1a0>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	220f      	movs	r2, #15
 80020c2:	4013      	ands	r3, r2
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1ac>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	000a      	movs	r2, r1
 80020ca:	40da      	lsrs	r2, r3
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1b0>)
 80020ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f7ff f8f3 	bl	80012bc <HAL_InitTick>
  
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	00001388 	.word	0x00001388
 80020ec:	fffff8ff 	.word	0xfffff8ff
 80020f0:	08002a6c 	.word	0x08002a6c
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	220c      	movs	r2, #12
 800211c:	4013      	ands	r3, r2
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d046      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002122:	d848      	bhi.n	80021b6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002124:	2b04      	cmp	r3, #4
 8002126:	d002      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x36>
 8002128:	2b08      	cmp	r3, #8
 800212a:	d003      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x3c>
 800212c:	e043      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	e043      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	0c9b      	lsrs	r3, r3, #18
 8002138:	220f      	movs	r2, #15
 800213a:	4013      	ands	r3, r2
 800213c:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	220f      	movs	r2, #15
 8002148:	4013      	ands	r3, r2
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	401a      	ands	r2, r3
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	429a      	cmp	r2, r3
 800215e:	d109      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	481a      	ldr	r0, [pc, #104]	; (80021cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002164:	f7fd ffd0 	bl	8000108 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4353      	muls	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e01a      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	23c0      	movs	r3, #192	; 0xc0
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	401a      	ands	r2, r3
 800217c:	23c0      	movs	r3, #192	; 0xc0
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	429a      	cmp	r2, r3
 8002182:	d109      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002188:	f7fd ffbe 	bl	8000108 <__udivsi3>
 800218c:	0003      	movs	r3, r0
 800218e:	001a      	movs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4353      	muls	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e008      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	480c      	ldr	r0, [pc, #48]	; (80021cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800219c:	f7fd ffb4 	bl	8000108 <__udivsi3>
 80021a0:	0003      	movs	r3, r0
 80021a2:	001a      	movs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4353      	muls	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	613b      	str	r3, [r7, #16]
      break;
 80021ae:	e005      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80021b2:	613b      	str	r3, [r7, #16]
      break;
 80021b4:	e002      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021bc:	693b      	ldr	r3, [r7, #16]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b006      	add	sp, #24
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	40021000 	.word	0x40021000
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	08002a7c 	.word	0x08002a7c
 80021d4:	08002a8c 	.word	0x08002a8c
 80021d8:	02dc6c00 	.word	0x02dc6c00

080021dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0a8      	b.n	8002340 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	2382      	movs	r3, #130	; 0x82
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	429a      	cmp	r2, r3
 8002200:	d009      	beq.n	8002216 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
 8002208:	e005      	b.n	8002216 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	225d      	movs	r2, #93	; 0x5d
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	225c      	movs	r2, #92	; 0x5c
 800222c:	2100      	movs	r1, #0
 800222e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f7fe ff9a 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	225d      	movs	r2, #93	; 0x5d
 800223c:	2102      	movs	r1, #2
 800223e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	438a      	bics	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	23e0      	movs	r3, #224	; 0xe0
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	429a      	cmp	r2, r3
 800225a:	d902      	bls.n	8002262 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e002      	b.n	8002268 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	23f0      	movs	r3, #240	; 0xf0
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	429a      	cmp	r2, r3
 8002272:	d008      	beq.n	8002286 <HAL_SPI_Init+0xaa>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	23e0      	movs	r3, #224	; 0xe0
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d002      	beq.n	8002286 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	2382      	movs	r3, #130	; 0x82
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	401a      	ands	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	2384      	movs	r3, #132	; 0x84
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2102      	movs	r1, #2
 80022a2:	400b      	ands	r3, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2101      	movs	r1, #1
 80022ac:	400b      	ands	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6999      	ldr	r1, [r3, #24]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	400b      	ands	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2138      	movs	r1, #56	; 0x38
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	400b      	ands	r3, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	0011      	movs	r1, r2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	2204      	movs	r2, #4
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2110      	movs	r1, #16
 80022f4:	400b      	ands	r3, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	2108      	movs	r1, #8
 80022fe:	400b      	ands	r3, r1
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	23f0      	movs	r3, #240	; 0xf0
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	400b      	ands	r3, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	0011      	movs	r1, r2
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4907      	ldr	r1, [pc, #28]	; (8002348 <HAL_SPI_Init+0x16c>)
 800232c:	400a      	ands	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	225d      	movs	r2, #93	; 0x5d
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	fffff7ff 	.word	0xfffff7ff

0800234c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	001a      	movs	r2, r3
 800235a:	1cbb      	adds	r3, r7, #2
 800235c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800235e:	2301      	movs	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002362:	2323      	movs	r3, #35	; 0x23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	225c      	movs	r2, #92	; 0x5c
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x2c>
 8002374:	2302      	movs	r3, #2
 8002376:	e1c4      	b.n	8002702 <HAL_SPI_TransmitReceive+0x3b6>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	225c      	movs	r2, #92	; 0x5c
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002380:	f7fe ffe2 	bl	8001348 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002388:	201b      	movs	r0, #27
 800238a:	183b      	adds	r3, r7, r0
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	215d      	movs	r1, #93	; 0x5d
 8002390:	5c52      	ldrb	r2, [r2, r1]
 8002392:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800239a:	2312      	movs	r3, #18
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	1cba      	adds	r2, r7, #2
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d011      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x84>
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	2382      	movs	r3, #130	; 0x82
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d107      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x7a>
 80023be:	183b      	adds	r3, r7, r0
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d004      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80023c6:	2323      	movs	r3, #35	; 0x23
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ce:	e191      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x98>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x98>
 80023dc:	1cbb      	adds	r3, r7, #2
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80023e4:	2323      	movs	r3, #35	; 0x23
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ec:	e182      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	225d      	movs	r2, #93	; 0x5d
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d003      	beq.n	8002402 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	225d      	movs	r2, #93	; 0x5d
 80023fe:	2105      	movs	r1, #5
 8002400:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1cba      	adds	r2, r7, #2
 8002412:	2146      	movs	r1, #70	; 0x46
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1cba      	adds	r2, r7, #2
 800241c:	2144      	movs	r1, #68	; 0x44
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1cba      	adds	r2, r7, #2
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1cba      	adds	r2, r7, #2
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	23e0      	movs	r3, #224	; 0xe0
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	429a      	cmp	r2, r3
 800244e:	d908      	bls.n	8002462 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	49ac      	ldr	r1, [pc, #688]	; (800270c <HAL_SPI_TransmitReceive+0x3c0>)
 800245c:	400a      	ands	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	e008      	b.n	8002474 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0149      	lsls	r1, r1, #5
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	4013      	ands	r3, r2
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d007      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	23e0      	movs	r3, #224	; 0xe0
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	429a      	cmp	r2, r3
 800249c:	d800      	bhi.n	80024a0 <HAL_SPI_TransmitReceive+0x154>
 800249e:	e083      	b.n	80025a8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0x168>
 80024a8:	2312      	movs	r3, #18
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d000      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0x168>
 80024b2:	e06d      	b.n	8002590 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d8:	e05a      	b.n	8002590 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d11b      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x1d4>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x1d4>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d113      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	881a      	ldrh	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	1c9a      	adds	r2, r3, #2
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	2b01      	cmp	r3, #1
 800252c:	d11c      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x21c>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2246      	movs	r2, #70	; 0x46
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	b292      	uxth	r2, r2
 8002546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	1c9a      	adds	r2, r3, #2
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2246      	movs	r2, #70	; 0x46
 8002556:	5a9b      	ldrh	r3, [r3, r2]
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b299      	uxth	r1, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2246      	movs	r2, #70	; 0x46
 8002562:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002564:	2301      	movs	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002568:	f7fe feee 	bl	8001348 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	429a      	cmp	r2, r3
 8002576:	d80b      	bhi.n	8002590 <HAL_SPI_TransmitReceive+0x244>
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	3301      	adds	r3, #1
 800257c:	d008      	beq.n	8002590 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800257e:	2323      	movs	r3, #35	; 0x23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2203      	movs	r2, #3
 8002584:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	225d      	movs	r2, #93	; 0x5d
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
        goto error;
 800258e:	e0b1      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d19f      	bne.n	80024da <HAL_SPI_TransmitReceive+0x18e>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2246      	movs	r2, #70	; 0x46
 800259e:	5a9b      	ldrh	r3, [r3, r2]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d199      	bne.n	80024da <HAL_SPI_TransmitReceive+0x18e>
 80025a6:	e089      	b.n	80026bc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x270>
 80025b0:	2312      	movs	r3, #18
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d000      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x270>
 80025ba:	e074      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	e060      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11c      	bne.n	800262c <HAL_SPI_TransmitReceive+0x2e0>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d017      	beq.n	800262c <HAL_SPI_TransmitReceive+0x2e0>
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	2b01      	cmp	r3, #1
 8002638:	d11e      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x32c>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2246      	movs	r2, #70	; 0x46
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d018      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	001a      	movs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2246      	movs	r2, #70	; 0x46
 8002666:	5a9b      	ldrh	r3, [r3, r2]
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b299      	uxth	r1, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2246      	movs	r2, #70	; 0x46
 8002672:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002678:	f7fe fe66 	bl	8001348 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002684:	429a      	cmp	r2, r3
 8002686:	d802      	bhi.n	800268e <HAL_SPI_TransmitReceive+0x342>
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	3301      	adds	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x348>
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d108      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002694:	2323      	movs	r3, #35	; 0x23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	225d      	movs	r2, #93	; 0x5d
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
        goto error;
 80026a4:	e026      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d199      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x298>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2246      	movs	r2, #70	; 0x46
 80026b4:	5a9b      	ldrh	r3, [r3, r2]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d193      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f954 	bl	8002970 <SPI_EndRxTxTransaction>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d006      	beq.n	80026da <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80026cc:	2323      	movs	r3, #35	; 0x23
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80026e2:	2323      	movs	r3, #35	; 0x23
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e003      	b.n	80026f4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	225d      	movs	r2, #93	; 0x5d
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	225c      	movs	r2, #92	; 0x5c
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026fc:	2323      	movs	r3, #35	; 0x23
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b00a      	add	sp, #40	; 0x28
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	ffffefff 	.word	0xffffefff

08002710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002720:	f7fe fe12 	bl	8001348 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002730:	f7fe fe0a 	bl	8001348 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	0d1b      	lsrs	r3, r3, #20
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	4353      	muls	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002746:	e058      	b.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	d055      	beq.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800274e:	f7fe fdfb 	bl	8001348 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	429a      	cmp	r2, r3
 800275c:	d902      	bls.n	8002764 <SPI_WaitFlagStateUntilTimeout+0x54>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d142      	bne.n	80027ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	21e0      	movs	r1, #224	; 0xe0
 8002770:	438a      	bics	r2, r1
 8002772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	2382      	movs	r3, #130	; 0x82
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	429a      	cmp	r2, r3
 800277e:	d113      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	429a      	cmp	r2, r3
 800278a:	d005      	beq.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	438a      	bics	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	019b      	lsls	r3, r3, #6
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d110      	bne.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	491a      	ldr	r1, [pc, #104]	; (8002828 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	0189      	lsls	r1, r1, #6
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	225d      	movs	r2, #93	; 0x5d
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	225c      	movs	r2, #92	; 0x5c
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e017      	b.n	800281a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	425a      	negs	r2, r3
 800280a:	4153      	adcs	r3, r2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	001a      	movs	r2, r3
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d197      	bne.n	8002748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b008      	add	sp, #32
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000000 	.word	0x20000000
 8002828:	ffffdfff 	.word	0xffffdfff

0800282c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800283a:	2317      	movs	r3, #23
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002842:	f7fe fd81 	bl	8001348 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	18d3      	adds	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002852:	f7fe fd79 	bl	8001348 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	0013      	movs	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	189b      	adds	r3, r3, r2
 800286c:	00da      	lsls	r2, r3, #3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	4353      	muls	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002878:	e068      	b.n	800294c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	429a      	cmp	r2, r3
 8002882:	d10a      	bne.n	800289a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	2117      	movs	r1, #23
 8002892:	187b      	adds	r3, r7, r1
 8002894:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002896:	187b      	adds	r3, r7, r1
 8002898:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	d055      	beq.n	800294c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a0:	f7fe fd52 	bl	8001348 <HAL_GetTick>
 80028a4:	0002      	movs	r2, r0
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d902      	bls.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d142      	bne.n	800293c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	21e0      	movs	r1, #224	; 0xe0
 80028c2:	438a      	bics	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	2382      	movs	r3, #130	; 0x82
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d113      	bne.n	80028fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	429a      	cmp	r2, r3
 80028dc:	d005      	beq.n	80028ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d107      	bne.n	80028fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	438a      	bics	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	429a      	cmp	r2, r3
 8002904:	d110      	bne.n	8002928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002912:	400a      	ands	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0189      	lsls	r1, r1, #6
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	225d      	movs	r2, #93	; 0x5d
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	225c      	movs	r2, #92	; 0x5c
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e010      	b.n	800295e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	3b01      	subs	r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d18e      	bne.n	800287a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b00a      	add	sp, #40	; 0x28
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	20000000 	.word	0x20000000
 800296c:	ffffdfff 	.word	0xffffdfff

08002970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	0159      	lsls	r1, r3, #5
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	0013      	movs	r3, r2
 800298a:	2200      	movs	r2, #0
 800298c:	f7ff ff4e 	bl	800282c <SPI_WaitFifoStateUntilTimeout>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d007      	beq.n	80029a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	2220      	movs	r2, #32
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e027      	b.n	80029f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	0013      	movs	r3, r2
 80029ae:	2200      	movs	r2, #0
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	f7ff fead 	bl	8002710 <SPI_WaitFlagStateUntilTimeout>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d007      	beq.n	80029ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	2220      	movs	r2, #32
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e014      	b.n	80029f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	23c0      	movs	r3, #192	; 0xc0
 80029ce:	00d9      	lsls	r1, r3, #3
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	0013      	movs	r3, r2
 80029d8:	2200      	movs	r2, #0
 80029da:	f7ff ff27 	bl	800282c <SPI_WaitFifoStateUntilTimeout>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d007      	beq.n	80029f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	2220      	movs	r2, #32
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e000      	b.n	80029f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}

080029fc <memset>:
 80029fc:	0003      	movs	r3, r0
 80029fe:	1882      	adds	r2, r0, r2
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	7019      	strb	r1, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	2600      	movs	r6, #0
 8002a10:	4c0c      	ldr	r4, [pc, #48]	; (8002a44 <__libc_init_array+0x38>)
 8002a12:	4d0d      	ldr	r5, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a14:	1b64      	subs	r4, r4, r5
 8002a16:	10a4      	asrs	r4, r4, #2
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	f000 f819 	bl	8002a54 <_init>
 8002a22:	4c0a      	ldr	r4, [pc, #40]	; (8002a4c <__libc_init_array+0x40>)
 8002a24:	4d0a      	ldr	r5, [pc, #40]	; (8002a50 <__libc_init_array+0x44>)
 8002a26:	1b64      	subs	r4, r4, r5
 8002a28:	10a4      	asrs	r4, r4, #2
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	00b3      	lsls	r3, r6, #2
 8002a32:	58eb      	ldr	r3, [r5, r3]
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	00b3      	lsls	r3, r6, #2
 8002a3c:	58eb      	ldr	r3, [r5, r3]
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08002a9c 	.word	0x08002a9c
 8002a48:	08002a9c 	.word	0x08002a9c
 8002a4c:	08002aa0 	.word	0x08002aa0
 8002a50:	08002a9c 	.word	0x08002a9c

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr

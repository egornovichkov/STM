
BMS_10_STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010760  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  080109f8  080109f8  000209f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011510  08011510  00021510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011518  08011518  00021518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801151c  0801151c  0002151c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  08011520  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000be8  24000088  080115a8  00030088  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000c70  080115a8  00030c70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY
 11 .debug_info   000267aa  00000000  00000000  000300f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b2d  00000000  00000000  000568a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e48  00000000  00000000  0005b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000017ba  00000000  00000000  0005d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bc53  00000000  00000000  0005e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002938a  00000000  00000000  0009a625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001723ab  00000000  00000000  000c39af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008418  00000000  00000000  00235d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  0023e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000088 	.word	0x24000088
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080109e0 	.word	0x080109e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400008c 	.word	0x2400008c
 80002d4:	080109e0 	.word	0x080109e0

080002d8 <__aeabi_ldivmod>:
 80002d8:	b97b      	cbnz	r3, 80002fa <__aeabi_ldivmod+0x22>
 80002da:	b972      	cbnz	r2, 80002fa <__aeabi_ldivmod+0x22>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bfbe      	ittt	lt
 80002e0:	2000      	movlt	r0, #0
 80002e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002e6:	e006      	blt.n	80002f6 <__aeabi_ldivmod+0x1e>
 80002e8:	bf08      	it	eq
 80002ea:	2800      	cmpeq	r0, #0
 80002ec:	bf1c      	itt	ne
 80002ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002f2:	f04f 30ff 	movne.w	r0, #4294967295
 80002f6:	f000 b9bb 	b.w	8000670 <__aeabi_idiv0>
 80002fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000302:	2900      	cmp	r1, #0
 8000304:	db09      	blt.n	800031a <__aeabi_ldivmod+0x42>
 8000306:	2b00      	cmp	r3, #0
 8000308:	db1a      	blt.n	8000340 <__aeabi_ldivmod+0x68>
 800030a:	f000 f84d 	bl	80003a8 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4770      	bx	lr
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	db1b      	blt.n	800035c <__aeabi_ldivmod+0x84>
 8000324:	f000 f840 	bl	80003a8 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	f000 f82f 	bl	80003a8 <__udivmoddi4>
 800034a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000352:	b004      	add	sp, #16
 8000354:	4240      	negs	r0, r0
 8000356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035a:	4770      	bx	lr
 800035c:	4252      	negs	r2, r2
 800035e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000362:	f000 f821 	bl	80003a8 <__udivmoddi4>
 8000366:	f8dd e004 	ldr.w	lr, [sp, #4]
 800036a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036e:	b004      	add	sp, #16
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr

08000378 <__aeabi_uldivmod>:
 8000378:	b953      	cbnz	r3, 8000390 <__aeabi_uldivmod+0x18>
 800037a:	b94a      	cbnz	r2, 8000390 <__aeabi_uldivmod+0x18>
 800037c:	2900      	cmp	r1, #0
 800037e:	bf08      	it	eq
 8000380:	2800      	cmpeq	r0, #0
 8000382:	bf1c      	itt	ne
 8000384:	f04f 31ff 	movne.w	r1, #4294967295
 8000388:	f04f 30ff 	movne.w	r0, #4294967295
 800038c:	f000 b970 	b.w	8000670 <__aeabi_idiv0>
 8000390:	f1ad 0c08 	sub.w	ip, sp, #8
 8000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000398:	f000 f806 	bl	80003a8 <__udivmoddi4>
 800039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a4:	b004      	add	sp, #16
 80003a6:	4770      	bx	lr

080003a8 <__udivmoddi4>:
 80003a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ac:	9e08      	ldr	r6, [sp, #32]
 80003ae:	460d      	mov	r5, r1
 80003b0:	4604      	mov	r4, r0
 80003b2:	460f      	mov	r7, r1
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d14a      	bne.n	800044e <__udivmoddi4+0xa6>
 80003b8:	428a      	cmp	r2, r1
 80003ba:	4694      	mov	ip, r2
 80003bc:	d965      	bls.n	800048a <__udivmoddi4+0xe2>
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	b143      	cbz	r3, 80003d6 <__udivmoddi4+0x2e>
 80003c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c8:	f1c3 0220 	rsb	r2, r3, #32
 80003cc:	409f      	lsls	r7, r3
 80003ce:	fa20 f202 	lsr.w	r2, r0, r2
 80003d2:	4317      	orrs	r7, r2
 80003d4:	409c      	lsls	r4, r3
 80003d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003da:	fa1f f58c 	uxth.w	r5, ip
 80003de:	fbb7 f1fe 	udiv	r1, r7, lr
 80003e2:	0c22      	lsrs	r2, r4, #16
 80003e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80003e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003ec:	fb01 f005 	mul.w	r0, r1, r5
 80003f0:	4290      	cmp	r0, r2
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x62>
 80003f4:	eb1c 0202 	adds.w	r2, ip, r2
 80003f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80003fc:	f080 811c 	bcs.w	8000638 <__udivmoddi4+0x290>
 8000400:	4290      	cmp	r0, r2
 8000402:	f240 8119 	bls.w	8000638 <__udivmoddi4+0x290>
 8000406:	3902      	subs	r1, #2
 8000408:	4462      	add	r2, ip
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	b2a4      	uxth	r4, r4
 800040e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000412:	fb0e 2210 	mls	r2, lr, r0, r2
 8000416:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041a:	fb00 f505 	mul.w	r5, r0, r5
 800041e:	42a5      	cmp	r5, r4
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x90>
 8000422:	eb1c 0404 	adds.w	r4, ip, r4
 8000426:	f100 32ff 	add.w	r2, r0, #4294967295
 800042a:	f080 8107 	bcs.w	800063c <__udivmoddi4+0x294>
 800042e:	42a5      	cmp	r5, r4
 8000430:	f240 8104 	bls.w	800063c <__udivmoddi4+0x294>
 8000434:	4464      	add	r4, ip
 8000436:	3802      	subs	r0, #2
 8000438:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	2100      	movs	r1, #0
 8000440:	b11e      	cbz	r6, 800044a <__udivmoddi4+0xa2>
 8000442:	40dc      	lsrs	r4, r3
 8000444:	2300      	movs	r3, #0
 8000446:	e9c6 4300 	strd	r4, r3, [r6]
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0xbc>
 8000452:	2e00      	cmp	r6, #0
 8000454:	f000 80ed 	beq.w	8000632 <__udivmoddi4+0x28a>
 8000458:	2100      	movs	r1, #0
 800045a:	e9c6 0500 	strd	r0, r5, [r6]
 800045e:	4608      	mov	r0, r1
 8000460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000464:	fab3 f183 	clz	r1, r3
 8000468:	2900      	cmp	r1, #0
 800046a:	d149      	bne.n	8000500 <__udivmoddi4+0x158>
 800046c:	42ab      	cmp	r3, r5
 800046e:	d302      	bcc.n	8000476 <__udivmoddi4+0xce>
 8000470:	4282      	cmp	r2, r0
 8000472:	f200 80f8 	bhi.w	8000666 <__udivmoddi4+0x2be>
 8000476:	1a84      	subs	r4, r0, r2
 8000478:	eb65 0203 	sbc.w	r2, r5, r3
 800047c:	2001      	movs	r0, #1
 800047e:	4617      	mov	r7, r2
 8000480:	2e00      	cmp	r6, #0
 8000482:	d0e2      	beq.n	800044a <__udivmoddi4+0xa2>
 8000484:	e9c6 4700 	strd	r4, r7, [r6]
 8000488:	e7df      	b.n	800044a <__udivmoddi4+0xa2>
 800048a:	b902      	cbnz	r2, 800048e <__udivmoddi4+0xe6>
 800048c:	deff      	udf	#255	; 0xff
 800048e:	fab2 f382 	clz	r3, r2
 8000492:	2b00      	cmp	r3, #0
 8000494:	f040 8090 	bne.w	80005b8 <__udivmoddi4+0x210>
 8000498:	1a8a      	subs	r2, r1, r2
 800049a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800049e:	fa1f fe8c 	uxth.w	lr, ip
 80004a2:	2101      	movs	r1, #1
 80004a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80004a8:	fb07 2015 	mls	r0, r7, r5, r2
 80004ac:	0c22      	lsrs	r2, r4, #16
 80004ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004b2:	fb0e f005 	mul.w	r0, lr, r5
 80004b6:	4290      	cmp	r0, r2
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x124>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x122>
 80004c4:	4290      	cmp	r0, r2
 80004c6:	f200 80cb 	bhi.w	8000660 <__udivmoddi4+0x2b8>
 80004ca:	4645      	mov	r5, r8
 80004cc:	1a12      	subs	r2, r2, r0
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80004d4:	fb07 2210 	mls	r2, r7, r0, r2
 80004d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004dc:	fb0e fe00 	mul.w	lr, lr, r0
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x14e>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80004ec:	d202      	bcs.n	80004f4 <__udivmoddi4+0x14c>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	f200 80bb 	bhi.w	800066a <__udivmoddi4+0x2c2>
 80004f4:	4610      	mov	r0, r2
 80004f6:	eba4 040e 	sub.w	r4, r4, lr
 80004fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004fe:	e79f      	b.n	8000440 <__udivmoddi4+0x98>
 8000500:	f1c1 0720 	rsb	r7, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 fc07 	lsr.w	ip, r2, r7
 800050a:	ea4c 0c03 	orr.w	ip, ip, r3
 800050e:	fa05 f401 	lsl.w	r4, r5, r1
 8000512:	fa20 f307 	lsr.w	r3, r0, r7
 8000516:	40fd      	lsrs	r5, r7
 8000518:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800051c:	4323      	orrs	r3, r4
 800051e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000522:	fa1f fe8c 	uxth.w	lr, ip
 8000526:	fb09 5518 	mls	r5, r9, r8, r5
 800052a:	0c1c      	lsrs	r4, r3, #16
 800052c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000530:	fb08 f50e 	mul.w	r5, r8, lr
 8000534:	42a5      	cmp	r5, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	fa00 f001 	lsl.w	r0, r0, r1
 800053e:	d90b      	bls.n	8000558 <__udivmoddi4+0x1b0>
 8000540:	eb1c 0404 	adds.w	r4, ip, r4
 8000544:	f108 3aff 	add.w	sl, r8, #4294967295
 8000548:	f080 8088 	bcs.w	800065c <__udivmoddi4+0x2b4>
 800054c:	42a5      	cmp	r5, r4
 800054e:	f240 8085 	bls.w	800065c <__udivmoddi4+0x2b4>
 8000552:	f1a8 0802 	sub.w	r8, r8, #2
 8000556:	4464      	add	r4, ip
 8000558:	1b64      	subs	r4, r4, r5
 800055a:	b29d      	uxth	r5, r3
 800055c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000560:	fb09 4413 	mls	r4, r9, r3, r4
 8000564:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000568:	fb03 fe0e 	mul.w	lr, r3, lr
 800056c:	45a6      	cmp	lr, r4
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x1da>
 8000570:	eb1c 0404 	adds.w	r4, ip, r4
 8000574:	f103 35ff 	add.w	r5, r3, #4294967295
 8000578:	d26c      	bcs.n	8000654 <__udivmoddi4+0x2ac>
 800057a:	45a6      	cmp	lr, r4
 800057c:	d96a      	bls.n	8000654 <__udivmoddi4+0x2ac>
 800057e:	3b02      	subs	r3, #2
 8000580:	4464      	add	r4, ip
 8000582:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000586:	fba3 9502 	umull	r9, r5, r3, r2
 800058a:	eba4 040e 	sub.w	r4, r4, lr
 800058e:	42ac      	cmp	r4, r5
 8000590:	46c8      	mov	r8, r9
 8000592:	46ae      	mov	lr, r5
 8000594:	d356      	bcc.n	8000644 <__udivmoddi4+0x29c>
 8000596:	d053      	beq.n	8000640 <__udivmoddi4+0x298>
 8000598:	b156      	cbz	r6, 80005b0 <__udivmoddi4+0x208>
 800059a:	ebb0 0208 	subs.w	r2, r0, r8
 800059e:	eb64 040e 	sbc.w	r4, r4, lr
 80005a2:	fa04 f707 	lsl.w	r7, r4, r7
 80005a6:	40ca      	lsrs	r2, r1
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	4317      	orrs	r7, r2
 80005ac:	e9c6 7400 	strd	r7, r4, [r6]
 80005b0:	4618      	mov	r0, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b8:	f1c3 0120 	rsb	r1, r3, #32
 80005bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c0:	fa20 f201 	lsr.w	r2, r0, r1
 80005c4:	fa25 f101 	lsr.w	r1, r5, r1
 80005c8:	409d      	lsls	r5, r3
 80005ca:	432a      	orrs	r2, r5
 80005cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d0:	fa1f fe8c 	uxth.w	lr, ip
 80005d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80005d8:	fb07 1510 	mls	r5, r7, r0, r1
 80005dc:	0c11      	lsrs	r1, r2, #16
 80005de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005e2:	fb00 f50e 	mul.w	r5, r0, lr
 80005e6:	428d      	cmp	r5, r1
 80005e8:	fa04 f403 	lsl.w	r4, r4, r3
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x258>
 80005ee:	eb1c 0101 	adds.w	r1, ip, r1
 80005f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005f6:	d22f      	bcs.n	8000658 <__udivmoddi4+0x2b0>
 80005f8:	428d      	cmp	r5, r1
 80005fa:	d92d      	bls.n	8000658 <__udivmoddi4+0x2b0>
 80005fc:	3802      	subs	r0, #2
 80005fe:	4461      	add	r1, ip
 8000600:	1b49      	subs	r1, r1, r5
 8000602:	b292      	uxth	r2, r2
 8000604:	fbb1 f5f7 	udiv	r5, r1, r7
 8000608:	fb07 1115 	mls	r1, r7, r5, r1
 800060c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000610:	fb05 f10e 	mul.w	r1, r5, lr
 8000614:	4291      	cmp	r1, r2
 8000616:	d908      	bls.n	800062a <__udivmoddi4+0x282>
 8000618:	eb1c 0202 	adds.w	r2, ip, r2
 800061c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000620:	d216      	bcs.n	8000650 <__udivmoddi4+0x2a8>
 8000622:	4291      	cmp	r1, r2
 8000624:	d914      	bls.n	8000650 <__udivmoddi4+0x2a8>
 8000626:	3d02      	subs	r5, #2
 8000628:	4462      	add	r2, ip
 800062a:	1a52      	subs	r2, r2, r1
 800062c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000630:	e738      	b.n	80004a4 <__udivmoddi4+0xfc>
 8000632:	4631      	mov	r1, r6
 8000634:	4630      	mov	r0, r6
 8000636:	e708      	b.n	800044a <__udivmoddi4+0xa2>
 8000638:	4639      	mov	r1, r7
 800063a:	e6e6      	b.n	800040a <__udivmoddi4+0x62>
 800063c:	4610      	mov	r0, r2
 800063e:	e6fb      	b.n	8000438 <__udivmoddi4+0x90>
 8000640:	4548      	cmp	r0, r9
 8000642:	d2a9      	bcs.n	8000598 <__udivmoddi4+0x1f0>
 8000644:	ebb9 0802 	subs.w	r8, r9, r2
 8000648:	eb65 0e0c 	sbc.w	lr, r5, ip
 800064c:	3b01      	subs	r3, #1
 800064e:	e7a3      	b.n	8000598 <__udivmoddi4+0x1f0>
 8000650:	4645      	mov	r5, r8
 8000652:	e7ea      	b.n	800062a <__udivmoddi4+0x282>
 8000654:	462b      	mov	r3, r5
 8000656:	e794      	b.n	8000582 <__udivmoddi4+0x1da>
 8000658:	4640      	mov	r0, r8
 800065a:	e7d1      	b.n	8000600 <__udivmoddi4+0x258>
 800065c:	46d0      	mov	r8, sl
 800065e:	e77b      	b.n	8000558 <__udivmoddi4+0x1b0>
 8000660:	3d02      	subs	r5, #2
 8000662:	4462      	add	r2, ip
 8000664:	e732      	b.n	80004cc <__udivmoddi4+0x124>
 8000666:	4608      	mov	r0, r1
 8000668:	e70a      	b.n	8000480 <__udivmoddi4+0xd8>
 800066a:	4464      	add	r4, ip
 800066c:	3802      	subs	r0, #2
 800066e:	e742      	b.n	80004f6 <__udivmoddi4+0x14e>

08000670 <__aeabi_idiv0>:
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <RS485_RX_FRAME>:
extern int16_t Current_mA;
extern uint16_t Vpack_Voltage_mV;
extern int16_t Environment_temperature;
extern uint16_t Cell_Voltage_Array[18];

void RS485_RX_FRAME(uint8_t *RS485_ASCII_DATA, uint8_t LENGTH) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <RS485_RX_FRAME+0x44>)
 8000688:	f008 fdd2 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	480a      	ldr	r0, [pc, #40]	; (80006bc <RS485_RX_FRAME+0x48>)
 8000692:	f008 fdcd 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t*)RS485_ASCII_DATA, LENGTH, 1000);
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	b29a      	uxth	r2, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <RS485_RX_FRAME+0x4c>)
 80006a2:	f00d fb4d 	bl	800dd40 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2110      	movs	r1, #16
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <RS485_RX_FRAME+0x48>)
 80006ac:	f008 fdc0 	bl	8009230 <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	58020800 	.word	0x58020800
 80006bc:	58020c00 	.word	0x58020c00
 80006c0:	240005e8 	.word	0x240005e8

080006c4 <RS485_RX_FLAG_STATE>:

void RS485_RX_FLAG_STATE(void) {
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	if (RS485_RX_FRAME_DONE_FLAG == 0) {
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <RS485_RX_FLAG_STATE+0xa4>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d145      	bne.n	800075c <RS485_RX_FLAG_STATE+0x98>
		if (RS485_RX_DATA_TEMP == START_INFO_BYTE) {
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <RS485_RX_FLAG_STATE+0xa8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b7e      	cmp	r3, #126	; 0x7e
 80006d6:	d106      	bne.n	80006e6 <RS485_RX_FLAG_STATE+0x22>
			RS485_RX_START_FRAME_FLAG = 1;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <RS485_RX_FLAG_STATE+0xac>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
			RS485_RX_STOP_FRAME_FLAG = 0;
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <RS485_RX_FLAG_STATE+0xb0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e009      	b.n	80006fa <RS485_RX_FLAG_STATE+0x36>
		} else if (RS485_RX_DATA_TEMP == STOP_INFO_BYTE) {
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <RS485_RX_FLAG_STATE+0xa8>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b0d      	cmp	r3, #13
 80006ec:	d105      	bne.n	80006fa <RS485_RX_FLAG_STATE+0x36>
			RS485_RX_STOP_FRAME_FLAG = 1;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <RS485_RX_FLAG_STATE+0xb0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
			RS485_RX_START_FRAME_FLAG = 0;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <RS485_RX_FLAG_STATE+0xac>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		}

		if (RS485_RX_START_FRAME_FLAG == 1) {
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <RS485_RX_FLAG_STATE+0xac>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10b      	bne.n	800071a <RS485_RX_FLAG_STATE+0x56>
			RS485_RX_DATA[RS485_RX_COUNTER++] = RS485_RX_DATA_TEMP;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <RS485_RX_FLAG_STATE+0xb4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	b2d1      	uxtb	r1, r2
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <RS485_RX_FLAG_STATE+0xb4>)
 800070c:	7011      	strb	r1, [r2, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <RS485_RX_FLAG_STATE+0xa8>)
 8000712:	7819      	ldrb	r1, [r3, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <RS485_RX_FLAG_STATE+0xb8>)
 8000716:	5499      	strb	r1, [r3, r2]
 8000718:	e013      	b.n	8000742 <RS485_RX_FLAG_STATE+0x7e>
		} else if (RS485_RX_STOP_FRAME_FLAG == 1) {
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <RS485_RX_FLAG_STATE+0xb0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10f      	bne.n	8000742 <RS485_RX_FLAG_STATE+0x7e>
			RS485_RX_DATA[RS485_RX_COUNTER] = RS485_RX_DATA_TEMP;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <RS485_RX_FLAG_STATE+0xb4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <RS485_RX_FLAG_STATE+0xa8>)
 800072a:	7819      	ldrb	r1, [r3, #0]
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <RS485_RX_FLAG_STATE+0xb8>)
 800072e:	5499      	strb	r1, [r3, r2]
			RS485_RX_START_FRAME_FLAG = 0;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <RS485_RX_FLAG_STATE+0xac>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
			RS485_RX_STOP_FRAME_FLAG = 0;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <RS485_RX_FLAG_STATE+0xb0>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
			RS485_RX_FRAME_DONE_FLAG = 1;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <RS485_RX_FLAG_STATE+0xa4>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
		}

		if (RS485_RX_COUNTER >= RS485_RX_MAX_FRAME_LENGTH) {
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <RS485_RX_FLAG_STATE+0xb4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2bff      	cmp	r3, #255	; 0xff
 8000748:	d108      	bne.n	800075c <RS485_RX_FLAG_STATE+0x98>
			RS485_RX_COUNTER = 0;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <RS485_RX_FLAG_STATE+0xb4>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
			RS485_RX_START_FRAME_FLAG = 0;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <RS485_RX_FLAG_STATE+0xac>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
			RS485_RX_STOP_FRAME_FLAG = 0;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <RS485_RX_FLAG_STATE+0xb0>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	2400087a 	.word	0x2400087a
 800076c:	24000877 	.word	0x24000877
 8000770:	24000878 	.word	0x24000878
 8000774:	24000879 	.word	0x24000879
 8000778:	2400087b 	.word	0x2400087b
 800077c:	24000778 	.word	0x24000778

08000780 <Count_Lchksum>:


uint16_t Count_Lchksum (uint16_t info_length) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	uint16_t Lchsksum_temp;
	Lchsksum_temp = (info_length & 0x000F) + ((info_length>>4) & 0x000F) + ((info_length>>8) & 0x000F);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	b29a      	uxth	r2, r3
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	091b      	lsrs	r3, r3, #4
 8000796:	b29b      	uxth	r3, r3
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	b29b      	uxth	r3, r3
 800079e:	4413      	add	r3, r2
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
	Lchsksum_temp %= 16;
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	81fb      	strh	r3, [r7, #14]
	Lchsksum_temp = ~Lchsksum_temp + 1;
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	425b      	negs	r3, r3
 80007be:	81fb      	strh	r3, [r7, #14]
	return Lchsksum_temp & 0x000F;
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	b29b      	uxth	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <Count_Chksum>:

uint16_t Count_Chksum(uint8_t *buffer_ptr, uint16_t info_length){
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
	uint32_t chksum_temp;
	uint16_t chksum_result;
	chksum_temp = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]

	for (uint16_t chksum_cnt = 1; chksum_cnt <= info_length + 12; chksum_cnt++){
 80007e4:	2301      	movs	r3, #1
 80007e6:	817b      	strh	r3, [r7, #10]
 80007e8:	e00a      	b.n	8000800 <Count_Chksum+0x2c>
		chksum_temp += buffer_ptr[chksum_cnt];
 80007ea:	897b      	ldrh	r3, [r7, #10]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
	for (uint16_t chksum_cnt = 1; chksum_cnt <= info_length + 12; chksum_cnt++){
 80007fa:	897b      	ldrh	r3, [r7, #10]
 80007fc:	3301      	adds	r3, #1
 80007fe:	817b      	strh	r3, [r7, #10]
 8000800:	897a      	ldrh	r2, [r7, #10]
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	330c      	adds	r3, #12
 8000806:	429a      	cmp	r2, r3
 8000808:	ddef      	ble.n	80007ea <Count_Chksum+0x16>
	}
	chksum_temp = ~chksum_temp + 1;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	425b      	negs	r3, r3
 800080e:	60fb      	str	r3, [r7, #12]

	chksum_result = chksum_temp & 0x0000FFFF;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	813b      	strh	r3, [r7, #8]
	return chksum_result;
 8000814:	893b      	ldrh	r3, [r7, #8]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <Hex_to_ASCII>:

uint16_t Hex_to_ASCII (uint8_t Hex_Input){
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
	uint8_t MSB_buffer = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
	uint8_t LSB_buffer = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
	uint16_t ASCII_out = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	81bb      	strh	r3, [r7, #12]

	MSB_buffer = Hex_Input >> 4;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	091b      	lsrs	r3, r3, #4
 800083c:	73fb      	strb	r3, [r7, #15]
	if (MSB_buffer < 10){
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b09      	cmp	r3, #9
 8000842:	d803      	bhi.n	800084c <Hex_to_ASCII+0x2a>
		MSB_buffer = MSB_buffer + 0x30;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	3330      	adds	r3, #48	; 0x30
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e002      	b.n	8000852 <Hex_to_ASCII+0x30>
	}
	else {
		MSB_buffer = MSB_buffer + 0x37;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3337      	adds	r3, #55	; 0x37
 8000850:	73fb      	strb	r3, [r7, #15]
	}

	LSB_buffer = Hex_Input & 0x0F;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	73bb      	strb	r3, [r7, #14]
	if (LSB_buffer < 10){
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b09      	cmp	r3, #9
 800085e:	d803      	bhi.n	8000868 <Hex_to_ASCII+0x46>
		LSB_buffer = LSB_buffer + 0x30;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3330      	adds	r3, #48	; 0x30
 8000864:	73bb      	strb	r3, [r7, #14]
 8000866:	e002      	b.n	800086e <Hex_to_ASCII+0x4c>
	}
	else {
		LSB_buffer = LSB_buffer + 0x37;
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	3337      	adds	r3, #55	; 0x37
 800086c:	73bb      	strb	r3, [r7, #14]
	}

	ASCII_out = MSB_buffer<<8 | LSB_buffer;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	81bb      	strh	r3, [r7, #12]
	return ASCII_out;
 800087e:	89bb      	ldrh	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <ASCII_to_Hex>:

uint8_t ASCII_to_Hex (uint8_t ASCII_Input){
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	uint8_t HEX_out = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]

	if (ASCII_Input >= 0x30 && ASCII_Input < 0x40){
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b2f      	cmp	r3, #47	; 0x2f
 800089e:	d906      	bls.n	80008ae <ASCII_to_Hex+0x22>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b3f      	cmp	r3, #63	; 0x3f
 80008a4:	d803      	bhi.n	80008ae <ASCII_to_Hex+0x22>
		HEX_out = ASCII_Input - 0x30;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3b30      	subs	r3, #48	; 0x30
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00b      	b.n	80008c6 <ASCII_to_Hex+0x3a>
	}
	else if (ASCII_Input >= 0x41 && ASCII_Input < 0x47) {
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b40      	cmp	r3, #64	; 0x40
 80008b2:	d906      	bls.n	80008c2 <ASCII_to_Hex+0x36>
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b46      	cmp	r3, #70	; 0x46
 80008b8:	d803      	bhi.n	80008c2 <ASCII_to_Hex+0x36>
		HEX_out = ASCII_Input - 0x37;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3b37      	subs	r3, #55	; 0x37
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <ASCII_to_Hex+0x3a>
	}
	else {
		HEX_out = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
	}
	return HEX_out;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <RS485_Transmit_Remote_Measuring>:


void RS485_Transmit_Remote_Measuring(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

	  uint16_t N = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	82fb      	strh	r3, [r7, #22]
	  uint16_t M = 18;
 80008de:	2312      	movs	r3, #18
 80008e0:	80fb      	strh	r3, [r7, #6]

	  RS485_HEX_DATA[N++] = 0x26; // VER
 80008e2:	8afb      	ldrh	r3, [r7, #22]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	82fa      	strh	r2, [r7, #22]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b80      	ldr	r3, [pc, #512]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 80008ec:	2126      	movs	r1, #38	; 0x26
 80008ee:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x00; // ADR
 80008f0:	8afb      	ldrh	r3, [r7, #22]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	82fa      	strh	r2, [r7, #22]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b7c      	ldr	r3, [pc, #496]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x46; // CID1
 80008fe:	8afb      	ldrh	r3, [r7, #22]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	82fa      	strh	r2, [r7, #22]
 8000904:	461a      	mov	r2, r3
 8000906:	4b79      	ldr	r3, [pc, #484]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000908:	2146      	movs	r1, #70	; 0x46
 800090a:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x00; // CID2
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	82fa      	strh	r2, [r7, #22]
 8000912:	461a      	mov	r2, r3
 8000914:	4b75      	ldr	r3, [pc, #468]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000916:	2100      	movs	r1, #0
 8000918:	5499      	strb	r1, [r3, r2]

	  uint16_t temp_Lchksum;
	  temp_Lchksum = Count_Lchksum(INFO_FRAME_LENGTH_REMOTE_MEAS);
 800091a:	2076      	movs	r0, #118	; 0x76
 800091c:	f7ff ff30 	bl	8000780 <Count_Lchksum>
 8000920:	4603      	mov	r3, r0
 8000922:	80bb      	strh	r3, [r7, #4]
	  RS485_HEX_DATA[N++] = (temp_Lchksum << 4) + (INFO_FRAME_LENGTH_REMOTE_MEAS >> 8); // LENGTH
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	1c59      	adds	r1, r3, #1
 800092c:	82f9      	strh	r1, [r7, #22]
 800092e:	4619      	mov	r1, r3
 8000930:	0113      	lsls	r3, r2, #4
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000936:	545a      	strb	r2, [r3, r1]
	  RS485_HEX_DATA[N++] = INFO_FRAME_LENGTH_REMOTE_MEAS; // LENGTH
 8000938:	8afb      	ldrh	r3, [r7, #22]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	82fa      	strh	r2, [r7, #22]
 800093e:	461a      	mov	r2, r3
 8000940:	4b6a      	ldr	r3, [pc, #424]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000942:	2176      	movs	r1, #118	; 0x76
 8000944:	5499      	strb	r1, [r3, r2]

	  RS485_HEX_DATA[N++] = 0x00; 		   // DATA_FLAG
 8000946:	8afb      	ldrh	r3, [r7, #22]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	82fa      	strh	r2, [r7, #22]
 800094c:	461a      	mov	r2, r3
 800094e:	4b67      	ldr	r3, [pc, #412]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000950:	2100      	movs	r1, #0
 8000952:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = Pack_Location; // The pack location
 8000954:	8afb      	ldrh	r3, [r7, #22]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	82fa      	strh	r2, [r7, #22]
 800095a:	461a      	mov	r2, r3
 800095c:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <RS485_Transmit_Remote_Measuring+0x21c>)
 800095e:	7819      	ldrb	r1, [r3, #0]
 8000960:	4b62      	ldr	r3, [pc, #392]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000962:	5499      	strb	r1, [r3, r2]

	  RS485_HEX_DATA[N++] = M; // M (the number of the single battery)
 8000964:	8afb      	ldrh	r3, [r7, #22]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	82fa      	strh	r2, [r7, #22]
 800096a:	461a      	mov	r2, r3
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	b2d9      	uxtb	r1, r3
 8000970:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000972:	5499      	strb	r1, [r3, r2]

	  // Cell Voltage
	  for (int i = 0; i < M; i++){
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	e02a      	b.n	80009d0 <RS485_Transmit_Remote_Measuring+0xfc>
		  RS485_HEX_DATA[N++] = HIGH_BYTE(LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fbea 	bl	8003158 <LTC6813_Read_Cell>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <RS485_Transmit_Remote_Measuring+0x220>)
 800098a:	fba3 2302 	umull	r2, r3, r3, r2
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	b29b      	uxth	r3, r3
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b299      	uxth	r1, r3
 8000996:	8afb      	ldrh	r3, [r7, #22]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	82fa      	strh	r2, [r7, #22]
 800099c:	461a      	mov	r2, r3
 800099e:	b2c9      	uxtb	r1, r1
 80009a0:	4b52      	ldr	r3, [pc, #328]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 80009a2:	5499      	strb	r1, [r3, r2]
		  RS485_HEX_DATA[N++] = LOW_BYTE(LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fbd5 	bl	8003158 <LTC6813_Read_Cell>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <RS485_Transmit_Remote_Measuring+0x220>)
 80009b4:	fba3 2302 	umull	r2, r3, r3, r2
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	b299      	uxth	r1, r3
 80009bc:	8afb      	ldrh	r3, [r7, #22]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	82fa      	strh	r2, [r7, #22]
 80009c2:	461a      	mov	r2, r3
 80009c4:	b2c9      	uxtb	r1, r1
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 80009c8:	5499      	strb	r1, [r3, r2]
	  for (int i = 0; i < M; i++){
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	3301      	adds	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbd0      	blt.n	800097a <RS485_Transmit_Remote_Measuring+0xa6>
	  }

	  RS485_HEX_DATA[N++] = 0x04; // количесво измерений температуры ячеек
 80009d8:	8afb      	ldrh	r3, [r7, #22]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	82fa      	strh	r2, [r7, #22]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 80009e2:	2104      	movs	r1, #4
 80009e4:	5499      	strb	r1, [r3, r2]

	  RS485_temperature = LTC6813_Temp_Read(8) + 2731;
 80009e6:	2008      	movs	r0, #8
 80009e8:	f002 fbee 	bl	80031c8 <LTC6813_Temp_Read>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f603 23ab 	addw	r3, r3, #2731	; 0xaab
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 80009f8:	801a      	strh	r2, [r3, #0]
	  RS485_HEX_DATA[N++] = HIGH_BYTE(RS485_temperature);
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b299      	uxth	r1, r3
 8000a02:	8afb      	ldrh	r3, [r7, #22]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	82fa      	strh	r2, [r7, #22]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	b2c9      	uxtb	r1, r1
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a0e:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = LOW_BYTE(RS485_temperature); // температура ячейки 1
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 8000a12:	8819      	ldrh	r1, [r3, #0]
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	82fa      	strh	r2, [r7, #22]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	b2c9      	uxtb	r1, r1
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a20:	5499      	strb	r1, [r3, r2]

	  RS485_temperature = LTC6813_Temp_Read(9) + 2731;
 8000a22:	2009      	movs	r0, #9
 8000a24:	f002 fbd0 	bl	80031c8 <LTC6813_Temp_Read>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f603 23ab 	addw	r3, r3, #2731	; 0xaab
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 8000a34:	801a      	strh	r2, [r3, #0]
	  RS485_HEX_DATA[N++] = HIGH_BYTE(RS485_temperature);
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	82fa      	strh	r2, [r7, #22]
 8000a44:	461a      	mov	r2, r3
 8000a46:	b2c9      	uxtb	r1, r1
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a4a:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = LOW_BYTE(RS485_temperature); // температура ячейки 2
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <RS485_Transmit_Remote_Measuring+0x224>)
 8000a4e:	8819      	ldrh	r1, [r3, #0]
 8000a50:	8afb      	ldrh	r3, [r7, #22]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	82fa      	strh	r2, [r7, #22]
 8000a56:	461a      	mov	r2, r3
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a5c:	5499      	strb	r1, [r3, r2]

	  RS485_HEX_DATA[N++] = 0x00;
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	82fa      	strh	r2, [r7, #22]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x19; // температура окружающей среды
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	82fa      	strh	r2, [r7, #22]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a76:	2119      	movs	r1, #25
 8000a78:	5499      	strb	r1, [r3, r2]

	  RS485_HEX_DATA[N++] = 0x00;
 8000a7a:	8afb      	ldrh	r3, [r7, #22]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	82fa      	strh	r2, [r7, #22]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x19; // температура силовой части
 8000a88:	8afb      	ldrh	r3, [r7, #22]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	82fa      	strh	r2, [r7, #22]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000a92:	2119      	movs	r1, #25
 8000a94:	5499      	strb	r1, [r3, r2]

//	  RS485_Current_mA = -INA229_Read_VSHUNT()/RSHUNT/100;
	  RS485_HEX_DATA[N++] = HIGH_BYTE(Current_mA/10); // Ток батареи
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <RS485_Transmit_Remote_Measuring+0x228>)
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <RS485_Transmit_Remote_Measuring+0x22c>)
 8000a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa2:	1092      	asrs	r2, r2, #2
 8000aa4:	17db      	asrs	r3, r3, #31
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	121b      	asrs	r3, r3, #8
 8000aac:	b219      	sxth	r1, r3
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	82fa      	strh	r2, [r7, #22]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	b2c9      	uxtb	r1, r1
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000aba:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = LOW_BYTE(Current_mA/10);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <RS485_Transmit_Remote_Measuring+0x228>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <RS485_Transmit_Remote_Measuring+0x22c>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1092      	asrs	r2, r2, #2
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b219      	sxth	r1, r3
 8000ad0:	8afb      	ldrh	r3, [r7, #22]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	82fa      	strh	r2, [r7, #22]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	b2c9      	uxtb	r1, r1
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <RS485_Transmit_Remote_Measuring+0x218>)
 8000adc:	5499      	strb	r1, [r3, r2]

	  	RS485_Vpack = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <RS485_Transmit_Remote_Measuring+0x230>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 18; i++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e01d      	b.n	8000b26 <RS485_Transmit_Remote_Measuring+0x252>
 8000aea:	bf00      	nop
 8000aec:	2400012c 	.word	0x2400012c
 8000af0:	24000736 	.word	0x24000736
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	24000234 	.word	0x24000234
 8000afc:	2400074c 	.word	0x2400074c
 8000b00:	66666667 	.word	0x66666667
 8000b04:	24000230 	.word	0x24000230
			RS485_Vpack += LTC6813_Read_Cell(i);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fb23 	bl	8003158 <LTC6813_Read_Cell>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b89      	ldr	r3, [pc, #548]	; (8000d3c <RS485_Transmit_Remote_Measuring+0x468>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a87      	ldr	r2, [pc, #540]	; (8000d3c <RS485_Transmit_Remote_Measuring+0x468>)
 8000b1e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 18; i++){
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b11      	cmp	r3, #17
 8000b2a:	dded      	ble.n	8000b08 <RS485_Transmit_Remote_Measuring+0x234>
		}

		RS485_HEX_DATA[N++] = HIGH_BYTE(RS485_Vpack/100); 				// общее напряжение ячеек
 8000b2c:	4b83      	ldr	r3, [pc, #524]	; (8000d3c <RS485_Transmit_Remote_Measuring+0x468>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a83      	ldr	r2, [pc, #524]	; (8000d40 <RS485_Transmit_Remote_Measuring+0x46c>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	0a19      	lsrs	r1, r3, #8
 8000b3a:	8afb      	ldrh	r3, [r7, #22]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	82fa      	strh	r2, [r7, #22]
 8000b40:	461a      	mov	r2, r3
 8000b42:	b2c9      	uxtb	r1, r1
 8000b44:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000b46:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = LOW_BYTE(RS485_Vpack/100);
 8000b48:	4b7c      	ldr	r3, [pc, #496]	; (8000d3c <RS485_Transmit_Remote_Measuring+0x468>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a7c      	ldr	r2, [pc, #496]	; (8000d40 <RS485_Transmit_Remote_Measuring+0x46c>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	0959      	lsrs	r1, r3, #5
 8000b54:	8afb      	ldrh	r3, [r7, #22]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	82fa      	strh	r2, [r7, #22]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	b2c9      	uxtb	r1, r1
 8000b5e:	4b79      	ldr	r3, [pc, #484]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000b60:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = HIGH_BYTE(Battery_Residual_Capacity_mAh/10);	// Остаточная емкость батареи
 8000b62:	4b79      	ldr	r3, [pc, #484]	; (8000d48 <RS485_Transmit_Remote_Measuring+0x474>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4a79      	ldr	r2, [pc, #484]	; (8000d4c <RS485_Transmit_Remote_Measuring+0x478>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b299      	uxth	r1, r3
 8000b74:	8afb      	ldrh	r3, [r7, #22]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	82fa      	strh	r2, [r7, #22]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	b2c9      	uxtb	r1, r1
 8000b7e:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000b80:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = LOW_BYTE(Battery_Residual_Capacity_mAh/10);
 8000b82:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <RS485_Transmit_Remote_Measuring+0x474>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	4a71      	ldr	r2, [pc, #452]	; (8000d4c <RS485_Transmit_Remote_Measuring+0x478>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	8afb      	ldrh	r3, [r7, #22]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	82fa      	strh	r2, [r7, #22]
 8000b96:	461a      	mov	r2, r3
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000b9c:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = 0x00; 									// Self-define the number of remote measuring data
 8000b9e:	8afb      	ldrh	r3, [r7, #22]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	82fa      	strh	r2, [r7, #22]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = HIGH_BYTE(Total_Battery_Capacity_mAh/10); 	// Total capacity
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <RS485_Transmit_Remote_Measuring+0x47c>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4a66      	ldr	r2, [pc, #408]	; (8000d4c <RS485_Transmit_Remote_Measuring+0x478>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b299      	uxth	r1, r3
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	82fa      	strh	r2, [r7, #22]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	b2c9      	uxtb	r1, r1
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000bca:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = LOW_BYTE(Total_Battery_Capacity_mAh/10);
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <RS485_Transmit_Remote_Measuring+0x47c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4a5e      	ldr	r2, [pc, #376]	; (8000d4c <RS485_Transmit_Remote_Measuring+0x478>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	8afb      	ldrh	r3, [r7, #22]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	82fa      	strh	r2, [r7, #22]
 8000be0:	461a      	mov	r2, r3
 8000be2:	b2c9      	uxtb	r1, r1
 8000be4:	4b57      	ldr	r3, [pc, #348]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000be6:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = HIGH_BYTE(Battery_Cycles);			// Number of Battery cycles
 8000be8:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <RS485_Transmit_Remote_Measuring+0x480>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	8afb      	ldrh	r3, [r7, #22]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	82fa      	strh	r2, [r7, #22]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	b2c9      	uxtb	r1, r1
 8000bfa:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000bfc:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N++] = LOW_BYTE(Battery_Cycles);
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <RS485_Transmit_Remote_Measuring+0x480>)
 8000c00:	8819      	ldrh	r1, [r3, #0]
 8000c02:	8afb      	ldrh	r3, [r7, #22]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	82fa      	strh	r2, [r7, #22]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	b2c9      	uxtb	r1, r1
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000c0e:	5499      	strb	r1, [r3, r2]

		RS485_HEX_DATA[N++] = 0x00;	// CHKSUM
 8000c10:	8afb      	ldrh	r3, [r7, #22]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	82fa      	strh	r2, [r7, #22]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	5499      	strb	r1, [r3, r2]
		RS485_HEX_DATA[N] = 0x00;	// CHKSUM
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	54d1      	strb	r1, [r2, r3]

		N = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	82fb      	strh	r3, [r7, #22]
		RS485_ASCII_DATA[N++] = 0x7E; // SOI
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	82fa      	strh	r2, [r7, #22]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000c34:	217e      	movs	r1, #126	; 0x7e
 8000c36:	5499      	strb	r1, [r3, r2]
		for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_MEAS/2 + 8; M++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	e021      	b.n	8000c82 <RS485_Transmit_Remote_Measuring+0x3ae>
			Hex_to_ASCII_buffer = Hex_to_ASCII(RS485_HEX_DATA[M]);
 8000c3e:	4a41      	ldr	r2, [pc, #260]	; (8000d44 <RS485_Transmit_Remote_Measuring+0x470>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fdeb 	bl	8000822 <Hex_to_ASCII>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000c52:	801a      	strh	r2, [r3, #0]
			RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer >> 8;
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b299      	uxth	r1, r3
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	82fa      	strh	r2, [r7, #22]
 8000c62:	461a      	mov	r2, r3
 8000c64:	b2c9      	uxtb	r1, r1
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000c68:	5499      	strb	r1, [r3, r2]
			RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000c6c:	8819      	ldrh	r1, [r3, #0]
 8000c6e:	8afb      	ldrh	r3, [r7, #22]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	82fa      	strh	r2, [r7, #22]
 8000c74:	461a      	mov	r2, r3
 8000c76:	b2c9      	uxtb	r1, r1
 8000c78:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000c7a:	5499      	strb	r1, [r3, r2]
		for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_MEAS/2 + 8; M++){
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b42      	cmp	r3, #66	; 0x42
 8000c86:	ddda      	ble.n	8000c3e <RS485_Transmit_Remote_Measuring+0x36a>
		}
		RS485_ASCII_DATA[N++] = 0x0D;	// EOI
 8000c88:	8afb      	ldrh	r3, [r7, #22]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	82fa      	strh	r2, [r7, #22]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000c92:	210d      	movs	r1, #13
 8000c94:	5499      	strb	r1, [r3, r2]

		uint16_t Temp_Chksum = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	807b      	strh	r3, [r7, #2]
		Temp_Chksum = Count_Chksum((uint8_t*)RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_MEAS);
 8000c9a:	2176      	movs	r1, #118	; 0x76
 8000c9c:	482e      	ldr	r0, [pc, #184]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000c9e:	f7ff fd99 	bl	80007d4 <Count_Chksum>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	807b      	strh	r3, [r7, #2]

		Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t)(Temp_Chksum>>8));
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fdb7 	bl	8000822 <Hex_to_ASCII>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000cba:	801a      	strh	r2, [r3, #0]
		RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_MEAS + 13] = Hex_to_ASCII_buffer >> 8;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000cc8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_MEAS + 14] = Hex_to_ASCII_buffer;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000cd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t)(Temp_Chksum));
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fda0 	bl	8000822 <Hex_to_ASCII>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_MEAS + 15] = Hex_to_ASCII_buffer >> 8;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000cf6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_MEAS + 16] = Hex_to_ASCII_buffer;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <RS485_Transmit_Remote_Measuring+0x488>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000d02:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

		  HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <RS485_Transmit_Remote_Measuring+0x48c>)
 8000d0e:	f008 fa8f 	bl	8009230 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2110      	movs	r1, #16
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <RS485_Transmit_Remote_Measuring+0x490>)
 8000d18:	f008 fa8a 	bl	8009230 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t*)RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_MEAS + 18, 1000);
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	2288      	movs	r2, #136	; 0x88
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <RS485_Transmit_Remote_Measuring+0x484>)
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <RS485_Transmit_Remote_Measuring+0x494>)
 8000d26:	f00d f80b 	bl	800dd40 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <RS485_Transmit_Remote_Measuring+0x490>)
 8000d30:	f008 fa7e 	bl	8009230 <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24000230 	.word	0x24000230
 8000d40:	51eb851f 	.word	0x51eb851f
 8000d44:	2400012c 	.word	0x2400012c
 8000d48:	24000738 	.word	0x24000738
 8000d4c:	cccccccd 	.word	0xcccccccd
 8000d50:	24000022 	.word	0x24000022
 8000d54:	24000024 	.word	0x24000024
 8000d58:	240000a4 	.word	0x240000a4
 8000d5c:	2400022c 	.word	0x2400022c
 8000d60:	58020800 	.word	0x58020800
 8000d64:	58020c00 	.word	0x58020c00
 8000d68:	240005e8 	.word	0x240005e8

08000d6c <RS485_Transmit_Remote_Signaling>:

void RS485_Transmit_Remote_Signaling(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
	uint16_t Num_Bit = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	82fb      	strh	r3, [r7, #22]

	RS485_HEX_DATA[Num_Bit++] = 0x26; // VER
 8000d76:	8afb      	ldrh	r3, [r7, #22]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	82fa      	strh	r2, [r7, #22]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b79      	ldr	r3, [pc, #484]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000d80:	2126      	movs	r1, #38	; 0x26
 8000d82:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00; // ADR
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	82fa      	strh	r2, [r7, #22]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b75      	ldr	r3, [pc, #468]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x46; // CID1
 8000d92:	8afb      	ldrh	r3, [r7, #22]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	82fa      	strh	r2, [r7, #22]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000d9c:	2146      	movs	r1, #70	; 0x46
 8000d9e:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00; // CID2
 8000da0:	8afb      	ldrh	r3, [r7, #22]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	82fa      	strh	r2, [r7, #22]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b6e      	ldr	r3, [pc, #440]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]

	uint16_t temp_Lchksum;
	temp_Lchksum = Count_Lchksum(INFO_FRAME_LENGTH_REMOTE_SIGNALING);
 8000dae:	204a      	movs	r0, #74	; 0x4a
 8000db0:	f7ff fce6 	bl	8000780 <Count_Lchksum>
 8000db4:	4603      	mov	r3, r0
 8000db6:	80fb      	strh	r3, [r7, #6]
	RS485_HEX_DATA[Num_Bit++] = (temp_Lchksum << 4) + (INFO_FRAME_LENGTH_REMOTE_SIGNALING >> 8); 	// LENGTH
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	1c59      	adds	r1, r3, #1
 8000dc0:	82f9      	strh	r1, [r7, #22]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	0113      	lsls	r3, r2, #4
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000dca:	545a      	strb	r2, [r3, r1]
	RS485_HEX_DATA[Num_Bit++] = INFO_FRAME_LENGTH_REMOTE_SIGNALING; 								// LENGTH
 8000dcc:	8afb      	ldrh	r3, [r7, #22]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	82fa      	strh	r2, [r7, #22]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b63      	ldr	r3, [pc, #396]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000dd6:	214a      	movs	r1, #74	; 0x4a
 8000dd8:	5499      	strb	r1, [r3, r2]

	RS485_HEX_DATA[Num_Bit++] = 0x00; 		   	// DATA_FLAG
 8000dda:	8afb      	ldrh	r3, [r7, #22]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	82fa      	strh	r2, [r7, #22]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = Pack_Location; 	// The pack location
 8000de8:	8afb      	ldrh	r3, [r7, #22]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	82fa      	strh	r2, [r7, #22]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <RS485_Transmit_Remote_Signaling+0x1fc>)
 8000df2:	7819      	ldrb	r1, [r3, #0]
 8000df4:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000df6:	5499      	strb	r1, [r3, r2]

	RS485_HEX_DATA[Num_Bit++] = M; // M (the number of the single battery)
 8000df8:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <RS485_Transmit_Remote_Signaling+0x200>)
 8000dfa:	8819      	ldrh	r1, [r3, #0]
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	82fa      	strh	r2, [r7, #22]
 8000e02:	461a      	mov	r2, r3
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e08:	5499      	strb	r1, [r3, r2]

	// Cell Voltage Alarm
	for (int i = 0; i < M; i++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e00c      	b.n	8000e2a <RS485_Transmit_Remote_Signaling+0xbe>
		RS485_HEX_DATA[Num_Bit++] = Cell_Voltage_Alarm_State[i];
 8000e10:	8afb      	ldrh	r3, [r7, #22]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	82fa      	strh	r2, [r7, #22]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <RS485_Transmit_Remote_Signaling+0x204>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e22:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < M; i++){
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b50      	ldr	r3, [pc, #320]	; (8000f6c <RS485_Transmit_Remote_Signaling+0x200>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	dbec      	blt.n	8000e10 <RS485_Transmit_Remote_Signaling+0xa4>
	}

	RS485_HEX_DATA[Num_Bit++] = N; // количество измерений температуры
 8000e36:	4b4f      	ldr	r3, [pc, #316]	; (8000f74 <RS485_Transmit_Remote_Signaling+0x208>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	82fa      	strh	r2, [r7, #22]
 8000e40:	461a      	mov	r2, r3
 8000e42:	b2c9      	uxtb	r1, r1
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e46:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < N; i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e00c      	b.n	8000e68 <RS485_Transmit_Remote_Signaling+0xfc>
		RS485_HEX_DATA[Num_Bit++] = Temperature_Alarm_State[i];
 8000e4e:	8afb      	ldrh	r3, [r7, #22]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	82fa      	strh	r2, [r7, #22]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <RS485_Transmit_Remote_Signaling+0x20c>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e60:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < N; i++){
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <RS485_Transmit_Remote_Signaling+0x208>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4293      	cmp	r3, r2
 8000e72:	dbec      	blt.n	8000e4e <RS485_Transmit_Remote_Signaling+0xe2>
	}

	RS485_HEX_DATA[Num_Bit++] = Current_Alarm_State;
 8000e74:	8afb      	ldrh	r3, [r7, #22]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	82fa      	strh	r2, [r7, #22]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <RS485_Transmit_Remote_Signaling+0x210>)
 8000e7e:	7819      	ldrb	r1, [r3, #0]
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e82:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = Battery_Voltage_Alarm_State;
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	82fa      	strh	r2, [r7, #22]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <RS485_Transmit_Remote_Signaling+0x214>)
 8000e8e:	7819      	ldrb	r1, [r3, #0]
 8000e90:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e92:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x07; // the number of self-define alarm
 8000e94:	8afb      	ldrh	r3, [r7, #22]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	82fa      	strh	r2, [r7, #22]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	5499      	strb	r1, [r3, r2]

	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	82fa      	strh	r2, [r7, #22]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	82fa      	strh	r2, [r7, #22]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	82fa      	strh	r2, [r7, #22]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000ecc:	8afb      	ldrh	r3, [r7, #22]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	82fa      	strh	r2, [r7, #22]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000eda:	8afb      	ldrh	r3, [r7, #22]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	82fa      	strh	r2, [r7, #22]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000ee8:	8afb      	ldrh	r3, [r7, #22]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	82fa      	strh	r2, [r7, #22]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit++] = 0x00;
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	82fa      	strh	r2, [r7, #22]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	5499      	strb	r1, [r3, r2]
	  if (Current_mA < 0){
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <RS485_Transmit_Remote_Signaling+0x218>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da07      	bge.n	8000f1e <RS485_Transmit_Remote_Signaling+0x1b2>
		  RS485_HEX_DATA[Num_Bit++] = 0x01;
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	82fa      	strh	r2, [r7, #22]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	5499      	strb	r1, [r3, r2]
 8000f1c:	e00b      	b.n	8000f36 <RS485_Transmit_Remote_Signaling+0x1ca>
	  }
	  else if (Current_mA > 0){
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <RS485_Transmit_Remote_Signaling+0x218>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dd06      	ble.n	8000f36 <RS485_Transmit_Remote_Signaling+0x1ca>
		  RS485_HEX_DATA[Num_Bit++] = 0x02;
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	82fa      	strh	r2, [r7, #22]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000f32:	2102      	movs	r1, #2
 8000f34:	5499      	strb	r1, [r3, r2]
	  }
	RS485_HEX_DATA[Num_Bit++] = 0x00;	// CHKSUM
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	82fa      	strh	r2, [r7, #22]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[Num_Bit] = 0x00;	// CHKSUM
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <RS485_Transmit_Remote_Signaling+0x1f8>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	54d1      	strb	r1, [r2, r3]

	Num_Bit = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
	RS485_ASCII_DATA[Num_Bit++] = 0x7E; // SOI
 8000f50:	8afb      	ldrh	r3, [r7, #22]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	82fa      	strh	r2, [r7, #22]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <RS485_Transmit_Remote_Signaling+0x21c>)
 8000f5a:	217e      	movs	r1, #126	; 0x7e
 8000f5c:	5499      	strb	r1, [r3, r2]
	for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_SIGNALING / 2 + 8; M++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	e035      	b.n	8000fd0 <RS485_Transmit_Remote_Signaling+0x264>
 8000f64:	2400012c 	.word	0x2400012c
 8000f68:	24000736 	.word	0x24000736
 8000f6c:	08010c24 	.word	0x08010c24
 8000f70:	24000718 	.word	0x24000718
 8000f74:	08010c26 	.word	0x08010c26
 8000f78:	2400072c 	.word	0x2400072c
 8000f7c:	24000730 	.word	0x24000730
 8000f80:	24000731 	.word	0x24000731
 8000f84:	2400074c 	.word	0x2400074c
 8000f88:	240000a4 	.word	0x240000a4
		Hex_to_ASCII_buffer = Hex_to_ASCII(RS485_HEX_DATA[M]);
 8000f8c:	4a3f      	ldr	r2, [pc, #252]	; (800108c <RS485_Transmit_Remote_Signaling+0x320>)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fc44 	bl	8000822 <Hex_to_ASCII>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 8000fa0:	801a      	strh	r2, [r3, #0]
		RS485_ASCII_DATA[Num_Bit++] = Hex_to_ASCII_buffer >> 8;
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	8afb      	ldrh	r3, [r7, #22]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	82fa      	strh	r2, [r7, #22]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	b2c9      	uxtb	r1, r1
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8000fb6:	5499      	strb	r1, [r3, r2]
		RS485_ASCII_DATA[Num_Bit++] = Hex_to_ASCII_buffer;
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 8000fba:	8819      	ldrh	r1, [r3, #0]
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	82fa      	strh	r2, [r7, #22]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	b2c9      	uxtb	r1, r1
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8000fc8:	5499      	strb	r1, [r3, r2]
	for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_SIGNALING / 2 + 8; M++) {
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b2c      	cmp	r3, #44	; 0x2c
 8000fd4:	ddda      	ble.n	8000f8c <RS485_Transmit_Remote_Signaling+0x220>
	}
	RS485_ASCII_DATA[Num_Bit++] = 0x0D;	// EOI
 8000fd6:	8afb      	ldrh	r3, [r7, #22]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	82fa      	strh	r2, [r7, #22]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	5499      	strb	r1, [r3, r2]

	uint16_t Temp_Chksum = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	80bb      	strh	r3, [r7, #4]
	Temp_Chksum = Count_Chksum((uint8_t*) RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_SIGNALING);
 8000fe8:	214a      	movs	r1, #74	; 0x4a
 8000fea:	482a      	ldr	r0, [pc, #168]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8000fec:	f7ff fbf2 	bl	80007d4 <Count_Chksum>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	80bb      	strh	r3, [r7, #4]

	Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t) (Temp_Chksum >> 8));
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fc10 	bl	8000822 <Hex_to_ASCII>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 8001008:	801a      	strh	r2, [r3, #0]
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_SIGNALING + 13] = Hex_to_ASCII_buffer >> 8;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8001016:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_SIGNALING + 14] = Hex_to_ASCII_buffer;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8001022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t) (Temp_Chksum));
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fbf9 	bl	8000822 <Hex_to_ASCII>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 8001036:	801a      	strh	r2, [r3, #0]
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_SIGNALING + 15] = Hex_to_ASCII_buffer >> 8;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8001044:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_SIGNALING + 16] = Hex_to_ASCII_buffer;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <RS485_Transmit_Remote_Signaling+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8001050:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <RS485_Transmit_Remote_Signaling+0x32c>)
 800105c:	f008 f8e8 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <RS485_Transmit_Remote_Signaling+0x330>)
 8001066:	f008 f8e3 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t*) RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_SIGNALING + 18, 1000);
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	225c      	movs	r2, #92	; 0x5c
 8001070:	4908      	ldr	r1, [pc, #32]	; (8001094 <RS485_Transmit_Remote_Signaling+0x328>)
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <RS485_Transmit_Remote_Signaling+0x334>)
 8001074:	f00c fe64 	bl	800dd40 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <RS485_Transmit_Remote_Signaling+0x330>)
 800107e:	f008 f8d7 	bl	8009230 <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400012c 	.word	0x2400012c
 8001090:	2400022c 	.word	0x2400022c
 8001094:	240000a4 	.word	0x240000a4
 8001098:	58020800 	.word	0x58020800
 800109c:	58020c00 	.word	0x58020c00
 80010a0:	240005e8 	.word	0x240005e8

080010a4 <RS485_Transmit_Remote_Adjusting>:

void RS485_Transmit_Remote_Adjusting(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	uint16_t N = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	81fb      	strh	r3, [r7, #14]
	uint16_t P_num = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	80fb      	strh	r3, [r7, #6]
	uint16_t temp_Lchksum;

	RS485_HEX_DATA[N++] = 0x26; // VER
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	81fa      	strh	r2, [r7, #14]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4ba7      	ldr	r3, [pc, #668]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80010bc:	2126      	movs	r1, #38	; 0x26
 80010be:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = 0x00; // ADR
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	81fa      	strh	r2, [r7, #14]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = 0x46; // CID1
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	81fa      	strh	r2, [r7, #14]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4ba0      	ldr	r3, [pc, #640]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80010d8:	2146      	movs	r1, #70	; 0x46
 80010da:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = 0x00; // CID2
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	81fa      	strh	r2, [r7, #14]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b9c      	ldr	r3, [pc, #624]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]

	temp_Lchksum = Count_Lchksum(INFO_FRAME_LENGTH_REMOTE_ADJUST);
 80010ea:	2050      	movs	r0, #80	; 0x50
 80010ec:	f7ff fb48 	bl	8000780 <Count_Lchksum>
 80010f0:	4603      	mov	r3, r0
 80010f2:	80bb      	strh	r3, [r7, #4]
	RS485_HEX_DATA[N++] = (temp_Lchksum << 4) + (INFO_FRAME_LENGTH_REMOTE_ADJUST >> 8); // LENGTH
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	1c59      	adds	r1, r3, #1
 80010fc:	81f9      	strh	r1, [r7, #14]
 80010fe:	4619      	mov	r1, r3
 8001100:	0113      	lsls	r3, r2, #4
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b94      	ldr	r3, [pc, #592]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001106:	545a      	strb	r2, [r3, r1]
	RS485_HEX_DATA[N++] = INFO_FRAME_LENGTH_REMOTE_ADJUST; 			// LENGTH
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	81fa      	strh	r2, [r7, #14]
 800110e:	461a      	mov	r2, r3
 8001110:	4b91      	ldr	r3, [pc, #580]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001112:	2150      	movs	r1, #80	; 0x50
 8001114:	5499      	strb	r1, [r3, r2]


	RS485_HEX_DATA[N++] = (uint8_t)Para_Array[P_num++]; 				// The pack location
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	80fa      	strh	r2, [r7, #6]
 800111c:	461a      	mov	r2, r3
 800111e:	4b8f      	ldr	r3, [pc, #572]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001124:	89fb      	ldrh	r3, [r7, #14]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	81fa      	strh	r2, [r7, #14]
 800112a:	461a      	mov	r2, r3
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	4b8a      	ldr	r3, [pc, #552]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001130:	5499      	strb	r1, [r3, r2]

	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell high voltage alarm parameter
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4a89      	ldr	r2, [pc, #548]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	b29b      	uxth	r3, r3
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b299      	uxth	r1, r3
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	81fa      	strh	r2, [r7, #14]
 8001146:	461a      	mov	r2, r3
 8001148:	b2c9      	uxtb	r1, r1
 800114a:	4b83      	ldr	r3, [pc, #524]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 800114c:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	80fa      	strh	r2, [r7, #6]
 8001154:	461a      	mov	r2, r3
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	81fa      	strh	r2, [r7, #14]
 8001162:	461a      	mov	r2, r3
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4b7c      	ldr	r3, [pc, #496]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001168:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell low voltage alarm parameter
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4a7b      	ldr	r2, [pc, #492]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	b29b      	uxth	r3, r3
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b299      	uxth	r1, r3
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	81fa      	strh	r2, [r7, #14]
 800117e:	461a      	mov	r2, r3
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	4b75      	ldr	r3, [pc, #468]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001184:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	80fa      	strh	r2, [r7, #6]
 800118c:	461a      	mov	r2, r3
 800118e:	4b73      	ldr	r3, [pc, #460]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	81fa      	strh	r2, [r7, #14]
 800119a:	461a      	mov	r2, r3
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80011a0:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell high temperature alarm parameter
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4a6d      	ldr	r2, [pc, #436]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b299      	uxth	r1, r3
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	81fa      	strh	r2, [r7, #14]
 80011b6:	461a      	mov	r2, r3
 80011b8:	b2c9      	uxtb	r1, r1
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80011bc:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	80fa      	strh	r2, [r7, #6]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80011c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	81fa      	strh	r2, [r7, #14]
 80011d2:	461a      	mov	r2, r3
 80011d4:	b2c9      	uxtb	r1, r1
 80011d6:	4b60      	ldr	r3, [pc, #384]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80011d8:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell low temperature alarm parameter
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4a5f      	ldr	r2, [pc, #380]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	b299      	uxth	r1, r3
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	81fa      	strh	r2, [r7, #14]
 80011ee:	461a      	mov	r2, r3
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	4b59      	ldr	r3, [pc, #356]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80011f4:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	80fa      	strh	r2, [r7, #6]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	81fa      	strh	r2, [r7, #14]
 800120a:	461a      	mov	r2, r3
 800120c:	b2c9      	uxtb	r1, r1
 800120e:	4b52      	ldr	r3, [pc, #328]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001210:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Charge over current alarm parameter
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	b29b      	uxth	r3, r3
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b299      	uxth	r1, r3
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	81fa      	strh	r2, [r7, #14]
 8001226:	461a      	mov	r2, r3
 8001228:	b2c9      	uxtb	r1, r1
 800122a:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 800122c:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	80fa      	strh	r2, [r7, #6]
 8001234:	461a      	mov	r2, r3
 8001236:	4b49      	ldr	r3, [pc, #292]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	81fa      	strh	r2, [r7, #14]
 8001242:	461a      	mov	r2, r3
 8001244:	b2c9      	uxtb	r1, r1
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001248:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Battery high voltage alarm parameter
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4a43      	ldr	r2, [pc, #268]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	b29b      	uxth	r3, r3
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b299      	uxth	r1, r3
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	81fa      	strh	r2, [r7, #14]
 800125e:	461a      	mov	r2, r3
 8001260:	b2c9      	uxtb	r1, r1
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001264:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	80fa      	strh	r2, [r7, #6]
 800126c:	461a      	mov	r2, r3
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	81fa      	strh	r2, [r7, #14]
 800127a:	461a      	mov	r2, r3
 800127c:	b2c9      	uxtb	r1, r1
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001280:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Battery low voltage alarm parameter
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4a35      	ldr	r2, [pc, #212]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	b29b      	uxth	r3, r3
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b299      	uxth	r1, r3
 8001290:	89fb      	ldrh	r3, [r7, #14]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	81fa      	strh	r2, [r7, #14]
 8001296:	461a      	mov	r2, r3
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 800129c:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	80fa      	strh	r2, [r7, #6]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80012a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	81fa      	strh	r2, [r7, #14]
 80012b2:	461a      	mov	r2, r3
 80012b4:	b2c9      	uxtb	r1, r1
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80012b8:	5499      	strb	r1, [r3, r2]

// *******************************************************************************************************

	RS485_HEX_DATA[N++] = 12;											// Self-definition parameter number
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	81fa      	strh	r2, [r7, #14]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80012c4:	210c      	movs	r1, #12
 80012c6:	5499      	strb	r1, [r3, r2]
	P_num++;
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	3301      	adds	r3, #1
 80012cc:	80fb      	strh	r3, [r7, #6]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Discharge over current alarm parameter
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	4a22      	ldr	r2, [pc, #136]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b299      	uxth	r1, r3
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	81fa      	strh	r2, [r7, #14]
 80012e2:	461a      	mov	r2, r3
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 80012e8:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	80fa      	strh	r2, [r7, #6]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 80012f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	81fa      	strh	r2, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	b2c9      	uxtb	r1, r1
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001304:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell over voltage protection parameter
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	b29b      	uxth	r3, r3
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b299      	uxth	r1, r3
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	81fa      	strh	r2, [r7, #14]
 800131a:	461a      	mov	r2, r3
 800131c:	b2c9      	uxtb	r1, r1
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 8001320:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	80fa      	strh	r2, [r7, #6]
 8001328:	461a      	mov	r2, r3
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 800132c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	81fa      	strh	r2, [r7, #14]
 8001336:	461a      	mov	r2, r3
 8001338:	b2c9      	uxtb	r1, r1
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <RS485_Transmit_Remote_Adjusting+0x2b4>)
 800133c:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell over voltage recover parameter
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <RS485_Transmit_Remote_Adjusting+0x2b8>)
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	b29b      	uxth	r3, r3
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b299      	uxth	r1, r3
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	81fa      	strh	r2, [r7, #14]
 8001352:	461a      	mov	r2, r3
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	e003      	b.n	8001360 <RS485_Transmit_Remote_Adjusting+0x2bc>
 8001358:	2400012c 	.word	0x2400012c
 800135c:	24000998 	.word	0x24000998
 8001360:	4b89      	ldr	r3, [pc, #548]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001362:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	80fa      	strh	r2, [r7, #6]
 800136a:	461a      	mov	r2, r3
 800136c:	4b87      	ldr	r3, [pc, #540]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800136e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	81fa      	strh	r2, [r7, #14]
 8001378:	461a      	mov	r2, r3
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	4b82      	ldr	r3, [pc, #520]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800137e:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell under voltage recover parameter
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4a82      	ldr	r2, [pc, #520]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	b29b      	uxth	r3, r3
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b299      	uxth	r1, r3
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	81fa      	strh	r2, [r7, #14]
 8001394:	461a      	mov	r2, r3
 8001396:	b2c9      	uxtb	r1, r1
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800139a:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	80fa      	strh	r2, [r7, #6]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b79      	ldr	r3, [pc, #484]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80013a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	81fa      	strh	r2, [r7, #14]
 80013b0:	461a      	mov	r2, r3
 80013b2:	b2c9      	uxtb	r1, r1
 80013b4:	4b74      	ldr	r3, [pc, #464]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80013b6:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Cell under voltage protection parameter
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b299      	uxth	r1, r3
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	81fa      	strh	r2, [r7, #14]
 80013cc:	461a      	mov	r2, r3
 80013ce:	b2c9      	uxtb	r1, r1
 80013d0:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80013d2:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	80fa      	strh	r2, [r7, #6]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b6b      	ldr	r3, [pc, #428]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80013de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	81fa      	strh	r2, [r7, #14]
 80013e8:	461a      	mov	r2, r3
 80013ea:	b2c9      	uxtb	r1, r1
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80013ee:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]); 		// Battery over voltage protection parameter
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4a66      	ldr	r2, [pc, #408]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b299      	uxth	r1, r3
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	81fa      	strh	r2, [r7, #14]
 8001404:	461a      	mov	r2, r3
 8001406:	b2c9      	uxtb	r1, r1
 8001408:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800140a:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	80fa      	strh	r2, [r7, #6]
 8001412:	461a      	mov	r2, r3
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001416:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	81fa      	strh	r2, [r7, #14]
 8001420:	461a      	mov	r2, r3
 8001422:	b2c9      	uxtb	r1, r1
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001426:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Battery over voltage recover parameter
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	b29b      	uxth	r3, r3
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b299      	uxth	r1, r3
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	81fa      	strh	r2, [r7, #14]
 800143c:	461a      	mov	r2, r3
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001442:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	80fa      	strh	r2, [r7, #6]
 800144a:	461a      	mov	r2, r3
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800144e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	81fa      	strh	r2, [r7, #14]
 8001458:	461a      	mov	r2, r3
 800145a:	b2c9      	uxtb	r1, r1
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800145e:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Battery under voltage recover parameter
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	b29b      	uxth	r3, r3
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b299      	uxth	r1, r3
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	81fa      	strh	r2, [r7, #14]
 8001474:	461a      	mov	r2, r3
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800147a:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	80fa      	strh	r2, [r7, #6]
 8001482:	461a      	mov	r2, r3
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001486:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	81fa      	strh	r2, [r7, #14]
 8001490:	461a      	mov	r2, r3
 8001492:	b2c9      	uxtb	r1, r1
 8001494:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001496:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[P_num]);		// Battery under voltage protection parameter
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4a3c      	ldr	r2, [pc, #240]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b299      	uxth	r1, r3
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	81fa      	strh	r2, [r7, #14]
 80014ac:	461a      	mov	r2, r3
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80014b2:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[P_num++]);
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	80fa      	strh	r2, [r7, #6]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80014be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	81fa      	strh	r2, [r7, #14]
 80014c8:	461a      	mov	r2, r3
 80014ca:	b2c9      	uxtb	r1, r1
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80014ce:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[Charge_over_current_protection_parameter]);			// Charge over current protection parameter
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80014d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b299      	uxth	r1, r3
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	81fa      	strh	r2, [r7, #14]
 80014e2:	461a      	mov	r2, r3
 80014e4:	b2c9      	uxtb	r1, r1
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80014e8:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[Charge_over_current_protection_parameter]);
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 80014ec:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	81fa      	strh	r2, [r7, #14]
 80014f6:	461a      	mov	r2, r3
 80014f8:	b2c9      	uxtb	r1, r1
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 80014fc:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[Discharge_over_current_protection_parameter]);  		// Discharge over current protection parameter
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001504:	b29b      	uxth	r3, r3
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b299      	uxth	r1, r3
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	81fa      	strh	r2, [r7, #14]
 8001510:	461a      	mov	r2, r3
 8001512:	b2c9      	uxtb	r1, r1
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001516:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[Discharge_over_current_protection_parameter]);
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800151a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	81fa      	strh	r2, [r7, #14]
 8001524:	461a      	mov	r2, r3
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800152a:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = HIGH_BYTE((uint16_t)Para_Array[Discharge_over_current_time_delay_parameter]);  		// Discharge over current time delay parameter
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 800152e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001532:	b29b      	uxth	r3, r3
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	b299      	uxth	r1, r3
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	81fa      	strh	r2, [r7, #14]
 800153e:	461a      	mov	r2, r3
 8001540:	b2c9      	uxtb	r1, r1
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001544:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N++] = LOW_BYTE((uint16_t)Para_Array[Discharge_over_current_time_delay_parameter]);
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <RS485_Transmit_Remote_Adjusting+0x4e8>)
 8001548:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	81fa      	strh	r2, [r7, #14]
 8001552:	461a      	mov	r2, r3
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001558:	5499      	strb	r1, [r3, r2]
			 // Capacity and other function switch
			 // Equalization function switch parameter
			 // Indicator function switch parameter
			 // BMS name

	RS485_HEX_DATA[N++] = 0x00;	// CHKSUM
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	81fa      	strh	r2, [r7, #14]
 8001560:	461a      	mov	r2, r3
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]
	RS485_HEX_DATA[N] = 0x00;	// CHKSUM
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <RS485_Transmit_Remote_Adjusting+0x4e4>)
 800156c:	2100      	movs	r1, #0
 800156e:	54d1      	strb	r1, [r2, r3]

	N = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	81fb      	strh	r3, [r7, #14]
	RS485_ASCII_DATA[N++] = 0x7E; // SOI
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	81fa      	strh	r2, [r7, #14]
 800157a:	461a      	mov	r2, r3
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <RS485_Transmit_Remote_Adjusting+0x4ec>)
 800157e:	217e      	movs	r1, #126	; 0x7e
 8001580:	5499      	strb	r1, [r3, r2]
	for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_ADJUST / 2 + 8; M++) {
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	e027      	b.n	80015d8 <RS485_Transmit_Remote_Adjusting+0x534>
 8001588:	2400012c 	.word	0x2400012c
 800158c:	24000998 	.word	0x24000998
 8001590:	240000a4 	.word	0x240000a4
		Hex_to_ASCII_buffer = Hex_to_ASCII(RS485_HEX_DATA[M]);
 8001594:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <RS485_Transmit_Remote_Adjusting+0x5f0>)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f940 	bl	8000822 <Hex_to_ASCII>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 80015a8:	801a      	strh	r2, [r3, #0]
		RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer >> 8;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b299      	uxth	r1, r3
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	81fa      	strh	r2, [r7, #14]
 80015b8:	461a      	mov	r2, r3
 80015ba:	b2c9      	uxtb	r1, r1
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 80015be:	5499      	strb	r1, [r3, r2]
		RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer;
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 80015c2:	8819      	ldrh	r1, [r3, #0]
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	81fa      	strh	r2, [r7, #14]
 80015ca:	461a      	mov	r2, r3
 80015cc:	b2c9      	uxtb	r1, r1
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 80015d0:	5499      	strb	r1, [r3, r2]
	for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_ADJUST / 2 + 8; M++) {
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b2f      	cmp	r3, #47	; 0x2f
 80015dc:	ddda      	ble.n	8001594 <RS485_Transmit_Remote_Adjusting+0x4f0>
	}
	RS485_ASCII_DATA[N++] = 0x0D; // EOI
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	81fa      	strh	r2, [r7, #14]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 80015e8:	210d      	movs	r1, #13
 80015ea:	5499      	strb	r1, [r3, r2]

	uint16_t Temp_Chksum = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	807b      	strh	r3, [r7, #2]
	Temp_Chksum = Count_Chksum((uint8_t*) RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_ADJUST);
 80015f0:	2150      	movs	r1, #80	; 0x50
 80015f2:	482a      	ldr	r0, [pc, #168]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 80015f4:	f7ff f8ee 	bl	80007d4 <Count_Chksum>
 80015f8:	4603      	mov	r3, r0
 80015fa:	807b      	strh	r3, [r7, #2]

	Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t) (Temp_Chksum >> 8));
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b29b      	uxth	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f90c 	bl	8000822 <Hex_to_ASCII>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 8001610:	801a      	strh	r2, [r3, #0]
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_ADJUST + 13] = Hex_to_ASCII_buffer >> 8;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 800161e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_ADJUST + 14] = Hex_to_ASCII_buffer;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 800162a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t)(Temp_Chksum));
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f8f5 	bl	8000822 <Hex_to_ASCII>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 800163e:	801a      	strh	r2, [r3, #0]
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_ADJUST + 15] = Hex_to_ASCII_buffer >> 8;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	b29b      	uxth	r3, r3
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 800164c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_ADJUST + 16] = Hex_to_ASCII_buffer;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <RS485_Transmit_Remote_Adjusting+0x5f4>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 8001658:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <RS485_Transmit_Remote_Adjusting+0x5fc>)
 8001664:	f007 fde4 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <RS485_Transmit_Remote_Adjusting+0x600>)
 800166e:	f007 fddf 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t*) RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_ADJUST + 18, 1000);
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	2262      	movs	r2, #98	; 0x62
 8001678:	4908      	ldr	r1, [pc, #32]	; (800169c <RS485_Transmit_Remote_Adjusting+0x5f8>)
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <RS485_Transmit_Remote_Adjusting+0x604>)
 800167c:	f00c fb60 	bl	800dd40 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2110      	movs	r1, #16
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <RS485_Transmit_Remote_Adjusting+0x600>)
 8001686:	f007 fdd3 	bl	8009230 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2400012c 	.word	0x2400012c
 8001698:	2400022c 	.word	0x2400022c
 800169c:	240000a4 	.word	0x240000a4
 80016a0:	58020800 	.word	0x58020800
 80016a4:	58020c00 	.word	0x58020c00
 80016a8:	240005e8 	.word	0x240005e8

080016ac <RS485_Remote_Set_Command>:

void RS485_Remote_Set_Command(void){
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0

// Response message with the remote set command
	uint8_t RS485_REMOTE_SET_RESPONSE_OK_ASCII[] = {
 80016b2:	4bc6      	ldr	r3, [pc, #792]	; (80019cc <RS485_Remote_Set_Command+0x320>)
 80016b4:	f107 0418 	add.w	r4, r7, #24
 80016b8:	461d      	mov	r5, r3
 80016ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	8023      	strh	r3, [r4, #0]
			0x7E, 0x32, 0x36, 0x30, 0x30, 0x34, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x41, 0x45, 0x0D};
	uint8_t RS485_REMOTE_SET_RESPONSE_CMD_ERROR_ASCII[] = {
 80016c2:	4bc3      	ldr	r3, [pc, #780]	; (80019d0 <RS485_Remote_Set_Command+0x324>)
 80016c4:	1d3c      	adds	r4, r7, #4
 80016c6:	461d      	mov	r5, r3
 80016c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	8023      	strh	r3, [r4, #0]
			0x7E, 0x32, 0x36, 0x30, 0x30, 0x34, 0x36, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x41, 0x41, 0x0D};

	uint8_t Remote_Command = (ASCII_to_Hex(RS485_RX_DATA[COMMAND_TYPE_ADDRES])<<4) + ASCII_to_Hex(RS485_RX_DATA[COMMAND_TYPE_ADDRES+1]);
 80016d0:	4bc0      	ldr	r3, [pc, #768]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 80016d2:	7bdb      	ldrb	r3, [r3, #15]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f8d9 	bl	800088c <ASCII_to_Hex>
 80016da:	4603      	mov	r3, r0
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	b2dc      	uxtb	r4, r3
 80016e0:	4bbc      	ldr	r3, [pc, #752]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 80016e2:	7c1b      	ldrb	r3, [r3, #16]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f8d1 	bl	800088c <ASCII_to_Hex>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4423      	add	r3, r4
 80016ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t Remote_Data = (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES])<<12) + (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES+1])<<8)
 80016f2:	4bb8      	ldr	r3, [pc, #736]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 80016f4:	7c5b      	ldrb	r3, [r3, #17]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f8c8 	bl	800088c <ASCII_to_Hex>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29b      	uxth	r3, r3
 8001700:	031b      	lsls	r3, r3, #12
 8001702:	b29c      	uxth	r4, r3
 8001704:	4bb3      	ldr	r3, [pc, #716]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 8001706:	7c9b      	ldrb	r3, [r3, #18]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f8bf 	bl	800088c <ASCII_to_Hex>
 800170e:	4603      	mov	r3, r0
 8001710:	b29b      	uxth	r3, r3
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29b      	uxth	r3, r3
 8001716:	4423      	add	r3, r4
 8001718:	b29c      	uxth	r4, r3
			+ (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES+2])<<4) + (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES+3]));
 800171a:	4bae      	ldr	r3, [pc, #696]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 800171c:	7cdb      	ldrb	r3, [r3, #19]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f8b4 	bl	800088c <ASCII_to_Hex>
 8001724:	4603      	mov	r3, r0
 8001726:	b29b      	uxth	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b29b      	uxth	r3, r3
 800172c:	4423      	add	r3, r4
 800172e:	b29c      	uxth	r4, r3
 8001730:	4ba8      	ldr	r3, [pc, #672]	; (80019d4 <RS485_Remote_Set_Command+0x328>)
 8001732:	7d1b      	ldrb	r3, [r3, #20]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f8a9 	bl	800088c <ASCII_to_Hex>
 800173a:	4603      	mov	r3, r0
 800173c:	b29b      	uxth	r3, r3
	uint16_t Remote_Data = (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES])<<12) + (ASCII_to_Hex(RS485_RX_DATA[COMMAND_DATA_ADDRES+1])<<8)
 800173e:	4423      	add	r3, r4
 8001740:	85bb      	strh	r3, [r7, #44]	; 0x2c

	switch (Remote_Command) {
 8001742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001746:	3b01      	subs	r3, #1
 8001748:	2b42      	cmp	r3, #66	; 0x42
 800174a:	f200 815d 	bhi.w	8001a08 <RS485_Remote_Set_Command+0x35c>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <RS485_Remote_Set_Command+0xa8>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001861 	.word	0x08001861
 8001758:	08001875 	.word	0x08001875
 800175c:	08001889 	.word	0x08001889
 8001760:	0800189d 	.word	0x0800189d
 8001764:	080018b1 	.word	0x080018b1
 8001768:	080018c5 	.word	0x080018c5
 800176c:	080018d9 	.word	0x080018d9
 8001770:	080018ed 	.word	0x080018ed
 8001774:	08001a09 	.word	0x08001a09
 8001778:	08001901 	.word	0x08001901
 800177c:	08001915 	.word	0x08001915
 8001780:	08001929 	.word	0x08001929
 8001784:	0800193d 	.word	0x0800193d
 8001788:	08001951 	.word	0x08001951
 800178c:	08001965 	.word	0x08001965
 8001790:	08001979 	.word	0x08001979
 8001794:	0800198d 	.word	0x0800198d
 8001798:	080019a1 	.word	0x080019a1
 800179c:	08001a09 	.word	0x08001a09
 80017a0:	08001a09 	.word	0x08001a09
 80017a4:	08001a09 	.word	0x08001a09
 80017a8:	08001a09 	.word	0x08001a09
 80017ac:	08001a09 	.word	0x08001a09
 80017b0:	08001a09 	.word	0x08001a09
 80017b4:	08001a09 	.word	0x08001a09
 80017b8:	08001a09 	.word	0x08001a09
 80017bc:	08001a09 	.word	0x08001a09
 80017c0:	08001a09 	.word	0x08001a09
 80017c4:	08001a09 	.word	0x08001a09
 80017c8:	08001a09 	.word	0x08001a09
 80017cc:	08001a09 	.word	0x08001a09
 80017d0:	08001a09 	.word	0x08001a09
 80017d4:	08001a09 	.word	0x08001a09
 80017d8:	08001a09 	.word	0x08001a09
 80017dc:	08001a09 	.word	0x08001a09
 80017e0:	08001a09 	.word	0x08001a09
 80017e4:	08001a09 	.word	0x08001a09
 80017e8:	08001a09 	.word	0x08001a09
 80017ec:	08001a09 	.word	0x08001a09
 80017f0:	08001a09 	.word	0x08001a09
 80017f4:	080019b5 	.word	0x080019b5
 80017f8:	08001a09 	.word	0x08001a09
 80017fc:	080019dd 	.word	0x080019dd
 8001800:	080019f3 	.word	0x080019f3
 8001804:	08001a09 	.word	0x08001a09
 8001808:	08001a09 	.word	0x08001a09
 800180c:	08001a09 	.word	0x08001a09
 8001810:	08001a09 	.word	0x08001a09
 8001814:	08001a09 	.word	0x08001a09
 8001818:	08001a09 	.word	0x08001a09
 800181c:	08001a09 	.word	0x08001a09
 8001820:	08001a09 	.word	0x08001a09
 8001824:	08001a09 	.word	0x08001a09
 8001828:	08001a09 	.word	0x08001a09
 800182c:	08001a09 	.word	0x08001a09
 8001830:	08001a09 	.word	0x08001a09
 8001834:	08001a09 	.word	0x08001a09
 8001838:	08001a09 	.word	0x08001a09
 800183c:	08001a09 	.word	0x08001a09
 8001840:	08001a09 	.word	0x08001a09
 8001844:	08001a09 	.word	0x08001a09
 8001848:	08001a09 	.word	0x08001a09
 800184c:	08001a09 	.word	0x08001a09
 8001850:	08001a09 	.word	0x08001a09
 8001854:	08001a09 	.word	0x08001a09
 8001858:	08001a09 	.word	0x08001a09
 800185c:	08001a15 	.word	0x08001a15
// The pack location
	case 1:
		Para_Array[The_pack_location] = Remote_Data;
 8001860:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001864:	6013      	str	r3, [r2, #0]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	2112      	movs	r1, #18
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe ff01 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001872:	e0d0      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell high voltage alarm parameter
	case 2:
		Para_Array[Cell_high_voltage_alarm_parameter] = Remote_Data;
 8001874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001876:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001878:	6053      	str	r3, [r2, #4]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2112      	movs	r1, #18
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fef7 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001886:	e0c6      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell low voltage alarm parameter
	case 3:
		Para_Array[Cell_low_voltage_alarm_parameter] = Remote_Data;
 8001888:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800188a:	4a53      	ldr	r2, [pc, #332]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 800188c:	6093      	str	r3, [r2, #8]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2112      	movs	r1, #18
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe feed 	bl	8000674 <RS485_RX_FRAME>
		break;
 800189a:	e0bc      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell high temperature alarm parameter
	case 4:
		Para_Array[Cell_high_temperature_alarm_parameter] = Remote_Data;
 800189c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800189e:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80018a0:	60d3      	str	r3, [r2, #12]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2112      	movs	r1, #18
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fee3 	bl	8000674 <RS485_RX_FRAME>
		break;
 80018ae:	e0b2      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell Low temperature alarm parameter
	case 5:
		Para_Array[Cell_low_temperature_alarm_parameter] = Remote_Data;
 80018b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018b2:	4a49      	ldr	r2, [pc, #292]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80018b4:	6113      	str	r3, [r2, #16]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	2112      	movs	r1, #18
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fed9 	bl	8000674 <RS485_RX_FRAME>
		break;
 80018c2:	e0a8      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Charge over current alarm parameter
	case 6:
		Para_Array[Charge_over_current_alarm_parameter] = Remote_Data;
 80018c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018c6:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80018c8:	6153      	str	r3, [r2, #20]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2112      	movs	r1, #18
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fecf 	bl	8000674 <RS485_RX_FRAME>
		break;
 80018d6:	e09e      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery high voltage alarm parameter
	case 7:
		Para_Array[Battery_high_voltage_alarm_parameter] = Remote_Data;
 80018d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018da:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80018dc:	6193      	str	r3, [r2, #24]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2112      	movs	r1, #18
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fec5 	bl	8000674 <RS485_RX_FRAME>
		break;
 80018ea:	e094      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery low voltage alarm parameter
	case 8:
		Para_Array[Battery_low_voltage_alarm_parameter] = Remote_Data;
 80018ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018ee:	4a3a      	ldr	r2, [pc, #232]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80018f0:	61d3      	str	r3, [r2, #28]
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80018f2:	f107 0318 	add.w	r3, r7, #24
 80018f6:	2112      	movs	r1, #18
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe febb 	bl	8000674 <RS485_RX_FRAME>
		break;
 80018fe:	e08a      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Discharge over current alarm parameter
	case 10:
		Para_Array[Discharge_over_current_alarm_parameter] = Remote_Data;
 8001900:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001902:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001904:	6253      	str	r3, [r2, #36]	; 0x24
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 8001906:	f107 0318 	add.w	r3, r7, #24
 800190a:	2112      	movs	r1, #18
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe feb1 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001912:	e080      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell over voltage protection parameter
	case 11:
		Para_Array[Cell_over_voltage_protection_parameter] = Remote_Data;
 8001914:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001916:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001918:	6293      	str	r3, [r2, #40]	; 0x28
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	2112      	movs	r1, #18
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fea7 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001926:	e076      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell over voltage recover parameter
	case 12:
		Para_Array[Cell_over_voltage_recover_parameter] = Remote_Data;
 8001928:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800192a:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 800192c:	62d3      	str	r3, [r2, #44]	; 0x2c
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	2112      	movs	r1, #18
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe9d 	bl	8000674 <RS485_RX_FRAME>
		break;
 800193a:	e06c      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell under voltage recover parameter
	case 13:
		Para_Array[Cell_under_voltage_recover_parameter] = Remote_Data;
 800193c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2112      	movs	r1, #18
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe93 	bl	8000674 <RS485_RX_FRAME>
		break;
 800194e:	e062      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Cell under voltage protection parameter
	case 14:
		Para_Array[Cell_under_voltage_protection_parameter] = Remote_Data;
 8001950:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001952:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001954:	6353      	str	r3, [r2, #52]	; 0x34
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2112      	movs	r1, #18
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe89 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001962:	e058      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery over voltage protection parameter
	case 15:
		Para_Array[Battery_over_voltage_protection_parameter] = Remote_Data;
 8001964:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001968:	6393      	str	r3, [r2, #56]	; 0x38
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	2112      	movs	r1, #18
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fe7f 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001976:	e04e      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery over voltage recover parameter
	case 16:
		Para_Array[Battery_over_voltage_recover_parameter] = Remote_Data;
 8001978:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 800197c:	63d3      	str	r3, [r2, #60]	; 0x3c
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	2112      	movs	r1, #18
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe75 	bl	8000674 <RS485_RX_FRAME>
		break;
 800198a:	e044      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery under voltage recover parameter
	case 17:
		Para_Array[Battery_under_voltage_recover_parameter] = Remote_Data;
 800198c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	2112      	movs	r1, #18
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fe6b 	bl	8000674 <RS485_RX_FRAME>
		break;
 800199e:	e03a      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Battery under voltage protection parameter
	case 18:
		Para_Array[Battery_under_voltage_protection_parameter] = Remote_Data;
 80019a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	2112      	movs	r1, #18
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fe61 	bl	8000674 <RS485_RX_FRAME>
		break;
 80019b2:	e030      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Charge over current protection parameter
	case 41:
		Para_Array[Charge_over_current_protection_parameter] = Remote_Data;
 80019b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <RS485_Remote_Set_Command+0x32c>)
 80019b8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	2112      	movs	r1, #18
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fe56 	bl	8000674 <RS485_RX_FRAME>
		break;
 80019c8:	e025      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
 80019ca:	bf00      	nop
 80019cc:	080109f8 	.word	0x080109f8
 80019d0:	08010a0c 	.word	0x08010a0c
 80019d4:	24000778 	.word	0x24000778
 80019d8:	24000998 	.word	0x24000998
// Discharge over current protection parameter
	case 43:
		Para_Array[Discharge_over_current_protection_parameter] = Remote_Data;
 80019dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <RS485_Remote_Set_Command+0x374>)
 80019e0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	2112      	movs	r1, #18
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fe42 	bl	8000674 <RS485_RX_FRAME>
		break;
 80019f0:	e011      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
// Discharge over current time delay parameter
	case 44:
		Para_Array[Discharge_over_current_time_delay_parameter] = Remote_Data;
 80019f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <RS485_Remote_Set_Command+0x374>)
 80019f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	2112      	movs	r1, #18
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fe37 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001a06:	e006      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
//		LTC6813_Equalization(Equalization_State);
//		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_OK_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_OK_ASCII));
		break;

	default:
		RS485_RX_FRAME(RS485_REMOTE_SET_RESPONSE_CMD_ERROR_ASCII, sizeof(RS485_REMOTE_SET_RESPONSE_CMD_ERROR_ASCII));
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2112      	movs	r1, #18
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fe31 	bl	8000674 <RS485_RX_FRAME>
		break;
 8001a12:	e000      	b.n	8001a16 <RS485_Remote_Set_Command+0x36a>
		break;
 8001a14:	bf00      	nop
	}
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000998 	.word	0x24000998

08001a24 <Pack_Number_Jamper_Read>:

uint8_t Pack_Number_Jamper_Read(void){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	uint8_t Pack_Number = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	  if (HAL_GPIO_ReadPin(LED_GREEN_OK_GPIO_Port, LED_GREEN_OK_Pin) == GPIO_PIN_RESET ) {
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <Pack_Number_Jamper_Read+0x6c>)
 8001a34:	f007 fbe4 	bl	8009200 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <Pack_Number_Jamper_Read+0x20>
		  Pack_Number += 1;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	3301      	adds	r3, #1
 8001a42:	71fb      	strb	r3, [r7, #7]
	  }
	  if (HAL_GPIO_ReadPin(LED_YELLOW_DISCHARGE_GPIO_Port, LED_YELLOW_DISCHARGE_Pin) == GPIO_PIN_RESET ) {
 8001a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <Pack_Number_Jamper_Read+0x70>)
 8001a4a:	f007 fbd9 	bl	8009200 <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <Pack_Number_Jamper_Read+0x36>
		  Pack_Number += 2;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3302      	adds	r3, #2
 8001a58:	71fb      	strb	r3, [r7, #7]
	  }
	  if (HAL_GPIO_ReadPin(LED_YELLOW_CHARGE_GPIO_Port, LED_YELLOW_CHARGE_Pin) == GPIO_PIN_RESET ) {
 8001a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <Pack_Number_Jamper_Read+0x70>)
 8001a60:	f007 fbce 	bl	8009200 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <Pack_Number_Jamper_Read+0x4c>
		  Pack_Number += 4;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	71fb      	strb	r3, [r7, #7]
	  }
	  if (HAL_GPIO_ReadPin(LED_RED_ALARM_GPIO_Port, LED_RED_ALARM_Pin) == GPIO_PIN_RESET ) {
 8001a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <Pack_Number_Jamper_Read+0x74>)
 8001a76:	f007 fbc3 	bl	8009200 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <Pack_Number_Jamper_Read+0x62>
		  Pack_Number += 8;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	3308      	adds	r3, #8
 8001a84:	71fb      	strb	r3, [r7, #7]
	  }
	  return Pack_Number;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58021000 	.word	0x58021000
 8001a94:	58020400 	.word	0x58020400
 8001a98:	58020c00 	.word	0x58020c00

08001a9c <RS485_Transmit_Remote_History>:

void RS485_Transmit_Remote_History(uint32_t Page_Num){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	  uint16_t N = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	82fb      	strh	r3, [r7, #22]
//	  uint16_t M = 18;
	  Read_History_from_Flash(Page_Num);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fb83 	bl	80021b8 <Read_History_from_Flash>

	  RS485_HEX_DATA[N++] = 0x26; // VER
 8001ab2:	8afb      	ldrh	r3, [r7, #22]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	82fa      	strh	r2, [r7, #22]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001abc:	2126      	movs	r1, #38	; 0x26
 8001abe:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x00; // ADR
 8001ac0:	8afb      	ldrh	r3, [r7, #22]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	82fa      	strh	r2, [r7, #22]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x46; // CID1
 8001ace:	8afb      	ldrh	r3, [r7, #22]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	82fa      	strh	r2, [r7, #22]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001ad8:	2146      	movs	r1, #70	; 0x46
 8001ada:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N++] = 0x00; // CID2
 8001adc:	8afb      	ldrh	r3, [r7, #22]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	82fa      	strh	r2, [r7, #22]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]

	  uint16_t temp_Lchksum;
	  temp_Lchksum = Count_Lchksum(INFO_FRAME_LENGTH_REMOTE_HISTORY);
 8001aea:	2082      	movs	r0, #130	; 0x82
 8001aec:	f7fe fe48 	bl	8000780 <Count_Lchksum>
 8001af0:	4603      	mov	r3, r0
 8001af2:	817b      	strh	r3, [r7, #10]
	  RS485_HEX_DATA[N++] = (temp_Lchksum << 4) + (INFO_FRAME_LENGTH_REMOTE_HISTORY >> 8); // LENGTH
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	1c59      	adds	r1, r3, #1
 8001afc:	82f9      	strh	r1, [r7, #22]
 8001afe:	4619      	mov	r1, r3
 8001b00:	0113      	lsls	r3, r2, #4
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b06:	545a      	strb	r2, [r3, r1]
	  RS485_HEX_DATA[N++] = INFO_FRAME_LENGTH_REMOTE_HISTORY;
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	82fa      	strh	r2, [r7, #22]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b12:	2182      	movs	r1, #130	; 0x82
 8001b14:	5499      	strb	r1, [r3, r2]

	  for (int i = 0; i < INFO_FRAME_LENGTH_REMOTE_HISTORY/2; i++){
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e00c      	b.n	8001b36 <RS485_Transmit_Remote_History+0x9a>
		  RS485_HEX_DATA[N++] = r_buf[i];
 8001b1c:	8afb      	ldrh	r3, [r7, #22]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	82fa      	strh	r2, [r7, #22]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <RS485_Transmit_Remote_History+0x1d0>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b2e:	545a      	strb	r2, [r3, r1]
	  for (int i = 0; i < INFO_FRAME_LENGTH_REMOTE_HISTORY/2; i++){
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	3301      	adds	r3, #1
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	ddef      	ble.n	8001b1c <RS485_Transmit_Remote_History+0x80>
	  }

	  RS485_HEX_DATA[N++] = 0x00;	// CHKSUM
 8001b3c:	8afb      	ldrh	r3, [r7, #22]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	82fa      	strh	r2, [r7, #22]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]
	  RS485_HEX_DATA[N] = 0x00;		// CHKSUM
 8001b4a:	8afb      	ldrh	r3, [r7, #22]
 8001b4c:	4a46      	ldr	r2, [pc, #280]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	54d1      	strb	r1, [r2, r3]

	  N = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	82fb      	strh	r3, [r7, #22]
	  RS485_ASCII_DATA[N++] = 0x7E; // SOI
 8001b56:	8afb      	ldrh	r3, [r7, #22]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	82fa      	strh	r2, [r7, #22]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001b60:	217e      	movs	r1, #126	; 0x7e
 8001b62:	5499      	strb	r1, [r3, r2]
	  for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_HISTORY/2 + 8; M++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e021      	b.n	8001bae <RS485_Transmit_Remote_History+0x112>
			Hex_to_ASCII_buffer = Hex_to_ASCII(RS485_HEX_DATA[M]);
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <RS485_Transmit_Remote_History+0x1cc>)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fe55 	bl	8000822 <Hex_to_ASCII>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001b7e:	801a      	strh	r2, [r3, #0]
			RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer >> 8;
 8001b80:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	b299      	uxth	r1, r3
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	82fa      	strh	r2, [r7, #22]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	b2c9      	uxtb	r1, r1
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001b94:	5499      	strb	r1, [r3, r2]
			RS485_ASCII_DATA[N++] = Hex_to_ASCII_buffer;
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	8afb      	ldrh	r3, [r7, #22]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	82fa      	strh	r2, [r7, #22]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	b2c9      	uxtb	r1, r1
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001ba6:	5499      	strb	r1, [r3, r2]
	  for (int M = 0; M < INFO_FRAME_LENGTH_REMOTE_HISTORY/2 + 8; M++){
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b48      	cmp	r3, #72	; 0x48
 8001bb2:	ddda      	ble.n	8001b6a <RS485_Transmit_Remote_History+0xce>
	  }
	  RS485_ASCII_DATA[N++] = 0x0D;	// EOI
 8001bb4:	8afb      	ldrh	r3, [r7, #22]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	82fa      	strh	r2, [r7, #22]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001bbe:	210d      	movs	r1, #13
 8001bc0:	5499      	strb	r1, [r3, r2]

	  uint16_t Temp_Chksum = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	813b      	strh	r3, [r7, #8]
	  Temp_Chksum = Count_Chksum((uint8_t*)RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_HISTORY);
 8001bc6:	2182      	movs	r1, #130	; 0x82
 8001bc8:	4829      	ldr	r0, [pc, #164]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001bca:	f7fe fe03 	bl	80007d4 <Count_Chksum>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	813b      	strh	r3, [r7, #8]

	  Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t)(Temp_Chksum>>8));
 8001bd2:	893b      	ldrh	r3, [r7, #8]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fe21 	bl	8000822 <Hex_to_ASCII>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001be6:	801a      	strh	r2, [r3, #0]
	  RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_HISTORY + 13] = Hex_to_ASCII_buffer >> 8;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001bf4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	  RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_HISTORY + 14] = Hex_to_ASCII_buffer;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001c00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	  Hex_to_ASCII_buffer = Hex_to_ASCII((uint8_t)(Temp_Chksum));
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fe0a 	bl	8000822 <Hex_to_ASCII>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001c14:	801a      	strh	r2, [r3, #0]
	  RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_HISTORY + 15] = Hex_to_ASCII_buffer >> 8;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001c22:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	  RS485_ASCII_DATA[INFO_FRAME_LENGTH_REMOTE_HISTORY + 16] = Hex_to_ASCII_buffer;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <RS485_Transmit_Remote_History+0x1d8>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001c2e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	  HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <RS485_Transmit_Remote_History+0x1dc>)
 8001c3a:	f007 faf9 	bl	8009230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2110      	movs	r1, #16
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <RS485_Transmit_Remote_History+0x1e0>)
 8001c44:	f007 faf4 	bl	8009230 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart2, (uint8_t*)RS485_ASCII_DATA, INFO_FRAME_LENGTH_REMOTE_HISTORY + 18, 1000);
 8001c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4c:	2294      	movs	r2, #148	; 0x94
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <RS485_Transmit_Remote_History+0x1d4>)
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <RS485_Transmit_Remote_History+0x1e4>)
 8001c52:	f00c f875 	bl	800dd40 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(USART2_DE_GPIO_Port, USART2_DE_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2110      	movs	r1, #16
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <RS485_Transmit_Remote_History+0x1e0>)
 8001c5c:	f007 fae8 	bl	8009230 <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2400012c 	.word	0x2400012c
 8001c6c:	240006d4 	.word	0x240006d4
 8001c70:	240000a4 	.word	0x240000a4
 8001c74:	2400022c 	.word	0x2400022c
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020c00 	.word	0x58020c00
 8001c80:	240005e8 	.word	0x240005e8

08001c84 <Alarm_State_Update>:


void Alarm_State_Update(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0

	  for (int i = 0; i < 16; i++){
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	e0b4      	b.n	8001dfa <Alarm_State_Update+0x176>
		  if(LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER > Para_Array[Cell_over_voltage_protection_parameter]){
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 fa5f 	bl	8003158 <LTC6813_Read_Cell>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4ba7      	ldr	r3, [pc, #668]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4ba5      	ldr	r3, [pc, #660]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dd0c      	ble.n	8001ccc <Alarm_State_Update+0x48>
			  Alarm_Flag = Alarm_Flag | 0x10;
 8001cb2:	4ba4      	ldr	r3, [pc, #656]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4ba1      	ldr	r3, [pc, #644]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001cbe:	701a      	strb	r2, [r3, #0]
			  Cell_Voltage_Alarm_State[i] = 0x01;
 8001cc0:	4aa1      	ldr	r2, [pc, #644]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e022      	b.n	8001d12 <Alarm_State_Update+0x8e>
		  }
		  else if (LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER > Para_Array[Cell_high_voltage_alarm_parameter]){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fa41 	bl	8003158 <LTC6813_Read_Cell>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b96      	ldr	r3, [pc, #600]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dd05      	ble.n	8001cfa <Alarm_State_Update+0x76>
			  Cell_Voltage_Alarm_State[i] = 0x01;
 8001cee:	4a96      	ldr	r2, [pc, #600]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e00b      	b.n	8001d12 <Alarm_State_Update+0x8e>
		  }
		  else {
			  Cell_Voltage_Alarm_State[i] = Cell_Voltage_Alarm_State[i] & 0xFE;
 8001cfa:	4a93      	ldr	r2, [pc, #588]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	4a8f      	ldr	r2, [pc, #572]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
		  }
		  if (LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER <= Para_Array[Cell_over_voltage_recover_parameter]){
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fa1e 	bl	8003158 <LTC6813_Read_Cell>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b86      	ldr	r3, [pc, #536]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001d22:	fba3 2302 	umull	r2, r3, r3, r2
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dc06      	bgt.n	8001d42 <Alarm_State_Update+0xbe>
			  Alarm_Flag = Alarm_Flag & 0xEF;
 8001d34:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	f023 0310 	bic.w	r3, r3, #16
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001d40:	701a      	strb	r2, [r3, #0]
		  }

		  if(LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER < Para_Array[Cell_under_voltage_protection_parameter]){
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fa06 	bl	8003158 <LTC6813_Read_Cell>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001d52:	fba3 2302 	umull	r2, r3, r3, r2
 8001d56:	08db      	lsrs	r3, r3, #3
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	429a      	cmp	r2, r3
 8001d62:	da0c      	bge.n	8001d7e <Alarm_State_Update+0xfa>
			  Alarm_Flag = Alarm_Flag | 0x20;
 8001d64:	4b77      	ldr	r3, [pc, #476]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001d70:	701a      	strb	r2, [r3, #0]
			  Cell_Voltage_Alarm_State[i] = 0x02;
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	2202      	movs	r2, #2
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e022      	b.n	8001dc4 <Alarm_State_Update+0x140>
		  }
		  else if(LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER < Para_Array[Cell_low_voltage_alarm_parameter]){
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f9e8 	bl	8003158 <LTC6813_Read_Cell>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	da05      	bge.n	8001dac <Alarm_State_Update+0x128>
			  Cell_Voltage_Alarm_State[i] = 0x02;
 8001da0:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e00b      	b.n	8001dc4 <Alarm_State_Update+0x140>
		  }
		  else {
			  Cell_Voltage_Alarm_State[i] = Cell_Voltage_Alarm_State[i] & 0xFD;
 8001dac:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	b2d9      	uxtb	r1, r3
 8001dba:	4a63      	ldr	r2, [pc, #396]	; (8001f48 <Alarm_State_Update+0x2c4>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
		  }
		  if (LTC6813_Read_Cell(i)/VOLTAGE_DIVIDER >= Para_Array[Cell_under_voltage_recover_parameter]){
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 f9c5 	bl	8003158 <LTC6813_Read_Cell>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	429a      	cmp	r2, r3
 8001de4:	db06      	blt.n	8001df4 <Alarm_State_Update+0x170>
			  Alarm_Flag = Alarm_Flag & 0xDF;
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f023 0320 	bic.w	r3, r3, #32
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <Alarm_State_Update+0x2c0>)
 8001df2:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 16; i++){
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	f77f af47 	ble.w	8001c90 <Alarm_State_Update+0xc>
		  }
	  }

	  for (int i = 0; i < 3; i++){
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	e039      	b.n	8001e7c <Alarm_State_Update+0x1f8>
		  if (LTC6813_Temp_Read(i)/10 + 273 > Para_Array[Cell_high_temperature_alarm_parameter]){
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 f9db 	bl	80031c8 <LTC6813_Temp_Read>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a4d      	ldr	r2, [pc, #308]	; (8001f4c <Alarm_State_Update+0x2c8>)
 8001e16:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1a:	1092      	asrs	r2, r2, #2
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	db05      	blt.n	8001e3a <Alarm_State_Update+0x1b6>
			  Temperature_Alarm_State[i] = 0x01;
 8001e2e:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <Alarm_State_Update+0x2cc>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e01d      	b.n	8001e76 <Alarm_State_Update+0x1f2>
		  }
		  else if(LTC6813_Temp_Read(i)/10 + 273 < Para_Array[Cell_low_temperature_alarm_parameter]){
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f9c2 	bl	80031c8 <LTC6813_Temp_Read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a41      	ldr	r2, [pc, #260]	; (8001f4c <Alarm_State_Update+0x2c8>)
 8001e48:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4c:	1092      	asrs	r2, r2, #2
 8001e4e:	17db      	asrs	r3, r3, #31
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	f203 1211 	addw	r2, r3, #273	; 0x111
 8001e58:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	da05      	bge.n	8001e6c <Alarm_State_Update+0x1e8>
			  Temperature_Alarm_State[i] = 0x02;
 8001e60:	4a3b      	ldr	r2, [pc, #236]	; (8001f50 <Alarm_State_Update+0x2cc>)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	2202      	movs	r2, #2
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e004      	b.n	8001e76 <Alarm_State_Update+0x1f2>
		  }
		  else {
			  Temperature_Alarm_State[i] = 0x00;
 8001e6c:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <Alarm_State_Update+0x2cc>)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 3; i++){
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	ddc2      	ble.n	8001e08 <Alarm_State_Update+0x184>
		  }
	  }

	  	RS485_Vpack = 0;
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <Alarm_State_Update+0x2d0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 18; i++){
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e014      	b.n	8001eb8 <Alarm_State_Update+0x234>
			RS485_Vpack += LTC6813_Read_Cell(i)/10;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 f960 	bl	8003158 <LTC6813_Read_Cell>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <Alarm_State_Update+0x2b8>)
 8001e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea2:	08db      	lsrs	r3, r3, #3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <Alarm_State_Update+0x2d0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <Alarm_State_Update+0x2d0>)
 8001eb0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 18; i++){
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b11      	cmp	r3, #17
 8001ebc:	dde7      	ble.n	8001e8e <Alarm_State_Update+0x20a>
		}

	  if (RS485_Vpack > Para_Array[Battery_high_voltage_alarm_parameter]){
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <Alarm_State_Update+0x2d0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d203      	bcs.n	8001ed4 <Alarm_State_Update+0x250>
		  Battery_Voltage_Alarm_State = 0x01;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <Alarm_State_Update+0x2d4>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e00d      	b.n	8001ef0 <Alarm_State_Update+0x26c>
	  }
	  else if(RS485_Vpack < Para_Array[Battery_low_voltage_alarm_parameter]){
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <Alarm_State_Update+0x2d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d903      	bls.n	8001eea <Alarm_State_Update+0x266>
		  Battery_Voltage_Alarm_State = 0x02;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <Alarm_State_Update+0x2d4>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e002      	b.n	8001ef0 <Alarm_State_Update+0x26c>
	  }
	  else {
		  Battery_Voltage_Alarm_State = 0x00;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <Alarm_State_Update+0x2d4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
	  }

	  if (Current_mA > Para_Array[Charge_over_current_alarm_parameter] * 1000){
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <Alarm_State_Update+0x2d8>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	4299      	cmp	r1, r3
 8001f06:	dd03      	ble.n	8001f10 <Alarm_State_Update+0x28c>
		  Current_Alarm_State = 0x01;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <Alarm_State_Update+0x2dc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
		  Current_Alarm_State = 0x02;
	  }
	  else {
		  Current_Alarm_State = 0x00;
	  }
}
 8001f0e:	e011      	b.n	8001f34 <Alarm_State_Update+0x2b0>
	  else if(Current_mA < -Para_Array[Discharge_over_current_alarm_parameter] * 1000){
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <Alarm_State_Update+0x2d8>)
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <Alarm_State_Update+0x2bc>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <Alarm_State_Update+0x2e0>)
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4299      	cmp	r1, r3
 8001f24:	da03      	bge.n	8001f2e <Alarm_State_Update+0x2aa>
		  Current_Alarm_State = 0x02;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <Alarm_State_Update+0x2dc>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	701a      	strb	r2, [r3, #0]
}
 8001f2c:	e002      	b.n	8001f34 <Alarm_State_Update+0x2b0>
		  Current_Alarm_State = 0x00;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <Alarm_State_Update+0x2dc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	cccccccd 	.word	0xcccccccd
 8001f40:	24000998 	.word	0x24000998
 8001f44:	2400087c 	.word	0x2400087c
 8001f48:	24000718 	.word	0x24000718
 8001f4c:	66666667 	.word	0x66666667
 8001f50:	2400072c 	.word	0x2400072c
 8001f54:	24000230 	.word	0x24000230
 8001f58:	24000731 	.word	0x24000731
 8001f5c:	2400074c 	.word	0x2400074c
 8001f60:	24000730 	.word	0x24000730
 8001f64:	fffffc18 	.word	0xfffffc18

08001f68 <TURN_OFF_ALL_MOSFETS>:
 */

#include "BMS_Power_Control.h"
#include "main.h"

void TURN_OFF_ALL_MOSFETS(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001f72:	f007 f95d 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2120      	movs	r1, #32
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001f7c:	f007 f958 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2108      	movs	r1, #8
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001f86:	f007 f953 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001f90:	f007 f94e 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 8001f94:	200a      	movs	r0, #10
 8001f96:	f006 f8df 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001fa0:	f007 f946 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TURN_OFF_ALL_MOSFETS+0x4c>)
 8001faa:	f007 f941 	bl	8009230 <HAL_GPIO_WritePin>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58021000 	.word	0x58021000

08001fb8 <TURN_ON_ALL_MOSFETS>:

void TURN_ON_ALL_MOSFETS(void){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4810      	ldr	r0, [pc, #64]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001fc2:	f007 f935 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2120      	movs	r1, #32
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001fcc:	f007 f930 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001fd6:	f007 f92b 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001fe0:	f007 f926 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f006 f8b7 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2108      	movs	r1, #8
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001ff0:	f007 f91e 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <TURN_ON_ALL_MOSFETS+0x4c>)
 8001ffa:	f007 f919 	bl	8009230 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	58021000 	.word	0x58021000

08002008 <TURN_ON_CHARGE_MOSFET>:

void TURN_ON_CHARGE_MOSFET(void){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2120      	movs	r1, #32
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <TURN_ON_CHARGE_MOSFET+0x2c>)
 8002012:	f007 f90d 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_SET);
 8002016:	2201      	movs	r2, #1
 8002018:	2104      	movs	r1, #4
 800201a:	4806      	ldr	r0, [pc, #24]	; (8002034 <TURN_ON_CHARGE_MOSFET+0x2c>)
 800201c:	f007 f908 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 8002020:	200a      	movs	r0, #10
 8002022:	f006 f899 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2104      	movs	r1, #4
 800202a:	4802      	ldr	r0, [pc, #8]	; (8002034 <TURN_ON_CHARGE_MOSFET+0x2c>)
 800202c:	f007 f900 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58021000 	.word	0x58021000

08002038 <TURN_ON_DISCHARGE_MOSFET>:

void TURN_ON_DISCHARGE_MOSFET(void){
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <TURN_ON_DISCHARGE_MOSFET+0x2c>)
 8002042:	f007 f8f5 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	2108      	movs	r1, #8
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <TURN_ON_DISCHARGE_MOSFET+0x2c>)
 800204c:	f007 f8f0 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 8002050:	200a      	movs	r0, #10
 8002052:	f006 f881 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	2108      	movs	r1, #8
 800205a:	4802      	ldr	r0, [pc, #8]	; (8002064 <TURN_ON_DISCHARGE_MOSFET+0x2c>)
 800205c:	f007 f8e8 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	58021000 	.word	0x58021000

08002068 <TURN_OFF_CHARGE_MOSFET>:

void TURN_OFF_CHARGE_MOSFET(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	2104      	movs	r1, #4
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <TURN_OFF_CHARGE_MOSFET+0x2c>)
 8002072:	f007 f8dd 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	2120      	movs	r1, #32
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <TURN_OFF_CHARGE_MOSFET+0x2c>)
 800207c:	f007 f8d8 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 8002080:	200a      	movs	r0, #10
 8002082:	f006 f869 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	2120      	movs	r1, #32
 800208a:	4802      	ldr	r0, [pc, #8]	; (8002094 <TURN_OFF_CHARGE_MOSFET+0x2c>)
 800208c:	f007 f8d0 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	58021000 	.word	0x58021000

08002098 <TURN_OFF_DISCHARGE_MOSFET>:

void TURN_OFF_DISCHARGE_MOSFET(void){
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2108      	movs	r1, #8
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <TURN_OFF_DISCHARGE_MOSFET+0x2c>)
 80020a2:	f007 f8c5 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2101      	movs	r1, #1
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <TURN_OFF_DISCHARGE_MOSFET+0x2c>)
 80020ac:	f007 f8c0 	bl	8009230 <HAL_GPIO_WritePin>
	 HAL_Delay(10);
 80020b0:	200a      	movs	r0, #10
 80020b2:	f006 f851 	bl	8008158 <HAL_Delay>
	 HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TURN_OFF_DISCHARGE_MOSFET+0x2c>)
 80020bc:	f007 f8b8 	bl	8009230 <HAL_GPIO_WritePin>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58021000 	.word	0x58021000

080020c8 <TURN_ON_PRE_CHARGE>:

void TURN_ON_PRE_CHARGE(void){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TURN_ON_PRECHARGE_GPIO_Port, TURN_ON_PRECHARGE_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d2:	4802      	ldr	r0, [pc, #8]	; (80020dc <TURN_ON_PRE_CHARGE+0x14>)
 80020d4:	f007 f8ac 	bl	8009230 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58020c00 	.word	0x58020c00

080020e0 <TURN_OFF_PRE_CHARGE>:

void TURN_OFF_PRE_CHARGE(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TURN_ON_PRECHARGE_GPIO_Port, TURN_ON_PRECHARGE_Pin, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ea:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TURN_OFF_PRE_CHARGE+0x14>)
 80020ec:	f007 f8a0 	bl	8009230 <HAL_GPIO_WritePin>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	58020c00 	.word	0x58020c00

080020f8 <LED_ALARM_ON>:

void LED_ALARM_ON(void){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ALARM_NC3_GPIO_Port, LED_ALARM_NC3_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	2104      	movs	r1, #4
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <LED_ALARM_ON+0x14>)
 8002102:	f007 f895 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58020c00 	.word	0x58020c00

08002110 <LED_ALARM_OFF>:

void LED_ALARM_OFF(void){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ALARM_NC3_GPIO_Port, LED_ALARM_NC3_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	2104      	movs	r1, #4
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <LED_ALARM_OFF+0x14>)
 800211a:	f007 f889 	bl	8009230 <HAL_GPIO_WritePin>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	58020c00 	.word	0x58020c00

08002128 <LED_OK_ON>:

void LED_OK_ON(void){
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_BUZEER_GPIO_Port, LED_GREEN_BUZEER_Pin, GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <LED_OK_ON+0x14>)
 8002132:	f007 f87d 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	58020400 	.word	0x58020400

08002140 <LED_OK_OFF>:

void LED_OK_OFF(void){
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_BUZEER_GPIO_Port, LED_GREEN_BUZEER_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <LED_OK_OFF+0x14>)
 800214a:	f007 f871 	bl	8009230 <HAL_GPIO_WritePin>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	58020400 	.word	0x58020400

08002158 <LED_DISCHARGE_ON>:

void LED_DISCHARGE_ON(void){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_DISCHARGE_NC1_GPIO_Port, LED_DISCHARGE_NC1_Pin, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2108      	movs	r1, #8
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <LED_DISCHARGE_ON+0x14>)
 8002162:	f007 f865 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	58020c00 	.word	0x58020c00

08002170 <LED_DISCHARGE_OFF>:

void LED_DISCHARGE_OFF(void){
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_DISCHARGE_NC1_GPIO_Port, LED_DISCHARGE_NC1_Pin, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	2108      	movs	r1, #8
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <LED_DISCHARGE_OFF+0x14>)
 800217a:	f007 f859 	bl	8009230 <HAL_GPIO_WritePin>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	58020c00 	.word	0x58020c00

08002188 <LED_CHARGE_ON>:

void LED_CHARGE_ON(void){
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_CHARGE_NC2_GPIO_Port, LED_CHARGE_NC2_Pin, GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <LED_CHARGE_ON+0x14>)
 8002192:	f007 f84d 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	58020400 	.word	0x58020400

080021a0 <LED_CHARGE_OFF>:

void LED_CHARGE_OFF(void){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_CHARGE_NC2_GPIO_Port, LED_CHARGE_NC2_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <LED_CHARGE_OFF+0x14>)
 80021aa:	f007 f841 	bl	8009230 <HAL_GPIO_WritePin>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	58020400 	.word	0x58020400

080021b8 <Read_History_from_Flash>:

void Set_Clock_and_Date(void){

}

void Read_History_from_Flash(uint16_t Page_Address){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
	W25qxx_ReadPage(r_buf, (uint32_t)Page_Address, 0, 64);
 80021c2:	88f9      	ldrh	r1, [r7, #6]
 80021c4:	2340      	movs	r3, #64	; 0x40
 80021c6:	2200      	movs	r2, #0
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <Read_History_from_Flash+0x20>)
 80021ca:	f005 fe89 	bl	8007ee0 <W25qxx_ReadPage>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	240006d4 	.word	0x240006d4

080021dc <Read_Measured_Param>:

void Read_Measured_Param(void){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < M; i++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e01a      	b.n	800221e <Read_Measured_Param+0x42>
		Cell_Voltage_Array[i] = LTC6813_Read_Cell(i);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 ffb3 	bl	8003158 <LTC6813_Read_Cell>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4619      	mov	r1, r3
 80021f6:	4a15      	ldr	r2, [pc, #84]	; (800224c <Read_Measured_Param+0x70>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Vpack_Voltage_mV += LTC6813_Read_Cell(i);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 ffa8 	bl	8003158 <LTC6813_Read_Cell>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <Read_Measured_Param+0x74>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	4413      	add	r3, r2
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <Read_Measured_Param+0x74>)
 8002216:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < M; i++){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <Read_Measured_Param+0x78>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4293      	cmp	r3, r2
 8002228:	dbde      	blt.n	80021e8 <Read_Measured_Param+0xc>
	}
	Current_mA = INA229_Read_VSHUNT()/RSHUNT/100;
 800222a:	f000 fa75 	bl	8002718 <INA229_Read_VSHUNT>
 800222e:	4603      	mov	r3, r0
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <Read_Measured_Param+0x7c>)
 8002232:	fb82 1203 	smull	r1, r2, r2, r3
 8002236:	1152      	asrs	r2, r2, #5
 8002238:	17db      	asrs	r3, r3, #31
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	b21a      	sxth	r2, r3
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <Read_Measured_Param+0x80>)
 8002240:	801a      	strh	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	24000754 	.word	0x24000754
 8002250:	2400074a 	.word	0x2400074a
 8002254:	08010c24 	.word	0x08010c24
 8002258:	10624dd3 	.word	0x10624dd3
 800225c:	2400074c 	.word	0x2400074c

08002260 <Read_Clock_and_Date>:

void Read_Clock_and_Date(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8002264:	2200      	movs	r2, #0
 8002266:	4905      	ldr	r1, [pc, #20]	; (800227c <Read_Clock_and_Date+0x1c>)
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <Read_Clock_and_Date+0x20>)
 800226a:	f009 ffbd 	bl	800c1e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800226e:	2200      	movs	r2, #0
 8002270:	4904      	ldr	r1, [pc, #16]	; (8002284 <Read_Clock_and_Date+0x24>)
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <Read_Clock_and_Date+0x20>)
 8002274:	f00a f89c 	bl	800c3b0 <HAL_RTC_GetDate>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2400067c 	.word	0x2400067c
 8002280:	2400034c 	.word	0x2400034c
 8002284:	24000690 	.word	0x24000690

08002288 <Alarm_Event_Log>:

 void Alarm_Event_Log(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	 Save_History_to_Flash(History_Data_Num++);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <Alarm_Event_Log+0x1c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	b291      	uxth	r1, r2
 8002294:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <Alarm_Event_Log+0x1c>)
 8002296:	8011      	strh	r1, [r2, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f811 	bl	80022c0 <Save_History_to_Flash>
 }
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	24000714 	.word	0x24000714

080022a8 <Clear_Flash_Block>:

 void Clear_Flash_Block(uint32_t nBlock){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	 W25qxx_EraseBlock(nBlock);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f005 fd33 	bl	8007d1c <W25qxx_EraseBlock>
 }
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <Save_History_to_Flash>:

 void Save_History_to_Flash(uint16_t Page_Address){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]

 	Read_Clock_and_Date();
 80022ca:	f7ff ffc9 	bl	8002260 <Read_Clock_and_Date>
 	Read_Measured_Param();
 80022ce:	f7ff ff85 	bl	80021dc <Read_Measured_Param>
 //	snprintf(trans_str, 6, "%d%d%d%d%d", DateToUpdate.Month, DateToUpdate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);

 	uint8_t N = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
 	uint16_t year = DateToUpdate.Year + 2000;
 80022d6:	4b95      	ldr	r3, [pc, #596]	; (800252c <Save_History_to_Flash+0x26c>)
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80022e0:	81fb      	strh	r3, [r7, #14]

 	w_buf[N++] = Pack_Location;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	75fa      	strb	r2, [r7, #23]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b91      	ldr	r3, [pc, #580]	; (8002530 <Save_History_to_Flash+0x270>)
 80022ec:	7819      	ldrb	r1, [r3, #0]
 80022ee:	4b91      	ldr	r3, [pc, #580]	; (8002534 <Save_History_to_Flash+0x274>)
 80022f0:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = Command_type;
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	75fa      	strb	r2, [r7, #23]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <Save_History_to_Flash+0x278>)
 80022fc:	7819      	ldrb	r1, [r3, #0]
 80022fe:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <Save_History_to_Flash+0x274>)
 8002300:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = HIGH_BYTE(year);
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b299      	uxth	r1, r3
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	75fa      	strb	r2, [r7, #23]
 800230e:	461a      	mov	r2, r3
 8002310:	b2c9      	uxtb	r1, r1
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <Save_History_to_Flash+0x274>)
 8002314:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = LOW_BYTE(year);
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	75fa      	strb	r2, [r7, #23]
 800231c:	461a      	mov	r2, r3
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	b2d9      	uxtb	r1, r3
 8002322:	4b84      	ldr	r3, [pc, #528]	; (8002534 <Save_History_to_Flash+0x274>)
 8002324:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = DateToUpdate.Month;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	75fa      	strb	r2, [r7, #23]
 800232c:	461a      	mov	r2, r3
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <Save_History_to_Flash+0x26c>)
 8002330:	7859      	ldrb	r1, [r3, #1]
 8002332:	4b80      	ldr	r3, [pc, #512]	; (8002534 <Save_History_to_Flash+0x274>)
 8002334:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = DateToUpdate.Date;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	75fa      	strb	r2, [r7, #23]
 800233c:	461a      	mov	r2, r3
 800233e:	4b7b      	ldr	r3, [pc, #492]	; (800252c <Save_History_to_Flash+0x26c>)
 8002340:	7899      	ldrb	r1, [r3, #2]
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <Save_History_to_Flash+0x274>)
 8002344:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = sTime.Hours;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	75fa      	strb	r2, [r7, #23]
 800234c:	461a      	mov	r2, r3
 800234e:	4b7b      	ldr	r3, [pc, #492]	; (800253c <Save_History_to_Flash+0x27c>)
 8002350:	7819      	ldrb	r1, [r3, #0]
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <Save_History_to_Flash+0x274>)
 8002354:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = sTime.Minutes;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	75fa      	strb	r2, [r7, #23]
 800235c:	461a      	mov	r2, r3
 800235e:	4b77      	ldr	r3, [pc, #476]	; (800253c <Save_History_to_Flash+0x27c>)
 8002360:	7859      	ldrb	r1, [r3, #1]
 8002362:	4b74      	ldr	r3, [pc, #464]	; (8002534 <Save_History_to_Flash+0x274>)
 8002364:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = sTime.Seconds;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	75fa      	strb	r2, [r7, #23]
 800236c:	461a      	mov	r2, r3
 800236e:	4b73      	ldr	r3, [pc, #460]	; (800253c <Save_History_to_Flash+0x27c>)
 8002370:	7899      	ldrb	r1, [r3, #2]
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <Save_History_to_Flash+0x274>)
 8002374:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = System_State_Code;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	75fa      	strb	r2, [r7, #23]
 800237c:	461a      	mov	r2, r3
 800237e:	4b70      	ldr	r3, [pc, #448]	; (8002540 <Save_History_to_Flash+0x280>)
 8002380:	7819      	ldrb	r1, [r3, #0]
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <Save_History_to_Flash+0x274>)
 8002384:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = 3; 				// Alarm bytes number (A)
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	75fa      	strb	r2, [r7, #23]
 800238c:	461a      	mov	r2, r3
 800238e:	4b69      	ldr	r3, [pc, #420]	; (8002534 <Save_History_to_Flash+0x274>)
 8002390:	2103      	movs	r1, #3
 8002392:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = Voltage_Event_Code;
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	75fa      	strb	r2, [r7, #23]
 800239a:	461a      	mov	r2, r3
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <Save_History_to_Flash+0x284>)
 800239e:	7819      	ldrb	r1, [r3, #0]
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <Save_History_to_Flash+0x274>)
 80023a2:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = Temperature_Event_Code;
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	75fa      	strb	r2, [r7, #23]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <Save_History_to_Flash+0x288>)
 80023ae:	7819      	ldrb	r1, [r3, #0]
 80023b0:	4b60      	ldr	r3, [pc, #384]	; (8002534 <Save_History_to_Flash+0x274>)
 80023b2:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = Current_Event_Code;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	75fa      	strb	r2, [r7, #23]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b63      	ldr	r3, [pc, #396]	; (800254c <Save_History_to_Flash+0x28c>)
 80023be:	7819      	ldrb	r1, [r3, #0]
 80023c0:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <Save_History_to_Flash+0x274>)
 80023c2:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = 25; // No. of remote measuring data(3+N+M)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	75fa      	strb	r2, [r7, #23]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <Save_History_to_Flash+0x274>)
 80023ce:	2119      	movs	r1, #25
 80023d0:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = HIGH_BYTE(Current_mA);
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <Save_History_to_Flash+0x290>)
 80023d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d8:	121b      	asrs	r3, r3, #8
 80023da:	b219      	sxth	r1, r3
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	75fa      	strb	r2, [r7, #23]
 80023e2:	461a      	mov	r2, r3
 80023e4:	b2c9      	uxtb	r1, r1
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <Save_History_to_Flash+0x274>)
 80023e8:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = LOW_BYTE(Current_mA);
 80023ea:	4b59      	ldr	r3, [pc, #356]	; (8002550 <Save_History_to_Flash+0x290>)
 80023ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	75fa      	strb	r2, [r7, #23]
 80023f6:	461a      	mov	r2, r3
 80023f8:	b2c9      	uxtb	r1, r1
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <Save_History_to_Flash+0x274>)
 80023fc:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = HIGH_BYTE(Vpack_Voltage_mV);
 80023fe:	4b55      	ldr	r3, [pc, #340]	; (8002554 <Save_History_to_Flash+0x294>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b299      	uxth	r1, r3
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	75fa      	strb	r2, [r7, #23]
 800240c:	461a      	mov	r2, r3
 800240e:	b2c9      	uxtb	r1, r1
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <Save_History_to_Flash+0x274>)
 8002412:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = LOW_BYTE(Vpack_Voltage_mV);
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <Save_History_to_Flash+0x294>)
 8002416:	8819      	ldrh	r1, [r3, #0]
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	75fa      	strb	r2, [r7, #23]
 800241e:	461a      	mov	r2, r3
 8002420:	b2c9      	uxtb	r1, r1
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <Save_History_to_Flash+0x274>)
 8002424:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = HIGH_BYTE(Battery_Residual_Capacity_mAh); // Остаточная емкость батареи
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <Save_History_to_Flash+0x298>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b299      	uxth	r1, r3
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	75fa      	strb	r2, [r7, #23]
 8002434:	461a      	mov	r2, r3
 8002436:	b2c9      	uxtb	r1, r1
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <Save_History_to_Flash+0x274>)
 800243a:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = LOW_BYTE(Battery_Residual_Capacity_mAh);
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <Save_History_to_Flash+0x298>)
 800243e:	8819      	ldrh	r1, [r3, #0]
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	75fa      	strb	r2, [r7, #23]
 8002446:	461a      	mov	r2, r3
 8002448:	b2c9      	uxtb	r1, r1
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <Save_History_to_Flash+0x274>)
 800244c:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = 0x00;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	75fa      	strb	r2, [r7, #23]
 8002454:	461a      	mov	r2, r3
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <Save_History_to_Flash+0x274>)
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = 0x19; // температура ячейки 1
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	75fa      	strb	r2, [r7, #23]
 8002462:	461a      	mov	r2, r3
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <Save_History_to_Flash+0x274>)
 8002466:	2119      	movs	r1, #25
 8002468:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = 0x00;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	75fa      	strb	r2, [r7, #23]
 8002470:	461a      	mov	r2, r3
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <Save_History_to_Flash+0x274>)
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = 0x19; // температура ячейки 2
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	75fa      	strb	r2, [r7, #23]
 800247e:	461a      	mov	r2, r3
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <Save_History_to_Flash+0x274>)
 8002482:	2119      	movs	r1, #25
 8002484:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = HIGH_BYTE(Environment_temperature);
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <Save_History_to_Flash+0x29c>)
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	121b      	asrs	r3, r3, #8
 800248e:	b219      	sxth	r1, r3
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	75fa      	strb	r2, [r7, #23]
 8002496:	461a      	mov	r2, r3
 8002498:	b2c9      	uxtb	r1, r1
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <Save_History_to_Flash+0x274>)
 800249c:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = LOW_BYTE(Environment_temperature); // температура окружающей среды
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <Save_History_to_Flash+0x29c>)
 80024a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	75fa      	strb	r2, [r7, #23]
 80024aa:	461a      	mov	r2, r3
 80024ac:	b2c9      	uxtb	r1, r1
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <Save_History_to_Flash+0x274>)
 80024b0:	5499      	strb	r1, [r3, r2]

 	w_buf[N++] = 0x00;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	75fa      	strb	r2, [r7, #23]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <Save_History_to_Flash+0x274>)
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]
 	w_buf[N++] = 0x19; // температура силовой части
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	75fa      	strb	r2, [r7, #23]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <Save_History_to_Flash+0x274>)
 80024ca:	2119      	movs	r1, #25
 80024cc:	5499      	strb	r1, [r3, r2]

 	for (int i = 0; i < M; i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e01a      	b.n	800250a <Save_History_to_Flash+0x24a>
 		w_buf[N++] = HIGH_BYTE(Cell_Voltage_Array[i]);
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <Save_History_to_Flash+0x2a0>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b299      	uxth	r1, r3
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	75fa      	strb	r2, [r7, #23]
 80024e6:	461a      	mov	r2, r3
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <Save_History_to_Flash+0x274>)
 80024ec:	5499      	strb	r1, [r3, r2]
 		w_buf[N++] = LOW_BYTE(Cell_Voltage_Array[i]);
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <Save_History_to_Flash+0x2a0>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	75fa      	strb	r2, [r7, #23]
 80024fc:	461a      	mov	r2, r3
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <Save_History_to_Flash+0x274>)
 8002502:	5499      	strb	r1, [r3, r2]
 	for (int i = 0; i < M; i++){
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	3301      	adds	r3, #1
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <Save_History_to_Flash+0x2a4>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4293      	cmp	r3, r2
 8002514:	dbde      	blt.n	80024d4 <Save_History_to_Flash+0x214>
 	}

 	W25qxx_WritePage(w_buf, (uint32_t)Page_Address, 0, 64);
 8002516:	88f9      	ldrh	r1, [r7, #6]
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	2200      	movs	r2, #0
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <Save_History_to_Flash+0x274>)
 800251e:	f005 fc59 	bl	8007dd4 <W25qxx_WritePage>
 }
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24000690 	.word	0x24000690
 8002530:	24000736 	.word	0x24000736
 8002534:	24000694 	.word	0x24000694
 8002538:	24000236 	.word	0x24000236
 800253c:	2400067c 	.word	0x2400067c
 8002540:	24000732 	.word	0x24000732
 8002544:	24000733 	.word	0x24000733
 8002548:	24000734 	.word	0x24000734
 800254c:	24000735 	.word	0x24000735
 8002550:	2400074c 	.word	0x2400074c
 8002554:	2400074a 	.word	0x2400074a
 8002558:	24000738 	.word	0x24000738
 800255c:	24000750 	.word	0x24000750
 8002560:	24000754 	.word	0x24000754
 8002564:	08010c24 	.word	0x08010c24

08002568 <INA229_Init>:
 *      Author: TDM
 */
#include "INA229.h"
#include "stdlib.h"

void INA229_Init(void){
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002574:	4866      	ldr	r0, [pc, #408]	; (8002710 <INA229_Init+0x1a8>)
 8002576:	f006 fe5b 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800257a:	2001      	movs	r0, #1
 800257c:	f005 fdec 	bl	8008158 <HAL_Delay>

	uint8_t SPI_DATA_SEND[3];
	uint8_t SPI_DATA_READ[2];

	SPI_DATA_SEND[0] = ADR_CONFIG << 2; // Write to CONFIG register
 8002580:	2300      	movs	r3, #0
 8002582:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = ADCRANGE;
 8002588:	2310      	movs	r3, #16
 800258a:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	485f      	ldr	r0, [pc, #380]	; (8002710 <INA229_Init+0x1a8>)
 8002594:	f006 fe4c 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, (uint8_t*) SPI_DATA_SEND, sizeof(SPI_DATA_SEND), HAL_MAX_DELAY);
 8002598:	f107 0108 	add.w	r1, r7, #8
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	2203      	movs	r2, #3
 80025a2:	485c      	ldr	r0, [pc, #368]	; (8002714 <INA229_Init+0x1ac>)
 80025a4:	f00a f98e 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ae:	4858      	ldr	r0, [pc, #352]	; (8002710 <INA229_Init+0x1a8>)
 80025b0:	f006 fe3e 	bl	8009230 <HAL_GPIO_WritePin>
	/*****************************************/
	uint8_t AVG_T = AVG;
 80025b4:	2304      	movs	r3, #4
 80025b6:	73fb      	strb	r3, [r7, #15]
	uint8_t VTCT_T = VTCT;
 80025b8:	2307      	movs	r3, #7
 80025ba:	73bb      	strb	r3, [r7, #14]
	uint8_t VSHCT_T = VSHCT;
 80025bc:	2307      	movs	r3, #7
 80025be:	737b      	strb	r3, [r7, #13]
	uint8_t VBUSCT_T = VBUSCT;
 80025c0:	2307      	movs	r3, #7
 80025c2:	733b      	strb	r3, [r7, #12]
	uint8_t MODE_T = MODE;
 80025c4:	230f      	movs	r3, #15
 80025c6:	72fb      	strb	r3, [r7, #11]
//	uint16_t REG = AVG_T | (VTCT_T<<3) | (VSHCT_T<<6) | (VBUSCT_T<<9) | (MODE_T<<12);

	SPI_DATA_SEND[0] = ADR_ADC_CONFIG << 2; // Write to ADC_CONFIG register
 80025c8:	2304      	movs	r3, #4
 80025ca:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = VSHCT_T | VBUSCT_T<<3 | MODE_T<<6;
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	b25a      	sxtb	r2, r3
 80025d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b25a      	sxtb	r2, r3
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = AVG_T | VTCT_T<<3 | VSHCT_T<<6;
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	b25a      	sxtb	r2, r3
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b25a      	sxtb	r2, r3
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	019b      	lsls	r3, r3, #6
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260a:	4841      	ldr	r0, [pc, #260]	; (8002710 <INA229_Init+0x1a8>)
 800260c:	f006 fe10 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, sizeof(SPI_DATA_SEND), HAL_MAX_DELAY);
 8002610:	f107 0108 	add.w	r1, r7, #8
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	2203      	movs	r2, #3
 800261a:	483e      	ldr	r0, [pc, #248]	; (8002714 <INA229_Init+0x1ac>)
 800261c:	f00a f952 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002626:	483a      	ldr	r0, [pc, #232]	; (8002710 <INA229_Init+0x1a8>)
 8002628:	f006 fe02 	bl	8009230 <HAL_GPIO_WritePin>

//********************* Защита по току **********************************

	SPI_DATA_SEND[0] = ADR_DIAG_ALRT << 2; // Write to ADR_DIAG_ALRT register
 800262c:	232c      	movs	r3, #44	; 0x2c
 800262e:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = 0x00;
 8002634:	2300      	movs	r3, #0
 8002636:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800263e:	4834      	ldr	r0, [pc, #208]	; (8002710 <INA229_Init+0x1a8>)
 8002640:	f006 fdf6 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, sizeof(SPI_DATA_SEND), HAL_MAX_DELAY);
 8002644:	f107 0108 	add.w	r1, r7, #8
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	2203      	movs	r2, #3
 800264e:	4831      	ldr	r0, [pc, #196]	; (8002714 <INA229_Init+0x1ac>)
 8002650:	f00a f938 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265a:	482d      	ldr	r0, [pc, #180]	; (8002710 <INA229_Init+0x1a8>)
 800265c:	f006 fde8 	bl	8009230 <HAL_GPIO_WritePin>

//********************* Проверка записи ***********************************

	SPI_DATA_SEND[0] = ADR_CONFIG << 2 | 0x01;
 8002660:	2301      	movs	r3, #1
 8002662:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 800266c:	2200      	movs	r2, #0
 800266e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002672:	4827      	ldr	r0, [pc, #156]	; (8002710 <INA229_Init+0x1a8>)
 8002674:	f006 fddc 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, (uint8_t*)SPI_DATA_READ, 3, HAL_MAX_DELAY);
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	f107 0108 	add.w	r1, r7, #8
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2303      	movs	r3, #3
 8002686:	4823      	ldr	r0, [pc, #140]	; (8002714 <INA229_Init+0x1ac>)
 8002688:	f00a fca8 	bl	800cfdc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002692:	481f      	ldr	r0, [pc, #124]	; (8002710 <INA229_Init+0x1a8>)
 8002694:	f006 fdcc 	bl	8009230 <HAL_GPIO_WritePin>

	SPI_DATA_SEND[0] = ADR_ADC_CONFIG << 2 | 0x01;
 8002698:	2305      	movs	r3, #5
 800269a:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026aa:	4819      	ldr	r0, [pc, #100]	; (8002710 <INA229_Init+0x1a8>)
 80026ac:	f006 fdc0 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, (uint8_t*)SPI_DATA_READ, 3, HAL_MAX_DELAY);
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	f107 0108 	add.w	r1, r7, #8
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2303      	movs	r3, #3
 80026be:	4815      	ldr	r0, [pc, #84]	; (8002714 <INA229_Init+0x1ac>)
 80026c0:	f00a fc8c 	bl	800cfdc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <INA229_Init+0x1a8>)
 80026cc:	f006 fdb0 	bl	8009230 <HAL_GPIO_WritePin>

	SPI_DATA_SEND[0] = ADR_DIAG_ALRT << 2 | 0x01;
 80026d0:	232d      	movs	r3, #45	; 0x2d
 80026d2:	723b      	strb	r3, [r7, #8]
	SPI_DATA_SEND[1] = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	727b      	strb	r3, [r7, #9]
	SPI_DATA_SEND[2] = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <INA229_Init+0x1a8>)
 80026e4:	f006 fda4 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, (uint8_t*)SPI_DATA_READ, 3, HAL_MAX_DELAY);
 80026e8:	1d3a      	adds	r2, r7, #4
 80026ea:	f107 0108 	add.w	r1, r7, #8
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2303      	movs	r3, #3
 80026f6:	4807      	ldr	r0, [pc, #28]	; (8002714 <INA229_Init+0x1ac>)
 80026f8:	f00a fc70 	bl	800cfdc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <INA229_Init+0x1a8>)
 8002704:	f006 fd94 	bl	8009230 <HAL_GPIO_WritePin>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	58020c00 	.word	0x58020c00
 8002714:	24000370 	.word	0x24000370

08002718 <INA229_Read_VSHUNT>:
	VBUS_CODE = VBUS_CODE >> 4;
	BUS_VOLTAGE	= VBUS_CODE*1953125ULL/1000000; // Conversion factor: 195.3125 μV/LSB
	return BUS_VOLTAGE;
}

int32_t INA229_Read_VSHUNT(void){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
	uint8_t SPI_REG_ADDR;
	uint8_t SPI_DATA_READ[3] = {0,0,0};
 800271e:	4a38      	ldr	r2, [pc, #224]	; (8002800 <INA229_Read_VSHUNT+0xe8>)
 8002720:	463b      	mov	r3, r7
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4611      	mov	r1, r2
 8002726:	8019      	strh	r1, [r3, #0]
 8002728:	3302      	adds	r3, #2
 800272a:	0c12      	lsrs	r2, r2, #16
 800272c:	701a      	strb	r2, [r3, #0]
	int32_t VSHUNT_CODE;
	int32_t VSHUNT_VOLTAGE;
	uint8_t ADCRANGE_T = ADCRANGE;
 800272e:	2310      	movs	r3, #16
 8002730:	71fb      	strb	r3, [r7, #7]

	SPI_REG_ADDR = ADR_VSHUNT << 2 | 0x01;
 8002732:	2311      	movs	r3, #17
 8002734:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	4831      	ldr	r0, [pc, #196]	; (8002804 <INA229_Read_VSHUNT+0xec>)
 800273e:	f006 fd77 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, &SPI_REG_ADDR, 1, HAL_MAX_DELAY);
 8002742:	1db9      	adds	r1, r7, #6
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	2201      	movs	r2, #1
 800274a:	482f      	ldr	r0, [pc, #188]	; (8002808 <INA229_Read_VSHUNT+0xf0>)
 800274c:	f00a f8ba 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&INA_SPI_PORT, (uint8_t*)SPI_DATA_READ, 3, HAL_MAX_DELAY);
 8002750:	4639      	mov	r1, r7
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	2203      	movs	r2, #3
 8002758:	482b      	ldr	r0, [pc, #172]	; (8002808 <INA229_Read_VSHUNT+0xf0>)
 800275a:	f00a faaf 	bl	800ccbc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002764:	4827      	ldr	r0, [pc, #156]	; (8002804 <INA229_Read_VSHUNT+0xec>)
 8002766:	f006 fd63 	bl	8009230 <HAL_GPIO_WritePin>

	if (SPI_DATA_READ[0] & 0b10000000){
 800276a:	783b      	ldrb	r3, [r7, #0]
 800276c:	b25b      	sxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	da14      	bge.n	800279c <INA229_Read_VSHUNT+0x84>
//		SPI_DATA_READ[0] = SPI_DATA_READ[0] & 0b01111111;
		VSHUNT_CODE = 0xFF<<24 | SPI_DATA_READ[0]<<16 | SPI_DATA_READ[1]<<8 | SPI_DATA_READ[2];
 8002772:	783b      	ldrb	r3, [r7, #0]
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800277a:	787b      	ldrb	r3, [r7, #1]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4313      	orrs	r3, r2
 8002780:	78ba      	ldrb	r2, [r7, #2]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
//		VSHUNT_CODE = VSHUNT_CODE >> 4;
//		VSHUNT_CODE = (VSHUNT_CODE/16);
		VSHUNT_CODE = -VSHUNT_CODE/16;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	425b      	negs	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	da00      	bge.n	8002790 <INA229_Read_VSHUNT+0x78>
 800278e:	330f      	adds	r3, #15
 8002790:	111b      	asrs	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
		VSHUNT_CODE *= -1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	425b      	negs	r3, r3
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	e00a      	b.n	80027b2 <INA229_Read_VSHUNT+0x9a>
	}
	else{
		VSHUNT_CODE = SPI_DATA_READ[0]<<16 | SPI_DATA_READ[1]<<8 | SPI_DATA_READ[2];
 800279c:	783b      	ldrb	r3, [r7, #0]
 800279e:	041a      	lsls	r2, r3, #16
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	78ba      	ldrb	r2, [r7, #2]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
		VSHUNT_CODE = VSHUNT_CODE >> 4;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	111b      	asrs	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
/*
	 * Conversion factor:
	 * 312.5 nV/LSB when ADCRANGE = 0
	 * 78.125 nV/LSB when ADCRANGE = 1
*/
	if (ADCRANGE_T == 0){
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10c      	bne.n	80027d2 <INA229_Read_VSHUNT+0xba>
		VSHUNT_VOLTAGE = VSHUNT_CODE*3125/10;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f640 4235 	movw	r2, #3125	; 0xc35
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <INA229_Read_VSHUNT+0xf4>)
 80027c4:	fb82 1203 	smull	r1, r2, r2, r3
 80027c8:	1092      	asrs	r2, r2, #2
 80027ca:	17db      	asrs	r3, r3, #31
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	e010      	b.n	80027f4 <INA229_Read_VSHUNT+0xdc>
	}
	else {
		VSHUNT_VOLTAGE = (VSHUNT_CODE*3125/1000)*25;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f640 4235 	movw	r2, #3125	; 0xc35
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <INA229_Read_VSHUNT+0xf8>)
 80027de:	fb82 1203 	smull	r1, r2, r2, r3
 80027e2:	1192      	asrs	r2, r2, #6
 80027e4:	17db      	asrs	r3, r3, #31
 80027e6:	1ad2      	subs	r2, r2, r3
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
	}

	return VSHUNT_VOLTAGE; // Return VSHUNT_VOLTAGE in nV
 80027f4:	68bb      	ldr	r3, [r7, #8]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	08010a20 	.word	0x08010a20
 8002804:	58020c00 	.word	0x58020c00
 8002808:	24000370 	.word	0x24000370
 800280c:	66666667 	.word	0x66666667
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <INA229_Read_ALERT>:
	CURRENT_CODE = SPI_DATA_READ[0]<<24 | SPI_DATA_READ[1]<<16 | SPI_DATA_READ[2]<<8;
	CURRENT	= CURRENT_CODE>>12;
	return CURRENT;
}

uint16_t INA229_Read_ALERT(void){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
	uint8_t SPI_REG_ADDR;
	uint8_t SPI_DATA_READ[2] = {0,0};
 800281a:	2300      	movs	r3, #0
 800281c:	803b      	strh	r3, [r7, #0]
	uint16_t DIAG_ALRT;

	SPI_REG_ADDR = ADR_DIAG_ALRT << 2 | 0x01;
 800281e:	232d      	movs	r3, #45	; 0x2d
 8002820:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002828:	4811      	ldr	r0, [pc, #68]	; (8002870 <INA229_Read_ALERT+0x5c>)
 800282a:	f006 fd01 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, &SPI_REG_ADDR, 1, HAL_MAX_DELAY);
 800282e:	1d79      	adds	r1, r7, #5
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	2201      	movs	r2, #1
 8002836:	480f      	ldr	r0, [pc, #60]	; (8002874 <INA229_Read_ALERT+0x60>)
 8002838:	f00a f844 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&INA_SPI_PORT, (uint8_t*)SPI_DATA_READ, sizeof(SPI_DATA_READ), HAL_MAX_DELAY);
 800283c:	4639      	mov	r1, r7
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	2202      	movs	r2, #2
 8002844:	480b      	ldr	r0, [pc, #44]	; (8002874 <INA229_Read_ALERT+0x60>)
 8002846:	f00a fa39 	bl	800ccbc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <INA229_Read_ALERT+0x5c>)
 8002852:	f006 fced 	bl	8009230 <HAL_GPIO_WritePin>

	DIAG_ALRT = SPI_DATA_READ[0] << 8 | SPI_DATA_READ[1];
 8002856:	783b      	ldrb	r3, [r7, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21a      	sxth	r2, r3
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	b21b      	sxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	80fb      	strh	r3, [r7, #6]
	return DIAG_ALRT;
 8002866:	88fb      	ldrh	r3, [r7, #6]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	58020c00 	.word	0x58020c00
 8002874:	24000370 	.word	0x24000370

08002878 <INA229_Set_Current_Charge_ALRM>:

void INA229_Set_Current_Charge_ALRM(uint16_t Current_Set){
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
	uint8_t SPI_DATA_SEND[3] = {0,0,0};
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <INA229_Set_Current_Charge_ALRM+0x60>)
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4611      	mov	r1, r2
 800288c:	8019      	strh	r1, [r3, #0]
 800288e:	3302      	adds	r3, #2
 8002890:	0c12      	lsrs	r2, r2, #16
 8002892:	701a      	strb	r2, [r3, #0]

	SPI_DATA_SEND[0] = ADR_SOVL << 2; // Write to ADR_DIAG_ALRT register
 8002894:	2330      	movs	r3, #48	; 0x30
 8002896:	733b      	strb	r3, [r7, #12]
	SPI_DATA_SEND[1] = HIGH_BYTE(Current_Set);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	737b      	strb	r3, [r7, #13]
	SPI_DATA_SEND[2] = LOW_BYTE(Current_Set);
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ae:	480b      	ldr	r0, [pc, #44]	; (80028dc <INA229_Set_Current_Charge_ALRM+0x64>)
 80028b0:	f006 fcbe 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, sizeof(SPI_DATA_SEND), HAL_MAX_DELAY);
 80028b4:	f107 010c 	add.w	r1, r7, #12
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	2203      	movs	r2, #3
 80028be:	4808      	ldr	r0, [pc, #32]	; (80028e0 <INA229_Set_Current_Charge_ALRM+0x68>)
 80028c0:	f00a f800 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 80028c4:	2201      	movs	r2, #1
 80028c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ca:	4804      	ldr	r0, [pc, #16]	; (80028dc <INA229_Set_Current_Charge_ALRM+0x64>)
 80028cc:	f006 fcb0 	bl	8009230 <HAL_GPIO_WritePin>
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08010a20 	.word	0x08010a20
 80028dc:	58020c00 	.word	0x58020c00
 80028e0:	24000370 	.word	0x24000370

080028e4 <INA229_Set_Current_Discharge_ALRM>:

void INA229_Set_Current_Discharge_ALRM(uint16_t Current_Set){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
	uint8_t SPI_DATA_SEND[3] = {0,0,0};
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <INA229_Set_Current_Discharge_ALRM+0x60>)
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4611      	mov	r1, r2
 80028f8:	8019      	strh	r1, [r3, #0]
 80028fa:	3302      	adds	r3, #2
 80028fc:	0c12      	lsrs	r2, r2, #16
 80028fe:	701a      	strb	r2, [r3, #0]

	SPI_DATA_SEND[0] = ADR_SUVL << 2; // Write to ADR_DIAG_ALRT register
 8002900:	2334      	movs	r3, #52	; 0x34
 8002902:	733b      	strb	r3, [r7, #12]
	SPI_DATA_SEND[1] = HIGH_BYTE(Current_Set);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	737b      	strb	r3, [r7, #13]
	SPI_DATA_SEND[2] = LOW_BYTE(Current_Set);
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800291a:	480b      	ldr	r0, [pc, #44]	; (8002948 <INA229_Set_Current_Discharge_ALRM+0x64>)
 800291c:	f006 fc88 	bl	8009230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&INA_SPI_PORT, (uint8_t*)SPI_DATA_SEND, sizeof(SPI_DATA_SEND), HAL_MAX_DELAY);
 8002920:	f107 010c 	add.w	r1, r7, #12
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	2203      	movs	r2, #3
 800292a:	4808      	ldr	r0, [pc, #32]	; (800294c <INA229_Set_Current_Discharge_ALRM+0x68>)
 800292c:	f009 ffca 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(INA_SPI_CS_Port, INA_SPI_CS_Pin, GPIO_PIN_SET);
 8002930:	2201      	movs	r2, #1
 8002932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <INA229_Set_Current_Discharge_ALRM+0x64>)
 8002938:	f006 fc7a 	bl	8009230 <HAL_GPIO_WritePin>
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08010a20 	.word	0x08010a20
 8002948:	58020c00 	.word	0x58020c00
 800294c:	24000370 	.word	0x24000370

08002950 <LTC6813_init_reg_limits>:

/* Helper function to initialize register limits. */
void LTC6813_init_reg_limits(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
    for(uint8_t cic=0; cic<total_ic; cic++)
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e038      	b.n	80029d4 <LTC6813_init_reg_limits+0x84>
    {
        ic[cic].ic_reg.cell_channels=18; 
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	22e8      	movs	r2, #232	; 0xe8
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	4413      	add	r3, r2
 800296e:	2212      	movs	r2, #18
 8002970:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ic[cic].ic_reg.stat_channels=4;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	22e8      	movs	r2, #232	; 0xe8
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	4413      	add	r3, r2
 8002980:	2204      	movs	r2, #4
 8002982:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        ic[cic].ic_reg.aux_channels=9;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	22e8      	movs	r2, #232	; 0xe8
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	4413      	add	r3, r2
 8002992:	2209      	movs	r2, #9
 8002994:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
        ic[cic].ic_reg.num_cv_reg=6; 
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	22e8      	movs	r2, #232	; 0xe8
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	2206      	movs	r2, #6
 80029a6:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
        ic[cic].ic_reg.num_gpio_reg=4;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	22e8      	movs	r2, #232	; 0xe8
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	2204      	movs	r2, #4
 80029b8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        ic[cic].ic_reg.num_stat_reg=2;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	22e8      	movs	r2, #232	; 0xe8
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    for(uint8_t cic=0; cic<total_ic; cic++)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3301      	adds	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3c2      	bcc.n	8002962 <LTC6813_init_reg_limits+0x12>
    } 
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LTC6813_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6813_wrcfg(uint8_t total_ic, //The number of ICs being written to
                     cell_asic *ic //A two dimensional array of the configuration data that will be written
                    )
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	71fb      	strb	r3, [r7, #7]
	LTC681x_wrcfg(total_ic,ic);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 ff2c 	bl	8003858 <LTC681x_wrcfg>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <LTC6813_wrcfgb>:
order so the last device's configuration is written first.
*/
void LTC6813_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic *ic //A two dimensional array of the configuration data that will be written
                   )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfgb(total_ic,ic);
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 ff9c 	bl	8003956 <LTC681x_wrcfgb>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <LTC6813_rdcfg>:

/* Reads configuration registers of a LTC6813 daisy chain */
int8_t LTC6813_rdcfg(uint8_t total_ic, //Number of ICs in the system
				   cell_asic *ic //A two dimensional array that the function stores the read configuration data.
				  )
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	6039      	str	r1, [r7, #0]
 8002a30:	71fb      	strb	r3, [r7, #7]
	int8_t pec_error = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
	pec_error = LTC681x_rdcfg(total_ic,ic);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f80b 	bl	8003a56 <LTC681x_rdcfg>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
	return(pec_error);
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <LTC6813_rdcfgb>:

/* Reads configuration b registers of a LTC6813 daisy chain */
int8_t LTC6813_rdcfgb(uint8_t total_ic, //Number of ICs in the system
                   cell_asic *ic //A two dimensional array that the function stores the read configuration data.
                  )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
    int8_t pec_error = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcfgb(total_ic,ic);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f8d1 	bl	8003c0c <LTC681x_rdcfgb>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]
    return(pec_error);
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <LTC6813_adcv>:
/* Starts cell voltage conversion */
void LTC6813_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				 )
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
 8002a84:	460b      	mov	r3, r1
 8002a86:	71bb      	strb	r3, [r7, #6]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD,DCP,CH);
 8002a8c:	797a      	ldrb	r2, [r7, #5]
 8002a8e:	79b9      	ldrb	r1, [r7, #6]
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f995 	bl	8003dc2 <LTC681x_adcv>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <LTC6813_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6813_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured)
                 )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	71fb      	strb	r3, [r7, #7]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71bb      	strb	r3, [r7, #6]
	LTC681x_adax(MD,CHG);
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f9ae 	bl	8003e18 <LTC681x_adax>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <LTC6813_rdcv>:
/*  Reads and parses the LTC6813 cell voltage registers */
uint8_t LTC6813_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	603a      	str	r2, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
	pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8002ad8:	79b9      	ldrb	r1, [r7, #6]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 f9bf 	bl	8003e62 <LTC681x_rdcv>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]
	return(pec_error);
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <LTC6813_rdaux>:
*/
int8_t LTC6813_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
				     uint8_t total_ic,//The number of ICs in the system
				     cell_asic *ic//A two dimensional array of the gpio voltage codes.
				    )
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	603a      	str	r2, [r7, #0]
 8002afc:	71fb      	strb	r3, [r7, #7]
 8002afe:	460b      	mov	r3, r1
 8002b00:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
	LTC681x_rdaux(reg,total_ic,ic);
 8002b06:	79b9      	ldrb	r1, [r7, #6]
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 fa5c 	bl	8003fca <LTC681x_rdaux>
	return (pec_error);
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LTC6813_rdstat>:
*/
int8_t LTC6813_rdstat(uint8_t reg, //Determines which Stat  register is read back.
                      uint8_t total_ic,//The number of ICs in the system
                      cell_asic *ic //A two dimensional array of the stat codes.
                       )
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	603a      	str	r2, [r7, #0]
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdstat(reg,total_ic,ic);
 8002b32:	79b9      	ldrb	r1, [r7, #6]
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 faee 	bl	800411a <LTC681x_rdstat>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <LTC6813_pollAdc>:
	return(LTC681x_pladc());
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6813_pollAdc()
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
	return(LTC681x_pollAdc());
 8002b52:	f001 fec5 	bl	80048e0 <LTC681x_pollAdc>
 8002b56:	4603      	mov	r3, r0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <LTC6813_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6813_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
	LTC681x_reset_crc_count(total_ic,ic);
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 f89f 	bl	8004cb0 <LTC681x_reset_crc_count>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <LTC6813_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC6813_init_cfg(uint8_t total_ic, cell_asic *ic)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	6039      	str	r1, [r7, #0]
 8002b84:	71fb      	strb	r3, [r7, #7]
   LTC681x_init_cfg(total_ic,ic);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 f8f6 	bl	8004d7c <LTC681x_init_cfg>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <LTC6813_set_cfgr>:

/* Helper function to set CFGR variable */
void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, bool refon, bool adcopt, bool gpio[5],bool dcc[12],bool dcto[4], uint16_t uv, uint16_t  ov)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6039      	str	r1, [r7, #0]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	71bb      	strb	r3, [r7, #6]
 8002bac:	4613      	mov	r3, r2
 8002bae:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC,ic,refon);
 8002bb0:	79ba      	ldrb	r2, [r7, #6]
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 f90a 	bl	8004dd0 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8002bbc:	797a      	ldrb	r2, [r7, #5]
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 f938 	bl	8004e38 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 f966 	bl	8004ea0 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 f9b0 	bl	8004f40 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fa39 	bl	800505e <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002bec:	8bba      	ldrh	r2, [r7, #28]
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fa83 	bl	80050fe <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002bf8:	8c3a      	ldrh	r2, [r7, #32]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fac3 	bl	800518a <LTC681x_set_cfgr_ov>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <LTC6813_init_cfgb>:
    LTC681x_set_cfgr_ov( nIC, ic, ov);
}

/* Helper Function to initialize the CFGRB data structures */
void LTC6813_init_cfgb(uint8_t total_ic,cell_asic *ic)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e016      	b.n	8002c4c <LTC6813_init_cfgb+0x40>
    {
		for(int j =0; j<6;j++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	e00d      	b.n	8002c40 <LTC6813_init_cfgb+0x34>
        {
            ic[current_ic].configb.tx_data[j] = 0;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	22e8      	movs	r2, #232	; 0xe8
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	330f      	adds	r3, #15
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		for(int j =0; j<6;j++)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	ddee      	ble.n	8002c24 <LTC6813_init_cfgb+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3e4      	bcc.n	8002c1e <LTC6813_init_cfgb+0x12>
        }
    }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LTC6813_set_cfgrb>:

/* Helper Function to set the configuration register B */
void LTC6813_set_cfgrb(uint8_t nIC, cell_asic *ic,bool fdrf,bool dtmen,bool ps[2],bool gpiobits[4],bool dccbits[7])
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
 8002c72:	460b      	mov	r3, r1
 8002c74:	71bb      	strb	r3, [r7, #6]
 8002c76:	4613      	mov	r3, r2
 8002c78:	717b      	strb	r3, [r7, #5]
    LTC6813_set_cfgrb_fdrf(nIC,ic,fdrf);
 8002c7a:	79ba      	ldrb	r2, [r7, #6]
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	6839      	ldr	r1, [r7, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f81c 	bl	8002cbe <LTC6813_set_cfgrb_fdrf>
    LTC6813_set_cfgrb_dtmen(nIC,ic,dtmen);
 8002c86:	797a      	ldrb	r2, [r7, #5]
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f84a 	bl	8002d26 <LTC6813_set_cfgrb_dtmen>
    LTC6813_set_cfgrb_ps(nIC,ic,ps);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f878 	bl	8002d8e <LTC6813_set_cfgrb_ps>
    LTC6813_set_cfgrb_gpio_b(nIC,ic,gpiobits);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f8c2 	bl	8002e2e <LTC6813_set_cfgrb_gpio_b>
	LTC6813_set_cfgrb_dcc_b(nIC,ic,dccbits);
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f90a 	bl	8002eca <LTC6813_set_cfgrb_dcc_b>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <LTC6813_set_cfgrb_fdrf>:

/* Helper function to set the FDRF bit */
void LTC6813_set_cfgrb_fdrf(uint8_t nIC, cell_asic *ic, bool fdrf)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	6039      	str	r1, [r7, #0]
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	71bb      	strb	r3, [r7, #6]
	if(fdrf) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x40;
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d011      	beq.n	8002cf8 <LTC6813_set_cfgrb_fdrf+0x3a>
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	22e8      	movs	r2, #232	; 0xe8
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	7c1a      	ldrb	r2, [r3, #16]
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	21e8      	movs	r1, #232	; 0xe8
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	440b      	add	r3, r1
 8002cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
}
 8002cf6:	e010      	b.n	8002d1a <LTC6813_set_cfgrb_fdrf+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	22e8      	movs	r2, #232	; 0xe8
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	7c1a      	ldrb	r2, [r3, #16]
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	21e8      	movs	r1, #232	; 0xe8
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	440b      	add	r3, r1
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	741a      	strb	r2, [r3, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LTC6813_set_cfgrb_dtmen>:

/* Helper function to set the DTMEN bit */
void LTC6813_set_cfgrb_dtmen(uint8_t nIC, cell_asic *ic, bool dtmen)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	6039      	str	r1, [r7, #0]
 8002d30:	71fb      	strb	r3, [r7, #7]
 8002d32:	4613      	mov	r3, r2
 8002d34:	71bb      	strb	r3, [r7, #6]
	if(dtmen) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x08;
 8002d36:	79bb      	ldrb	r3, [r7, #6]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d011      	beq.n	8002d60 <LTC6813_set_cfgrb_dtmen+0x3a>
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	22e8      	movs	r2, #232	; 0xe8
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	7c1a      	ldrb	r2, [r3, #16]
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	21e8      	movs	r1, #232	; 0xe8
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	440b      	add	r3, r1
 8002d56:	f042 0208 	orr.w	r2, r2, #8
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
}
 8002d5e:	e010      	b.n	8002d82 <LTC6813_set_cfgrb_dtmen+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	22e8      	movs	r2, #232	; 0xe8
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	7c1a      	ldrb	r2, [r3, #16]
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	21e8      	movs	r1, #232	; 0xe8
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	440b      	add	r3, r1
 8002d7a:	f022 0208 	bic.w	r2, r2, #8
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	741a      	strb	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LTC6813_set_cfgrb_ps>:

/* Helper function to set the PATH SELECT bit */
void LTC6813_set_cfgrb_ps(uint8_t nIC, cell_asic *ic, bool ps[])
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<2;i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e03b      	b.n	8002e1a <LTC6813_set_cfgrb_ps+0x8c>
	{
	  if(ps[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i+4));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <LTC6813_set_cfgrb_ps+0x52>
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	22e8      	movs	r2, #232	; 0xe8
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4413      	add	r3, r2
 8002dba:	7c1b      	ldrb	r3, [r3, #16]
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b259      	sxtb	r1, r3
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	22e8      	movs	r2, #232	; 0xe8
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b2ca      	uxtb	r2, r1
 8002ddc:	741a      	strb	r2, [r3, #16]
 8002dde:	e019      	b.n	8002e14 <LTC6813_set_cfgrb_ps+0x86>
	  else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i+4)));
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	22e8      	movs	r2, #232	; 0xe8
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	7c1b      	ldrb	r3, [r3, #16]
 8002dee:	b25a      	sxtb	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	b259      	sxtb	r1, r3
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	22e8      	movs	r2, #232	; 0xe8
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<2;i++)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	ddc0      	ble.n	8002da2 <LTC6813_set_cfgrb_ps+0x14>
	}
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LTC6813_set_cfgrb_gpio_b>:

/*  Helper function to set the gpio bits in configb b register  */
void LTC6813_set_cfgrb_gpio_b(uint8_t nIC, cell_asic *ic, bool gpiobits[])
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e039      	b.n	8002eb6 <LTC6813_set_cfgrb_gpio_b+0x88>
	{
	  if(gpiobits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<i);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <LTC6813_set_cfgrb_gpio_b+0x50>
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	22e8      	movs	r2, #232	; 0xe8
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	7bdb      	ldrb	r3, [r3, #15]
 8002e5c:	b25a      	sxtb	r2, r3
 8002e5e:	2101      	movs	r1, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b259      	sxtb	r1, r3
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	22e8      	movs	r2, #232	; 0xe8
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	73da      	strb	r2, [r3, #15]
 8002e7c:	e018      	b.n	8002eb0 <LTC6813_set_cfgrb_gpio_b+0x82>
	  else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<i));
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	22e8      	movs	r2, #232	; 0xe8
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	7bdb      	ldrb	r3, [r3, #15]
 8002e8c:	b25a      	sxtb	r2, r3
 8002e8e:	2101      	movs	r1, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b259      	sxtb	r1, r3
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	22e8      	movs	r2, #232	; 0xe8
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4413      	add	r3, r2
 8002eac:	b2ca      	uxtb	r2, r1
 8002eae:	73da      	strb	r2, [r3, #15]
	for(int i =0;i<4;i++)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	ddc2      	ble.n	8002e42 <LTC6813_set_cfgrb_gpio_b+0x14>
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LTC6813_set_cfgrb_dcc_b>:

/*  Helper function to set the dcc bits in configb b register */
void LTC6813_set_cfgrb_dcc_b(uint8_t nIC, cell_asic *ic, bool dccbits[])
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<7;i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e0ac      	b.n	8003038 <LTC6813_set_cfgrb_dcc_b+0x16e>
	{
		if(i==0)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d128      	bne.n	8002f36 <LTC6813_set_cfgrb_dcc_b+0x6c>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x04;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d011      	beq.n	8002f14 <LTC6813_set_cfgrb_dcc_b+0x4a>
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	22e8      	movs	r2, #232	; 0xe8
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	7c1a      	ldrb	r2, [r3, #16]
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	21e8      	movs	r1, #232	; 0xe8
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	440b      	add	r3, r1
 8002f0a:	f042 0204 	orr.w	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	741a      	strb	r2, [r3, #16]
 8002f12:	e010      	b.n	8002f36 <LTC6813_set_cfgrb_dcc_b+0x6c>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xFB;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	22e8      	movs	r2, #232	; 0xe8
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4413      	add	r3, r2
 8002f20:	7c1a      	ldrb	r2, [r3, #16]
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	21e8      	movs	r1, #232	; 0xe8
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	741a      	strb	r2, [r3, #16]
		}
		if(i>0 && i<5)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dd3b      	ble.n	8002fb4 <LTC6813_set_cfgrb_dcc_b+0xea>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	dc38      	bgt.n	8002fb4 <LTC6813_set_cfgrb_dcc_b+0xea>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<(i+3));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <LTC6813_set_cfgrb_dcc_b+0xb6>
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	22e8      	movs	r2, #232	; 0xe8
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4413      	add	r3, r2
 8002f5a:	7bdb      	ldrb	r3, [r3, #15]
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3303      	adds	r3, #3
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b259      	sxtb	r1, r3
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	22e8      	movs	r2, #232	; 0xe8
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	b2ca      	uxtb	r2, r1
 8002f7c:	73da      	strb	r2, [r3, #15]
 8002f7e:	e019      	b.n	8002fb4 <LTC6813_set_cfgrb_dcc_b+0xea>
			else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<(i+3)));
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	22e8      	movs	r2, #232	; 0xe8
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	7bdb      	ldrb	r3, [r3, #15]
 8002f8e:	b25a      	sxtb	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3303      	adds	r3, #3
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b259      	sxtb	r1, r3
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	22e8      	movs	r2, #232	; 0xe8
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	4413      	add	r3, r2
 8002fb0:	b2ca      	uxtb	r2, r1
 8002fb2:	73da      	strb	r2, [r3, #15]
		}
		if(i>4 && i<7)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	dd3b      	ble.n	8003032 <LTC6813_set_cfgrb_dcc_b+0x168>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	dc38      	bgt.n	8003032 <LTC6813_set_cfgrb_dcc_b+0x168>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i-5));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <LTC6813_set_cfgrb_dcc_b+0x134>
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	22e8      	movs	r2, #232	; 0xe8
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	7c1b      	ldrb	r3, [r3, #16]
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3b05      	subs	r3, #5
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	b259      	sxtb	r1, r3
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	22e8      	movs	r2, #232	; 0xe8
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2ca      	uxtb	r2, r1
 8002ffa:	741a      	strb	r2, [r3, #16]
 8002ffc:	e019      	b.n	8003032 <LTC6813_set_cfgrb_dcc_b+0x168>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i-5)));
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	22e8      	movs	r2, #232	; 0xe8
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	7c1b      	ldrb	r3, [r3, #16]
 800300c:	b25a      	sxtb	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3b05      	subs	r3, #5
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	b25b      	sxtb	r3, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	b25b      	sxtb	r3, r3
 800301e:	4013      	ands	r3, r2
 8003020:	b259      	sxtb	r1, r3
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	22e8      	movs	r2, #232	; 0xe8
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4413      	add	r3, r2
 800302e:	b2ca      	uxtb	r2, r1
 8003030:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<7;i++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b06      	cmp	r3, #6
 800303c:	f77f af4f 	ble.w	8002ede <LTC6813_set_cfgrb_dcc_b+0x14>
		}
	}
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <LTC6813_Init>:
bool CellMeasurement_flag = true;
bool ExpentedStatusCHARGE = true;
bool ExpentedStatusDISCHARGE = true;
bool BMS_OFF_flag = false; //!< Force Digital Redundancy Failure Bit

void LTC6813_Init(void){
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b087      	sub	sp, #28
 8003054:	af06      	add	r7, sp, #24
/* Init LTC6813 Configuration Register */
  LTC6813_init_cfg(TOTAL_IC, bms_ic);
 8003056:	2301      	movs	r3, #1
 8003058:	4930      	ldr	r1, [pc, #192]	; (800311c <LTC6813_Init+0xcc>)
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fd8d 	bl	8002b7a <LTC6813_init_cfg>
  LTC6813_init_cfgb(TOTAL_IC,bms_ic);
 8003060:	2301      	movs	r3, #1
 8003062:	492e      	ldr	r1, [pc, #184]	; (800311c <LTC6813_Init+0xcc>)
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fdd1 	bl	8002c0c <LTC6813_init_cfgb>
  LTC6813_set_cfgr(current_ic,bms_ic,REFON,ADCOPT,gpioBits_a,dccBits_a, dctoBits, UV, OV);
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <LTC6813_Init+0xd0>)
 800306c:	7818      	ldrb	r0, [r3, #0]
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <LTC6813_Init+0xd4>)
 8003070:	7819      	ldrb	r1, [r3, #0]
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <LTC6813_Init+0xd8>)
 8003074:	781c      	ldrb	r4, [r3, #0]
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <LTC6813_Init+0xdc>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <LTC6813_Init+0xe0>)
 800307c:	8812      	ldrh	r2, [r2, #0]
 800307e:	9204      	str	r2, [sp, #16]
 8003080:	9303      	str	r3, [sp, #12]
 8003082:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <LTC6813_Init+0xe4>)
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <LTC6813_Init+0xe8>)
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	4b2c      	ldr	r3, [pc, #176]	; (800313c <LTC6813_Init+0xec>)
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	4623      	mov	r3, r4
 8003090:	460a      	mov	r2, r1
 8003092:	4922      	ldr	r1, [pc, #136]	; (800311c <LTC6813_Init+0xcc>)
 8003094:	f7ff fd80 	bl	8002b98 <LTC6813_set_cfgr>
  LTC6813_set_cfgrb(current_ic,bms_ic,FDRF,DTMEN,psBits,gpioBits_b,dccBits_b);
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <LTC6813_Init+0xd0>)
 800309a:	7818      	ldrb	r0, [r3, #0]
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <LTC6813_Init+0xf0>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <LTC6813_Init+0xf4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4928      	ldr	r1, [pc, #160]	; (8003148 <LTC6813_Init+0xf8>)
 80030a6:	9102      	str	r1, [sp, #8]
 80030a8:	4928      	ldr	r1, [pc, #160]	; (800314c <LTC6813_Init+0xfc>)
 80030aa:	9101      	str	r1, [sp, #4]
 80030ac:	4928      	ldr	r1, [pc, #160]	; (8003150 <LTC6813_Init+0x100>)
 80030ae:	9100      	str	r1, [sp, #0]
 80030b0:	491a      	ldr	r1, [pc, #104]	; (800311c <LTC6813_Init+0xcc>)
 80030b2:	f7ff fdd6 	bl	8002c62 <LTC6813_set_cfgrb>
  LTC6813_reset_crc_count(TOTAL_IC,bms_ic);
 80030b6:	2301      	movs	r3, #1
 80030b8:	4918      	ldr	r1, [pc, #96]	; (800311c <LTC6813_Init+0xcc>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fd4e 	bl	8002b5c <LTC6813_reset_crc_count>
  LTC6813_init_reg_limits(TOTAL_IC,bms_ic);
 80030c0:	2301      	movs	r3, #1
 80030c2:	4916      	ldr	r1, [pc, #88]	; (800311c <LTC6813_Init+0xcc>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fc43 	bl	8002950 <LTC6813_init_reg_limits>

/* Write LTC6813 Configuration Register */
  wakeup_sleep(TOTAL_IC);
 80030ca:	2301      	movs	r3, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f9e8 	bl	80034a2 <wakeup_sleep>
  LTC6813_wrcfg(TOTAL_IC,bms_ic);
 80030d2:	2301      	movs	r3, #1
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <LTC6813_Init+0xcc>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fc87 	bl	80029ea <LTC6813_wrcfg>
  LTC6813_wrcfgb(TOTAL_IC,bms_ic);
 80030dc:	2301      	movs	r3, #1
 80030de:	490f      	ldr	r1, [pc, #60]	; (800311c <LTC6813_Init+0xcc>)
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fc91 	bl	8002a08 <LTC6813_wrcfgb>

/* Read LTC6813 Configuration Register */
  wakeup_idle(TOTAL_IC);
 80030e6:	2301      	movs	r3, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f9bd 	bl	8003468 <wakeup_idle>
  ERR = LTC6813_rdcfg(TOTAL_IC,bms_ic);
 80030ee:	2301      	movs	r3, #1
 80030f0:	490a      	ldr	r1, [pc, #40]	; (800311c <LTC6813_Init+0xcc>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fc97 	bl	8002a26 <LTC6813_rdcfg>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <LTC6813_Init+0x104>)
 80030fe:	701a      	strb	r2, [r3, #0]
  ERR = LTC6813_rdcfgb(TOTAL_IC,bms_ic);
 8003100:	2301      	movs	r3, #1
 8003102:	4906      	ldr	r1, [pc, #24]	; (800311c <LTC6813_Init+0xcc>)
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fca3 	bl	8002a50 <LTC6813_rdcfgb>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <LTC6813_Init+0x104>)
 8003110:	701a      	strb	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	3704      	adds	r7, #4
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	bf00      	nop
 800311c:	24000238 	.word	0x24000238
 8003120:	24000320 	.word	0x24000320
 8003124:	24000000 	.word	0x24000000
 8003128:	24000332 	.word	0x24000332
 800312c:	24000002 	.word	0x24000002
 8003130:	24000004 	.word	0x24000004
 8003134:	2400001c 	.word	0x2400001c
 8003138:	24000008 	.word	0x24000008
 800313c:	24000334 	.word	0x24000334
 8003140:	24000340 	.word	0x24000340
 8003144:	24000020 	.word	0x24000020
 8003148:	24000014 	.word	0x24000014
 800314c:	2400033c 	.word	0x2400033c
 8003150:	24000344 	.word	0x24000344
 8003154:	24000321 	.word	0x24000321

08003158 <LTC6813_Read_Cell>:

uint16_t LTC6813_Read_Cell(uint8_t Cell){
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
	uint16_t Cell_Volt;

	wakeup_sleep(TOTAL_IC);
 8003162:	2301      	movs	r3, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f99c 	bl	80034a2 <wakeup_sleep>
	LTC6813_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT); // Start Cell ADC Measurement
 800316a:	2302      	movs	r3, #2
 800316c:	2100      	movs	r1, #0
 800316e:	2200      	movs	r2, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fc82 	bl	8002a7a <LTC6813_adcv>
	LTC6813_pollAdc();
 8003176:	f7ff fcea 	bl	8002b4e <LTC6813_pollAdc>
	wakeup_idle(TOTAL_IC);
 800317a:	2301      	movs	r3, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f973 	bl	8003468 <wakeup_idle>
	ERR = LTC6813_rdcv(REG_ALL,TOTAL_IC,bms_ic); 	// Set to read back all cell voltage registers
 8003182:	2301      	movs	r3, #1
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <LTC6813_Read_Cell+0x64>)
 8003186:	4619      	mov	r1, r3
 8003188:	2000      	movs	r0, #0
 800318a:	f7ff fc9b 	bl	8002ac4 <LTC6813_rdcv>
 800318e:	4603      	mov	r3, r0
 8003190:	b25a      	sxtb	r2, r3
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <LTC6813_Read_Cell+0x68>)
 8003194:	701a      	strb	r2, [r3, #0]

	Cell_Volt = bms_ic[current_ic].cells.c_codes[Cell];
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <LTC6813_Read_Cell+0x6c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4907      	ldr	r1, [pc, #28]	; (80031bc <LTC6813_Read_Cell+0x64>)
 80031a0:	2274      	movs	r2, #116	; 0x74
 80031a2:	fb00 f202 	mul.w	r2, r0, r2
 80031a6:	4413      	add	r3, r2
 80031a8:	330c      	adds	r3, #12
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	440b      	add	r3, r1
 80031ae:	88db      	ldrh	r3, [r3, #6]
 80031b0:	81fb      	strh	r3, [r7, #14]
	return Cell_Volt;
 80031b2:	89fb      	ldrh	r3, [r7, #14]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	24000238 	.word	0x24000238
 80031c0:	24000321 	.word	0x24000321
 80031c4:	24000320 	.word	0x24000320

080031c8 <LTC6813_Temp_Read>:

int16_t LTC6813_Temp_Read(uint8_t Channel){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
	int16_t Temperature_Celsius;

	wakeup_sleep(TOTAL_IC);
 80031d2:	2301      	movs	r3, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f964 	bl	80034a2 <wakeup_sleep>
	LTC6813_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 80031da:	2202      	movs	r2, #2
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <LTC6813_Temp_Read+0x148>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7ff fc5c 	bl	8002aa0 <LTC6813_adax>
	LTC6813_pollAdc();
 80031e8:	f7ff fcb1 	bl	8002b4e <LTC6813_pollAdc>
//	HAL_Delay(10);
	ERR = LTC6813_rdaux(NO_OF_REG, TOTAL_IC, bms_ic); // Set to read back all aux registers
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <LTC6813_Temp_Read+0x14c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4a49      	ldr	r2, [pc, #292]	; (8003318 <LTC6813_Temp_Read+0x150>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fc7c 	bl	8002af2 <LTC6813_rdaux>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <LTC6813_Temp_Read+0x154>)
 8003200:	701a      	strb	r2, [r3, #0]
	if (ERR == 0){
 8003202:	4b46      	ldr	r3, [pc, #280]	; (800331c <LTC6813_Temp_Read+0x154>)
 8003204:	f993 3000 	ldrsb.w	r3, [r3]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d16c      	bne.n	80032e6 <LTC6813_Temp_Read+0x11e>
		Temperature_Code = bms_ic[current_ic].aux.a_codes[Channel];
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <LTC6813_Temp_Read+0x158>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4940      	ldr	r1, [pc, #256]	; (8003318 <LTC6813_Temp_Read+0x150>)
 8003216:	2274      	movs	r2, #116	; 0x74
 8003218:	fb00 f202 	mul.w	r2, r0, r2
 800321c:	4413      	add	r3, r2
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003224:	461a      	mov	r2, r3
 8003226:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <LTC6813_Temp_Read+0x15c>)
 8003228:	601a      	str	r2, [r3, #0]
	}
	else {
		return 333;
	}
	Ntc_R = ((NTC_UP_R)/((32767.0/Temperature_Code) - 1));
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <LTC6813_Temp_Read+0x15c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003236:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80032f8 <LTC6813_Temp_Read+0x130>
 800323a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800323e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003242:	ee37 6b46 	vsub.f64	d6, d7, d6
 8003246:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8003300 <LTC6813_Temp_Read+0x138>
 800324a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800324e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003252:	4b35      	ldr	r3, [pc, #212]	; (8003328 <LTC6813_Temp_Read+0x160>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
	// temp
	float Ntc_Ln = log(Ntc_R);
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <LTC6813_Temp_Read+0x160>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003262:	eeb0 0b47 	vmov.f64	d0, d7
 8003266:	f00d fa8f 	bl	8010788 <log>
 800326a:	eeb0 7b40 	vmov.f64	d7, d0
 800326e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003272:	edc7 7a03 	vstr	s15, [r7, #12]
	// calc. temperature
	Ntc_Tmp = (1.0/(A + B*Ntc_Ln + C*Ntc_Ln*Ntc_Ln*Ntc_Ln)) - 273.15;
 8003276:	edd7 7a03 	vldr	s15, [r7, #12]
 800327a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800332c <LTC6813_Temp_Read+0x164>
 800327e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003282:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003330 <LTC6813_Temp_Read+0x168>
 8003286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800328a:	edd7 7a03 	vldr	s15, [r7, #12]
 800328e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003334 <LTC6813_Temp_Read+0x16c>
 8003292:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003296:	edd7 7a03 	vldr	s15, [r7, #12]
 800329a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800329e:	edd7 7a03 	vldr	s15, [r7, #12]
 80032a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032ae:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80032b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80032b6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8003308 <LTC6813_Temp_Read+0x140>
 80032ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <LTC6813_Temp_Read+0x170>)
 80032c4:	edc3 7a00 	vstr	s15, [r3]
	// nullify
	Temperature_Celsius = (int)(Ntc_Tmp*10);
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <LTC6813_Temp_Read+0x170>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	ee17 3a90 	vmov	r3, s15
 80032de:	817b      	strh	r3, [r7, #10]
	return Temperature_Celsius;
 80032e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032e4:	e001      	b.n	80032ea <LTC6813_Temp_Read+0x122>
		return 333;
 80032e6:	f240 134d 	movw	r3, #333	; 0x14d
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	f3af 8000 	nop.w
 80032f8:	00000000 	.word	0x00000000
 80032fc:	40dfffc0 	.word	0x40dfffc0
 8003300:	00000000 	.word	0x00000000
 8003304:	40c38800 	.word	0x40c38800
 8003308:	66666666 	.word	0x66666666
 800330c:	40711266 	.word	0x40711266
 8003310:	24000330 	.word	0x24000330
 8003314:	24000331 	.word	0x24000331
 8003318:	24000238 	.word	0x24000238
 800331c:	24000321 	.word	0x24000321
 8003320:	24000320 	.word	0x24000320
 8003324:	24000324 	.word	0x24000324
 8003328:	2400032c 	.word	0x2400032c
 800332c:	39842c4a 	.word	0x39842c4a
 8003330:	3a87229f 	.word	0x3a87229f
 8003334:	30f763df 	.word	0x30f763df
 8003338:	24000328 	.word	0x24000328

0800333c <LTC6813_Chk_Start_Error>:
  wakeup_sleep(TOTAL_IC);
  LTC6813_wrcfg(TOTAL_IC,bms_ic);
  LTC6813_wrcfgb(TOTAL_IC,bms_ic);
}

int16_t LTC6813_Chk_Start_Error(void){
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
	#define MIN_CURRENT 10
	int16_t Current_mA;
	int16_t Error_Flag = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	81fb      	strh	r3, [r7, #14]

	HAL_Delay(10);
 8003346:	200a      	movs	r0, #10
 8003348:	f004 ff06 	bl	8008158 <HAL_Delay>
	wakeup_sleep(TOTAL_IC);
 800334c:	2301      	movs	r3, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f8a7 	bl	80034a2 <wakeup_sleep>
	LTC6813_adcv(ADC_CONVERSION_MODE,ADC_DCP,CELL_CH_TO_CONVERT); 	// Start LTC ADC conversion
 8003354:	2302      	movs	r3, #2
 8003356:	2100      	movs	r1, #0
 8003358:	2200      	movs	r2, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fb8d 	bl	8002a7a <LTC6813_adcv>
	HAL_Delay(10);
 8003360:	200a      	movs	r0, #10
 8003362:	f004 fef9 	bl	8008158 <HAL_Delay>
	wakeup_sleep(TOTAL_IC);
 8003366:	2301      	movs	r3, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f89a 	bl	80034a2 <wakeup_sleep>
	LTC6813_rdcv(NO_OF_REG,TOTAL_IC,bms_ic); 				// Set to read back all cell voltage registers
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <LTC6813_Chk_Start_Error+0x114>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	4a37      	ldr	r2, [pc, #220]	; (8003454 <LTC6813_Chk_Start_Error+0x118>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fba4 	bl	8002ac4 <LTC6813_rdcv>
	LTC6813_rdstat(REG_ALL, TOTAL_IC, bms_ic);				// Set to read back all stat registers
 800337c:	2301      	movs	r3, #1
 800337e:	4a35      	ldr	r2, [pc, #212]	; (8003454 <LTC6813_Chk_Start_Error+0x118>)
 8003380:	4619      	mov	r1, r3
 8003382:	2000      	movs	r0, #0
 8003384:	f7ff fbcb 	bl	8002b1e <LTC6813_rdstat>

	Current_mA = -INA229_Read_VSHUNT()/RSHUNT/100*75/100;
 8003388:	f7ff f9c6 	bl	8002718 <INA229_Read_VSHUNT>
 800338c:	4603      	mov	r3, r0
 800338e:	425b      	negs	r3, r3
 8003390:	4a31      	ldr	r2, [pc, #196]	; (8003458 <LTC6813_Chk_Start_Error+0x11c>)
 8003392:	fb82 1203 	smull	r1, r2, r2, r3
 8003396:	1152      	asrs	r2, r2, #5
 8003398:	17db      	asrs	r3, r3, #31
 800339a:	1ad2      	subs	r2, r2, r3
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	011a      	lsls	r2, r3, #4
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a2d      	ldr	r2, [pc, #180]	; (800345c <LTC6813_Chk_Start_Error+0x120>)
 80033a8:	fb82 1203 	smull	r1, r2, r2, r3
 80033ac:	1152      	asrs	r2, r2, #5
 80033ae:	17db      	asrs	r3, r3, #31
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	807b      	strh	r3, [r7, #2]

	if(abs(Current_mA) >= MIN_CURRENT) {
 80033b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bfb8      	it	lt
 80033bc:	425b      	neglt	r3, r3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d903      	bls.n	80033cc <LTC6813_Chk_Start_Error+0x90>
	   Error_Flag = Error_Flag | 0x01;	// Флаг ошибки FETs damage
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	81fb      	strh	r3, [r7, #14]
	}
	for (int i = 0; i < 16 ; i++){
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	e017      	b.n	8003402 <LTC6813_Chk_Start_Error+0xc6>
	   if (LTC6813_Read_Cell(i)/10 >= Para_Array[1]){
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff febe 	bl	8003158 <LTC6813_Read_Cell>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <LTC6813_Chk_Start_Error+0x124>)
 80033e2:	fba3 2302 	umull	r2, r3, r3, r2
 80033e6:	08db      	lsrs	r3, r3, #3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <LTC6813_Chk_Start_Error+0x128>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	db03      	blt.n	80033fc <LTC6813_Chk_Start_Error+0xc0>
		   Error_Flag = Error_Flag | 0x02; 	// Флаг ошибки Cells voltage
 80033f4:	89fb      	ldrh	r3, [r7, #14]
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16 ; i++){
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3301      	adds	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	dde4      	ble.n	80033d2 <LTC6813_Chk_Start_Error+0x96>
	   }
	}
	for (int i = 0; i < 16 ; i++){
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	e017      	b.n	800343e <LTC6813_Chk_Start_Error+0x102>
	   if (LTC6813_Read_Cell(i)/10 <= Para_Array[2]){
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fea0 	bl	8003158 <LTC6813_Read_Cell>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <LTC6813_Chk_Start_Error+0x124>)
 800341e:	fba3 2302 	umull	r2, r3, r3, r2
 8003422:	08db      	lsrs	r3, r3, #3
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <LTC6813_Chk_Start_Error+0x128>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	dc03      	bgt.n	8003438 <LTC6813_Chk_Start_Error+0xfc>
		   Error_Flag = Error_Flag | 0x04;	// Флаг ошибки Cells voltage
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16 ; i++){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	dde4      	ble.n	800340e <LTC6813_Chk_Start_Error+0xd2>
	   }
	}
	return Error_Flag;
 8003444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	24000331 	.word	0x24000331
 8003454:	24000238 	.word	0x24000238
 8003458:	10624dd3 	.word	0x10624dd3
 800345c:	51eb851f 	.word	0x51eb851f
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	24000998 	.word	0x24000998

08003468 <wakeup_idle>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e00b      	b.n	8003490 <wakeup_idle+0x28>
	{
	   cs_low(CS_PIN);
 8003478:	200a      	movs	r0, #10
 800347a:	f002 fbcd 	bl	8005c18 <cs_low>
	   spi_read_byte(0xff);//Guarantees the isoSPI will be in ready mode
 800347e:	20ff      	movs	r0, #255	; 0xff
 8003480:	f002 fc59 	bl	8005d36 <spi_read_byte>
	   cs_high(CS_PIN);
 8003484:	200a      	movs	r0, #10
 8003486:	f002 fbd7 	bl	8005c38 <cs_high>
	for (int i =0; i<total_ic; i++)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	dbef      	blt.n	8003478 <wakeup_idle+0x10>
	}
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<total_ic; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e00f      	b.n	80034d2 <wakeup_sleep+0x30>
	{
	   cs_low(CS_PIN);
 80034b2:	200a      	movs	r0, #10
 80034b4:	f002 fbb0 	bl	8005c18 <cs_low>
	   delay_u(300); // Guarantees the LTC681x will be in standby
 80034b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034bc:	f002 fbcc 	bl	8005c58 <delay_u>
	   cs_high(CS_PIN);
 80034c0:	200a      	movs	r0, #10
 80034c2:	f002 fbb9 	bl	8005c38 <cs_high>
	   delay_u(10);
 80034c6:	200a      	movs	r0, #10
 80034c8:	f002 fbc6 	bl	8005c58 <delay_u>
	for (int i =0; i<total_ic; i++)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbeb      	blt.n	80034b2 <wakeup_sleep+0x10>
	}
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
//	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80034f8:	f107 0308 	add.w	r3, r7, #8
 80034fc:	4619      	mov	r1, r3
 80034fe:	2002      	movs	r0, #2
 8003500:	f000 f976 	bl	80037f0 <pec15_calc>
 8003504:	4603      	mov	r3, r0
 8003506:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	b29b      	uxth	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8003512:	89fb      	ldrh	r3, [r7, #14]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 8003518:	200a      	movs	r0, #10
 800351a:	f002 fb7d 	bl	8005c18 <cs_low>
	spi_write_array(4,cmd);
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4619      	mov	r1, r3
 8003524:	2004      	movs	r0, #4
 8003526:	f002 fbb3 	bl	8005c90 <spi_write_array>
	cs_high(CS_PIN);
 800352a:	200a      	movs	r0, #10
 800352c:	f002 fb84 	bl	8005c38 <cs_high>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8003546:	2306      	movs	r3, #6
 8003548:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3304      	adds	r3, #4
 8003552:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8003554:	7efb      	ldrb	r3, [r7, #27]
 8003556:	4618      	mov	r0, r3
 8003558:	f00c ffca 	bl	80104f0 <malloc>
 800355c:	4603      	mov	r3, r0
 800355e:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3301      	adds	r3, #1
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	7852      	ldrb	r2, [r2, #1]
 8003570:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	2002      	movs	r0, #2
 8003576:	f000 f93b 	bl	80037f0 <pec15_calc>
 800357a:	4603      	mov	r3, r0
 800357c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800357e:	8a7b      	ldrh	r3, [r7, #18]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	b29a      	uxth	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3302      	adds	r3, #2
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3303      	adds	r3, #3
 8003590:	8a7a      	ldrh	r2, [r7, #18]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8003596:	2304      	movs	r3, #4
 8003598:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	77bb      	strb	r3, [r7, #30]
 800359e:	e042      	b.n	8003626 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	777b      	strb	r3, [r7, #29]
 80035a4:	e016      	b.n	80035d4 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80035a6:	7fbb      	ldrb	r3, [r7, #30]
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	461a      	mov	r2, r3
 80035b4:	7f7b      	ldrb	r3, [r7, #29]
 80035b6:	4413      	add	r3, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	441a      	add	r2, r3
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	440b      	add	r3, r1
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
 80035ca:	3301      	adds	r3, #1
 80035cc:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80035ce:	7f7b      	ldrb	r3, [r7, #29]
 80035d0:	3301      	adds	r3, #1
 80035d2:	777b      	strb	r3, [r7, #29]
 80035d4:	7f7a      	ldrb	r2, [r7, #29]
 80035d6:	7f3b      	ldrb	r3, [r7, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3e4      	bcc.n	80035a6 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	441a      	add	r2, r3
 80035ee:	7f3b      	ldrb	r3, [r7, #28]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f8fc 	bl	80037f0 <pec15_calc>
 80035f8:	4603      	mov	r3, r0
 80035fa:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80035fc:	8a3b      	ldrh	r3, [r7, #16]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b299      	uxth	r1, r3
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4413      	add	r3, r2
 8003608:	b2ca      	uxtb	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 800360c:	7ffb      	ldrb	r3, [r7, #31]
 800360e:	3301      	adds	r3, #1
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	8a3a      	ldrh	r2, [r7, #16]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	3302      	adds	r3, #2
 800361e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8003620:	7fbb      	ldrb	r3, [r7, #30]
 8003622:	3b01      	subs	r3, #1
 8003624:	77bb      	strb	r3, [r7, #30]
 8003626:	7fbb      	ldrb	r3, [r7, #30]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1b9      	bne.n	80035a0 <write_68+0x68>
	}

	cs_low(CS_PIN);
 800362c:	200a      	movs	r0, #10
 800362e:	f002 faf3 	bl	8005c18 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8003632:	7efb      	ldrb	r3, [r7, #27]
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	4618      	mov	r0, r3
 8003638:	f002 fb2a 	bl	8005c90 <spi_write_array>
	cs_high(CS_PIN);
 800363c:	200a      	movs	r0, #10
 800363e:	f002 fafb 	bl	8005c38 <cs_high>

	free(cmd);
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f00c ff5c 	bl	8010500 <free>
}
 8003648:	bf00      	nop
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <read_68>:
/* Generic function to write 68xx commands and read data. Function calculated PEC for tx_cmd data */
int8_t read_68( uint8_t total_ic, // Number of ICs in the system
				uint8_t tx_cmd[2], // The command to be transmitted
				uint8_t *rx_data // Data to be read
				)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0c8      	sub	sp, #288	; 0x120
 8003654:	af00      	add	r7, sp, #0
 8003656:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800365a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800365e:	6019      	str	r1, [r3, #0]
 8003660:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003664:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800366e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003672:	4602      	mov	r2, r0
 8003674:	701a      	strb	r2, [r3, #0]
	const uint8_t BYTES_IN_REG = 8;
 8003676:	2308      	movs	r3, #8
 8003678:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	uint8_t cmd[4];
	uint8_t data[256];
	int8_t pec_error = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uint16_t cmd_pec;
	uint16_t data_pec;
	uint16_t received_pec;

	cmd[0] = tx_cmd[0];
 8003682:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003686:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
	cmd[1] = tx_cmd[1];
 8003692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003696:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
	cmd_pec = pec15_calc(2, cmd);
 80036a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036a6:	4619      	mov	r1, r3
 80036a8:	2002      	movs	r0, #2
 80036aa:	f000 f8a1 	bl	80037f0 <pec15_calc>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80036b4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
	cmd[3] = (uint8_t)(cmd_pec);
 80036c2:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	cs_low(CS_PIN);
 80036cc:	200a      	movs	r0, #10
 80036ce:	f002 faa3 	bl	8005c18 <cs_low>
	spi_write_read(cmd, 4, data, (BYTES_IN_REG*total_ic));         //Transmits the command and reads the configuration data of all ICs on the daisy chain into rx_data[] array
 80036d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036d6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80036da:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	fb12 f303 	smulbb	r3, r2, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f107 0210 	add.w	r2, r7, #16
 80036ea:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80036ee:	2104      	movs	r1, #4
 80036f0:	f002 faeb 	bl	8005cca <spi_write_read>
	cs_high(CS_PIN);
 80036f4:	200a      	movs	r0, #10
 80036f6:	f002 fa9f 	bl	8005c38 <cs_high>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //Executes for each LTC681x in the daisy chain and packs the data
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003700:	e066      	b.n	80037d0 <read_68+0x180>
	{																//into the rx_data array as well as check the received data for any bit errors
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8003702:	2300      	movs	r3, #0
 8003704:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003708:	e020      	b.n	800374c <read_68+0xfc>
		{
			rx_data[(current_ic*8)+current_byte] = data[current_byte + (current_ic*BYTES_IN_REG)];
 800370a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800370e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003712:	f897 111c 	ldrb.w	r1, [r7, #284]	; 0x11c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	441a      	add	r2, r3
 800371c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003720:	00d9      	lsls	r1, r3, #3
 8003722:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003726:	440b      	add	r3, r1
 8003728:	4619      	mov	r1, r3
 800372a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800372e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	440b      	add	r3, r1
 8003736:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800373a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800373e:	5c8a      	ldrb	r2, [r1, r2]
 8003740:	701a      	strb	r2, [r3, #0]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8003742:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003746:	3301      	adds	r3, #1
 8003748:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800374c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003750:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8003754:	429a      	cmp	r2, r3
 8003756:	d3d8      	bcc.n	800370a <read_68+0xba>
		}

		received_pec = (rx_data[(current_ic*8)+6]<<8) + rx_data[(current_ic*8)+7];
 8003758:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	3306      	adds	r3, #6
 8003760:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003764:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4413      	add	r3, r2
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	b29a      	uxth	r2, r3
 8003774:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	3307      	adds	r3, #7
 800377c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8003780:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8003784:	6809      	ldr	r1, [r1, #0]
 8003786:	440b      	add	r3, r1
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4413      	add	r3, r2
 800378e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
		data_pec = pec15_calc(6, &rx_data[current_ic*8]);
 8003792:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	461a      	mov	r2, r3
 800379a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800379e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4413      	add	r3, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	2006      	movs	r0, #6
 80037aa:	f000 f821 	bl	80037f0 <pec15_calc>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

		if (received_pec != data_pec)
 80037b4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80037b8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80037bc:	429a      	cmp	r2, r3
 80037be:	d002      	beq.n	80037c6 <read_68+0x176>
		{
		  pec_error = -1;
 80037c0:	23ff      	movs	r3, #255	; 0xff
 80037c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //Executes for each LTC681x in the daisy chain and packs the data
 80037c6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80037ca:	3301      	adds	r3, #1
 80037cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80037d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037d4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80037d8:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d38f      	bcc.n	8003702 <read_68+0xb2>
		}
	}

	return(pec_error);
 80037e2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 80037fc:	2310      	movs	r3, #16
 80037fe:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8003800:	2300      	movs	r3, #0
 8003802:	737b      	strb	r3, [r7, #13]
 8003804:	e019      	b.n	800383a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	09db      	lsrs	r3, r3, #7
 800380a:	b29a      	uxth	r2, r3
 800380c:	7b7b      	ldrb	r3, [r7, #13]
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	440b      	add	r3, r1
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4053      	eors	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	817b      	strh	r3, [r7, #10]
//		#ifdef MBED
			remainder = (remainder<<8)^crc15Table[addr];
 800381e:	89fb      	ldrh	r3, [r7, #14]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	b21a      	sxth	r2, r3
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	490b      	ldr	r1, [pc, #44]	; (8003854 <pec15_calc+0x64>)
 8003828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800382c:	b21b      	sxth	r3, r3
 800382e:	4053      	eors	r3, r2
 8003830:	b21b      	sxth	r3, r3
 8003832:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	3301      	adds	r3, #1
 8003838:	737b      	strb	r3, [r7, #13]
 800383a:	7b7a      	ldrb	r2, [r7, #13]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3e1      	bcc.n	8003806 <pec15_calc+0x16>
//		#else
//			remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//		#endif
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	b29b      	uxth	r3, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	08010a24 	.word	0x08010a24

08003858 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b0c4      	sub	sp, #272	; 0x110
 800385c:	af00      	add	r7, sp, #0
 800385e:	4602      	mov	r2, r0
 8003860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800386e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003872:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8003874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003878:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003888:	2300      	movs	r3, #0
 800388a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800388e:	e048      	b.n	8003922 <LTC681x_wrcfg+0xca>
	{
		if (ic->isospi_reverse == false)
 8003890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003894:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <LTC681x_wrcfg+0x5a>
		{
			c_ic = current_ic;
 80038a8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80038ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80038b0:	e00b      	b.n	80038ca <LTC681x_wrcfg+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80038b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80038ba:	781a      	ldrb	r2, [r3, #0]
 80038bc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80038d0:	e01e      	b.n	8003910 <LTC681x_wrcfg+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80038d2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80038d6:	22e8      	movs	r2, #232	; 0xe8
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80038e0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	18d1      	adds	r1, r2, r3
 80038e8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80038ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80038f0:	5c89      	ldrb	r1, [r1, r2]
 80038f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80038f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80038fa:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80038fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003900:	3301      	adds	r3, #1
 8003902:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8003906:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800390a:	3301      	adds	r3, #1
 800390c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8003910:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003914:	2b05      	cmp	r3, #5
 8003916:	d9dc      	bls.n	80038d2 <LTC681x_wrcfg+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003918:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800391c:	3301      	adds	r3, #1
 800391e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003926:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800392a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3ad      	bcc.n	8003890 <LTC681x_wrcfg+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8003934:	f107 0208 	add.w	r2, r7, #8
 8003938:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800393c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003940:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fdf6 	bl	8003538 <write_68>
}
 800394c:	bf00      	nop
 800394e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <LTC681x_wrcfgb>:

/* Write the LTC681x CFGRB */
void LTC681x_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b0c4      	sub	sp, #272	; 0x110
 800395a:	af00      	add	r7, sp, #0
 800395c:	4602      	mov	r2, r0
 800395e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003962:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003966:	6019      	str	r1, [r3, #0]
 8003968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800396c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003970:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 8003972:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003976:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003986:	2300      	movs	r3, #0
 8003988:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800398c:	e049      	b.n	8003a22 <LTC681x_wrcfgb+0xcc>
	{
		if (ic->isospi_reverse == false)
 800398e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003992:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800399c:	f083 0301 	eor.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <LTC681x_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 80039a6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80039aa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80039ae:	e00b      	b.n	80039c8 <LTC681x_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80039b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039b4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80039ce:	e01f      	b.n	8003a10 <LTC681x_wrcfgb+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 80039d0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80039d4:	22e8      	movs	r2, #232	; 0xe8
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80039de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	18d1      	adds	r1, r2, r3
 80039e6:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80039ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80039ee:	440a      	add	r2, r1
 80039f0:	7bd1      	ldrb	r1, [r2, #15]
 80039f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80039f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80039fa:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80039fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003a00:	3301      	adds	r3, #1
 8003a02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8003a06:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8003a10:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d9db      	bls.n	80039d0 <LTC681x_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003a18:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8003a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a26:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003a2a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3ac      	bcc.n	800398e <LTC681x_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8003a34:	f107 0208 	add.w	r2, r7, #8
 8003a38:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fd76 	bl	8003538 <write_68>
}
 8003a4c:	bf00      	nop
 8003a4e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <LTC681x_rdcfg>:

/* Read the LTC681x CFGA */
int8_t LTC681x_rdcfg(uint8_t total_ic, //Number of ICs in the system
                     cell_asic ic[] // A two dimensional array that the function stores the read configuration data.
                    )
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b0c6      	sub	sp, #280	; 0x118
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a6c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a70:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2]= {0x00 , 0x02};
 8003a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a76:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t read_buffer[256];
	int8_t pec_error = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint16_t data_pec;
	uint16_t calc_pec;
	uint8_t c_ic = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	pec_error = read_68(total_ic, cmd, read_buffer);
 8003a86:	f107 0208 	add.w	r2, r7, #8
 8003a8a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003a8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a92:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fdd9 	bl	8003650 <read_68>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003aaa:	e091      	b.n	8003bd0 <LTC681x_rdcfg+0x17a>
	{
		if (ic->isospi_reverse == false)
 8003aac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ab0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <LTC681x_rdcfg+0x78>
		{
			c_ic = current_ic;
 8003ac4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003ac8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003acc:	e00b      	b.n	8003ae6 <LTC681x_rdcfg+0x90>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8003ace:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ad2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		}

		for (int byte=0; byte<8; byte++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003aec:	e020      	b.n	8003b30 <LTC681x_rdcfg+0xda>
		{
			ic[c_ic].config.rx_data[byte] = read_buffer[byte+(8*current_ic)];
 8003aee:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003af2:	00da      	lsls	r2, r3, #3
 8003af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003af8:	4413      	add	r3, r2
 8003afa:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003afe:	21e8      	movs	r1, #232	; 0xe8
 8003b00:	fb01 f202 	mul.w	r2, r1, r2
 8003b04:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003b08:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8003b0c:	6809      	ldr	r1, [r1, #0]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003b14:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003b18:	5cc9      	ldrb	r1, [r1, r3]
 8003b1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b1e:	4413      	add	r3, r2
 8003b20:	3306      	adds	r3, #6
 8003b22:	460a      	mov	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
		for (int byte=0; byte<8; byte++)
 8003b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	ddda      	ble.n	8003aee <LTC681x_rdcfg+0x98>
		}

		calc_pec = pec15_calc(6,&read_buffer[8*current_ic]);
 8003b38:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	f107 0208 	add.w	r2, r7, #8
 8003b42:	4413      	add	r3, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	2006      	movs	r0, #6
 8003b48:	f7ff fe52 	bl	80037f0 <pec15_calc>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		data_pec = read_buffer[7+(8*current_ic)] | (read_buffer[6+(8*current_ic)]<<8);
 8003b52:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3307      	adds	r3, #7
 8003b5a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003b5e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	b21a      	sxth	r2, r3
 8003b66:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	3306      	adds	r3, #6
 8003b6e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003b72:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b21b      	sxth	r3, r3
 8003b80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		if (calc_pec != data_pec )
 8003b84:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8003b88:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d00d      	beq.n	8003bac <LTC681x_rdcfg+0x156>
		{
			ic[c_ic].config.rx_pec_match = 1;
 8003b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b94:	22e8      	movs	r2, #232	; 0xe8
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003b9e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	739a      	strb	r2, [r3, #14]
 8003baa:	e00c      	b.n	8003bc6 <LTC681x_rdcfg+0x170>
		}
		else ic[c_ic].config.rx_pec_match = 0;
 8003bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bb0:	22e8      	movs	r2, #232	; 0xe8
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003bba:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	739a      	strb	r2, [r3, #14]
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003bc6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003bd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003bd4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003bd8:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f4ff af64 	bcc.w	8003aac <LTC681x_rdcfg+0x56>
	}
	LTC681x_check_pec(total_ic,CFGR_LT,ic);
 8003be4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003be8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003bec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003bf0:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8003bf4:	7810      	ldrb	r0, [r2, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	f000 feb5 	bl	8004968 <LTC681x_check_pec>

	return(pec_error);
 8003bfe:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LTC681x_rdcfgb>:

/* Reads the LTC681x CFGB */
int8_t LTC681x_rdcfgb(uint8_t total_ic, //Number of ICs in the system
                      cell_asic ic[] // A two dimensional array that the function stores the read configuration data.
                     )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0c6      	sub	sp, #280	; 0x118
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c1c:	6019      	str	r1, [r3, #0]
 8003c1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c22:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003c26:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2]= {0x00 , 0x26};
 8003c28:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8003c2c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t read_buffer[256];
	int8_t pec_error = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint16_t data_pec;
	uint16_t calc_pec;
	uint8_t c_ic = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	pec_error = read_68(total_ic, cmd, read_buffer);
 8003c3c:	f107 0208 	add.w	r2, r7, #8
 8003c40:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003c44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c48:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fcfe 	bl	8003650 <read_68>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003c60:	e091      	b.n	8003d86 <LTC681x_rdcfgb+0x17a>
	{
		if (ic->isospi_reverse == false)
 8003c62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <LTC681x_rdcfgb+0x78>
		{
			c_ic = current_ic;
 8003c7a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003c7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003c82:	e00b      	b.n	8003c9c <LTC681x_rdcfgb+0x90>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8003c84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c88:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		}

		for (int byte=0; byte<8; byte++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ca2:	e020      	b.n	8003ce6 <LTC681x_rdcfgb+0xda>
		{
			ic[c_ic].configb.rx_data[byte] = read_buffer[byte+(8*current_ic)];
 8003ca4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003ca8:	00da      	lsls	r2, r3, #3
 8003caa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cae:	4413      	add	r3, r2
 8003cb0:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003cb4:	21e8      	movs	r1, #232	; 0xe8
 8003cb6:	fb01 f202 	mul.w	r2, r1, r2
 8003cba:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003cbe:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8003cc2:	6809      	ldr	r1, [r1, #0]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003cca:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003cce:	5cc9      	ldrb	r1, [r1, r3]
 8003cd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3315      	adds	r3, #21
 8003cd8:	460a      	mov	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]
		for (int byte=0; byte<8; byte++)
 8003cdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	ddda      	ble.n	8003ca4 <LTC681x_rdcfgb+0x98>
		}

		calc_pec = pec15_calc(6,&read_buffer[8*current_ic]);
 8003cee:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	f107 0208 	add.w	r2, r7, #8
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	2006      	movs	r0, #6
 8003cfe:	f7ff fd77 	bl	80037f0 <pec15_calc>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		data_pec = read_buffer[7+(8*current_ic)] | (read_buffer[6+(8*current_ic)]<<8);
 8003d08:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	3307      	adds	r3, #7
 8003d10:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d14:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	3306      	adds	r3, #6
 8003d24:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003d28:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		if (calc_pec != data_pec )
 8003d3a:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8003d3e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d00d      	beq.n	8003d62 <LTC681x_rdcfgb+0x156>
		{
			ic[c_ic].configb.rx_pec_match = 1;
 8003d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d4a:	22e8      	movs	r2, #232	; 0xe8
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d54:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	775a      	strb	r2, [r3, #29]
 8003d60:	e00c      	b.n	8003d7c <LTC681x_rdcfgb+0x170>
		}
		else ic[c_ic].configb.rx_pec_match = 0;
 8003d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d66:	22e8      	movs	r2, #232	; 0xe8
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d70:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	2200      	movs	r2, #0
 8003d7a:	775a      	strb	r2, [r3, #29]
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8003d7c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003d80:	3301      	adds	r3, #1
 8003d82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003d86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d8a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003d8e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	f4ff af64 	bcc.w	8003c62 <LTC681x_rdcfgb+0x56>
	}
	LTC681x_check_pec(total_ic,CFGRB,ic);
 8003d9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003da2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003da6:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8003daa:	7810      	ldrb	r0, [r2, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2104      	movs	r1, #4
 8003db0:	f000 fdda 	bl	8004968 <LTC681x_check_pec>

	return(pec_error);
 8003db4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	71bb      	strb	r3, [r7, #6]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	105b      	asrs	r3, r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	3302      	adds	r3, #2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	01db      	lsls	r3, r3, #7
 8003dec:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8003dee:	79bb      	ldrb	r3, [r7, #6]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4413      	add	r3, r2
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	797b      	ldrb	r3, [r7, #5]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3360      	adds	r3, #96	; 0x60
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fb6a 	bl	80034e4 <cmd_68>
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured
				  )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460a      	mov	r2, r1
 8003e22:	71fb      	strb	r3, [r7, #7]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	105b      	asrs	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	3304      	adds	r3, #4
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	01db      	lsls	r3, r3, #7
 8003e40:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG ;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	79bb      	ldrb	r3, [r7, #6]
 8003e46:	4413      	add	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	3360      	adds	r3, #96	; 0x60
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	727b      	strb	r3, [r7, #9]

	cmd_68(cmd);
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb45 	bl	80034e4 <cmd_68>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8003e62:	b5b0      	push	{r4, r5, r7, lr}
 8003e64:	b088      	sub	sp, #32
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	4603      	mov	r3, r0
 8003e6a:	603a      	str	r2, [r7, #0]
 8003e6c:	71fb      	strb	r3, [r7, #7]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8003e7a:	79bb      	ldrb	r3, [r7, #6]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00c fb36 	bl	80104f0 <malloc>
 8003e84:	4603      	mov	r3, r0
 8003e86:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d14b      	bne.n	8003f26 <LTC681x_rdcv+0xc4>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003e8e:	2301      	movs	r3, #1
 8003e90:	757b      	strb	r3, [r7, #21]
 8003e92:	e041      	b.n	8003f18 <LTC681x_rdcv+0xb6>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8003e94:	79b9      	ldrb	r1, [r7, #6]
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fbbb 	bl	8004616 <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e031      	b.n	8003f0a <LTC681x_rdcv+0xa8>
			{
			if (ic->isospi_reverse == false)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003eac:	f083 0301 	eor.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <LTC681x_rdcv+0x5a>
			{
			  c_ic = current_ic;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	75bb      	strb	r3, [r7, #22]
 8003eba:	e006      	b.n	8003eca <LTC681x_rdcv+0x68>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	79ba      	ldrb	r2, [r7, #6]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 8003ece:	7dbb      	ldrb	r3, [r7, #22]
 8003ed0:	22e8      	movs	r2, #232	; 0xe8
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8003eda:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8003ede:	7dbb      	ldrb	r3, [r7, #22]
 8003ee0:	22e8      	movs	r2, #232	; 0xe8
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8003eea:	3342      	adds	r3, #66	; 0x42
 8003eec:	7d79      	ldrb	r1, [r7, #21]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f000 fc83 	bl	80047fe <parse_cells>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	4413      	add	r3, r2
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3301      	adds	r3, #1
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	dbc9      	blt.n	8003ea6 <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003f12:	7d7b      	ldrb	r3, [r7, #21]
 8003f14:	3301      	adds	r3, #1
 8003f16:	757b      	strb	r3, [r7, #21]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8003f1e:	7d7a      	ldrb	r2, [r7, #21]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d9b7      	bls.n	8003e94 <LTC681x_rdcv+0x32>
 8003f24:	e043      	b.n	8003fae <LTC681x_rdcv+0x14c>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8003f26:	79b9      	ldrb	r1, [r7, #6]
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb72 	bl	8004616 <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e036      	b.n	8003fa6 <LTC681x_rdcv+0x144>
		{
			if (ic->isospi_reverse == false)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8003f3e:	f083 0301 	eor.w	r3, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <LTC681x_rdcv+0xec>
			{
			c_ic = current_ic;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	75bb      	strb	r3, [r7, #22]
 8003f4c:	e006      	b.n	8003f5c <LTC681x_rdcv+0xfa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	79ba      	ldrb	r2, [r7, #6]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	b2d8      	uxtb	r0, r3
 8003f60:	7dbb      	ldrb	r3, [r7, #22]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 8003f6a:	7dbb      	ldrb	r3, [r7, #22]
 8003f6c:	22e8      	movs	r2, #232	; 0xe8
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8003f76:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8003f7a:	7dbb      	ldrb	r3, [r7, #22]
 8003f7c:	22e8      	movs	r2, #232	; 0xe8
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8003f86:	3342      	adds	r3, #66	; 0x42
 8003f88:	79f9      	ldrb	r1, [r7, #7]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	4622      	mov	r2, r4
 8003f90:	f000 fc35 	bl	80047fe <parse_cells>
 8003f94:	4603      	mov	r3, r0
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	79bb      	ldrb	r3, [r7, #6]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	dbc4      	blt.n	8003f38 <LTC681x_rdcv+0xd6>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8003fae:	79bb      	ldrb	r3, [r7, #6]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fcd7 	bl	8004968 <LTC681x_check_pec>
	free(cell_data);
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f00c faa0 	bl	8010500 <free>

	return(pec_error);
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}

08003fca <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//The number of ICs in the system
                     cell_asic *ic//A two dimensional array of the gpio voltage codes.
                    )
{
 8003fca:	b590      	push	{r4, r7, lr}
 8003fcc:	b089      	sub	sp, #36	; 0x24
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	603a      	str	r2, [r7, #0]
 8003fd4:	71fb      	strb	r3, [r7, #7]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	71bb      	strb	r3, [r7, #6]
	uint8_t *data;
	int8_t pec_error = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic =0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75bb      	strb	r3, [r7, #22]
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8003fe2:	79bb      	ldrb	r3, [r7, #6]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00c fa82 	bl	80104f0 <malloc>
 8003fec:	4603      	mov	r3, r0
 8003fee:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d147      	bne.n	8004086 <LTC681x_rdaux+0xbc>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	757b      	strb	r3, [r7, #21]
 8003ffa:	e03d      	b.n	8004078 <LTC681x_rdaux+0xae>
		{
			LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8003ffc:	79b9      	ldrb	r1, [r7, #6]
 8003ffe:	7d7b      	ldrb	r3, [r7, #21]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fb65 	bl	80046d2 <LTC681x_rdaux_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e02d      	b.n	800406a <LTC681x_rdaux+0xa0>
			{
				if (ic->isospi_reverse == false)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8004014:	f083 0301 	eor.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <LTC681x_rdaux+0x5a>
				{
				  c_ic = current_ic;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	75bb      	strb	r3, [r7, #22]
 8004022:	e006      	b.n	8004032 <LTC681x_rdaux+0x68>
				}
				else
				{
				  c_ic = total_ic - current_ic - 1;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	79ba      	ldrb	r2, [r7, #6]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	75bb      	strb	r3, [r7, #22]
				}
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	b2d8      	uxtb	r0, r3
										&ic[c_ic].aux.a_codes[0],
 8004036:	7dbb      	ldrb	r3, [r7, #22]
 8004038:	22e8      	movs	r2, #232	; 0xe8
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8004042:	f103 0448 	add.w	r4, r3, #72	; 0x48
										&ic[c_ic].aux.pec_match[0]);
 8004046:	7dbb      	ldrb	r3, [r7, #22]
 8004048:	22e8      	movs	r2, #232	; 0xe8
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4413      	add	r3, r2
				pec_error = parse_cells(current_ic,gpio_reg, data,
 8004052:	335a      	adds	r3, #90	; 0x5a
 8004054:	7d79      	ldrb	r1, [r7, #21]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4623      	mov	r3, r4
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	f000 fbcf 	bl	80047fe <parse_cells>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3301      	adds	r3, #1
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	79bb      	ldrb	r3, [r7, #6]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	dbcd      	blt.n	800400e <LTC681x_rdaux+0x44>
		for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8004072:	7d7b      	ldrb	r3, [r7, #21]
 8004074:	3301      	adds	r3, #1
 8004076:	757b      	strb	r3, [r7, #21]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800407e:	7d7a      	ldrb	r2, [r7, #21]
 8004080:	429a      	cmp	r2, r3
 8004082:	d9bb      	bls.n	8003ffc <LTC681x_rdaux+0x32>
 8004084:	e03a      	b.n	80040fc <LTC681x_rdaux+0x132>
			}
		}
	}
	else
	{
		LTC681x_rdaux_reg(reg, total_ic, data);
 8004086:	79b9      	ldrb	r1, [r7, #6]
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fb20 	bl	80046d2 <LTC681x_rdaux_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e02d      	b.n	80040f4 <LTC681x_rdaux+0x12a>
		{
			if (ic->isospi_reverse == false)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800409e:	f083 0301 	eor.w	r3, r3, #1
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <LTC681x_rdaux+0xe4>
			{
			c_ic = current_ic;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	75bb      	strb	r3, [r7, #22]
 80040ac:	e006      	b.n	80040bc <LTC681x_rdaux+0xf2>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	79ba      	ldrb	r2, [r7, #6]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = parse_cells(current_ic,reg, data,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	b2d8      	uxtb	r0, r3
								  &ic[c_ic].aux.a_codes[0],
 80040c0:	7dbb      	ldrb	r3, [r7, #22]
 80040c2:	22e8      	movs	r2, #232	; 0xe8
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80040cc:	f103 0448 	add.w	r4, r3, #72	; 0x48
								  &ic[c_ic].aux.pec_match[0]);
 80040d0:	7dbb      	ldrb	r3, [r7, #22]
 80040d2:	22e8      	movs	r2, #232	; 0xe8
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4413      	add	r3, r2
			pec_error = parse_cells(current_ic,reg, data,
 80040dc:	335a      	adds	r3, #90	; 0x5a
 80040de:	79f9      	ldrb	r1, [r7, #7]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	4623      	mov	r3, r4
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	f000 fb8a 	bl	80047fe <parse_cells>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	79bb      	ldrb	r3, [r7, #6]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dbcd      	blt.n	8004098 <LTC681x_rdaux+0xce>
		}
	}
	LTC681x_check_pec(total_ic,AUX,ic);
 80040fc:	79bb      	ldrb	r3, [r7, #6]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fc30 	bl	8004968 <LTC681x_check_pec>
	free(data);
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f00c f9f9 	bl	8010500 <free>

	return (pec_error);
 800410e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}

0800411a <LTC681x_rdstat>:
int8_t LTC681x_rdstat(uint8_t reg, //Determines which Stat  register is read back.
                      uint8_t total_ic,//The number of ICs in the system
                      cell_asic *ic //A two dimensional array of the stat codes.
                     )

{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	; 0x28
 800411e:	af00      	add	r7, sp, #0
 8004120:	4603      	mov	r3, r0
 8004122:	603a      	str	r2, [r7, #0]
 8004124:	71fb      	strb	r3, [r7, #7]
 8004126:	460b      	mov	r3, r1
 8004128:	71bb      	strb	r3, [r7, #6]
	const uint8_t BYT_IN_REG = 6;
 800412a:	2306      	movs	r3, #6
 800412c:	76bb      	strb	r3, [r7, #26]
	const uint8_t STAT_IN_REG = 3;
 800412e:	2303      	movs	r3, #3
 8004130:	767b      	strb	r3, [r7, #25]
	uint8_t *data;
	uint8_t data_counter = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pec_error = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t parsed_stat;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t c_ic = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	data = (uint8_t *) malloc((12*total_ic)*sizeof(uint8_t));
 8004144:	79ba      	ldrb	r2, [r7, #6]
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f00c f9ce 	bl	80104f0 <malloc>
 8004154:	4603      	mov	r3, r0
 8004156:	617b      	str	r3, [r7, #20]

	if (reg == 0)
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 813d 	bne.w	80043da <LTC681x_rdstat+0x2c0>
	{
		for (uint8_t stat_reg = 1; stat_reg< 3; stat_reg++)                      //Executes once for each of the LTC681x stat voltage registers
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004166:	e132      	b.n	80043ce <LTC681x_rdstat+0x2b4>
		{
			data_counter = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LTC681x_rdstat_reg(stat_reg, total_ic,data);                            //Reads the raw status register data into the data[] array
 800416e:	79b9      	ldrb	r1, [r7, #6]
 8004170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fafe 	bl	8004778 <LTC681x_rdstat_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // Executes for every LTC681x in the daisy chain
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e119      	b.n	80043b8 <LTC681x_rdstat+0x29e>
			{																		// current_ic is used as the IC counter
				if (ic->isospi_reverse == false)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <LTC681x_rdstat+0x84>
				{
					c_ic = current_ic;
 8004194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004198:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800419c:	e007      	b.n	80041ae <LTC681x_rdstat+0x94>
				}
				else
				{
					c_ic = total_ic - current_ic - 1;
 800419e:	79ba      	ldrb	r2, [r7, #6]
 80041a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				}

				if (stat_reg ==1)
 80041ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d132      	bne.n	800421c <LTC681x_rdstat+0x102>
				{
					for (uint8_t current_stat = 0; current_stat< STAT_IN_REG; current_stat++) // This loop parses the read back data into Status registers,
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041bc:	e028      	b.n	8004210 <LTC681x_rdstat+0xf6>
					{																		 // it loops once for each of the 3 stat codes in the register
						parsed_stat = data[data_counter] + (data[data_counter+1]<<8);       //Each stat codes is received as two bytes and is combined to create the parsed status code
 80041be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ce:	3301      	adds	r3, #1
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	440b      	add	r3, r1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4413      	add	r3, r2
 80041de:	827b      	strh	r3, [r7, #18]
						ic[c_ic].stat.stat_codes[current_stat] = parsed_stat;
 80041e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041e4:	22e8      	movs	r2, #232	; 0xe8
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	441a      	add	r2, r3
 80041ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041f2:	332c      	adds	r3, #44	; 0x2c
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	8a7a      	ldrh	r2, [r7, #18]
 80041fa:	80da      	strh	r2, [r3, #6]
						data_counter=data_counter+2;                                       //Because stat codes are two bytes the data counter
 80041fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004200:	3302      	adds	r3, #2
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for (uint8_t current_stat = 0; current_stat< STAT_IN_REG; current_stat++) // This loop parses the read back data into Status registers,
 8004206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800420a:	3301      	adds	r3, #1
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004210:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8004214:	7e7b      	ldrb	r3, [r7, #25]
 8004216:	429a      	cmp	r2, r3
 8004218:	d3d1      	bcc.n	80041be <LTC681x_rdstat+0xa4>
 800421a:	e081      	b.n	8004320 <LTC681x_rdstat+0x206>
					}
				}
				else if (stat_reg == 2)
 800421c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004220:	2b02      	cmp	r3, #2
 8004222:	d17d      	bne.n	8004320 <LTC681x_rdstat+0x206>
				{
					parsed_stat = data[data_counter] + (data[data_counter+1]<<8);          //Each stat is received as two bytes and is combined to create the parsed status code
 8004224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b29a      	uxth	r2, r3
 8004230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004234:	3301      	adds	r3, #1
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	440b      	add	r3, r1
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	b29b      	uxth	r3, r3
 8004242:	4413      	add	r3, r2
 8004244:	827b      	strh	r3, [r7, #18]
					data_counter = data_counter +2;
 8004246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800424a:	3302      	adds	r3, #2
 800424c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					ic[c_ic].stat.stat_codes[3] = parsed_stat;
 8004250:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004254:	22e8      	movs	r2, #232	; 0xe8
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	4413      	add	r3, r2
 800425e:	8a7a      	ldrh	r2, [r7, #18]
 8004260:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
					ic[c_ic].stat.flags[0] = data[data_counter++];
 8004264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800426e:	461a      	mov	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	441a      	add	r2, r3
 8004274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004278:	21e8      	movs	r1, #232	; 0xe8
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	440b      	add	r3, r1
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
					ic[c_ic].stat.flags[1] = data[data_counter++];
 8004288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004292:	461a      	mov	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	441a      	add	r2, r3
 8004298:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800429c:	21e8      	movs	r1, #232	; 0xe8
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	440b      	add	r3, r1
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
					ic[c_ic].stat.flags[2] = data[data_counter++];
 80042ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80042b6:	461a      	mov	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	441a      	add	r2, r3
 80042bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042c0:	21e8      	movs	r1, #232	; 0xe8
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	6839      	ldr	r1, [r7, #0]
 80042c8:	440b      	add	r3, r1
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
					ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02)>>1;
 80042d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	105b      	asrs	r3, r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042e2:	21e8      	movs	r1, #232	; 0xe8
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	440b      	add	r3, r1
 80042ec:	f002 0201 	and.w	r2, r2, #1
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
					ic[c_ic].stat.thsd[0] = data[data_counter++] & 0x01;
 80042f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004300:	461a      	mov	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800430c:	21e8      	movs	r1, #232	; 0xe8
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	440b      	add	r3, r1
 8004316:	f002 0201 	and.w	r2, r2, #1
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				}

				received_pec = (data[data_counter]<<8)+ data[data_counter+1];        //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	b29a      	uxth	r2, r3
 8004330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004334:	3301      	adds	r3, #1
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	440b      	add	r3, r1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4413      	add	r3, r2
 8004340:	823b      	strh	r3, [r7, #16]
																					//after the 6 status data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8004342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	461a      	mov	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	441a      	add	r2, r3
 800434e:	7ebb      	ldrb	r3, [r7, #26]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fa4c 	bl	80037f0 <pec15_calc>
 8004358:	4603      	mov	r3, r0
 800435a:	81fb      	strh	r3, [r7, #14]

				if (received_pec != data_pec)
 800435c:	8a3a      	ldrh	r2, [r7, #16]
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	429a      	cmp	r2, r3
 8004362:	d011      	beq.n	8004388 <LTC681x_rdstat+0x26e>
				{
					pec_error = -1;                         //The pec_error variable is simply set negative if any PEC errors
 8004364:	23ff      	movs	r3, #255	; 0xff
 8004366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					ic[c_ic].stat.pec_match[stat_reg-1]=1;  //are detected in the received serial data
 800436a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800436e:	22e8      	movs	r2, #232	; 0xe8
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	441a      	add	r2, r3
 8004378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800437c:	3b01      	subs	r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	2201      	movs	r2, #1
 8004382:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004386:	e00d      	b.n	80043a4 <LTC681x_rdstat+0x28a>

				}
				else
				{
					ic[c_ic].stat.pec_match[stat_reg-1]=0;
 8004388:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800438c:	22e8      	movs	r2, #232	; 0xe8
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	441a      	add	r2, r3
 8004396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800439a:	3b01      	subs	r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
				}

				data_counter=data_counter+2;    //Because the transmitted PEC code is 2 bytes long the data_counter
 80043a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043a8:	3302      	adds	r3, #2
 80043aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // Executes for every LTC681x in the daisy chain
 80043ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b2:	3301      	adds	r3, #1
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80043bc:	79bb      	ldrb	r3, [r7, #6]
 80043be:	429a      	cmp	r2, r3
 80043c0:	f4ff aee0 	bcc.w	8004184 <LTC681x_rdstat+0x6a>
		for (uint8_t stat_reg = 1; stat_reg< 3; stat_reg++)                      //Executes once for each of the LTC681x stat voltage registers
 80043c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043c8:	3301      	adds	r3, #1
 80043ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80043ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f67f aec8 	bls.w	8004168 <LTC681x_rdstat+0x4e>
 80043d8:	e10e      	b.n	80045f8 <LTC681x_rdstat+0x4de>
			}
		}
	}
	else
	{
		LTC681x_rdstat_reg(reg, total_ic, data);
 80043da:	79b9      	ldrb	r1, [r7, #6]
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f9c9 	bl	8004778 <LTC681x_rdstat_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // Executes for every LTC681x in the daisy chain
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	e100      	b.n	80045ee <LTC681x_rdstat+0x4d4>
		{																		  // current_ic is used as an IC counter
			if (ic->isospi_reverse == false)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80043f2:	f083 0301 	eor.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <LTC681x_rdstat+0x2ea>
			{
			c_ic = current_ic;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004402:	e007      	b.n	8004414 <LTC681x_rdstat+0x2fa>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	79ba      	ldrb	r2, [r7, #6]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			if (reg ==1)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d12d      	bne.n	8004476 <LTC681x_rdstat+0x35c>
			{
				for (uint8_t current_stat = 0; current_stat< STAT_IN_REG; current_stat++) // This loop parses the read back data into Status voltages, it
 800441a:	2300      	movs	r3, #0
 800441c:	76fb      	strb	r3, [r7, #27]
 800441e:	e025      	b.n	800446c <LTC681x_rdstat+0x352>
				{																		  // loops once for each of the 3 stat codes in the register

					parsed_stat = data[data_counter] + (data[data_counter+1]<<8);           //Each stat codes is received as two bytes and is combined to
 8004420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b29a      	uxth	r2, r3
 800442c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004430:	3301      	adds	r3, #1
 8004432:	6979      	ldr	r1, [r7, #20]
 8004434:	440b      	add	r3, r1
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	b29b      	uxth	r3, r3
 800443e:	4413      	add	r3, r2
 8004440:	827b      	strh	r3, [r7, #18]
																							// create the parsed stat code

					ic[c_ic].stat.stat_codes[current_stat] = parsed_stat;
 8004442:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004446:	22e8      	movs	r2, #232	; 0xe8
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	441a      	add	r2, r3
 8004450:	7efb      	ldrb	r3, [r7, #27]
 8004452:	332c      	adds	r3, #44	; 0x2c
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	8a7a      	ldrh	r2, [r7, #18]
 800445a:	80da      	strh	r2, [r3, #6]
					data_counter=data_counter+2;                     //Because stat codes are two bytes the data counter
 800445c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004460:	3302      	adds	r3, #2
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for (uint8_t current_stat = 0; current_stat< STAT_IN_REG; current_stat++) // This loop parses the read back data into Status voltages, it
 8004466:	7efb      	ldrb	r3, [r7, #27]
 8004468:	3301      	adds	r3, #1
 800446a:	76fb      	strb	r3, [r7, #27]
 800446c:	7efa      	ldrb	r2, [r7, #27]
 800446e:	7e7b      	ldrb	r3, [r7, #25]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3d5      	bcc.n	8004420 <LTC681x_rdstat+0x306>
 8004474:	e082      	b.n	800457c <LTC681x_rdstat+0x462>
																	//must increment by two for each parsed stat code
				}
			}
			else if (reg == 2)
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d17f      	bne.n	800457c <LTC681x_rdstat+0x462>
			{
				parsed_stat = data[data_counter++] + (data[data_counter++]<<8); //Each stat codes is received as two bytes and is combined to
 800447c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004486:	461a      	mov	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b29a      	uxth	r2, r3
 8004490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004494:	1c59      	adds	r1, r3, #1
 8004496:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800449a:	4619      	mov	r1, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	440b      	add	r3, r1
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	827b      	strh	r3, [r7, #18]
				ic[c_ic].stat.stat_codes[3] = parsed_stat;
 80044ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80044b0:	22e8      	movs	r2, #232	; 0xe8
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	4413      	add	r3, r2
 80044ba:	8a7a      	ldrh	r2, [r7, #18]
 80044bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
				ic[c_ic].stat.flags[0] = data[data_counter++];
 80044c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80044ca:	461a      	mov	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	441a      	add	r2, r3
 80044d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80044d4:	21e8      	movs	r1, #232	; 0xe8
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	440b      	add	r3, r1
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				ic[c_ic].stat.flags[1] = data[data_counter++];
 80044e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80044ee:	461a      	mov	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	441a      	add	r2, r3
 80044f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80044f8:	21e8      	movs	r1, #232	; 0xe8
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	440b      	add	r3, r1
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
				ic[c_ic].stat.flags[2] = data[data_counter++];
 8004508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8004512:	461a      	mov	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	441a      	add	r2, r3
 8004518:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800451c:	21e8      	movs	r1, #232	; 0xe8
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	6839      	ldr	r1, [r7, #0]
 8004524:	440b      	add	r3, r1
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02)>>1;
 800452c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	105b      	asrs	r3, r3, #1
 8004538:	b2da      	uxtb	r2, r3
 800453a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800453e:	21e8      	movs	r1, #232	; 0xe8
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	440b      	add	r3, r1
 8004548:	f002 0201 	and.w	r2, r2, #1
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
				ic[c_ic].stat.thsd[0] = data[data_counter++] & 0x01;
 8004552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800455c:	461a      	mov	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004568:	21e8      	movs	r1, #232	; 0xe8
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	6839      	ldr	r1, [r7, #0]
 8004570:	440b      	add	r3, r1
 8004572:	f002 0201 	and.w	r2, r2, #1
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			}

			received_pec = (data[data_counter]<<8)+ data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800457c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4413      	add	r3, r2
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	b29a      	uxth	r2, r3
 800458c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004590:	3301      	adds	r3, #1
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	440b      	add	r3, r1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	4413      	add	r3, r2
 800459c:	823b      	strh	r3, [r7, #16]
																		  //after the 6 status data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	461a      	mov	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	441a      	add	r2, r3
 80045a8:	7ebb      	ldrb	r3, [r7, #26]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff f91f 	bl	80037f0 <pec15_calc>
 80045b2:	4603      	mov	r3, r0
 80045b4:	81fb      	strh	r3, [r7, #14]
			if (received_pec != data_pec)
 80045b6:	8a3a      	ldrh	r2, [r7, #16]
 80045b8:	89fb      	ldrh	r3, [r7, #14]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d00f      	beq.n	80045de <LTC681x_rdstat+0x4c4>
			{
				pec_error = -1;                  //The pec_error variable is simply set negative if any PEC errors
 80045be:	23ff      	movs	r3, #255	; 0xff
 80045c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				ic[c_ic].stat.pec_match[reg-1]=1;
 80045c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80045c8:	22e8      	movs	r2, #232	; 0xe8
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	441a      	add	r2, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			}

			data_counter=data_counter+2;
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e2:	3302      	adds	r3, #2
 80045e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // Executes for every LTC681x in the daisy chain
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	79bb      	ldrb	r3, [r7, #6]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	f6ff aefa 	blt.w	80043ec <LTC681x_rdstat+0x2d2>
		}
	}
	LTC681x_check_pec(total_ic,STAT,ic);
 80045f8:	79bb      	ldrb	r3, [r7, #6]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	2103      	movs	r1, #3
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f9b2 	bl	8004968 <LTC681x_check_pec>

	free(data);
 8004604:	6978      	ldr	r0, [r7, #20]
 8004606:	f00b ff7b 	bl	8010500 <free>

	return (pec_error);
 800460a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	603a      	str	r2, [r7, #0]
 8004620:	71fb      	strb	r3, [r7, #7]
 8004622:	460b      	mov	r3, r1
 8004624:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8004626:	2308      	movs	r3, #8
 8004628:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d104      	bne.n	800463a <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8004630:	2304      	movs	r3, #4
 8004632:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004634:	2300      	movs	r3, #0
 8004636:	723b      	strb	r3, [r7, #8]
 8004638:	e026      	b.n	8004688 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d104      	bne.n	800464a <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8004640:	2306      	movs	r3, #6
 8004642:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004644:	2300      	movs	r3, #0
 8004646:	723b      	strb	r3, [r7, #8]
 8004648:	e01e      	b.n	8004688 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d104      	bne.n	800465a <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8004650:	2308      	movs	r3, #8
 8004652:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004654:	2300      	movs	r3, #0
 8004656:	723b      	strb	r3, [r7, #8]
 8004658:	e016      	b.n	8004688 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d104      	bne.n	800466a <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8004660:	230a      	movs	r3, #10
 8004662:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004664:	2300      	movs	r3, #0
 8004666:	723b      	strb	r3, [r7, #8]
 8004668:	e00e      	b.n	8004688 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d104      	bne.n	800467a <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8004670:	2309      	movs	r3, #9
 8004672:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004674:	2300      	movs	r3, #0
 8004676:	723b      	strb	r3, [r7, #8]
 8004678:	e006      	b.n	8004688 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d103      	bne.n	8004688 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8004680:	230b      	movs	r3, #11
 8004682:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004684:	2300      	movs	r3, #0
 8004686:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	4619      	mov	r1, r3
 800468e:	2002      	movs	r0, #2
 8004690:	f7ff f8ae 	bl	80037f0 <pec15_calc>
 8004694:	4603      	mov	r3, r0
 8004696:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8004698:	89bb      	ldrh	r3, [r7, #12]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80046a2:	89bb      	ldrh	r3, [r7, #12]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80046a8:	200a      	movs	r0, #10
 80046aa:	f001 fab5 	bl	8005c18 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	79bb      	ldrb	r3, [r7, #6]
 80046b2:	fb12 f303 	smulbb	r3, r2, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f107 0008 	add.w	r0, r7, #8
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	2104      	movs	r1, #4
 80046c0:	f001 fb03 	bl	8005cca <spi_write_read>
	cs_high(CS_PIN);
 80046c4:	200a      	movs	r0, #10
 80046c6:	f001 fab7 	bl	8005c38 <cs_high>
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	603a      	str	r2, [r7, #0]
 80046dc:	71fb      	strb	r3, [r7, #7]
 80046de:	460b      	mov	r3, r1
 80046e0:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80046e2:	2308      	movs	r3, #8
 80046e4:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d104      	bne.n	80046f6 <LTC681x_rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 80046ec:	230c      	movs	r3, #12
 80046ee:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80046f0:	2300      	movs	r3, #0
 80046f2:	723b      	strb	r3, [r7, #8]
 80046f4:	e01b      	b.n	800472e <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d104      	bne.n	8004706 <LTC681x_rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 80046fc:	230e      	movs	r3, #14
 80046fe:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004700:	2300      	movs	r3, #0
 8004702:	723b      	strb	r3, [r7, #8]
 8004704:	e013      	b.n	800472e <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d104      	bne.n	8004716 <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 800470c:	230d      	movs	r3, #13
 800470e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004710:	2300      	movs	r3, #0
 8004712:	723b      	strb	r3, [r7, #8]
 8004714:	e00b      	b.n	800472e <LTC681x_rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d104      	bne.n	8004726 <LTC681x_rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 800471c:	230f      	movs	r3, #15
 800471e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004720:	2300      	movs	r3, #0
 8004722:	723b      	strb	r3, [r7, #8]
 8004724:	e003      	b.n	800472e <LTC681x_rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8004726:	230c      	movs	r3, #12
 8004728:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	2002      	movs	r0, #2
 8004736:	f7ff f85b 	bl	80037f0 <pec15_calc>
 800473a:	4603      	mov	r3, r0
 800473c:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800473e:	89bb      	ldrh	r3, [r7, #12]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	b29b      	uxth	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8004748:	89bb      	ldrh	r3, [r7, #12]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 800474e:	200a      	movs	r0, #10
 8004750:	f001 fa62 	bl	8005c18 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	79bb      	ldrb	r3, [r7, #6]
 8004758:	fb12 f303 	smulbb	r3, r2, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f107 0008 	add.w	r0, r7, #8
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	2104      	movs	r1, #4
 8004766:	f001 fab0 	bl	8005cca <spi_write_read>
	cs_high(CS_PIN);
 800476a:	200a      	movs	r0, #10
 800476c:	f001 fa64 	bl	8005c38 <cs_high>
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <LTC681x_rdstat_reg>:
*/
void LTC681x_rdstat_reg(uint8_t reg, //Determines which stat register is read back
                        uint8_t total_ic, //The number of ICs in the system
                        uint8_t *data //Array of the unparsed stat codes
                       )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	603a      	str	r2, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
 8004784:	460b      	mov	r3, r1
 8004786:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8004788:	2308      	movs	r3, #8
 800478a:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back status group A
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d104      	bne.n	800479c <LTC681x_rdstat_reg+0x24>
	{
		cmd[1] = 0x10;
 8004792:	2310      	movs	r3, #16
 8004794:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8004796:	2300      	movs	r3, #0
 8004798:	723b      	strb	r3, [r7, #8]
 800479a:	e00b      	b.n	80047b4 <LTC681x_rdstat_reg+0x3c>
	}
	else if (reg == 2)  //Read back status group B
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d104      	bne.n	80047ac <LTC681x_rdstat_reg+0x34>
	{
		cmd[1] = 0x12;
 80047a2:	2312      	movs	r3, #18
 80047a4:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80047a6:	2300      	movs	r3, #0
 80047a8:	723b      	strb	r3, [r7, #8]
 80047aa:	e003      	b.n	80047b4 <LTC681x_rdstat_reg+0x3c>
	}

	else          //Read back status group A
	{
		cmd[1] = 0x10;
 80047ac:	2310      	movs	r3, #16
 80047ae:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80047b0:	2300      	movs	r3, #0
 80047b2:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	4619      	mov	r1, r3
 80047ba:	2002      	movs	r0, #2
 80047bc:	f7ff f818 	bl	80037f0 <pec15_calc>
 80047c0:	4603      	mov	r3, r0
 80047c2:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80047c4:	89bb      	ldrh	r3, [r7, #12]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80047ce:	89bb      	ldrh	r3, [r7, #12]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	72fb      	strb	r3, [r7, #11]

	cs_low(CS_PIN);
 80047d4:	200a      	movs	r0, #10
 80047d6:	f001 fa1f 	bl	8005c18 <cs_low>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	79bb      	ldrb	r3, [r7, #6]
 80047de:	fb12 f303 	smulbb	r3, r2, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f107 0008 	add.w	r0, r7, #8
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	2104      	movs	r1, #4
 80047ec:	f001 fa6d 	bl	8005cca <spi_write_read>
	cs_high(CS_PIN);
 80047f0:	200a      	movs	r0, #10
 80047f2:	f001 fa21 	bl	8005c38 <cs_high>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b088      	sub	sp, #32
 8004802:	af00      	add	r7, sp, #0
 8004804:	60ba      	str	r2, [r7, #8]
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	4603      	mov	r3, r0
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	460b      	mov	r3, r1
 800480e:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8004810:	2306      	movs	r3, #6
 8004812:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8004814:	2303      	movs	r3, #3
 8004816:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004822:	2300      	movs	r3, #0
 8004824:	777b      	strb	r3, [r7, #29]
 8004826:	e020      	b.n	800486a <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8004828:	7fbb      	ldrb	r3, [r7, #30]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b29a      	uxth	r2, r3
 8004832:	7fbb      	ldrb	r3, [r7, #30]
 8004834:	3301      	adds	r3, #1
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	440b      	add	r3, r1
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	b29b      	uxth	r3, r3
 8004842:	4413      	add	r3, r2
 8004844:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8004846:	7f7a      	ldrb	r2, [r7, #29]
 8004848:	7bbb      	ldrb	r3, [r7, #14]
 800484a:	3b01      	subs	r3, #1
 800484c:	7ef9      	ldrb	r1, [r7, #27]
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	8aba      	ldrh	r2, [r7, #20]
 800485c:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 800485e:	7fbb      	ldrb	r3, [r7, #30]
 8004860:	3302      	adds	r3, #2
 8004862:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004864:	7f7b      	ldrb	r3, [r7, #29]
 8004866:	3301      	adds	r3, #1
 8004868:	777b      	strb	r3, [r7, #29]
 800486a:	7f7a      	ldrb	r2, [r7, #29]
 800486c:	7efb      	ldrb	r3, [r7, #27]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3da      	bcc.n	8004828 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004872:	7fbb      	ldrb	r3, [r7, #30]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	4413      	add	r3, r2
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	b21a      	sxth	r2, r3
 800487e:	7fbb      	ldrb	r3, [r7, #30]
 8004880:	3301      	adds	r3, #1
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	440b      	add	r3, r1
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b21b      	sxth	r3, r3
 800488a:	4313      	orrs	r3, r2
 800488c:	b21b      	sxth	r3, r3
 800488e:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	461a      	mov	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	441a      	add	r2, r3
 800489a:	7f3b      	ldrb	r3, [r7, #28]
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe ffa6 	bl	80037f0 <pec15_calc>
 80048a4:	4603      	mov	r3, r0
 80048a6:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 80048a8:	8b3a      	ldrh	r2, [r7, #24]
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d008      	beq.n	80048c2 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	4413      	add	r3, r2
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e005      	b.n	80048ce <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c8:	4413      	add	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 80048ce:	7fbb      	ldrb	r3, [r7, #30]
 80048d0:	3302      	adds	r3, #2
 80048d2:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 80048d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80048f2:	2307      	movs	r3, #7
 80048f4:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80048f6:	2314      	movs	r3, #20
 80048f8:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	2002      	movs	r0, #2
 8004900:	f7fe ff76 	bl	80037f0 <pec15_calc>
 8004904:	4603      	mov	r3, r0
 8004906:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	71fb      	strb	r3, [r7, #7]

	cs_low(CS_PIN);
 8004918:	200a      	movs	r0, #10
 800491a:	f001 f97d 	bl	8005c18 <cs_low>
	spi_write_array(4,cmd);
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	4619      	mov	r1, r3
 8004922:	2004      	movs	r0, #4
 8004924:	f001 f9b4 	bl	8005c90 <spi_write_array>
	while ((counter<200000)&&(finished == 0))
 8004928:	e00d      	b.n	8004946 <LTC681x_pollAdc+0x66>
	{
		current_time = spi_read_byte(0xff);
 800492a:	20ff      	movs	r0, #255	; 0xff
 800492c:	f001 fa03 	bl	8005d36 <spi_read_byte>
 8004930:	4603      	mov	r3, r0
 8004932:	72bb      	strb	r3, [r7, #10]
		if (current_time>0)
 8004934:	7abb      	ldrb	r3, [r7, #10]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <LTC681x_pollAdc+0x60>
		{
			finished = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	72fb      	strb	r3, [r7, #11]
 800493e:	e002      	b.n	8004946 <LTC681x_pollAdc+0x66>
		}
		else
		{
			counter = counter + 10;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	330a      	adds	r3, #10
 8004944:	60fb      	str	r3, [r7, #12]
	while ((counter<200000)&&(finished == 0))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a06      	ldr	r2, [pc, #24]	; (8004964 <LTC681x_pollAdc+0x84>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d802      	bhi.n	8004954 <LTC681x_pollAdc+0x74>
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ea      	beq.n	800492a <LTC681x_pollAdc+0x4a>
		}
	}
	cs_high(CS_PIN);
 8004954:	200a      	movs	r0, #10
 8004956:	f001 f96f 	bl	8005c38 <cs_high>

	return(counter);
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	00030d3f 	.word	0x00030d3f

08004968 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8004968:	b480      	push	{r7}
 800496a:	b08b      	sub	sp, #44	; 0x2c
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	603a      	str	r2, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
 8004974:	460b      	mov	r3, r1
 8004976:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8004978:	79bb      	ldrb	r3, [r7, #6]
 800497a:	2b04      	cmp	r3, #4
 800497c:	f200 8191 	bhi.w	8004ca2 <LTC681x_check_pec+0x33a>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <LTC681x_check_pec+0x20>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	0800499d 	.word	0x0800499d
 800498c:	08004a99 	.word	0x08004a99
 8004990:	08004b4b 	.word	0x08004b4b
 8004994:	08004bf7 	.word	0x08004bf7
 8004998:	08004a1b 	.word	0x08004a1b
	{
		case CFGR_LT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800499c:	2300      	movs	r3, #0
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	e036      	b.n	8004a10 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	22e8      	movs	r2, #232	; 0xe8
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	22e8      	movs	r2, #232	; 0xe8
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	4413      	add	r3, r2
 80049be:	7b9b      	ldrb	r3, [r3, #14]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	20e8      	movs	r0, #232	; 0xe8
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	6838      	ldr	r0, [r7, #0]
 80049cc:	4403      	add	r3, r0
 80049ce:	440a      	add	r2, r1
 80049d0:	b292      	uxth	r2, r2
 80049d2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	22e8      	movs	r2, #232	; 0xe8
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	22e8      	movs	r2, #232	; 0xe8
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	7b9b      	ldrb	r3, [r3, #14]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	20e8      	movs	r0, #232	; 0xe8
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	6838      	ldr	r0, [r7, #0]
 8004a00:	4403      	add	r3, r0
 8004a02:	440a      	add	r2, r1
 8004a04:	b292      	uxth	r2, r2
 8004a06:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	429a      	cmp	r2, r3
 8004a16:	dbc4      	blt.n	80049a2 <LTC681x_check_pec+0x3a>
		  }
		break;
 8004a18:	e144      	b.n	8004ca4 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]
 8004a1e:	e036      	b.n	8004a8e <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	22e8      	movs	r2, #232	; 0xe8
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	22e8      	movs	r2, #232	; 0xe8
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	7f5b      	ldrb	r3, [r3, #29]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	20e8      	movs	r0, #232	; 0xe8
 8004a44:	fb00 f303 	mul.w	r3, r0, r3
 8004a48:	6838      	ldr	r0, [r7, #0]
 8004a4a:	4403      	add	r3, r0
 8004a4c:	440a      	add	r2, r1
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	22e8      	movs	r2, #232	; 0xe8
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	22e8      	movs	r2, #232	; 0xe8
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	7f5b      	ldrb	r3, [r3, #29]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	20e8      	movs	r0, #232	; 0xe8
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	6838      	ldr	r0, [r7, #0]
 8004a7e:	4403      	add	r3, r0
 8004a80:	440a      	add	r2, r1
 8004a82:	b292      	uxth	r2, r2
 8004a84:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	623b      	str	r3, [r7, #32]
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	dbc4      	blt.n	8004a20 <LTC681x_check_pec+0xb8>
		  }
		break;
 8004a96:	e105      	b.n	8004ca4 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	e050      	b.n	8004b40 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e043      	b.n	8004b2c <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	22e8      	movs	r2, #232	; 0xe8
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	22e8      	movs	r2, #232	; 0xe8
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	441a      	add	r2, r3
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3342      	adds	r3, #66	; 0x42
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	20e8      	movs	r0, #232	; 0xe8
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	6838      	ldr	r0, [r7, #0]
 8004ad4:	4403      	add	r3, r0
 8004ad6:	440a      	add	r2, r1
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	22e8      	movs	r2, #232	; 0xe8
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	441a      	add	r2, r3
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3360      	adds	r3, #96	; 0x60
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	4413      	add	r3, r2
 8004af2:	8899      	ldrh	r1, [r3, #4]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	22e8      	movs	r2, #232	; 0xe8
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	441a      	add	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	3342      	adds	r3, #66	; 0x42
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	20e8      	movs	r0, #232	; 0xe8
 8004b0e:	fb00 f202 	mul.w	r2, r0, r2
 8004b12:	6838      	ldr	r0, [r7, #0]
 8004b14:	4402      	add	r2, r0
 8004b16:	440b      	add	r3, r1
 8004b18:	b299      	uxth	r1, r3
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	3360      	adds	r3, #96	; 0x60
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	460a      	mov	r2, r1
 8004b24:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004b32:	461a      	mov	r2, r3
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4293      	cmp	r3, r2
 8004b38:	dbb4      	blt.n	8004aa4 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dbaa      	blt.n	8004a9e <LTC681x_check_pec+0x136>
			}
		  }
		break;
 8004b48:	e0ac      	b.n	8004ca4 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e04d      	b.n	8004bec <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e040      	b.n	8004bd8 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	22e8      	movs	r2, #232	; 0xe8
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	22e8      	movs	r2, #232	; 0xe8
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	441a      	add	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	335a      	adds	r3, #90	; 0x5a
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	20e8      	movs	r0, #232	; 0xe8
 8004b80:	fb00 f303 	mul.w	r3, r0, r3
 8004b84:	6838      	ldr	r0, [r7, #0]
 8004b86:	4403      	add	r3, r0
 8004b88:	440a      	add	r2, r1
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	22e8      	movs	r2, #232	; 0xe8
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	3268      	adds	r2, #104	; 0x68
 8004ba0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	22e8      	movs	r2, #232	; 0xe8
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	441a      	add	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	335a      	adds	r3, #90	; 0x5a
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	20e8      	movs	r0, #232	; 0xe8
 8004bbe:	fb00 f303 	mul.w	r3, r0, r3
 8004bc2:	6838      	ldr	r0, [r7, #0]
 8004bc4:	4403      	add	r3, r0
 8004bc6:	440a      	add	r2, r1
 8004bc8:	b291      	uxth	r1, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	3268      	adds	r2, #104	; 0x68
 8004bce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004bde:	461a      	mov	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4293      	cmp	r3, r2
 8004be4:	dbb7      	blt.n	8004b56 <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	3301      	adds	r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	dbad      	blt.n	8004b50 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8004bf4:	e056      	b.n	8004ca4 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e04d      	b.n	8004c98 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	e040      	b.n	8004c84 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22e8      	movs	r2, #232	; 0xe8
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22e8      	movs	r2, #232	; 0xe8
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	336b      	adds	r3, #107	; 0x6b
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	20e8      	movs	r0, #232	; 0xe8
 8004c2c:	fb00 f303 	mul.w	r3, r0, r3
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	4403      	add	r3, r0
 8004c34:	440a      	add	r2, r1
 8004c36:	b292      	uxth	r2, r2
 8004c38:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	22e8      	movs	r2, #232	; 0xe8
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	326c      	adds	r2, #108	; 0x6c
 8004c4c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22e8      	movs	r2, #232	; 0xe8
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4413      	add	r3, r2
 8004c60:	336b      	adds	r3, #107	; 0x6b
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	20e8      	movs	r0, #232	; 0xe8
 8004c6a:	fb00 f303 	mul.w	r3, r0, r3
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	4403      	add	r3, r0
 8004c72:	440a      	add	r2, r1
 8004c74:	b291      	uxth	r1, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	326c      	adds	r2, #108	; 0x6c
 8004c7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	dbb7      	blt.n	8004c02 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dbad      	blt.n	8004bfc <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8004ca0:	e000      	b.n	8004ca4 <LTC681x_check_pec+0x33c>
		default:
		break;
 8004ca2:	bf00      	nop
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	372c      	adds	r7, #44	; 0x2c
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e051      	b.n	8004d66 <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	22e8      	movs	r2, #232	; 0xe8
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	22e8      	movs	r2, #232	; 0xe8
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	4413      	add	r3, r2
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e00e      	b.n	8004d0a <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	22e8      	movs	r2, #232	; 0xe8
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3360      	adds	r3, #96	; 0x60
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	2200      	movs	r2, #0
 8004d02:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3301      	adds	r3, #1
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	dded      	ble.n	8004cec <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e00d      	b.n	8004d32 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	22e8      	movs	r2, #232	; 0xe8
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	3268      	adds	r2, #104	; 0x68
 8004d26:	2100      	movs	r1, #0
 8004d28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	ddee      	ble.n	8004d16 <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	e00d      	b.n	8004d5a <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	22e8      	movs	r2, #232	; 0xe8
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4413      	add	r3, r2
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	326c      	adds	r2, #108	; 0x6c
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	ddee      	ble.n	8004d3e <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3301      	adds	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	dba9      	blt.n	8004cc2 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e015      	b.n	8004dba <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	e00c      	b.n	8004dae <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	22e8      	movs	r2, #232	; 0xe8
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	441a      	add	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4413      	add	r3, r2
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	3301      	adds	r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	ddef      	ble.n	8004d94 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	3301      	adds	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3e5      	bcc.n	8004d8e <LTC681x_init_cfg+0x12>
		}
	}
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <LTC681x_set_cfgr_refon>:
	LTC681x_set_cfgr_ov(nIC, ic, ov);
}

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8004de0:	79bb      	ldrb	r3, [r7, #6]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <LTC681x_set_cfgr_refon+0x3a>
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	22e8      	movs	r2, #232	; 0xe8
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	781a      	ldrb	r2, [r3, #0]
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	21e8      	movs	r1, #232	; 0xe8
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	440b      	add	r3, r1
 8004e00:	f042 0204 	orr.w	r2, r2, #4
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8004e08:	e010      	b.n	8004e2c <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	22e8      	movs	r2, #232	; 0xe8
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	21e8      	movs	r1, #232	; 0xe8
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	440b      	add	r3, r1
 8004e24:	f022 0204 	bic.w	r2, r2, #4
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8004e48:	79bb      	ldrb	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <LTC681x_set_cfgr_adcopt+0x3a>
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	22e8      	movs	r2, #232	; 0xe8
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	21e8      	movs	r1, #232	; 0xe8
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	440b      	add	r3, r1
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8004e70:	e010      	b.n	8004e94 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	22e8      	movs	r2, #232	; 0xe8
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	21e8      	movs	r1, #232	; 0xe8
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e03b      	b.n	8004f2c <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <LTC681x_set_cfgr_gpio+0x52>
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	22e8      	movs	r2, #232	; 0xe8
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	4413      	add	r3, r2
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b25a      	sxtb	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b259      	sxtb	r1, r3
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	22e8      	movs	r2, #232	; 0xe8
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	4413      	add	r3, r2
 8004eec:	b2ca      	uxtb	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e019      	b.n	8004f26 <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	22e8      	movs	r2, #232	; 0xe8
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b25a      	sxtb	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3303      	adds	r3, #3
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	4013      	ands	r3, r2
 8004f14:	b259      	sxtb	r1, r3
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	22e8      	movs	r2, #232	; 0xe8
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	b2ca      	uxtb	r2, r1
 8004f24:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	ddc0      	ble.n	8004eb4 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e039      	b.n	8004fc8 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <LTC681x_set_cfgr_dis+0x50>
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	22e8      	movs	r2, #232	; 0xe8
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	791b      	ldrb	r3, [r3, #4]
 8004f6e:	b25a      	sxtb	r2, r3
 8004f70:	2101      	movs	r1, #1
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	b259      	sxtb	r1, r3
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	22e8      	movs	r2, #232	; 0xe8
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	b2ca      	uxtb	r2, r1
 8004f8c:	711a      	strb	r2, [r3, #4]
 8004f8e:	e018      	b.n	8004fc2 <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	22e8      	movs	r2, #232	; 0xe8
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	b25b      	sxtb	r3, r3
 8004fae:	4013      	ands	r3, r2
 8004fb0:	b259      	sxtb	r1, r3
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	22e8      	movs	r2, #232	; 0xe8
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b2ca      	uxtb	r2, r1
 8004fc0:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	ddc2      	ble.n	8004f54 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e03a      	b.n	800504a <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <LTC681x_set_cfgr_dis+0xd2>
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	22e8      	movs	r2, #232	; 0xe8
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	795b      	ldrb	r3, [r3, #5]
 8004ff0:	b25a      	sxtb	r2, r3
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b259      	sxtb	r1, r3
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	22e8      	movs	r2, #232	; 0xe8
 8005004:	fb02 f303 	mul.w	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	4413      	add	r3, r2
 800500c:	b2ca      	uxtb	r2, r1
 800500e:	715a      	strb	r2, [r3, #5]
 8005010:	e018      	b.n	8005044 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	22e8      	movs	r2, #232	; 0xe8
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	795b      	ldrb	r3, [r3, #5]
 8005020:	b25a      	sxtb	r2, r3
 8005022:	2101      	movs	r1, #1
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	b25b      	sxtb	r3, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	b25b      	sxtb	r3, r3
 8005030:	4013      	ands	r3, r2
 8005032:	b259      	sxtb	r1, r3
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	22e8      	movs	r2, #232	; 0xe8
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	4413      	add	r3, r2
 8005040:	b2ca      	uxtb	r2, r1
 8005042:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3301      	adds	r3, #1
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b03      	cmp	r3, #3
 800504e:	ddc1      	ble.n	8004fd4 <LTC681x_set_cfgr_dis+0x94>
	}
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e03b      	b.n	80050ea <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <LTC681x_set_cfgr_dcto+0x52>
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	22e8      	movs	r2, #232	; 0xe8
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	795b      	ldrb	r3, [r3, #5]
 800508c:	b25a      	sxtb	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3304      	adds	r3, #4
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	b25b      	sxtb	r3, r3
 800509a:	4313      	orrs	r3, r2
 800509c:	b259      	sxtb	r1, r3
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	22e8      	movs	r2, #232	; 0xe8
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	b2ca      	uxtb	r2, r1
 80050ac:	715a      	strb	r2, [r3, #5]
 80050ae:	e019      	b.n	80050e4 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	22e8      	movs	r2, #232	; 0xe8
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	4413      	add	r3, r2
 80050bc:	795b      	ldrb	r3, [r3, #5]
 80050be:	b25a      	sxtb	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	b25b      	sxtb	r3, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	b25b      	sxtb	r3, r3
 80050d0:	4013      	ands	r3, r2
 80050d2:	b259      	sxtb	r1, r3
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	22e8      	movs	r2, #232	; 0xe8
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	4413      	add	r3, r2
 80050e0:	b2ca      	uxtb	r2, r1
 80050e2:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3301      	adds	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	ddc0      	ble.n	8005072 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	4603      	mov	r3, r0
 8005106:	6039      	str	r1, [r7, #0]
 8005108:	71fb      	strb	r3, [r7, #7]
 800510a:	4613      	mov	r3, r2
 800510c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 800510e:	88bb      	ldrh	r3, [r7, #4]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	22e8      	movs	r2, #232	; 0xe8
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	4413      	add	r3, r2
 8005124:	89fa      	ldrh	r2, [r7, #14]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	22e8      	movs	r2, #232	; 0xe8
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4413      	add	r3, r2
 8005136:	789a      	ldrb	r2, [r3, #2]
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	21e8      	movs	r1, #232	; 0xe8
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	440b      	add	r3, r1
 8005144:	f022 020f 	bic.w	r2, r2, #15
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	22e8      	movs	r2, #232	; 0xe8
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	4413      	add	r3, r2
 8005158:	789b      	ldrb	r3, [r3, #2]
 800515a:	b25a      	sxtb	r2, r3
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	b25b      	sxtb	r3, r3
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	b25b      	sxtb	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b259      	sxtb	r1, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	22e8      	movs	r2, #232	; 0xe8
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	b2ca      	uxtb	r2, r1
 800517c:	709a      	strb	r2, [r3, #2]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	6039      	str	r1, [r7, #0]
 8005194:	71fb      	strb	r3, [r7, #7]
 8005196:	4613      	mov	r3, r2
 8005198:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 800519a:	88bb      	ldrh	r3, [r7, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	b299      	uxth	r1, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	22e8      	movs	r2, #232	; 0xe8
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	b2ca      	uxtb	r2, r1
 80051b4:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	22e8      	movs	r2, #232	; 0xe8
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	4413      	add	r3, r2
 80051c2:	789a      	ldrb	r2, [r3, #2]
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	21e8      	movs	r1, #232	; 0xe8
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	440b      	add	r3, r1
 80051d0:	f002 020f 	and.w	r2, r2, #15
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	22e8      	movs	r2, #232	; 0xe8
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	4413      	add	r3, r2
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	b25a      	sxtb	r2, r3
 80051e8:	89fb      	ldrh	r3, [r7, #14]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b259      	sxtb	r1, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	22e8      	movs	r2, #232	; 0xe8
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	b2ca      	uxtb	r2, r1
 8005200:	709a      	strb	r2, [r3, #2]
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <spi_write>:
//  SPI.end();
}

// Write a data byte using the SPI hardware
void spi_write(int8_t  data)  // Byte to be written to SPI port
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
	uint8_t data_tx = data;
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	73fb      	strb	r3, [r7, #15]
//	HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&LTC_SPI_PORT, &data_tx, 1, HAL_MAX_DELAY);
 800521e:	f107 010f 	add.w	r1, r7, #15
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	2201      	movs	r2, #1
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <spi_write+0x28>)
 800522a:	f007 fb4b 	bl	800c8c4 <HAL_SPI_Transmit>
#else
  SPI.transfer(data);
#endif
*/

}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	24000480 	.word	0x24000480

0800523c <spi_read>:

// Read and write a data byte using the SPI hardware
// Returns the data byte read
int8_t spi_read(int8_t data) //!The data byte to be written
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af02      	add	r7, sp, #8
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
	int8_t receivedVal[1] = {0};
 8005246:	2300      	movs	r3, #0
 8005248:	733b      	strb	r3, [r7, #12]
	uint8_t data_tx = data;
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	72fb      	strb	r3, [r7, #11]
//	  HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_RESET);
	  HAL_SPI_TransmitReceive (&LTC_SPI_PORT,&data_tx, (uint8_t*)receivedVal, 1, HAL_MAX_DELAY);
 800524e:	f107 020c 	add.w	r2, r7, #12
 8005252:	f107 010b 	add.w	r1, r7, #11
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2301      	movs	r3, #1
 800525e:	4804      	ldr	r0, [pc, #16]	; (8005270 <spi_read+0x34>)
 8005260:	f007 febc 	bl	800cfdc <HAL_SPI_TransmitReceive>
//	  HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_SET);

	return receivedVal[0];
 8005264:	f997 300c 	ldrsb.w	r3, [r7, #12]
#else
  return SPI.transfer(data);
#endif
*/

}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	24000480 	.word	0x24000480

08005274 <EEPROM_SPI_INIT>:
/**
 * @brief Init EEPROM SPI
 *
 * @param hspi Pointer to SPI struct handler
 */
void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HOLD_EEPROM_GPIO_Port, HOLD_EEPROM_Pin, GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <EEPROM_SPI_INIT+0x24>)
 8005284:	f003 ffd4 	bl	8009230 <HAL_GPIO_WritePin>
    EEPROM_SPI = hspi;
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <EEPROM_SPI_INIT+0x28>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6013      	str	r3, [r2, #0]
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	58021000 	.word	0x58021000
 800529c:	24000348 	.word	0x24000348

080052a0 <EEPROM_SPI_WritePage>:
  * @param  WriteAddr: EEPROM's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the EEPROM, must be equal
  *         or less than "EEPROM_PAGESIZE" value.
  * @retval EepromOperations value: EEPROM_STATUS_COMPLETE or EEPROM_STATUS_ERROR
  */
EepromOperations EEPROM_SPI_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	807b      	strh	r3, [r7, #2]
 80052ac:	4613      	mov	r3, r2
 80052ae:	803b      	strh	r3, [r7, #0]
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 80052b0:	e002      	b.n	80052b8 <EEPROM_SPI_WritePage+0x18>
//        HAL_Delay(1);
    	HAL_Delay(1);
 80052b2:	2001      	movs	r0, #1
 80052b4:	f002 ff50 	bl	8008158 <HAL_Delay>
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 80052b8:	4b27      	ldr	r3, [pc, #156]	; (8005358 <EEPROM_SPI_WritePage+0xb8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d1f5      	bne.n	80052b2 <EEPROM_SPI_WritePage+0x12>
    }

    HAL_StatusTypeDef spiTransmitStatus;

    sEE_WriteEnable();
 80052c6:	f000 fa21 	bl	800570c <sEE_WriteEnable>
    /*
        We gonna send commands in one packet of 3 bytes
     */
    uint8_t header[3];

    header[0] = EEPROM_WRITE;   // Send "Write to Memory" instruction
 80052ca:	2302      	movs	r3, #2
 80052cc:	723b      	strb	r3, [r7, #8]
    header[1] = WriteAddr >> 8; // Send 16-bit address
 80052ce:	887b      	ldrh	r3, [r7, #2]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	727b      	strb	r3, [r7, #9]
    header[2] = WriteAddr;
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	72bb      	strb	r3, [r7, #10]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 80052de:	2200      	movs	r2, #0
 80052e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052e4:	481d      	ldr	r0, [pc, #116]	; (800535c <EEPROM_SPI_WritePage+0xbc>)
 80052e6:	f003 ffa3 	bl	8009230 <HAL_GPIO_WritePin>

    EEPROM_SPI_SendInstruction((uint8_t*)header, 3);
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	2103      	movs	r1, #3
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fa7b 	bl	80057ec <EEPROM_SPI_SendInstruction>

    // Make 5 attemtps to write the data
    for (uint8_t i = 0; i < 5; i++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	73bb      	strb	r3, [r7, #14]
 80052fa:	e011      	b.n	8005320 <EEPROM_SPI_WritePage+0x80>
        spiTransmitStatus = HAL_SPI_Transmit(EEPROM_SPI, pBuffer, NumByteToWrite, 100);
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <EEPROM_SPI_WritePage+0xb8>)
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	883a      	ldrh	r2, [r7, #0]
 8005302:	2364      	movs	r3, #100	; 0x64
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	f007 fadd 	bl	800c8c4 <HAL_SPI_Transmit>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]

        if (spiTransmitStatus == HAL_BUSY) {
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d109      	bne.n	8005328 <EEPROM_SPI_WritePage+0x88>
            HAL_Delay(5);
 8005314:	2005      	movs	r0, #5
 8005316:	f002 ff1f 	bl	8008158 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	3301      	adds	r3, #1
 800531e:	73bb      	strb	r3, [r7, #14]
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d9ea      	bls.n	80052fc <EEPROM_SPI_WritePage+0x5c>
 8005326:	e000      	b.n	800532a <EEPROM_SPI_WritePage+0x8a>
        } else {
            break;
 8005328:	bf00      	nop
        }
    }

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800532a:	2201      	movs	r2, #1
 800532c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005330:	480a      	ldr	r0, [pc, #40]	; (800535c <EEPROM_SPI_WritePage+0xbc>)
 8005332:	f003 ff7d 	bl	8009230 <HAL_GPIO_WritePin>

    // Wait the end of EEPROM writing
    EEPROM_SPI_WaitStandbyState();
 8005336:	f000 fa21 	bl	800577c <EEPROM_SPI_WaitStandbyState>
    HAL_Delay(1);
 800533a:	2001      	movs	r0, #1
 800533c:	f002 ff0c 	bl	8008158 <HAL_Delay>
    // Disable the write access to the EEPROM
    sEE_WriteDisable();
 8005340:	f000 fa00 	bl	8005744 <sEE_WriteDisable>

    if (spiTransmitStatus == HAL_ERROR) {
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <EEPROM_SPI_WritePage+0xae>
        return EEPROM_STATUS_ERROR;
 800534a:	2302      	movs	r3, #2
 800534c:	e000      	b.n	8005350 <EEPROM_SPI_WritePage+0xb0>
    } else {
        return EEPROM_STATUS_COMPLETE;
 800534e:	2301      	movs	r3, #1
    }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	24000348 	.word	0x24000348
 800535c:	58021000 	.word	0x58021000

08005360 <EEPROM_SPI_Write_int32_t>:

void EEPROM_SPI_Write_int32_t(uint16_t WriteAddr, int32_t value) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	6039      	str	r1, [r7, #0]
 800536a:	80fb      	strh	r3, [r7, #6]
	uint8_t Buf[4] = {0,};
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

	Buf[0] = (value & 0xFF);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	733b      	strb	r3, [r7, #12]
	Buf[1] = ((value >> 8) & 0xFF);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	121b      	asrs	r3, r3, #8
 800537a:	b2db      	uxtb	r3, r3
 800537c:	737b      	strb	r3, [r7, #13]
	Buf[2] = ((value >> 16) & 0xFF);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	141b      	asrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	73bb      	strb	r3, [r7, #14]
	Buf[3] = ((value >> 24) & 0xFF);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	73fb      	strb	r3, [r7, #15]

	EEPROM_SPI_WriteBuffer(Buf, WriteAddr, 4);
 800538e:	88f9      	ldrh	r1, [r7, #6]
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	2204      	movs	r2, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f87c 	bl	8005494 <EEPROM_SPI_WriteBuffer>
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <EEPROM_SPI_WriteBuffer_int32_t>:

void EEPROM_SPI_WriteBuffer_int32_t(int32_t* pBuffer, uint16_t WriteAddr, uint16_t NumToWrite){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
 80053b0:	4613      	mov	r3, r2
 80053b2:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < NumToWrite; i++){
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e011      	b.n	80053de <EEPROM_SPI_WriteBuffer_int32_t+0x3a>
		EEPROM_SPI_Write_int32_t(WriteAddr + i*4, pBuffer[i]);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	4413      	add	r3, r2
 80053c6:	b298      	uxth	r0, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7ff ffc4 	bl	8005360 <EEPROM_SPI_Write_int32_t>
	for (int i = 0; i < NumToWrite; i++){
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	883b      	ldrh	r3, [r7, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	dbe9      	blt.n	80053ba <EEPROM_SPI_WriteBuffer_int32_t+0x16>
	}
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <EEPROM_SPI_Read_int32_t>:

int32_t EEPROM_SPI_Read_int32_t(uint16_t ReadAddr) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	80fb      	strh	r3, [r7, #6]
	uint8_t Buf[4] = {0,};
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]

	EEPROM_SPI_ReadBuffer(Buf, ReadAddr, 4);
 80053fe:	88f9      	ldrh	r1, [r7, #6]
 8005400:	f107 030c 	add.w	r3, r7, #12
 8005404:	2204      	movs	r2, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f93a 	bl	8005680 <EEPROM_SPI_ReadBuffer>

	int32_t four = Buf[0];
 800540c:	7b3b      	ldrb	r3, [r7, #12]
 800540e:	61fb      	str	r3, [r7, #28]
	int32_t three = Buf[1];
 8005410:	7b7b      	ldrb	r3, [r7, #13]
 8005412:	61bb      	str	r3, [r7, #24]
	int32_t two = Buf[2];
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	617b      	str	r3, [r7, #20]
	int32_t one = Buf[3];
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	613b      	str	r3, [r7, #16]

    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	b29b      	uxth	r3, r3
 8005426:	441a      	add	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005430:	4413      	add	r3, r2
 8005432:	461a      	mov	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	061b      	lsls	r3, r3, #24
 8005438:	4413      	add	r3, r2
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <EEPROM_SPI_ReadBuffer_int32_t>:

void EEPROM_SPI_ReadBuffer_int32_t(uint16_t ReadAddr, uint16_t NumToRead){
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	460a      	mov	r2, r1
 800544e:	80fb      	strh	r3, [r7, #6]
 8005450:	4613      	mov	r3, r2
 8005452:	80bb      	strh	r3, [r7, #4]
	for (int i = 0; i < NumToRead; i++){
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e011      	b.n	800547e <EEPROM_SPI_ReadBuffer_int32_t+0x3a>
		EEPROM_Read_Array[i] = EEPROM_SPI_Read_int32_t(ReadAddr + i*4);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	b29b      	uxth	r3, r3
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	b29a      	uxth	r2, r3
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	4413      	add	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ffc1 	bl	80053f0 <EEPROM_SPI_Read_int32_t>
 800546e:	4602      	mov	r2, r0
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <EEPROM_SPI_ReadBuffer_int32_t+0x4c>)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NumToRead; i++){
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	88bb      	ldrh	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	dbe9      	blt.n	800545a <EEPROM_SPI_ReadBuffer_int32_t+0x16>
	}
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	24000884 	.word	0x24000884

08005494 <EEPROM_SPI_WriteBuffer>:
  *         to the EEPROM.
  * @param  WriteAddr: EEPROM's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the EEPROM.
  * @retval EepromOperations value: EEPROM_STATUS_COMPLETE or EEPROM_STATUS_ERROR
  */
EepromOperations EEPROM_SPI_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
 80054a0:	4613      	mov	r3, r2
 80054a2:	803b      	strh	r3, [r7, #0]
    uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	82fb      	strh	r3, [r7, #22]
 80054a8:	2300      	movs	r3, #0
 80054aa:	827b      	strh	r3, [r7, #18]
 80054ac:	2300      	movs	r3, #0
 80054ae:	823b      	strh	r3, [r7, #16]
 80054b0:	2300      	movs	r3, #0
 80054b2:	81fb      	strh	r3, [r7, #14]
 80054b4:	2300      	movs	r3, #0
 80054b6:	81bb      	strh	r3, [r7, #12]
    uint16_t sEE_DataNum = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	817b      	strh	r3, [r7, #10]

    EepromOperations pageWriteStatus = EEPROM_STATUS_PENDING;
 80054bc:	2300      	movs	r3, #0
 80054be:	757b      	strb	r3, [r7, #21]

    Addr = WriteAddr % EEPROM_PAGESIZE;
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	823b      	strh	r3, [r7, #16]
    count = EEPROM_PAGESIZE - Addr;
 80054c8:	8a3b      	ldrh	r3, [r7, #16]
 80054ca:	f1c3 0320 	rsb	r3, r3, #32
 80054ce:	81fb      	strh	r3, [r7, #14]
    NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 80054d0:	883b      	ldrh	r3, [r7, #0]
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	82fb      	strh	r3, [r7, #22]
    NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 80054d6:	883b      	ldrh	r3, [r7, #0]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	827b      	strh	r3, [r7, #18]

    if (Addr == 0) { /* WriteAddr is EEPROM_PAGESIZE aligned  */
 80054de:	8a3b      	ldrh	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13c      	bne.n	800555e <EEPROM_SPI_WriteBuffer+0xca>
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 80054e4:	8afb      	ldrh	r3, [r7, #22]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d124      	bne.n	8005534 <EEPROM_SPI_WriteBuffer+0xa0>
            sEE_DataNum = NumByteToWrite;
 80054ea:	883b      	ldrh	r3, [r7, #0]
 80054ec:	817b      	strh	r3, [r7, #10]
            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80054ee:	897a      	ldrh	r2, [r7, #10]
 80054f0:	887b      	ldrh	r3, [r7, #2]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff fed3 	bl	80052a0 <EEPROM_SPI_WritePage>
 80054fa:	4603      	mov	r3, r0
 80054fc:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80054fe:	7d7b      	ldrb	r3, [r7, #21]
 8005500:	2b01      	cmp	r3, #1
 8005502:	f000 80b7 	beq.w	8005674 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 8005506:	7d7b      	ldrb	r3, [r7, #21]
 8005508:	e0b5      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
            }

        } else { /* NumByteToWrite > EEPROM_PAGESIZE */
            while (NumOfPage--) {
                sEE_DataNum = EEPROM_PAGESIZE;
 800550a:	2320      	movs	r3, #32
 800550c:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800550e:	897a      	ldrh	r2, [r7, #10]
 8005510:	887b      	ldrh	r3, [r7, #2]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fec3 	bl	80052a0 <EEPROM_SPI_WritePage>
 800551a:	4603      	mov	r3, r0
 800551c:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800551e:	7d7b      	ldrb	r3, [r7, #21]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d001      	beq.n	8005528 <EEPROM_SPI_WriteBuffer+0x94>
                    return pageWriteStatus;
 8005524:	7d7b      	ldrb	r3, [r7, #21]
 8005526:	e0a6      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  EEPROM_PAGESIZE;
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	3320      	adds	r3, #32
 800552c:	807b      	strh	r3, [r7, #2]
                pBuffer += EEPROM_PAGESIZE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3320      	adds	r3, #32
 8005532:	607b      	str	r3, [r7, #4]
            while (NumOfPage--) {
 8005534:	8afb      	ldrh	r3, [r7, #22]
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	82fa      	strh	r2, [r7, #22]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <EEPROM_SPI_WriteBuffer+0x76>
            }

            sEE_DataNum = NumOfSingle;
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	817b      	strh	r3, [r7, #10]
            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8005542:	897a      	ldrh	r2, [r7, #10]
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fea9 	bl	80052a0 <EEPROM_SPI_WritePage>
 800554e:	4603      	mov	r3, r0
 8005550:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8005552:	7d7b      	ldrb	r3, [r7, #21]
 8005554:	2b01      	cmp	r3, #1
 8005556:	f000 808d 	beq.w	8005674 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 800555a:	7d7b      	ldrb	r3, [r7, #21]
 800555c:	e08b      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
            }
        }
    } else { /* WriteAddr is not EEPROM_PAGESIZE aligned  */
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 800555e:	8afb      	ldrh	r3, [r7, #22]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d138      	bne.n	80055d6 <EEPROM_SPI_WriteBuffer+0x142>
            if (NumOfSingle > count) { /* (NumByteToWrite + WriteAddr) > EEPROM_PAGESIZE */
 8005564:	8a7a      	ldrh	r2, [r7, #18]
 8005566:	89fb      	ldrh	r3, [r7, #14]
 8005568:	429a      	cmp	r2, r3
 800556a:	d925      	bls.n	80055b8 <EEPROM_SPI_WriteBuffer+0x124>
                temp = NumOfSingle - count;
 800556c:	8a7a      	ldrh	r2, [r7, #18]
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	81bb      	strh	r3, [r7, #12]
                sEE_DataNum = count;
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8005578:	897a      	ldrh	r2, [r7, #10]
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fe8e 	bl	80052a0 <EEPROM_SPI_WritePage>
 8005584:	4603      	mov	r3, r0
 8005586:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8005588:	7d7b      	ldrb	r3, [r7, #21]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d001      	beq.n	8005592 <EEPROM_SPI_WriteBuffer+0xfe>
                    return pageWriteStatus;
 800558e:	7d7b      	ldrb	r3, [r7, #21]
 8005590:	e071      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  count;
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	4413      	add	r3, r2
 8005598:	807b      	strh	r3, [r7, #2]
                pBuffer += count;
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	607b      	str	r3, [r7, #4]

                sEE_DataNum = temp;
 80055a2:	89bb      	ldrh	r3, [r7, #12]
 80055a4:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80055a6:	897a      	ldrh	r2, [r7, #10]
 80055a8:	887b      	ldrh	r3, [r7, #2]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fe77 	bl	80052a0 <EEPROM_SPI_WritePage>
 80055b2:	4603      	mov	r3, r0
 80055b4:	757b      	strb	r3, [r7, #21]
 80055b6:	e009      	b.n	80055cc <EEPROM_SPI_WriteBuffer+0x138>
            } else {
                sEE_DataNum = NumByteToWrite;
 80055b8:	883b      	ldrh	r3, [r7, #0]
 80055ba:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80055bc:	897a      	ldrh	r2, [r7, #10]
 80055be:	887b      	ldrh	r3, [r7, #2]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fe6c 	bl	80052a0 <EEPROM_SPI_WritePage>
 80055c8:	4603      	mov	r3, r0
 80055ca:	757b      	strb	r3, [r7, #21]
            }

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80055cc:	7d7b      	ldrb	r3, [r7, #21]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d050      	beq.n	8005674 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 80055d2:	7d7b      	ldrb	r3, [r7, #21]
 80055d4:	e04f      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
            }
        } else { /* NumByteToWrite > EEPROM_PAGESIZE */
            NumByteToWrite -= count;
 80055d6:	883a      	ldrh	r2, [r7, #0]
 80055d8:	89fb      	ldrh	r3, [r7, #14]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	803b      	strh	r3, [r7, #0]
            NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 80055de:	883b      	ldrh	r3, [r7, #0]
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	82fb      	strh	r3, [r7, #22]
            NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 80055e4:	883b      	ldrh	r3, [r7, #0]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	827b      	strh	r3, [r7, #18]

            sEE_DataNum = count;
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	817b      	strh	r3, [r7, #10]

            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80055f0:	897a      	ldrh	r2, [r7, #10]
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fe52 	bl	80052a0 <EEPROM_SPI_WritePage>
 80055fc:	4603      	mov	r3, r0
 80055fe:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8005600:	7d7b      	ldrb	r3, [r7, #21]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <EEPROM_SPI_WriteBuffer+0x176>
                return pageWriteStatus;
 8005606:	7d7b      	ldrb	r3, [r7, #21]
 8005608:	e035      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
            }

            WriteAddr +=  count;
 800560a:	887a      	ldrh	r2, [r7, #2]
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	4413      	add	r3, r2
 8005610:	807b      	strh	r3, [r7, #2]
            pBuffer += count;
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	607b      	str	r3, [r7, #4]

            while (NumOfPage--) {
 800561a:	e014      	b.n	8005646 <EEPROM_SPI_WriteBuffer+0x1b2>
                sEE_DataNum = EEPROM_PAGESIZE;
 800561c:	2320      	movs	r3, #32
 800561e:	817b      	strh	r3, [r7, #10]

                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8005620:	897a      	ldrh	r2, [r7, #10]
 8005622:	887b      	ldrh	r3, [r7, #2]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe3a 	bl	80052a0 <EEPROM_SPI_WritePage>
 800562c:	4603      	mov	r3, r0
 800562e:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8005630:	7d7b      	ldrb	r3, [r7, #21]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <EEPROM_SPI_WriteBuffer+0x1a6>
                    return pageWriteStatus;
 8005636:	7d7b      	ldrb	r3, [r7, #21]
 8005638:	e01d      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  EEPROM_PAGESIZE;
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	3320      	adds	r3, #32
 800563e:	807b      	strh	r3, [r7, #2]
                pBuffer += EEPROM_PAGESIZE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3320      	adds	r3, #32
 8005644:	607b      	str	r3, [r7, #4]
            while (NumOfPage--) {
 8005646:	8afb      	ldrh	r3, [r7, #22]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	82fa      	strh	r2, [r7, #22]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <EEPROM_SPI_WriteBuffer+0x188>
            }

            if (NumOfSingle != 0) {
 8005650:	8a7b      	ldrh	r3, [r7, #18]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <EEPROM_SPI_WriteBuffer+0x1e0>
                sEE_DataNum = NumOfSingle;
 8005656:	8a7b      	ldrh	r3, [r7, #18]
 8005658:	817b      	strh	r3, [r7, #10]

                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800565a:	897a      	ldrh	r2, [r7, #10]
 800565c:	887b      	ldrh	r3, [r7, #2]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fe1d 	bl	80052a0 <EEPROM_SPI_WritePage>
 8005666:	4603      	mov	r3, r0
 8005668:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800566a:	7d7b      	ldrb	r3, [r7, #21]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <EEPROM_SPI_WriteBuffer+0x1e0>
                    return pageWriteStatus;
 8005670:	7d7b      	ldrb	r3, [r7, #21]
 8005672:	e000      	b.n	8005676 <EEPROM_SPI_WriteBuffer+0x1e2>
                }
            }
        }
    }

    return EEPROM_STATUS_COMPLETE;
 8005674:	2301      	movs	r3, #1
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <EEPROM_SPI_ReadBuffer>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the EEPROM.
  * @param  ReadAddr: EEPROM's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the EEPROM.
  * @retval None
  */
EepromOperations EEPROM_SPI_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
 800568c:	4613      	mov	r3, r2
 800568e:	803b      	strh	r3, [r7, #0]
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8005690:	e002      	b.n	8005698 <EEPROM_SPI_ReadBuffer+0x18>
        HAL_Delay(1);
 8005692:	2001      	movs	r0, #1
 8005694:	f002 fd60 	bl	8008158 <HAL_Delay>
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8005698:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <EEPROM_SPI_ReadBuffer+0x84>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d1f5      	bne.n	8005692 <EEPROM_SPI_ReadBuffer+0x12>
        We gonna send all commands in one packet of 3 bytes
     */

    uint8_t header[3];

    header[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 80056a6:	2303      	movs	r3, #3
 80056a8:	733b      	strb	r3, [r7, #12]
    header[1] = ReadAddr >> 8;  // Send 16-bit address
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	737b      	strb	r3, [r7, #13]
    header[2] = ReadAddr;
 80056b4:	887b      	ldrh	r3, [r7, #2]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	73bb      	strb	r3, [r7, #14]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 80056ba:	2200      	movs	r2, #0
 80056bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c0:	4811      	ldr	r0, [pc, #68]	; (8005708 <EEPROM_SPI_ReadBuffer+0x88>)
 80056c2:	f003 fdb5 	bl	8009230 <HAL_GPIO_WritePin>

    /* Send WriteAddr address byte to read from */
    EEPROM_SPI_SendInstruction(header, 3);
 80056c6:	f107 030c 	add.w	r3, r7, #12
 80056ca:	2103      	movs	r1, #3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f88d 	bl	80057ec <EEPROM_SPI_SendInstruction>

    while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 80056d2:	e002      	b.n	80056da <EEPROM_SPI_ReadBuffer+0x5a>
        HAL_Delay(1);
 80056d4:	2001      	movs	r0, #1
 80056d6:	f002 fd3f 	bl	8008158 <HAL_Delay>
    while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <EEPROM_SPI_ReadBuffer+0x84>)
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	883a      	ldrh	r2, [r7, #0]
 80056e0:	23c8      	movs	r3, #200	; 0xc8
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	f007 faea 	bl	800ccbc <HAL_SPI_Receive>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d0f2      	beq.n	80056d4 <EEPROM_SPI_ReadBuffer+0x54>
    };

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 80056ee:	2201      	movs	r2, #1
 80056f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f4:	4804      	ldr	r0, [pc, #16]	; (8005708 <EEPROM_SPI_ReadBuffer+0x88>)
 80056f6:	f003 fd9b 	bl	8009230 <HAL_GPIO_WritePin>

    return EEPROM_STATUS_COMPLETE;
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	24000348 	.word	0x24000348
 8005708:	58021000 	.word	0x58021000

0800570c <sEE_WriteEnable>:
  * @brief  Enables the write access to the EEPROM.
  *
  * @param  None
  * @retval None
  */
void sEE_WriteEnable(void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 8005712:	2200      	movs	r2, #0
 8005714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005718:	4809      	ldr	r0, [pc, #36]	; (8005740 <sEE_WriteEnable+0x34>)
 800571a:	f003 fd89 	bl	8009230 <HAL_GPIO_WritePin>

    uint8_t command[1] = { EEPROM_WREN };
 800571e:	2306      	movs	r3, #6
 8005720:	713b      	strb	r3, [r7, #4]
    /* Send "Write Enable" instruction */
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	2101      	movs	r1, #1
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f860 	bl	80057ec <EEPROM_SPI_SendInstruction>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800572c:	2201      	movs	r2, #1
 800572e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005732:	4803      	ldr	r0, [pc, #12]	; (8005740 <sEE_WriteEnable+0x34>)
 8005734:	f003 fd7c 	bl	8009230 <HAL_GPIO_WritePin>
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58021000 	.word	0x58021000

08005744 <sEE_WriteDisable>:
  * @brief  Disables the write access to the EEPROM.
  *
  * @param  None
  * @retval None
  */
void sEE_WriteDisable(void) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800574a:	2200      	movs	r2, #0
 800574c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005750:	4809      	ldr	r0, [pc, #36]	; (8005778 <sEE_WriteDisable+0x34>)
 8005752:	f003 fd6d 	bl	8009230 <HAL_GPIO_WritePin>

    uint8_t command[1] = { EEPROM_WRDI };
 8005756:	2304      	movs	r3, #4
 8005758:	713b      	strb	r3, [r7, #4]

    /* Send "Write Disable" instruction */
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f844 	bl	80057ec <EEPROM_SPI_SendInstruction>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 8005764:	2201      	movs	r2, #1
 8005766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800576a:	4803      	ldr	r0, [pc, #12]	; (8005778 <sEE_WriteDisable+0x34>)
 800576c:	f003 fd60 	bl	8009230 <HAL_GPIO_WritePin>
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58021000 	.word	0x58021000

0800577c <EEPROM_SPI_WaitStandbyState>:
  *         status register and loop until write operation has completed.
  *
  * @param  None
  * @retval None
  */
uint8_t EEPROM_SPI_WaitStandbyState(void) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
    uint8_t sEEstatus[1] = { 0x00 };
 8005782:	2300      	movs	r3, #0
 8005784:	713b      	strb	r3, [r7, #4]
    uint8_t command[1] = { EEPROM_RDSR };
 8005786:	2305      	movs	r3, #5
 8005788:	703b      	strb	r3, [r7, #0]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800578a:	2200      	movs	r2, #0
 800578c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005790:	4814      	ldr	r0, [pc, #80]	; (80057e4 <EEPROM_SPI_WaitStandbyState+0x68>)
 8005792:	f003 fd4d 	bl	8009230 <HAL_GPIO_WritePin>

    // Send "Read Status Register" instruction
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8005796:	463b      	mov	r3, r7
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f826 	bl	80057ec <EEPROM_SPI_SendInstruction>

    // Loop as long as the memory is busy with a write cycle
    do {

        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 80057a0:	e002      	b.n	80057a8 <EEPROM_SPI_WaitStandbyState+0x2c>
            HAL_Delay(1);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f002 fcd8 	bl	8008158 <HAL_Delay>
        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <EEPROM_SPI_WaitStandbyState+0x6c>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	1d39      	adds	r1, r7, #4
 80057ae:	23c8      	movs	r3, #200	; 0xc8
 80057b0:	2201      	movs	r2, #1
 80057b2:	f007 fa83 	bl	800ccbc <HAL_SPI_Receive>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d0f2      	beq.n	80057a2 <EEPROM_SPI_WaitStandbyState+0x26>
        };

        HAL_Delay(1);
 80057bc:	2001      	movs	r0, #1
 80057be:	f002 fccb 	bl	8008158 <HAL_Delay>

    } while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET); // Write in progress
 80057c2:	793b      	ldrb	r3, [r7, #4]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ed      	bne.n	80057a8 <EEPROM_SPI_WaitStandbyState+0x2c>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 80057cc:	2201      	movs	r2, #1
 80057ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057d2:	4804      	ldr	r0, [pc, #16]	; (80057e4 <EEPROM_SPI_WaitStandbyState+0x68>)
 80057d4:	f003 fd2c 	bl	8009230 <HAL_GPIO_WritePin>

    return 0;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	58021000 	.word	0x58021000
 80057e8:	24000348 	.word	0x24000348

080057ec <EEPROM_SPI_SendInstruction>:
 * @brief Low level function to send header data to EEPROM
 *
 * @param instruction array of bytes to send
 * @param size        data size in bytes
 */
void EEPROM_SPI_SendInstruction(uint8_t *instruction, uint8_t size) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
    while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 80057f8:	e002      	b.n	8005800 <EEPROM_SPI_SendInstruction+0x14>
        HAL_Delay(1);
 80057fa:	2001      	movs	r0, #1
 80057fc:	f002 fcac 	bl	8008158 <HAL_Delay>
    while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <EEPROM_SPI_SendInstruction+0x44>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f5      	beq.n	80057fa <EEPROM_SPI_SendInstruction+0xe>
    }

    if (HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK) {
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <EEPROM_SPI_SendInstruction+0x44>)
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	b29a      	uxth	r2, r3
 8005816:	23c8      	movs	r3, #200	; 0xc8
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	f007 f853 	bl	800c8c4 <HAL_SPI_Transmit>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <EEPROM_SPI_SendInstruction+0x3c>
        Error_Handler();
 8005824:	f001 fa1c 	bl	8006c60 <Error_Handler>
    }
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	24000348 	.word	0x24000348

08005834 <EEPROM_LOAD_DEFAULT>:

void EEPROM_LOAD_DEFAULT(void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b0c6      	sub	sp, #280	; 0x118
 8005838:	af00      	add	r7, sp, #0
	int32_t EEPROM_TxBuffer[69] = {0,};
 800583a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800583e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005842:	4618      	mov	r0, r3
 8005844:	f44f 738a 	mov.w	r3, #276	; 0x114
 8005848:	461a      	mov	r2, r3
 800584a:	2100      	movs	r1, #0
 800584c:	f00a ff0c 	bl	8010668 <memset>

	EEPROM_TxBuffer[The_pack_location] = 1;
 8005850:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005854:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
	EEPROM_TxBuffer[Cell_high_voltage_alarm_parameter] = 3600;
 800585c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005860:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005864:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005868:	605a      	str	r2, [r3, #4]
	EEPROM_TxBuffer[Cell_low_voltage_alarm_parameter] = 3000;
 800586a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800586e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005872:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005876:	609a      	str	r2, [r3, #8]
	EEPROM_TxBuffer[Cell_high_temperature_alarm_parameter] = 273 + 60;
 8005878:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800587c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005880:	f240 124d 	movw	r2, #333	; 0x14d
 8005884:	60da      	str	r2, [r3, #12]
	EEPROM_TxBuffer[Cell_low_temperature_alarm_parameter] = 273 - 20;
 8005886:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800588a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800588e:	22fd      	movs	r2, #253	; 0xfd
 8005890:	611a      	str	r2, [r3, #16]
	EEPROM_TxBuffer[Charge_over_current_alarm_parameter] = 1;
 8005892:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]
	EEPROM_TxBuffer[Battery_high_voltage_alarm_parameter] = 46000;
 800589e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058a6:	f24b 32b0 	movw	r2, #46000	; 0xb3b0
 80058aa:	619a      	str	r2, [r3, #24]
	EEPROM_TxBuffer[Battery_low_voltage_alarm_parameter] = 36000;
 80058ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058b4:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80058b8:	61da      	str	r2, [r3, #28]
	EEPROM_TxBuffer[Self_definition_parameter_number] = 11;
 80058ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058c2:	220b      	movs	r2, #11
 80058c4:	621a      	str	r2, [r3, #32]
	EEPROM_TxBuffer[Discharge_over_current_alarm_parameter] = 1;
 80058c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058ce:	2201      	movs	r2, #1
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24
	EEPROM_TxBuffer[Cell_over_voltage_protection_parameter] = 3800;
 80058d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058da:	f640 62d8 	movw	r2, #3800	; 0xed8
 80058de:	629a      	str	r2, [r3, #40]	; 0x28
	EEPROM_TxBuffer[Cell_over_voltage_recover_parameter] = 3600;
 80058e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058e8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c
	EEPROM_TxBuffer[Cell_under_voltage_recover_parameter] = 3000;
 80058ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
	EEPROM_TxBuffer[Cell_under_voltage_protection_parameter] = 2800;
 80058fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005900:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005904:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8005908:	635a      	str	r2, [r3, #52]	; 0x34
	EEPROM_TxBuffer[Battery_over_voltage_protection_parameter] = 4700;
 800590a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800590e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005912:	f241 225c 	movw	r2, #4700	; 0x125c
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
	EEPROM_TxBuffer[Battery_over_voltage_recover_parameter] = 4500;
 8005918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800591c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005920:	f241 1294 	movw	r2, #4500	; 0x1194
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
	EEPROM_TxBuffer[Battery_under_voltage_recover_parameter] = 37000;
 8005926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800592a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800592e:	f249 0288 	movw	r2, #37000	; 0x9088
 8005932:	641a      	str	r2, [r3, #64]	; 0x40
	EEPROM_TxBuffer[Battery_under_voltage_protection_parameter] = 35000;
 8005934:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005938:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800593c:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8005940:	645a      	str	r2, [r3, #68]	; 0x44
	EEPROM_TxBuffer[Charge_over_temperature_protection_parameter] = 273 + 50;
 8005942:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005946:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800594a:	f240 1243 	movw	r2, #323	; 0x143
 800594e:	649a      	str	r2, [r3, #72]	; 0x48
	EEPROM_TxBuffer[Charge_over_temperature_recover_parameter] = 273 + 40;
 8005950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005954:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005958:	f240 1239 	movw	r2, #313	; 0x139
 800595c:	64da      	str	r2, [r3, #76]	; 0x4c
	EEPROM_TxBuffer[Charge_under_temperature_recover_parameter] = 0;
 800595e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005962:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005966:	2200      	movs	r2, #0
 8005968:	651a      	str	r2, [r3, #80]	; 0x50
	EEPROM_TxBuffer[Charge_under_temperature_protection_parameter] = -20;
 800596a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800596e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005972:	f06f 0213 	mvn.w	r2, #19
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
	EEPROM_TxBuffer[Discharge_over_temperature_protection_parameter] = 50;
 8005978:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800597c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005980:	2232      	movs	r2, #50	; 0x32
 8005982:	659a      	str	r2, [r3, #88]	; 0x58
	EEPROM_TxBuffer[Discharge_over_temperature_recover_parameter] = 45;
 8005984:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800598c:	222d      	movs	r2, #45	; 0x2d
 800598e:	65da      	str	r2, [r3, #92]	; 0x5c
	EEPROM_TxBuffer[Discharge_under_temperature_recover_parameter] = 0;
 8005990:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005994:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	; 0x60
	EEPROM_TxBuffer[Discharge_under_temperature_protection_parameter] = -20;
 800599c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059a4:	f06f 0213 	mvn.w	r2, #19
 80059a8:	665a      	str	r2, [r3, #100]	; 0x64
	EEPROM_TxBuffer[High_environment_temperature_alarm_parameter] = 50;
 80059aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059b2:	2232      	movs	r2, #50	; 0x32
 80059b4:	669a      	str	r2, [r3, #104]	; 0x68
	EEPROM_TxBuffer[Low_environment_temperature_alarm_parameter] = 0;
 80059b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059be:	2200      	movs	r2, #0
 80059c0:	66da      	str	r2, [r3, #108]	; 0x6c
	EEPROM_TxBuffer[Over_environment_temperature_protection_parameter] = 60;
 80059c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059ca:	223c      	movs	r2, #60	; 0x3c
 80059cc:	671a      	str	r2, [r3, #112]	; 0x70
	EEPROM_TxBuffer[Over_environment_temperature_recover_parameter] = 50;
 80059ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059d6:	2232      	movs	r2, #50	; 0x32
 80059d8:	675a      	str	r2, [r3, #116]	; 0x74
	EEPROM_TxBuffer[Under_environment_temperature_protection_parameter] = -20;
 80059da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059e2:	f06f 0213 	mvn.w	r2, #19
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78
	EEPROM_TxBuffer[Under_environment_temperature_recover_parameter] = 0;
 80059e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059f0:	2200      	movs	r2, #0
 80059f2:	67da      	str	r2, [r3, #124]	; 0x7c
	EEPROM_TxBuffer[Cell_heating_temperature_open_parameter] = 0;
 80059f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	EEPROM_TxBuffer[Cell_heating_temperature_stop_parameter] = 25;
 8005a02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a0a:	2219      	movs	r2, #25
 8005a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	EEPROM_TxBuffer[High_power_temperature_alarm_parameter] = 50;
 8005a10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a18:	2232      	movs	r2, #50	; 0x32
 8005a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	EEPROM_TxBuffer[Low_power_temperature_alarm_parameter] = 0;
 8005a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	EEPROM_TxBuffer[Over_power_temperature_protection_parameter] = 50;
 8005a2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a34:	2232      	movs	r2, #50	; 0x32
 8005a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	EEPROM_TxBuffer[Over_power_temperature_recover_parameter] = 40;
 8005a3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a42:	2228      	movs	r2, #40	; 0x28
 8005a44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	EEPROM_TxBuffer[Under_power_temperature_recover_parameter] = 0;
 8005a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	EEPROM_TxBuffer[Under_power_temperature_protection_parameter] = -20;
 8005a56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a5e:	f06f 0213 	mvn.w	r2, #19
 8005a62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	EEPROM_TxBuffer[Charge_over_current_protection_parameter] = 2;
 8005a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	EEPROM_TxBuffer[Charge_over_current_time_delay_parameter] = 0;
 8005a74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	EEPROM_TxBuffer[Discharge_over_current_protection_parameter] = 2;
 8005a82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	EEPROM_TxBuffer[Discharge_over_current_time_delay_parameter] = 1000;
 8005a90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	EEPROM_TxBuffer[Secondary_over_current_protection_parameter] = 0;
 8005aa0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005aa4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	EEPROM_TxBuffer[Secondary_over_current_time_delay_parameter] = 0;
 8005aae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ab2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	EEPROM_TxBuffer[Output_shortcut_protection_parameter] = 0;
 8005abc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ac0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	EEPROM_TxBuffer[Output_shortcut_time_delay_parameter] = 0;
 8005aca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ace:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	EEPROM_TxBuffer[Over_current_recover_time_delay_parameter] = 5;
 8005ad8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005adc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ae0:	2205      	movs	r2, #5
 8005ae2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	EEPROM_TxBuffer[Over_current_lock_times_parameter] = 0;
 8005ae6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005aea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	EEPROM_TxBuffer[Battery_rated_capacity_parameter] = 800;
 8005af4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005af8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005afc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	EEPROM_TxBuffer[Cell_number_serial_battery_parameter] = 16;
 8005b04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	EEPROM_TxBuffer[Charge_current_limit_set_parameter] = 0;
 8005b12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	EEPROM_TxBuffer[Equalization_high_temperature_prohibit_parameter] = 0;
 8005b20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	EEPROM_TxBuffer[Equalization_low_temperature_prohibit_parameter] = 0;
 8005b2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	EEPROM_TxBuffer[Static_equilibrium_time_parameter] = 0;
 8005b3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	EEPROM_TxBuffer[Equalization_open_voltage_parameter] = 0;
 8005b4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	EEPROM_TxBuffer[Equalization_open_voltage_difference_parameter] = 0;
 8005b58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	EEPROM_TxBuffer[Equalization_stop_voltage_difference_parameter] = 0;
 8005b66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	EEPROM_TxBuffer[Cell_failure_voltage_difference_parameter] = 0;
 8005b74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	EEPROM_TxBuffer[Cell_failure_voltage_recover_parameter] = 0;
 8005b82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	EEPROM_TxBuffer[Self_definition_switch_number_parameter] = 0;
 8005b90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005b94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	EEPROM_TxBuffer[Voltage_function_switch_parameter] = 0;
 8005b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	EEPROM_TxBuffer[Temperature_function_switch_parameter] = 0;
 8005bac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	EEPROM_TxBuffer[Current_function_switch_parameter] = 0;
 8005bba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	EEPROM_TxBuffer[Capacity_and_other_function_switch] = 0;
 8005bc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	EEPROM_TxBuffer[Equalization_function_switch_parameter] = 0;
 8005bd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	EEPROM_TxBuffer[Indicator_function_switch_parameter] = 0;
 8005be4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005be8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	EEPROM_TxBuffer[BMS_name] = 1;
 8005bf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005bf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	EEPROM_SPI_WriteBuffer_int32_t(EEPROM_TxBuffer, (uint16_t)0x00, (uint16_t)69);
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	2245      	movs	r2, #69	; 0x45
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fbcc 	bl	80053a4 <EEPROM_SPI_WriteBuffer_int32_t>
}
 8005c0c:	bf00      	nop
 8005c0e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <cs_low>:
#include "bms_hardware.h"
#include "LT_SPI.h"
#include "main.h"

void cs_low(uint8_t pin)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_RESET);
 8005c22:	2200      	movs	r2, #0
 8005c24:	2110      	movs	r1, #16
 8005c26:	4803      	ldr	r0, [pc, #12]	; (8005c34 <cs_low+0x1c>)
 8005c28:	f003 fb02 	bl	8009230 <HAL_GPIO_WritePin>
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	58020000 	.word	0x58020000

08005c38 <cs_high>:

void cs_high(uint8_t pin)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_SET);
 8005c42:	2201      	movs	r2, #1
 8005c44:	2110      	movs	r1, #16
 8005c46:	4803      	ldr	r0, [pc, #12]	; (8005c54 <cs_high+0x1c>)
 8005c48:	f003 faf2 	bl	8009230 <HAL_GPIO_WritePin>
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	58020000 	.word	0x58020000

08005c58 <delay_u>:

void delay_u(uint16_t micro)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	80fb      	strh	r3, [r7, #6]
//    delayMicroseconds(micro);
	   uint16_t i=0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	81fb      	strh	r3, [r7, #14]
	   while(micro--)
 8005c66:	e007      	b.n	8005c78 <delay_u+0x20>
	   {
	      i=10;  // Define your own
 8005c68:	230a      	movs	r3, #10
 8005c6a:	81fb      	strh	r3, [r7, #14]
	      while(i--) ;
 8005c6c:	bf00      	nop
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	81fa      	strh	r2, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1fa      	bne.n	8005c6e <delay_u+0x16>
	   while(micro--)
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	1e5a      	subs	r2, r3, #1
 8005c7c:	80fa      	strh	r2, [r7, #6]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f2      	bne.n	8005c68 <delay_u+0x10>
	   }
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < len; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	e00a      	b.n	8005cb8 <spi_write_array+0x28>
  {
    spi_write(data[i]);
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b25b      	sxtb	r3, r3
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff faaf 	bl	8005210 <spi_write>
  for (uint8_t i = 0; i < len; i++)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d3f0      	bcc.n	8005ca2 <spi_write_array+0x12>
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	72fb      	strb	r3, [r7, #11]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
 8005ce2:	e00a      	b.n	8005cfa <spi_write_read+0x30>
  {
    spi_write(tx_Data[i]);
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fa8e 	bl	8005210 <spi_write>
  for (uint8_t i = 0; i < tx_len; i++)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
 8005cfa:	7dfa      	ldrb	r2, [r7, #23]
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d3f0      	bcc.n	8005ce4 <spi_write_read+0x1a>

  }

  for (uint8_t i = 0; i < rx_len; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	75bb      	strb	r3, [r7, #22]
 8005d06:	e00d      	b.n	8005d24 <spi_write_read+0x5a>
  {
    
	rx_data[i] = (uint8_t)spi_read(0xFF);
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	f7ff fa96 	bl	800523c <spi_read>
 8005d10:	4603      	mov	r3, r0
 8005d12:	4619      	mov	r1, r3
 8005d14:	7dbb      	ldrb	r3, [r7, #22]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	b2ca      	uxtb	r2, r1
 8005d1c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < rx_len; i++)
 8005d1e:	7dbb      	ldrb	r3, [r7, #22]
 8005d20:	3301      	adds	r3, #1
 8005d22:	75bb      	strb	r3, [r7, #22]
 8005d24:	7dba      	ldrb	r2, [r7, #22]
 8005d26:	7abb      	ldrb	r3, [r7, #10]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d3ed      	bcc.n	8005d08 <spi_write_read+0x3e>
  }

}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    data = (uint8_t)spi_read(0xFF);
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	f7ff fa7a 	bl	800523c <spi_read>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
    return(data);
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // INA229 ALARM
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == GPIO_PIN_10){
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d68:	d128      	bne.n	8005dbc <HAL_GPIO_EXTI_Callback+0x64>
		if (INA229_Read_ALERT() & 0x20){
 8005d6a:	f7fc fd53 	bl	8002814 <INA229_Read_ALERT>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_GPIO_WritePin(TURN_OFF_CHARGE_GPIO_Port, TURN_OFF_CHARGE_Pin, GPIO_PIN_SET);
 8005d78:	2201      	movs	r2, #1
 8005d7a:	2120      	movs	r1, #32
 8005d7c:	4811      	ldr	r0, [pc, #68]	; (8005dc4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005d7e:	f003 fa57 	bl	8009230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TURN_ON_CHARGE_GPIO_Port, TURN_ON_CHARGE_Pin, GPIO_PIN_RESET);
 8005d82:	2200      	movs	r2, #0
 8005d84:	2104      	movs	r1, #4
 8005d86:	480f      	ldr	r0, [pc, #60]	; (8005dc4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005d88:	f003 fa52 	bl	8009230 <HAL_GPIO_WritePin>
			Alarm_Flag = 3;
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8005d8e:	2203      	movs	r2, #3
 8005d90:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
			Alarm_Flag = 5;
		}
   }
}
 8005d92:	e013      	b.n	8005dbc <HAL_GPIO_EXTI_Callback+0x64>
		else if (INA229_Read_ALERT() & 0x40){
 8005d94:	f7fc fd3e 	bl	8002814 <INA229_Read_ALERT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00c      	beq.n	8005dbc <HAL_GPIO_EXTI_Callback+0x64>
			HAL_GPIO_WritePin(TURN_OFF_DISCHARGE_GPIO_Port, TURN_OFF_DISCHARGE_Pin, GPIO_PIN_SET);
 8005da2:	2201      	movs	r2, #1
 8005da4:	2101      	movs	r1, #1
 8005da6:	4807      	ldr	r0, [pc, #28]	; (8005dc4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005da8:	f003 fa42 	bl	8009230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TURN_ON_DISCHARGE_GPIO_Port, TURN_ON_DISCHARGE_Pin, GPIO_PIN_RESET);
 8005dac:	2200      	movs	r2, #0
 8005dae:	2108      	movs	r1, #8
 8005db0:	4804      	ldr	r0, [pc, #16]	; (8005dc4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005db2:	f003 fa3d 	bl	8009230 <HAL_GPIO_WritePin>
			Alarm_Flag = 5;
 8005db6:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8005db8:	2205      	movs	r2, #5
 8005dba:	701a      	strb	r2, [r3, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	58021000 	.word	0x58021000
 8005dc8:	2400087c 	.word	0x2400087c

08005dcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <HAL_UART_RxCpltCallback+0x28>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d106      	bne.n	8005dea <HAL_UART_RxCpltCallback+0x1e>
		RS485_RX_FLAG_STATE();
 8005ddc:	f7fa fc72 	bl	80006c4 <RS485_RX_FLAG_STATE>
		HAL_UART_Receive_IT(&huart2, &RS485_RX_DATA_TEMP, 1);
 8005de0:	2201      	movs	r2, #1
 8005de2:	4905      	ldr	r1, [pc, #20]	; (8005df8 <HAL_UART_RxCpltCallback+0x2c>)
 8005de4:	4803      	ldr	r0, [pc, #12]	; (8005df4 <HAL_UART_RxCpltCallback+0x28>)
 8005de6:	f008 f839 	bl	800de5c <HAL_UART_Receive_IT>
	}
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	240005e8 	.word	0x240005e8
 8005df8:	24000877 	.word	0x24000877

08005dfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	6809      	ldr	r1, [r1, #0]
 8005e08:	481e      	ldr	r0, [pc, #120]	; (8005e84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005e0a:	4281      	cmp	r1, r0
 8005e0c:	d135      	bne.n	8005e7a <HAL_TIM_PeriodElapsedCallback+0x7e>

//		Current_mA = INA229_Read_VSHUNT()/RSHUNT/25;
//		Battery_Capacity_Accum += Current_mA*2^32/(1000*60*60);
		Battery_Capacity_Accum += Current_mA*4294967296/3600000;
 8005e0e:	491e      	ldr	r1, [pc, #120]	; (8005e88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005e10:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005e14:	b209      	sxth	r1, r1
 8005e16:	17c8      	asrs	r0, r1, #31
 8005e18:	460a      	mov	r2, r1
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	0011      	movs	r1, r2
 8005e26:	2000      	movs	r0, #0
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	f7fa fa53 	bl	80002d8 <__aeabi_ldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	1884      	adds	r4, r0, r2
 8005e42:	eb41 0503 	adc.w	r5, r1, r3
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005e48:	e9c3 4500 	strd	r4, r5, [r3]
		Battery_Residual_Capacity_mAh = Battery_Capacity_Accum >> 32;
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	000a      	movs	r2, r1
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e60:	601a      	str	r2, [r3, #0]

		if (Battery_Residual_Capacity_mAh > Total_Battery_Capacity_mAh){
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d204      	bcs.n	8005e7a <HAL_TIM_PeriodElapsedCallback+0x7e>
			Battery_Residual_Capacity_mAh = Total_Battery_Capacity_mAh;
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e78:	601a      	str	r2, [r3, #0]
		}
		else if (Battery_Residual_Capacity_mAh < 0){
			Battery_Residual_Capacity_mAh = 0;
		}
	}
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bdb0      	pop	{r4, r5, r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40001000 	.word	0x40001000
 8005e88:	2400074c 	.word	0x2400074c
 8005e8c:	0036ee80 	.word	0x0036ee80
 8005e90:	24000740 	.word	0x24000740
 8005e94:	24000738 	.word	0x24000738
 8005e98:	24000022 	.word	0x24000022

08005e9c <Moving_Average_Simple_Current>:

// Фильтр скользящего среднего
int16_t Moving_Average_Simple_Current(int16_t Zk) {
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	80fb      	strh	r3, [r7, #6]
    #define windowLengthCurrent 32
    static int16_t delayLine[windowLengthCurrent];
    static uint16_t pointer;
    static int32_t average_Out;
  if (++pointer >= windowLengthCurrent) pointer = 0;
 8005ea6:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	2b1f      	cmp	r3, #31
 8005eb8:	d902      	bls.n	8005ec0 <Moving_Average_Simple_Current+0x24>
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	801a      	strh	r2, [r3, #0]
  average_Out -= delayLine[pointer];
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <Moving_Average_Simple_Current+0x74>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <Moving_Average_Simple_Current+0x78>)
 8005ecc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <Moving_Average_Simple_Current+0x74>)
 8005ed4:	6013      	str	r3, [r2, #0]
  average_Out += Zk;
 8005ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <Moving_Average_Simple_Current+0x74>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a0b      	ldr	r2, [pc, #44]	; (8005f10 <Moving_Average_Simple_Current+0x74>)
 8005ee2:	6013      	str	r3, [r2, #0]
  delayLine[pointer] = Zk;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <Moving_Average_Simple_Current+0x70>)
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <Moving_Average_Simple_Current+0x78>)
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  return (average_Out / windowLengthCurrent);
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <Moving_Average_Simple_Current+0x74>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da00      	bge.n	8005efc <Moving_Average_Simple_Current+0x60>
 8005efa:	331f      	adds	r3, #31
 8005efc:	115b      	asrs	r3, r3, #5
 8005efe:	b21b      	sxth	r3, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	24000aac 	.word	0x24000aac
 8005f10:	24000ab0 	.word	0x24000ab0
 8005f14:	24000ab4 	.word	0x24000ab4

08005f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f20:	f002 f888 	bl	8008034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f24:	f000 fa54 	bl	80063d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005f28:	f000 fae6 	bl	80064f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f2c:	f000 fd86 	bl	8006a3c <MX_GPIO_Init>
  MX_RTC_Init();
 8005f30:	f000 fb36 	bl	80065a0 <MX_RTC_Init>
  MX_SPI6_Init();
 8005f34:	f000 fc4a 	bl	80067cc <MX_SPI6_Init>
  MX_TIM6_Init();
 8005f38:	f000 fca2 	bl	8006880 <MX_TIM6_Init>
  MX_SPI2_Init();
 8005f3c:	f000 fb96 	bl	800666c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8005f40:	f000 fd20 	bl	8006984 <MX_USART2_UART_Init>
  MX_SPI4_Init();
 8005f44:	f000 fbea 	bl	800671c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8005f48:	f000 fcd0 	bl	80068ec <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005f4c:	f000 fb0c 	bl	8006568 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 8005f50:	f003 f9a2 	bl	8009298 <HAL_PWR_EnableBkUpAccess>

  TURN_OFF_ALL_MOSFETS();
 8005f54:	f7fc f808 	bl	8001f68 <TURN_OFF_ALL_MOSFETS>

  HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_SET);
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f5e:	48bf      	ldr	r0, [pc, #764]	; (800625c <main+0x344>)
 8005f60:	f003 f966 	bl	8009230 <HAL_GPIO_WritePin>
  Pack_Location = Pack_Number_Jamper_Read();
 8005f64:	f7fb fd5e 	bl	8001a24 <Pack_Number_Jamper_Read>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4bbc      	ldr	r3, [pc, #752]	; (8006260 <main+0x348>)
 8005f6e:	701a      	strb	r2, [r3, #0]
  PackNum_Char_1 = Hex_to_ASCII(Pack_Location);
 8005f70:	4bbb      	ldr	r3, [pc, #748]	; (8006260 <main+0x348>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fa fc54 	bl	8000822 <Hex_to_ASCII>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	4bb9      	ldr	r3, [pc, #740]	; (8006264 <main+0x34c>)
 8005f80:	701a      	strb	r2, [r3, #0]
  PackNum_Char_2 = Hex_to_ASCII(Pack_Location)>>8;
 8005f82:	4bb7      	ldr	r3, [pc, #732]	; (8006260 <main+0x348>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fc4b 	bl	8000822 <Hex_to_ASCII>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	4bb4      	ldr	r3, [pc, #720]	; (8006268 <main+0x350>)
 8005f96:	701a      	strb	r2, [r3, #0]

  EEPROM_SPI_INIT(&hspi4);
 8005f98:	48b4      	ldr	r0, [pc, #720]	; (800626c <main+0x354>)
 8005f9a:	f7ff f96b 	bl	8005274 <EEPROM_SPI_INIT>
  W25qxx_Init();
 8005f9e:	f001 fdeb 	bl	8007b78 <W25qxx_Init>
  Clear_Flash_Block(0);
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	f7fc f980 	bl	80022a8 <Clear_Flash_Block>

  EEPROM_LOAD_DEFAULT();
 8005fa8:	f7ff fc44 	bl	8005834 <EEPROM_LOAD_DEFAULT>

  EEPROM_SPI_ReadBuffer_int32_t(0x00, ParaArraySize);
 8005fac:	2145      	movs	r1, #69	; 0x45
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f7ff fa48 	bl	8005444 <EEPROM_SPI_ReadBuffer_int32_t>
	for (int i = 0; i < ParaArraySize; i++){
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e00a      	b.n	8005fd0 <main+0xb8>
		Para_Array[i] = EEPROM_Read_Array[i];
 8005fba:	4aad      	ldr	r2, [pc, #692]	; (8006270 <main+0x358>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fc2:	49ac      	ldr	r1, [pc, #688]	; (8006274 <main+0x35c>)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < ParaArraySize; i++){
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b44      	cmp	r3, #68	; 0x44
 8005fd4:	ddf1      	ble.n	8005fba <main+0xa2>
	}

  Battery_Capacity_Accum = Para_Array[Battery_rated_capacity_parameter] * 42949672960;
 8005fd6:	4ba7      	ldr	r3, [pc, #668]	; (8006274 <main+0x35c>)
 8005fd8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005fdc:	17da      	asrs	r2, r3, #31
 8005fde:	4698      	mov	r8, r3
 8005fe0:	4691      	mov	r9, r2
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	fb03 f209 	mul.w	r2, r3, r9
 8005fe8:	230a      	movs	r3, #10
 8005fea:	fb03 f308 	mul.w	r3, r3, r8
 8005fee:	4413      	add	r3, r2
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	fba8 4502 	umull	r4, r5, r8, r2
 8005ff6:	442b      	add	r3, r5
 8005ff8:	461d      	mov	r5, r3
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	499e      	ldr	r1, [pc, #632]	; (8006278 <main+0x360>)
 8006000:	e9c1 2300 	strd	r2, r3, [r1]

  INA229_Init();
 8006004:	f7fc fab0 	bl	8002568 <INA229_Init>
  INA229_Set_Current_Charge_ALRM(STARTING_CURRENT * 1000 / 25 * 10 * CURRENT_COEF_INV);
 8006008:	f241 40d5 	movw	r0, #5333	; 0x14d5
 800600c:	f7fc fc34 	bl	8002878 <INA229_Set_Current_Charge_ALRM>
  INA229_Set_Current_Discharge_ALRM(STARTING_CURRENT * (-1000) / 25 * 10 * CURRENT_COEF_INV);
 8006010:	f64e 302b 	movw	r0, #60203	; 0xeb2b
 8006014:	f7fc fc66 	bl	80028e4 <INA229_Set_Current_Discharge_ALRM>

  LTC6813_Init();
 8006018:	f7fd f81a 	bl	8003050 <LTC6813_Init>

  tm1637Init();
 800601c:	f000 fe26 	bl	8006c6c <tm1637Init>
  tm1637WriteSnake(100);
 8006020:	2064      	movs	r0, #100	; 0x64
 8006022:	f001 f926 	bl	8007272 <tm1637WriteSnake>
  tm1637WriteSnake(100);
 8006026:	2064      	movs	r0, #100	; 0x64
 8006028:	f001 f923 	bl	8007272 <tm1637WriteSnake>

  uint16_t Err_Chk = LTC6813_Chk_Start_Error();
 800602c:	f7fd f986 	bl	800333c <LTC6813_Chk_Start_Error>
 8006030:	4603      	mov	r3, r0
 8006032:	817b      	strh	r3, [r7, #10]

  while (Err_Chk != 0){
 8006034:	e040      	b.n	80060b8 <main+0x1a0>
	  LED_ALARM_ON();
 8006036:	f7fc f85f 	bl	80020f8 <LED_ALARM_ON>
	  if (Err_Chk == 0x01){
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d110      	bne.n	8006062 <main+0x14a>
		  tm1637WriteSymbol('E', 3);
 8006040:	2103      	movs	r1, #3
 8006042:	2045      	movs	r0, #69	; 0x45
 8006044:	f001 f824 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('-', 2);
 8006048:	2102      	movs	r1, #2
 800604a:	202d      	movs	r0, #45	; 0x2d
 800604c:	f001 f820 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('0', 1);
 8006050:	2101      	movs	r1, #1
 8006052:	2030      	movs	r0, #48	; 0x30
 8006054:	f001 f81c 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('1', 0);
 8006058:	2100      	movs	r1, #0
 800605a:	2031      	movs	r0, #49	; 0x31
 800605c:	f001 f818 	bl	8007090 <tm1637WriteSymbol>
 8006060:	e026      	b.n	80060b0 <main+0x198>
	  }
	  else if (Err_Chk == 0x02){
 8006062:	897b      	ldrh	r3, [r7, #10]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d110      	bne.n	800608a <main+0x172>
		  tm1637WriteSymbol('E', 3);
 8006068:	2103      	movs	r1, #3
 800606a:	2045      	movs	r0, #69	; 0x45
 800606c:	f001 f810 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('-', 2);
 8006070:	2102      	movs	r1, #2
 8006072:	202d      	movs	r0, #45	; 0x2d
 8006074:	f001 f80c 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('0', 1);
 8006078:	2101      	movs	r1, #1
 800607a:	2030      	movs	r0, #48	; 0x30
 800607c:	f001 f808 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('2', 0);
 8006080:	2100      	movs	r1, #0
 8006082:	2032      	movs	r0, #50	; 0x32
 8006084:	f001 f804 	bl	8007090 <tm1637WriteSymbol>
 8006088:	e012      	b.n	80060b0 <main+0x198>
	  }
	  else if (Err_Chk == 0x04){
 800608a:	897b      	ldrh	r3, [r7, #10]
 800608c:	2b04      	cmp	r3, #4
 800608e:	d10f      	bne.n	80060b0 <main+0x198>
		  tm1637WriteSymbol('E', 3);
 8006090:	2103      	movs	r1, #3
 8006092:	2045      	movs	r0, #69	; 0x45
 8006094:	f000 fffc 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('-', 2);
 8006098:	2102      	movs	r1, #2
 800609a:	202d      	movs	r0, #45	; 0x2d
 800609c:	f000 fff8 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('0', 1);
 80060a0:	2101      	movs	r1, #1
 80060a2:	2030      	movs	r0, #48	; 0x30
 80060a4:	f000 fff4 	bl	8007090 <tm1637WriteSymbol>
		  tm1637WriteSymbol('4', 0);
 80060a8:	2100      	movs	r1, #0
 80060aa:	2034      	movs	r0, #52	; 0x34
 80060ac:	f000 fff0 	bl	8007090 <tm1637WriteSymbol>
	  }
	  Err_Chk = LTC6813_Chk_Start_Error();
 80060b0:	f7fd f944 	bl	800333c <LTC6813_Chk_Start_Error>
 80060b4:	4603      	mov	r3, r0
 80060b6:	817b      	strh	r3, [r7, #10]
  while (Err_Chk != 0){
 80060b8:	897b      	ldrh	r3, [r7, #10]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1bb      	bne.n	8006036 <main+0x11e>
  }

  TURN_ON_PRE_CHARGE();
 80060be:	f7fc f803 	bl	80020c8 <TURN_ON_PRE_CHARGE>
  HAL_Delay(Para_Array[Discharge_over_current_time_delay_parameter]);
 80060c2:	4b6c      	ldr	r3, [pc, #432]	; (8006274 <main+0x35c>)
 80060c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 f845 	bl	8008158 <HAL_Delay>
  TURN_ON_ALL_MOSFETS();
 80060ce:	f7fb ff73 	bl	8001fb8 <TURN_ON_ALL_MOSFETS>
  TURN_OFF_PRE_CHARGE();
 80060d2:	f7fc f805 	bl	80020e0 <TURN_OFF_PRE_CHARGE>

//  Read_History_from_Flash(History_Data_Num - 1);

  INA229_Set_Current_Charge_ALRM(Para_Array[Charge_over_current_protection_parameter] * 1000 / 25 * 10 * CURRENT_COEF_INV);
 80060d6:	4b67      	ldr	r3, [pc, #412]	; (8006274 <main+0x35c>)
 80060d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060dc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <main+0x364>)
 80060e6:	fb82 1203 	smull	r1, r2, r2, r3
 80060ea:	10d2      	asrs	r2, r2, #3
 80060ec:	17db      	asrs	r3, r3, #31
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fc fbc0 	bl	8002878 <INA229_Set_Current_Charge_ALRM>
  INA229_Set_Current_Discharge_ALRM(-Para_Array[Discharge_over_current_protection_parameter] * 1000 / 25 * 10 * CURRENT_COEF_INV);
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <main+0x35c>)
 80060fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060fe:	4a60      	ldr	r2, [pc, #384]	; (8006280 <main+0x368>)
 8006100:	fb02 f303 	mul.w	r3, r2, r3
 8006104:	4a5d      	ldr	r2, [pc, #372]	; (800627c <main+0x364>)
 8006106:	fb82 1203 	smull	r1, r2, r2, r3
 800610a:	10d2      	asrs	r2, r2, #3
 800610c:	17db      	asrs	r3, r3, #31
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	b29b      	uxth	r3, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc fbe6 	bl	80028e4 <INA229_Set_Current_Discharge_ALRM>

  HAL_TIM_Base_Start_IT(&htim6);
 8006118:	485a      	ldr	r0, [pc, #360]	; (8006284 <main+0x36c>)
 800611a:	f007 fabb 	bl	800d694 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &RS485_RX_DATA_TEMP, 1);
 800611e:	2201      	movs	r2, #1
 8006120:	4959      	ldr	r1, [pc, #356]	; (8006288 <main+0x370>)
 8006122:	485a      	ldr	r0, [pc, #360]	; (800628c <main+0x374>)
 8006124:	f007 fe9a 	bl	800de5c <HAL_UART_Receive_IT>

  LED_OK_ON();
 8006128:	f7fb fffe 	bl	8002128 <LED_OK_ON>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Alarm_State_Update();
 800612c:	f7fb fdaa 	bl	8001c84 <Alarm_State_Update>
//	  LTC6813_Chk_Cell_Error();

	  Current_mA = -INA229_Read_VSHUNT()/RSHUNT/100*CURRENT_COEF;
 8006130:	f7fc faf2 	bl	8002718 <INA229_Read_VSHUNT>
 8006134:	4603      	mov	r3, r0
 8006136:	425b      	negs	r3, r3
 8006138:	4a55      	ldr	r2, [pc, #340]	; (8006290 <main+0x378>)
 800613a:	fb82 1203 	smull	r1, r2, r2, r3
 800613e:	1152      	asrs	r2, r2, #5
 8006140:	17db      	asrs	r3, r3, #31
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	011a      	lsls	r2, r3, #4
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	4a51      	ldr	r2, [pc, #324]	; (8006294 <main+0x37c>)
 8006150:	fb82 1203 	smull	r1, r2, r2, r3
 8006154:	1152      	asrs	r2, r2, #5
 8006156:	17db      	asrs	r3, r3, #31
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	b21a      	sxth	r2, r3
 800615c:	4b4e      	ldr	r3, [pc, #312]	; (8006298 <main+0x380>)
 800615e:	801a      	strh	r2, [r3, #0]
	  Current_Average = Moving_Average_Simple_Current(Current_mA);
 8006160:	4b4d      	ldr	r3, [pc, #308]	; (8006298 <main+0x380>)
 8006162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fe98 	bl	8005e9c <Moving_Average_Simple_Current>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	4b4a      	ldr	r3, [pc, #296]	; (800629c <main+0x384>)
 8006172:	801a      	strh	r2, [r3, #0]
	  SOC_percent = Battery_Residual_Capacity_mAh * 100 / Total_Battery_Capacity_mAh;
 8006174:	4b4a      	ldr	r3, [pc, #296]	; (80062a0 <main+0x388>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2264      	movs	r2, #100	; 0x64
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	4a49      	ldr	r2, [pc, #292]	; (80062a4 <main+0x38c>)
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	fbb3 f3f2 	udiv	r3, r3, r2
 8006186:	b2da      	uxtb	r2, r3
 8006188:	4b47      	ldr	r3, [pc, #284]	; (80062a8 <main+0x390>)
 800618a:	701a      	strb	r2, [r3, #0]

	  Cell_Voltage_mV = LTC6813_Read_Cell(0)/10;
 800618c:	2000      	movs	r0, #0
 800618e:	f7fc ffe3 	bl	8003158 <LTC6813_Read_Cell>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	4b45      	ldr	r3, [pc, #276]	; (80062ac <main+0x394>)
 8006198:	fba3 2302 	umull	r2, r3, r3, r2
 800619c:	08db      	lsrs	r3, r3, #3
 800619e:	b29a      	uxth	r2, r3
 80061a0:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <main+0x398>)
 80061a2:	801a      	strh	r2, [r3, #0]
//	  tm1637DisplayDecimalPnt(Cell_Voltage_mV, 4);
	  tm1637DisplayDecimalPnt(SOC_percent, 0);
 80061a4:	4b40      	ldr	r3, [pc, #256]	; (80062a8 <main+0x390>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fdac 	bl	8006d08 <tm1637DisplayDecimalPnt>

	  if (Current_mA < 0){
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <main+0x380>)
 80061b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da04      	bge.n	80061c4 <main+0x2ac>
		  LED_DISCHARGE_ON();
 80061ba:	f7fb ffcd 	bl	8002158 <LED_DISCHARGE_ON>
		  LED_CHARGE_OFF();
 80061be:	f7fb ffef 	bl	80021a0 <LED_CHARGE_OFF>
 80061c2:	e008      	b.n	80061d6 <main+0x2be>
	  }
	  else if (Current_mA > 0){
 80061c4:	4b34      	ldr	r3, [pc, #208]	; (8006298 <main+0x380>)
 80061c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd03      	ble.n	80061d6 <main+0x2be>
		  LED_CHARGE_ON();
 80061ce:	f7fb ffdb 	bl	8002188 <LED_CHARGE_ON>
		  LED_DISCHARGE_OFF();
 80061d2:	f7fb ffcd 	bl	8002170 <LED_DISCHARGE_OFF>
	  }

	  if (Alarm_Flag != 0) {
 80061d6:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <main+0x39c>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06c      	beq.n	80062b8 <main+0x3a0>
		  LED_ALARM_ON();
 80061de:	f7fb ff8b 	bl	80020f8 <LED_ALARM_ON>
		  LED_OK_OFF();
 80061e2:	f7fb ffad 	bl	8002140 <LED_OK_OFF>
		  if (Alarm_Flag & 0x02) {
 80061e6:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <main+0x39c>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <main+0x2f4>
			  Alarm_Event_Log();
 80061f2:	f7fc f849 	bl	8002288 <Alarm_Event_Log>
			  HAL_Delay(2000);
 80061f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80061fa:	f001 ffad 	bl	8008158 <HAL_Delay>
			  Alarm_Event_Log();
 80061fe:	f7fc f843 	bl	8002288 <Alarm_Event_Log>
			  Alarm_Flag = 0;
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <main+0x39c>)
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
			  TURN_ON_CHARGE_MOSFET();
 8006208:	f7fb fefe 	bl	8002008 <TURN_ON_CHARGE_MOSFET>
		  }
		  if (Alarm_Flag & 0x04) {
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <main+0x39c>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00c      	beq.n	8006232 <main+0x31a>
			  Alarm_Event_Log();
 8006218:	f7fc f836 	bl	8002288 <Alarm_Event_Log>
			  HAL_Delay(2000);
 800621c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006220:	f001 ff9a 	bl	8008158 <HAL_Delay>
			  Alarm_Event_Log();
 8006224:	f7fc f830 	bl	8002288 <Alarm_Event_Log>
			  Alarm_Flag = 0;
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <main+0x39c>)
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
			  TURN_ON_DISCHARGE_MOSFET();
 800622e:	f7fb ff03 	bl	8002038 <TURN_ON_DISCHARGE_MOSFET>
		  }
		  if (Alarm_Flag & 0x10) {
 8006232:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <main+0x39c>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <main+0x32e>
			  TURN_OFF_CHARGE_MOSFET();
 800623e:	f7fb ff13 	bl	8002068 <TURN_OFF_CHARGE_MOSFET>
			  LED_CHARGE_OFF();
 8006242:	f7fb ffad 	bl	80021a0 <LED_CHARGE_OFF>
		  }
		  if (Alarm_Flag & 0x20) {
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <main+0x39c>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03a      	beq.n	80062c8 <main+0x3b0>
			  TURN_OFF_DISCHARGE_MOSFET();
 8006252:	f7fb ff21 	bl	8002098 <TURN_OFF_DISCHARGE_MOSFET>
			  LED_DISCHARGE_OFF();
 8006256:	f7fb ff8b 	bl	8002170 <LED_DISCHARGE_OFF>
 800625a:	e035      	b.n	80062c8 <main+0x3b0>
 800625c:	58020800 	.word	0x58020800
 8006260:	24000736 	.word	0x24000736
 8006264:	2400087d 	.word	0x2400087d
 8006268:	2400087e 	.word	0x2400087e
 800626c:	240003f8 	.word	0x240003f8
 8006270:	24000884 	.word	0x24000884
 8006274:	24000998 	.word	0x24000998
 8006278:	24000740 	.word	0x24000740
 800627c:	1b4e81b5 	.word	0x1b4e81b5
 8006280:	ffff63c0 	.word	0xffff63c0
 8006284:	24000508 	.word	0x24000508
 8006288:	24000877 	.word	0x24000877
 800628c:	240005e8 	.word	0x240005e8
 8006290:	10624dd3 	.word	0x10624dd3
 8006294:	51eb851f 	.word	0x51eb851f
 8006298:	2400074c 	.word	0x2400074c
 800629c:	2400074e 	.word	0x2400074e
 80062a0:	24000738 	.word	0x24000738
 80062a4:	24000022 	.word	0x24000022
 80062a8:	2400087f 	.word	0x2400087f
 80062ac:	cccccccd 	.word	0xcccccccd
 80062b0:	24000748 	.word	0x24000748
 80062b4:	2400087c 	.word	0x2400087c
		  }
	  }
	  else {
		  LED_ALARM_OFF();
 80062b8:	f7fb ff2a 	bl	8002110 <LED_ALARM_OFF>
		  LED_OK_ON();
 80062bc:	f7fb ff34 	bl	8002128 <LED_OK_ON>
		  TURN_ON_CHARGE_MOSFET();
 80062c0:	f7fb fea2 	bl	8002008 <TURN_ON_CHARGE_MOSFET>
		  TURN_ON_DISCHARGE_MOSFET();
 80062c4:	f7fb feb8 	bl	8002038 <TURN_ON_DISCHARGE_MOSFET>
	  }

	  if(RS485_RX_FRAME_DONE_FLAG == 1) {
 80062c8:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <main+0x498>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d14b      	bne.n	8006368 <main+0x450>
		if (RS485_RX_DATA[13] == PackNum_Char_2 && RS485_RX_DATA[14] == PackNum_Char_1){
 80062d0:	4b38      	ldr	r3, [pc, #224]	; (80063b4 <main+0x49c>)
 80062d2:	7b5a      	ldrb	r2, [r3, #13]
 80062d4:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <main+0x4a0>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d13f      	bne.n	800635c <main+0x444>
 80062dc:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <main+0x49c>)
 80062de:	7b9a      	ldrb	r2, [r3, #14]
 80062e0:	4b36      	ldr	r3, [pc, #216]	; (80063bc <main+0x4a4>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d139      	bne.n	800635c <main+0x444>
			if (RS485_RX_DATA[7] == '4' && RS485_RX_DATA[8] == '2'){
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <main+0x49c>)
 80062ea:	79db      	ldrb	r3, [r3, #7]
 80062ec:	2b34      	cmp	r3, #52	; 0x34
 80062ee:	d106      	bne.n	80062fe <main+0x3e6>
 80062f0:	4b30      	ldr	r3, [pc, #192]	; (80063b4 <main+0x49c>)
 80062f2:	7a1b      	ldrb	r3, [r3, #8]
 80062f4:	2b32      	cmp	r3, #50	; 0x32
 80062f6:	d102      	bne.n	80062fe <main+0x3e6>
				RS485_Transmit_Remote_Measuring();
 80062f8:	f7fa faec 	bl	80008d4 <RS485_Transmit_Remote_Measuring>
 80062fc:	e02e      	b.n	800635c <main+0x444>
			}
			else if (RS485_RX_DATA[7] == '4' && RS485_RX_DATA[8] == '4'){
 80062fe:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <main+0x49c>)
 8006300:	79db      	ldrb	r3, [r3, #7]
 8006302:	2b34      	cmp	r3, #52	; 0x34
 8006304:	d106      	bne.n	8006314 <main+0x3fc>
 8006306:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <main+0x49c>)
 8006308:	7a1b      	ldrb	r3, [r3, #8]
 800630a:	2b34      	cmp	r3, #52	; 0x34
 800630c:	d102      	bne.n	8006314 <main+0x3fc>
				RS485_Transmit_Remote_Signaling();
 800630e:	f7fa fd2d 	bl	8000d6c <RS485_Transmit_Remote_Signaling>
 8006312:	e023      	b.n	800635c <main+0x444>
			}
			else if (RS485_RX_DATA[7] == '4' && RS485_RX_DATA[8] == '7'){
 8006314:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <main+0x49c>)
 8006316:	79db      	ldrb	r3, [r3, #7]
 8006318:	2b34      	cmp	r3, #52	; 0x34
 800631a:	d106      	bne.n	800632a <main+0x412>
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <main+0x49c>)
 800631e:	7a1b      	ldrb	r3, [r3, #8]
 8006320:	2b37      	cmp	r3, #55	; 0x37
 8006322:	d102      	bne.n	800632a <main+0x412>
				RS485_Transmit_Remote_Adjusting();
 8006324:	f7fa febe 	bl	80010a4 <RS485_Transmit_Remote_Adjusting>
 8006328:	e018      	b.n	800635c <main+0x444>
			}
			else if (RS485_RX_DATA[7] == '4' && RS485_RX_DATA[8] == '9'){
 800632a:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <main+0x49c>)
 800632c:	79db      	ldrb	r3, [r3, #7]
 800632e:	2b34      	cmp	r3, #52	; 0x34
 8006330:	d106      	bne.n	8006340 <main+0x428>
 8006332:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <main+0x49c>)
 8006334:	7a1b      	ldrb	r3, [r3, #8]
 8006336:	2b39      	cmp	r3, #57	; 0x39
 8006338:	d102      	bne.n	8006340 <main+0x428>
				RS485_Remote_Set_Command();
 800633a:	f7fb f9b7 	bl	80016ac <RS485_Remote_Set_Command>
 800633e:	e00d      	b.n	800635c <main+0x444>
			}
			else if (RS485_RX_DATA[7] == '4' && RS485_RX_DATA[8] == 'B'){
 8006340:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <main+0x49c>)
 8006342:	79db      	ldrb	r3, [r3, #7]
 8006344:	2b34      	cmp	r3, #52	; 0x34
 8006346:	d109      	bne.n	800635c <main+0x444>
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <main+0x49c>)
 800634a:	7a1b      	ldrb	r3, [r3, #8]
 800634c:	2b42      	cmp	r3, #66	; 0x42
 800634e:	d105      	bne.n	800635c <main+0x444>
				RS485_Transmit_Remote_History(History_Data_Num - 1);
 8006350:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <main+0x4a8>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	3b01      	subs	r3, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb fba0 	bl	8001a9c <RS485_Transmit_Remote_History>
			}
		}
		RS485_RX_COUNTER = 0;
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <main+0x4ac>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
		RS485_RX_FRAME_DONE_FLAG = 0;
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <main+0x498>)
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8006368:	2064      	movs	r0, #100	; 0x64
 800636a:	f001 fef5 	bl	8008158 <HAL_Delay>

	  if (EEPROM_Write_timer < 50){
 800636e:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <main+0x4b0>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	2b31      	cmp	r3, #49	; 0x31
 8006374:	d806      	bhi.n	8006384 <main+0x46c>
		  EEPROM_Write_timer++;
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <main+0x4b0>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <main+0x4b0>)
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	e6d3      	b.n	800612c <main+0x214>
	  }
	  else {
		  EEPROM_Write_timer = 0;
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <main+0x4b0>)
 8006386:	2200      	movs	r2, #0
 8006388:	801a      	strh	r2, [r3, #0]
		  int32_t EEPROM_Temp[1];
		  EEPROM_Temp[0] = Battery_Capacity_Accum/42949672960;
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <main+0x4b4>)
 800638c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 030a 	mov.w	r3, #10
 8006398:	f7f9 ffee 	bl	8000378 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4613      	mov	r3, r2
 80063a2:	607b      	str	r3, [r7, #4]
		  EEPROM_SPI_Write_int32_t(50*4, EEPROM_Temp[0]);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4619      	mov	r1, r3
 80063a8:	20c8      	movs	r0, #200	; 0xc8
 80063aa:	f7fe ffd9 	bl	8005360 <EEPROM_SPI_Write_int32_t>
	  Alarm_State_Update();
 80063ae:	e6bd      	b.n	800612c <main+0x214>
 80063b0:	2400087a 	.word	0x2400087a
 80063b4:	24000778 	.word	0x24000778
 80063b8:	2400087e 	.word	0x2400087e
 80063bc:	2400087d 	.word	0x2400087d
 80063c0:	24000714 	.word	0x24000714
 80063c4:	2400087b 	.word	0x2400087b
 80063c8:	24000880 	.word	0x24000880
 80063cc:	24000740 	.word	0x24000740

080063d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b09c      	sub	sp, #112	; 0x70
 80063d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063da:	224c      	movs	r2, #76	; 0x4c
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f00a f942 	bl	8010668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	2220      	movs	r2, #32
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f00a f93c 	bl	8010668 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80063f0:	2002      	movs	r0, #2
 80063f2:	f002 ff61 	bl	80092b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80063f6:	2300      	movs	r3, #0
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	4b3c      	ldr	r3, [pc, #240]	; (80064ec <SystemClock_Config+0x11c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a3b      	ldr	r2, [pc, #236]	; (80064ec <SystemClock_Config+0x11c>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <SystemClock_Config+0x11c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <SystemClock_Config+0x120>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006418:	4a35      	ldr	r2, [pc, #212]	; (80064f0 <SystemClock_Config+0x120>)
 800641a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800641e:	6193      	str	r3, [r2, #24]
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <SystemClock_Config+0x120>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800642c:	bf00      	nop
 800642e:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <SystemClock_Config+0x120>)
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643a:	d1f8      	bne.n	800642e <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800643c:	f002 ff2c 	bl	8009298 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006440:	f001 feae 	bl	80081a0 <HAL_GetREVID>
 8006444:	4b2b      	ldr	r3, [pc, #172]	; (80064f4 <SystemClock_Config+0x124>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <SystemClock_Config+0x124>)
 800644a:	f023 0318 	bic.w	r3, r3, #24
 800644e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <SystemClock_Config+0x124>)
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f023 0303 	bic.w	r3, r3, #3
 8006458:	4a26      	ldr	r2, [pc, #152]	; (80064f4 <SystemClock_Config+0x124>)
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006460:	2305      	movs	r3, #5
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800646a:	2301      	movs	r3, #1
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800646e:	2302      	movs	r3, #2
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006472:	2302      	movs	r3, #2
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 15;
 800647a:	230f      	movs	r3, #15
 800647c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800647e:	2302      	movs	r3, #2
 8006480:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006482:	2303      	movs	r3, #3
 8006484:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006486:	2302      	movs	r3, #2
 8006488:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800648a:	230c      	movs	r3, #12
 800648c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800648e:	2300      	movs	r3, #0
 8006490:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f002 ff46 	bl	800932c <HAL_RCC_OscConfig>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80064a6:	f000 fbdb 	bl	8006c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064aa:	233f      	movs	r3, #63	; 0x3f
 80064ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80064ae:	2303      	movs	r3, #3
 80064b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80064b6:	2308      	movs	r3, #8
 80064b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f003 fb86 	bl	8009be0 <HAL_RCC_ClockConfig>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80064da:	f000 fbc1 	bl	8006c60 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80064de:	f003 fd35 	bl	8009f4c <HAL_RCC_EnableCSS>
}
 80064e2:	bf00      	nop
 80064e4:	3770      	adds	r7, #112	; 0x70
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	58000400 	.word	0x58000400
 80064f0:	58024800 	.word	0x58024800
 80064f4:	58024400 	.word	0x58024400

080064f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b0b0      	sub	sp, #192	; 0xc0
 80064fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064fe:	463b      	mov	r3, r7
 8006500:	22c0      	movs	r2, #192	; 0xc0
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f00a f8af 	bl	8010668 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6|RCC_PERIPHCLK_SPI4
 800650a:	f246 0203 	movw	r2, #24579	; 0x6003
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800651a:	2309      	movs	r3, #9
 800651c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800651e:	2302      	movs	r3, #2
 8006520:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8006522:	2303      	movs	r3, #3
 8006524:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006526:	2302      	movs	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800652a:	23c0      	movs	r3, #192	; 0xc0
 800652c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800652e:	2320      	movs	r3, #32
 8006530:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8006532:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8006538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800653c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 800653e:	2301      	movs	r3, #1
 8006540:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8006542:	2308      	movs	r3, #8
 8006544:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 8006546:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800654a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800654e:	463b      	mov	r3, r7
 8006550:	4618      	mov	r0, r3
 8006552:	f003 fefd 	bl	800a350 <HAL_RCCEx_PeriphCLKConfig>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <PeriphCommonClock_Config+0x68>
  {
    Error_Handler();
 800655c:	f000 fb80 	bl	8006c60 <Error_Handler>
  }
}
 8006560:	bf00      	nop
 8006562:	37c0      	adds	r7, #192	; 0xc0
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800656c:	2200      	movs	r2, #0
 800656e:	2101      	movs	r1, #1
 8006570:	2036      	movs	r0, #54	; 0x36
 8006572:	f001 fefc 	bl	800836e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006576:	2036      	movs	r0, #54	; 0x36
 8006578:	f001 ff13 	bl	80083a2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800657c:	2200      	movs	r2, #0
 800657e:	2102      	movs	r1, #2
 8006580:	2026      	movs	r0, #38	; 0x26
 8006582:	f001 fef4 	bl	800836e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006586:	2026      	movs	r0, #38	; 0x26
 8006588:	f001 ff0b 	bl	80083a2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	2028      	movs	r0, #40	; 0x28
 8006592:	f001 feec 	bl	800836e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006596:	2028      	movs	r0, #40	; 0x28
 8006598:	f001 ff03 	bl	80083a2 <HAL_NVIC_EnableIRQ>
}
 800659c:	bf00      	nop
 800659e:	bd80      	pop	{r7, pc}

080065a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	609a      	str	r2, [r3, #8]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <MX_RTC_Init+0xc4>)
 80065ba:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <MX_RTC_Init+0xc8>)
 80065bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80065be:	4b29      	ldr	r3, [pc, #164]	; (8006664 <MX_RTC_Init+0xc4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <MX_RTC_Init+0xc4>)
 80065c6:	227f      	movs	r2, #127	; 0x7f
 80065c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80065ca:	4b26      	ldr	r3, [pc, #152]	; (8006664 <MX_RTC_Init+0xc4>)
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <MX_RTC_Init+0xc4>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80065d6:	4b23      	ldr	r3, [pc, #140]	; (8006664 <MX_RTC_Init+0xc4>)
 80065d8:	2200      	movs	r2, #0
 80065da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80065dc:	4b21      	ldr	r3, [pc, #132]	; (8006664 <MX_RTC_Init+0xc4>)
 80065de:	2200      	movs	r2, #0
 80065e0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80065e2:	4b20      	ldr	r3, [pc, #128]	; (8006664 <MX_RTC_Init+0xc4>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80065e8:	481e      	ldr	r0, [pc, #120]	; (8006664 <MX_RTC_Init+0xc4>)
 80065ea:	f005 fcdd 	bl	800bfa8 <HAL_RTC_Init>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80065f4:	f000 fb34 	bl	8006c60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80065f8:	2312      	movs	r3, #18
 80065fa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x12;
 80065fc:	2312      	movs	r3, #18
 80065fe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x12;
 8006600:	2312      	movs	r3, #18
 8006602:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	2201      	movs	r2, #1
 8006610:	4619      	mov	r1, r3
 8006612:	4814      	ldr	r0, [pc, #80]	; (8006664 <MX_RTC_Init+0xc4>)
 8006614:	f005 fd4a 	bl	800c0ac <HAL_RTC_SetTime>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800661e:	f000 fb1f 	bl	8006c60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8006622:	2307      	movs	r3, #7
 8006624:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8006626:	2307      	movs	r3, #7
 8006628:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 800662a:	2309      	movs	r3, #9
 800662c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800662e:	2323      	movs	r3, #35	; 0x23
 8006630:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006632:	463b      	mov	r3, r7
 8006634:	2201      	movs	r2, #1
 8006636:	4619      	mov	r1, r3
 8006638:	480a      	ldr	r0, [pc, #40]	; (8006664 <MX_RTC_Init+0xc4>)
 800663a:	f005 fe31 	bl	800c2a0 <HAL_RTC_SetDate>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8006644:	f000 fb0c 	bl	8006c60 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8006648:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800664c:	4805      	ldr	r0, [pc, #20]	; (8006664 <MX_RTC_Init+0xc4>)
 800664e:	f005 ffcd 	bl	800c5ec <HAL_RTCEx_SetCalibrationOutPut>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8006658:	f000 fb02 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800665c:	bf00      	nop
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	2400034c 	.word	0x2400034c
 8006668:	58004000 	.word	0x58004000

0800666c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006672:	4a29      	ldr	r2, [pc, #164]	; (8006718 <MX_SPI2_Init+0xac>)
 8006674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800667c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800667e:	4b25      	ldr	r3, [pc, #148]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006686:	2207      	movs	r2, #7
 8006688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <MX_SPI2_Init+0xa8>)
 800668c:	2200      	movs	r2, #0
 800668e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006696:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006698:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <MX_SPI2_Init+0xa8>)
 800669a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800669e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80066a0:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066b4:	4b17      	ldr	r3, [pc, #92]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80066ba:	4b16      	ldr	r3, [pc, #88]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066bc:	2200      	movs	r2, #0
 80066be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80066c0:	4b14      	ldr	r3, [pc, #80]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80066c8:	4b12      	ldr	r3, [pc, #72]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066dc:	2200      	movs	r2, #0
 80066de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <MX_SPI2_Init+0xa8>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006700:	4804      	ldr	r0, [pc, #16]	; (8006714 <MX_SPI2_Init+0xa8>)
 8006702:	f005 ffbb 	bl	800c67c <HAL_SPI_Init>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 800670c:	f000 faa8 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}
 8006714:	24000370 	.word	0x24000370
 8006718:	40003800 	.word	0x40003800

0800671c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <MX_SPI4_Init+0xac>)
 8006724:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006728:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800672c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800672e:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006730:	2200      	movs	r2, #0
 8006732:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006734:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006736:	2207      	movs	r2, #7
 8006738:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800673a:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006742:	2200      	movs	r2, #0
 8006744:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006746:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006748:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800674c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006754:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006758:	2200      	movs	r2, #0
 800675a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800675e:	2200      	movs	r2, #0
 8006760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006762:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006764:	2200      	movs	r2, #0
 8006766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800676a:	2200      	movs	r2, #0
 800676c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800676e:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006774:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006778:	2200      	movs	r2, #0
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006790:	2200      	movs	r2, #0
 8006792:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <MX_SPI4_Init+0xa8>)
 8006796:	2200      	movs	r2, #0
 8006798:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <MX_SPI4_Init+0xa8>)
 800679c:	2200      	movs	r2, #0
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80067a0:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <MX_SPI4_Init+0xa8>)
 80067a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <MX_SPI4_Init+0xa8>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <MX_SPI4_Init+0xa8>)
 80067b0:	f005 ff64 	bl	800c67c <HAL_SPI_Init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80067ba:	f000 fa51 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	240003f8 	.word	0x240003f8
 80067c8:	40013400 	.word	0x40013400

080067cc <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80067d0:	4b29      	ldr	r3, [pc, #164]	; (8006878 <MX_SPI6_Init+0xac>)
 80067d2:	4a2a      	ldr	r2, [pc, #168]	; (800687c <MX_SPI6_Init+0xb0>)
 80067d4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80067d6:	4b28      	ldr	r3, [pc, #160]	; (8006878 <MX_SPI6_Init+0xac>)
 80067d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80067dc:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <MX_SPI6_Init+0xac>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80067e4:	4b24      	ldr	r3, [pc, #144]	; (8006878 <MX_SPI6_Init+0xac>)
 80067e6:	2207      	movs	r2, #7
 80067e8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <MX_SPI6_Init+0xac>)
 80067ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067f0:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <MX_SPI6_Init+0xac>)
 80067f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067f8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <MX_SPI6_Init+0xac>)
 80067fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006800:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <MX_SPI6_Init+0xac>)
 8006804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006808:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <MX_SPI6_Init+0xac>)
 800680c:	2200      	movs	r2, #0
 800680e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <MX_SPI6_Init+0xac>)
 8006812:	2200      	movs	r2, #0
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006816:	4b18      	ldr	r3, [pc, #96]	; (8006878 <MX_SPI6_Init+0xac>)
 8006818:	2200      	movs	r2, #0
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <MX_SPI6_Init+0xac>)
 800681e:	2200      	movs	r2, #0
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <MX_SPI6_Init+0xac>)
 8006824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006828:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <MX_SPI6_Init+0xac>)
 800682c:	2200      	movs	r2, #0
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <MX_SPI6_Init+0xac>)
 8006832:	2200      	movs	r2, #0
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006836:	4b10      	ldr	r3, [pc, #64]	; (8006878 <MX_SPI6_Init+0xac>)
 8006838:	2200      	movs	r2, #0
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <MX_SPI6_Init+0xac>)
 800683e:	2200      	movs	r2, #0
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <MX_SPI6_Init+0xac>)
 8006844:	2200      	movs	r2, #0
 8006846:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <MX_SPI6_Init+0xac>)
 800684a:	2200      	movs	r2, #0
 800684c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <MX_SPI6_Init+0xac>)
 8006850:	2200      	movs	r2, #0
 8006852:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <MX_SPI6_Init+0xac>)
 8006856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <MX_SPI6_Init+0xac>)
 800685e:	2200      	movs	r2, #0
 8006860:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8006862:	4805      	ldr	r0, [pc, #20]	; (8006878 <MX_SPI6_Init+0xac>)
 8006864:	f005 ff0a 	bl	800c67c <HAL_SPI_Init>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <MX_SPI6_Init+0xa6>
  {
    Error_Handler();
 800686e:	f000 f9f7 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	24000480 	.word	0x24000480
 800687c:	58001400 	.word	0x58001400

08006880 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006890:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <MX_TIM6_Init+0x64>)
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <MX_TIM6_Init+0x68>)
 8006894:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <MX_TIM6_Init+0x64>)
 8006898:	2200      	movs	r2, #0
 800689a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689c:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <MX_TIM6_Init+0x64>)
 800689e:	2200      	movs	r2, #0
 80068a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 60000;
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <MX_TIM6_Init+0x64>)
 80068a4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80068a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068aa:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <MX_TIM6_Init+0x64>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80068b0:	480c      	ldr	r0, [pc, #48]	; (80068e4 <MX_TIM6_Init+0x64>)
 80068b2:	f006 fe98 	bl	800d5e6 <HAL_TIM_Base_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80068bc:	f000 f9d0 	bl	8006c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068c0:	2300      	movs	r3, #0
 80068c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4805      	ldr	r0, [pc, #20]	; (80068e4 <MX_TIM6_Init+0x64>)
 80068ce:	f007 f93b 	bl	800db48 <HAL_TIMEx_MasterConfigSynchronization>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80068d8:	f000 f9c2 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	24000508 	.word	0x24000508
 80068e8:	40001000 	.word	0x40001000

080068ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80068f0:	4b22      	ldr	r3, [pc, #136]	; (800697c <MX_USART1_UART_Init+0x90>)
 80068f2:	4a23      	ldr	r2, [pc, #140]	; (8006980 <MX_USART1_UART_Init+0x94>)
 80068f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <MX_USART1_UART_Init+0x90>)
 80068f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80068fe:	4b1f      	ldr	r3, [pc, #124]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006900:	2200      	movs	r2, #0
 8006902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006906:	2200      	movs	r2, #0
 8006908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <MX_USART1_UART_Init+0x90>)
 800690c:	2200      	movs	r2, #0
 800690e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006912:	220c      	movs	r2, #12
 8006914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006916:	4b19      	ldr	r3, [pc, #100]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006918:	2200      	movs	r2, #0
 800691a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800691c:	4b17      	ldr	r3, [pc, #92]	; (800697c <MX_USART1_UART_Init+0x90>)
 800691e:	2200      	movs	r2, #0
 8006920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006922:	4b16      	ldr	r3, [pc, #88]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006924:	2200      	movs	r2, #0
 8006926:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006928:	4b14      	ldr	r3, [pc, #80]	; (800697c <MX_USART1_UART_Init+0x90>)
 800692a:	2200      	movs	r2, #0
 800692c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006930:	2200      	movs	r2, #0
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006934:	4811      	ldr	r0, [pc, #68]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006936:	f007 f9b3 	bl	800dca0 <HAL_UART_Init>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006940:	f000 f98e 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006944:	2100      	movs	r1, #0
 8006946:	480d      	ldr	r0, [pc, #52]	; (800697c <MX_USART1_UART_Init+0x90>)
 8006948:	f009 fd07 	bl	801035a <HAL_UARTEx_SetTxFifoThreshold>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006952:	f000 f985 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006956:	2100      	movs	r1, #0
 8006958:	4808      	ldr	r0, [pc, #32]	; (800697c <MX_USART1_UART_Init+0x90>)
 800695a:	f009 fd3c 	bl	80103d6 <HAL_UARTEx_SetRxFifoThreshold>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006964:	f000 f97c 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006968:	4804      	ldr	r0, [pc, #16]	; (800697c <MX_USART1_UART_Init+0x90>)
 800696a:	f009 fcbd 	bl	80102e8 <HAL_UARTEx_DisableFifoMode>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006974:	f000 f974 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006978:	bf00      	nop
 800697a:	bd80      	pop	{r7, pc}
 800697c:	24000554 	.word	0x24000554
 8006980:	40011000 	.word	0x40011000

08006984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006988:	4b2a      	ldr	r3, [pc, #168]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 800698a:	4a2b      	ldr	r2, [pc, #172]	; (8006a38 <MX_USART2_UART_Init+0xb4>)
 800698c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 8006990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 8006998:	2200      	movs	r2, #0
 800699a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 800699e:	2200      	movs	r2, #0
 80069a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80069a8:	4b22      	ldr	r3, [pc, #136]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069aa:	220c      	movs	r2, #12
 80069ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069ae:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069b4:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80069ba:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 80069c6:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069c8:	2233      	movs	r2, #51	; 0x33
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
                              |UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80069d4:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80069e4:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069ec:	4811      	ldr	r0, [pc, #68]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 80069ee:	f007 f957 	bl	800dca0 <HAL_UART_Init>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 80069f8:	f000 f932 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069fc:	2100      	movs	r1, #0
 80069fe:	480d      	ldr	r0, [pc, #52]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 8006a00:	f009 fcab 	bl	801035a <HAL_UARTEx_SetTxFifoThreshold>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8006a0a:	f000 f929 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4808      	ldr	r0, [pc, #32]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 8006a12:	f009 fce0 	bl	80103d6 <HAL_UARTEx_SetRxFifoThreshold>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 8006a1c:	f000 f920 	bl	8006c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006a20:	4804      	ldr	r0, [pc, #16]	; (8006a34 <MX_USART2_UART_Init+0xb0>)
 8006a22:	f009 fc61 	bl	80102e8 <HAL_UARTEx_DisableFifoMode>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 8006a2c:	f000 f918 	bl	8006c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	240005e8 	.word	0x240005e8
 8006a38:	40004400 	.word	0x40004400

08006a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a42:	f107 031c 	add.w	r3, r7, #28
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	605a      	str	r2, [r3, #4]
 8006a4c:	609a      	str	r2, [r3, #8]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a52:	4b7d      	ldr	r3, [pc, #500]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a58:	4a7b      	ldr	r2, [pc, #492]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a5a:	f043 0310 	orr.w	r3, r3, #16
 8006a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a62:	4b79      	ldr	r3, [pc, #484]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a70:	4b75      	ldr	r3, [pc, #468]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a76:	4a74      	ldr	r2, [pc, #464]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a80:	4b71      	ldr	r3, [pc, #452]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a8e:	4b6e      	ldr	r3, [pc, #440]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a94:	4a6c      	ldr	r2, [pc, #432]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a9e:	4b6a      	ldr	r3, [pc, #424]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aac:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab2:	4a65      	ldr	r2, [pc, #404]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006abc:	4b62      	ldr	r3, [pc, #392]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aca:	4b5f      	ldr	r3, [pc, #380]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad0:	4a5d      	ldr	r2, [pc, #372]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006ad2:	f043 0302 	orr.w	r3, r3, #2
 8006ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ada:	4b5b      	ldr	r3, [pc, #364]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ae8:	4b57      	ldr	r3, [pc, #348]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aee:	4a56      	ldr	r2, [pc, #344]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006af0:	f043 0308 	orr.w	r3, r3, #8
 8006af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006af8:	4b53      	ldr	r3, [pc, #332]	; (8006c48 <MX_GPIO_Init+0x20c>)
 8006afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TURN_ON_CHARGE_Pin|TURN_ON_DISCHARGE_Pin|EN_RELAY_Pin|TURN_OFF_CHARGE_Pin
 8006b06:	2200      	movs	r2, #0
 8006b08:	f640 613d 	movw	r1, #3645	; 0xe3d
 8006b0c:	484f      	ldr	r0, [pc, #316]	; (8006c4c <MX_GPIO_Init+0x210>)
 8006b0e:	f002 fb8f 	bl	8009230 <HAL_GPIO_WritePin>
                          |SPI4_NSS_EEPROM_Pin|WRPT_EEPROM_Pin|HOLD_EEPROM_Pin|TURN_OFF_DISCHARGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_NSS_LTC_GPIO_Port, SPI6_NSS_LTC_Pin, GPIO_PIN_RESET);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2110      	movs	r1, #16
 8006b16:	484e      	ldr	r0, [pc, #312]	; (8006c50 <MX_GPIO_Init+0x214>)
 8006b18:	f002 fb8a 	bl	8009230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI4_NSS_FLASH_Pin|LED_GREEN_BUZEER_Pin|LED_CHARGE_NC2_Pin, GPIO_PIN_RESET);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8006b22:	484c      	ldr	r0, [pc, #304]	; (8006c54 <MX_GPIO_Init+0x218>)
 8006b24:	f002 fb84 	bl	8009230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_NSS_INA_Pin|TURN_ON_PRECHARGE_Pin|LED_ALARM_NC3_Pin|LED_DISCHARGE_NC1_Pin
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f640 211c 	movw	r1, #2588	; 0xa1c
 8006b2e:	484a      	ldr	r0, [pc, #296]	; (8006c58 <MX_GPIO_Init+0x21c>)
 8006b30:	f002 fb7e 	bl	8009230 <HAL_GPIO_WritePin>
                          |USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_PWR_EN_GPIO_Port, CAN_PWR_EN_Pin, GPIO_PIN_RESET);
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b3a:	4848      	ldr	r0, [pc, #288]	; (8006c5c <MX_GPIO_Init+0x220>)
 8006b3c:	f002 fb78 	bl	8009230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_ON_CHARGE_Pin TURN_ON_DISCHARGE_Pin EN_RELAY_Pin TURN_OFF_CHARGE_Pin
                           SPI4_NSS_EEPROM_Pin WRPT_EEPROM_Pin HOLD_EEPROM_Pin TURN_OFF_DISCHARGE_Pin */
  GPIO_InitStruct.Pin = TURN_ON_CHARGE_Pin|TURN_ON_DISCHARGE_Pin|EN_RELAY_Pin|TURN_OFF_CHARGE_Pin
 8006b40:	f640 633d 	movw	r3, #3645	; 0xe3d
 8006b44:	61fb      	str	r3, [r7, #28]
                          |SPI4_NSS_EEPROM_Pin|WRPT_EEPROM_Pin|HOLD_EEPROM_Pin|TURN_OFF_DISCHARGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b46:	2301      	movs	r3, #1
 8006b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b52:	f107 031c 	add.w	r3, r7, #28
 8006b56:	4619      	mov	r1, r3
 8006b58:	483c      	ldr	r0, [pc, #240]	; (8006c4c <MX_GPIO_Init+0x210>)
 8006b5a:	f002 f9a1 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI6_NSS_LTC_Pin */
  GPIO_InitStruct.Pin = SPI6_NSS_LTC_Pin;
 8006b5e:	2310      	movs	r3, #16
 8006b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b62:	2301      	movs	r3, #1
 8006b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI6_NSS_LTC_GPIO_Port, &GPIO_InitStruct);
 8006b6e:	f107 031c 	add.w	r3, r7, #28
 8006b72:	4619      	mov	r1, r3
 8006b74:	4836      	ldr	r0, [pc, #216]	; (8006c50 <MX_GPIO_Init+0x214>)
 8006b76:	f002 f993 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FNC_BTN_Pin LED_GREEN_OK_Pin */
  GPIO_InitStruct.Pin = FNC_BTN_Pin|LED_GREEN_OK_Pin;
 8006b7a:	f248 0380 	movw	r3, #32896	; 0x8080
 8006b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b80:	2300      	movs	r3, #0
 8006b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b84:	2301      	movs	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b88:	f107 031c 	add.w	r3, r7, #28
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	482f      	ldr	r0, [pc, #188]	; (8006c4c <MX_GPIO_Init+0x210>)
 8006b90:	f002 f986 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_DISCHARGE_Pin LED_YELLOW_CHARGE_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_DISCHARGE_Pin|LED_YELLOW_CHARGE_Pin;
 8006b94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba2:	f107 031c 	add.w	r3, r7, #28
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	482a      	ldr	r0, [pc, #168]	; (8006c54 <MX_GPIO_Init+0x218>)
 8006baa:	f002 f979 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI4_NSS_FLASH_Pin LED_GREEN_BUZEER_Pin LED_CHARGE_NC2_Pin */
  GPIO_InitStruct.Pin = SPI4_NSS_FLASH_Pin|LED_GREEN_BUZEER_Pin|LED_CHARGE_NC2_Pin;
 8006bae:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8006bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc0:	f107 031c 	add.w	r3, r7, #28
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4823      	ldr	r0, [pc, #140]	; (8006c54 <MX_GPIO_Init+0x218>)
 8006bc8:	f002 f96a 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_ALARM_Pin */
  GPIO_InitStruct.Pin = LED_RED_ALARM_Pin;
 8006bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_RED_ALARM_GPIO_Port, &GPIO_InitStruct);
 8006bda:	f107 031c 	add.w	r3, r7, #28
 8006bde:	4619      	mov	r1, r3
 8006be0:	481d      	ldr	r0, [pc, #116]	; (8006c58 <MX_GPIO_Init+0x21c>)
 8006be2:	f002 f95d 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_INA_Pin TURN_ON_PRECHARGE_Pin LED_ALARM_NC3_Pin LED_DISCHARGE_NC1_Pin
                           USART2_DE_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_INA_Pin|TURN_ON_PRECHARGE_Pin|LED_ALARM_NC3_Pin|LED_DISCHARGE_NC1_Pin
 8006be6:	f640 231c 	movw	r3, #2588	; 0xa1c
 8006bea:	61fb      	str	r3, [r7, #28]
                          |USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bec:	2301      	movs	r3, #1
 8006bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bf8:	f107 031c 	add.w	r3, r7, #28
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4816      	ldr	r0, [pc, #88]	; (8006c58 <MX_GPIO_Init+0x21c>)
 8006c00:	f002 f94e 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_INA_Pin */
  GPIO_InitStruct.Pin = ALARM_INA_Pin;
 8006c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ALARM_INA_GPIO_Port, &GPIO_InitStruct);
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	4619      	mov	r1, r3
 8006c1a:	480f      	ldr	r0, [pc, #60]	; (8006c58 <MX_GPIO_Init+0x21c>)
 8006c1c:	f002 f940 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_PWR_EN_Pin */
  GPIO_InitStruct.Pin = CAN_PWR_EN_Pin;
 8006c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c26:	2301      	movs	r3, #1
 8006c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006c32:	f107 031c 	add.w	r3, r7, #28
 8006c36:	4619      	mov	r1, r3
 8006c38:	4808      	ldr	r0, [pc, #32]	; (8006c5c <MX_GPIO_Init+0x220>)
 8006c3a:	f002 f931 	bl	8008ea0 <HAL_GPIO_Init>

}
 8006c3e:	bf00      	nop
 8006c40:	3730      	adds	r7, #48	; 0x30
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	58024400 	.word	0x58024400
 8006c4c:	58021000 	.word	0x58021000
 8006c50:	58020000 	.word	0x58020000
 8006c54:	58020400 	.word	0x58020400
 8006c58:	58020c00 	.word	0x58020c00
 8006c5c:	58020800 	.word	0x58020800

08006c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c64:	b672      	cpsid	i
}
 8006c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c68:	e7fe      	b.n	8006c68 <Error_Handler+0x8>
	...

08006c6c <tm1637Init>:
	, 0x80 // -
};


void tm1637Init(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <tm1637Init+0x94>)
 8006c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c78:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <tm1637Init+0x94>)
 8006c7a:	f043 0302 	orr.w	r3, r3, #2
 8006c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c82:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <tm1637Init+0x94>)
 8006c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8006c90:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <tm1637Init+0x94>)
 8006c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c96:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <tm1637Init+0x94>)
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <tm1637Init+0x94>)
 8006ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	609a      	str	r2, [r3, #8]
 8006cba:	60da      	str	r2, [r3, #12]
 8006cbc:	611a      	str	r2, [r3, #16]

    g.Mode = GPIO_MODE_OUTPUT_PP;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8006cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	480c      	ldr	r0, [pc, #48]	; (8006d04 <tm1637Init+0x98>)
 8006cd4:	f002 f8e4 	bl	8008ea0 <HAL_GPIO_Init>

//    g.Pull = GPIO_PULLUP;
//    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	61bb      	str	r3, [r7, #24]
    g.Pin = DIO_PIN;
 8006ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8006ce6:	f107 030c 	add.w	r3, r7, #12
 8006cea:	4619      	mov	r1, r3
 8006cec:	4805      	ldr	r0, [pc, #20]	; (8006d04 <tm1637Init+0x98>)
 8006cee:	f002 f8d7 	bl	8008ea0 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8006cf2:	2008      	movs	r0, #8
 8006cf4:	f000 f90e 	bl	8006f14 <tm1637SetBrightness>
}
 8006cf8:	bf00      	nop
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	58024400 	.word	0x58024400
 8006d04:	58020400 	.word	0x58020400

08006d08 <tm1637DisplayDecimalPnt>:
    _tm1637Stop();
}


void tm1637DisplayDecimalPnt(int v, int point)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];

    digitArr[1]=0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	727b      	strb	r3, [r7, #9]
    digitArr[2]=0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	72bb      	strb	r3, [r7, #10]
    digitArr[3]=0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	72fb      	strb	r3, [r7, #11]
    digitArr[4]=0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	733b      	strb	r3, [r7, #12]

if (v <= 9) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	dc25      	bgt.n	8006d74 <tm1637DisplayDecimalPnt+0x6c>
    for (int i = 0; i < 1; ++i) {
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e01e      	b.n	8006d6c <tm1637DisplayDecimalPnt+0x64>
        digitArr[i] = segmentMap[v % 10];
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4b76      	ldr	r3, [pc, #472]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006d32:	fb83 2301 	smull	r2, r3, r3, r1
 8006d36:	109a      	asrs	r2, r3, #2
 8006d38:	17cb      	asrs	r3, r1, #31
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	1aca      	subs	r2, r1, r3
 8006d46:	4b72      	ldr	r3, [pc, #456]	; (8006f10 <tm1637DisplayDecimalPnt+0x208>)
 8006d48:	5c99      	ldrb	r1, [r3, r2]
 8006d4a:	f107 0208 	add.w	r2, r7, #8
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	460a      	mov	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
        v /= 10;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a6c      	ldr	r2, [pc, #432]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8006d5e:	1092      	asrs	r2, r2, #2
 8006d60:	17db      	asrs	r3, r3, #31
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 1; ++i) {
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dddd      	ble.n	8006d2e <tm1637DisplayDecimalPnt+0x26>
 8006d72:	e077      	b.n	8006e64 <tm1637DisplayDecimalPnt+0x15c>
    }
}
else if (v <= 99) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b63      	cmp	r3, #99	; 0x63
 8006d78:	dc25      	bgt.n	8006dc6 <tm1637DisplayDecimalPnt+0xbe>
    for (int i = 0; i < 2; ++i) {
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e01e      	b.n	8006dbe <tm1637DisplayDecimalPnt+0xb6>
        digitArr[i] = segmentMap[v % 10];
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4b62      	ldr	r3, [pc, #392]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006d84:	fb83 2301 	smull	r2, r3, r3, r1
 8006d88:	109a      	asrs	r2, r3, #2
 8006d8a:	17cb      	asrs	r3, r1, #31
 8006d8c:	1ad2      	subs	r2, r2, r3
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	1aca      	subs	r2, r1, r3
 8006d98:	4b5d      	ldr	r3, [pc, #372]	; (8006f10 <tm1637DisplayDecimalPnt+0x208>)
 8006d9a:	5c99      	ldrb	r1, [r3, r2]
 8006d9c:	f107 0208 	add.w	r2, r7, #8
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	4413      	add	r3, r2
 8006da4:	460a      	mov	r2, r1
 8006da6:	701a      	strb	r2, [r3, #0]
        v /= 10;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006dac:	fb82 1203 	smull	r1, r2, r2, r3
 8006db0:	1092      	asrs	r2, r2, #2
 8006db2:	17db      	asrs	r3, r3, #31
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	dddd      	ble.n	8006d80 <tm1637DisplayDecimalPnt+0x78>
 8006dc4:	e04e      	b.n	8006e64 <tm1637DisplayDecimalPnt+0x15c>
    }
}
else if (v <= 999) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dcc:	da25      	bge.n	8006e1a <tm1637DisplayDecimalPnt+0x112>
    for (int i = 0; i < 3; ++i) {
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e01e      	b.n	8006e12 <tm1637DisplayDecimalPnt+0x10a>
        digitArr[i] = segmentMap[v % 10];
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006dd8:	fb83 2301 	smull	r2, r3, r3, r1
 8006ddc:	109a      	asrs	r2, r3, #2
 8006dde:	17cb      	asrs	r3, r1, #31
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	1aca      	subs	r2, r1, r3
 8006dec:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <tm1637DisplayDecimalPnt+0x208>)
 8006dee:	5c99      	ldrb	r1, [r3, r2]
 8006df0:	f107 0208 	add.w	r2, r7, #8
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	460a      	mov	r2, r1
 8006dfa:	701a      	strb	r2, [r3, #0]
        v /= 10;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006e00:	fb82 1203 	smull	r1, r2, r2, r3
 8006e04:	1092      	asrs	r2, r2, #2
 8006e06:	17db      	asrs	r3, r3, #31
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	dddd      	ble.n	8006dd4 <tm1637DisplayDecimalPnt+0xcc>
 8006e18:	e024      	b.n	8006e64 <tm1637DisplayDecimalPnt+0x15c>
    }
}
else {
    for (int i = 0; i < 4; ++i) {
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	e01e      	b.n	8006e5e <tm1637DisplayDecimalPnt+0x156>
        digitArr[i] = segmentMap[v % 10];
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4b3a      	ldr	r3, [pc, #232]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006e24:	fb83 2301 	smull	r2, r3, r3, r1
 8006e28:	109a      	asrs	r2, r3, #2
 8006e2a:	17cb      	asrs	r3, r1, #31
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	1aca      	subs	r2, r1, r3
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <tm1637DisplayDecimalPnt+0x208>)
 8006e3a:	5c99      	ldrb	r1, [r3, r2]
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	460a      	mov	r2, r1
 8006e46:	701a      	strb	r2, [r3, #0]
        v /= 10;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <tm1637DisplayDecimalPnt+0x204>)
 8006e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8006e50:	1092      	asrs	r2, r2, #2
 8006e52:	17db      	asrs	r3, r3, #31
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	dddd      	ble.n	8006e20 <tm1637DisplayDecimalPnt+0x118>
    }
}
    switch(point)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d823      	bhi.n	8006eb4 <tm1637DisplayDecimalPnt+0x1ac>
 8006e6c:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <tm1637DisplayDecimalPnt+0x16c>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006e9d 	.word	0x08006e9d
 8006e80:	08006ea9 	.word	0x08006ea9
    {
       case 1:
        	digitArr[0] |= 0x80;
 8006e84:	7a3b      	ldrb	r3, [r7, #8]
 8006e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	723b      	strb	r3, [r7, #8]
        break;
 8006e8e:	e011      	b.n	8006eb4 <tm1637DisplayDecimalPnt+0x1ac>
        case 2:
        	digitArr[1] |= 0x80;
 8006e90:	7a7b      	ldrb	r3, [r7, #9]
 8006e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	727b      	strb	r3, [r7, #9]
        break;
 8006e9a:	e00b      	b.n	8006eb4 <tm1637DisplayDecimalPnt+0x1ac>
        case 3:
        	digitArr[2] |= 0x80;
 8006e9c:	7abb      	ldrb	r3, [r7, #10]
 8006e9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	72bb      	strb	r3, [r7, #10]
        break;
 8006ea6:	e005      	b.n	8006eb4 <tm1637DisplayDecimalPnt+0x1ac>
        case 4:
        	digitArr[3] |= 0x80;
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	72fb      	strb	r3, [r7, #11]
        break;
 8006eb2:	bf00      	nop
    }

    _tm1637Start();
 8006eb4:	f000 f843 	bl	8006f3e <_tm1637Start>
    _tm1637WriteByte(0x40);
 8006eb8:	2040      	movs	r0, #64	; 0x40
 8006eba:	f000 f872 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 8006ebe:	f000 f860 	bl	8006f82 <_tm1637ReadResult>
    _tm1637Stop();
 8006ec2:	f000 f849 	bl	8006f58 <_tm1637Stop>

    _tm1637Start();
 8006ec6:	f000 f83a 	bl	8006f3e <_tm1637Start>
    _tm1637WriteByte(0xC0);
 8006eca:	20c0      	movs	r0, #192	; 0xc0
 8006ecc:	f000 f869 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 8006ed0:	f000 f857 	bl	8006f82 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e00e      	b.n	8006ef8 <tm1637DisplayDecimalPnt+0x1f0>
        _tm1637WriteByte(digitArr[3 - i]);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f1c3 0303 	rsb	r3, r3, #3
 8006ee0:	3320      	adds	r3, #32
 8006ee2:	443b      	add	r3, r7
 8006ee4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f85a 	bl	8006fa2 <_tm1637WriteByte>
        _tm1637ReadResult();
 8006eee:	f000 f848 	bl	8006f82 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	dded      	ble.n	8006eda <tm1637DisplayDecimalPnt+0x1d2>
    }

    _tm1637Stop();
 8006efe:	f000 f82b 	bl	8006f58 <_tm1637Stop>
}
 8006f02:	bf00      	nop
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	66666667 	.word	0x66666667
 8006f10:	08010c28 	.word	0x08010c28

08006f14 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8006f1e:	f000 f80e 	bl	8006f3e <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	3b79      	subs	r3, #121	; 0x79
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f83a 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 8006f2e:	f000 f828 	bl	8006f82 <_tm1637ReadResult>
    _tm1637Stop();
 8006f32:	f000 f811 	bl	8006f58 <_tm1637Stop>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <_tm1637Start>:

void _tm1637Start(void)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8006f42:	f000 f875 	bl	8007030 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8006f46:	f000 f88b 	bl	8007060 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8006f4a:	2002      	movs	r0, #2
 8006f4c:	f000 f853 	bl	8006ff6 <_tm1637DelayUsec>
    _tm1637DioLow();
 8006f50:	f000 f892 	bl	8007078 <_tm1637DioLow>
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8006f5c:	f000 f874 	bl	8007048 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8006f60:	2002      	movs	r0, #2
 8006f62:	f000 f848 	bl	8006ff6 <_tm1637DelayUsec>
    _tm1637DioLow();
 8006f66:	f000 f887 	bl	8007078 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8006f6a:	2002      	movs	r0, #2
 8006f6c:	f000 f843 	bl	8006ff6 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8006f70:	f000 f85e 	bl	8007030 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8006f74:	2002      	movs	r0, #2
 8006f76:	f000 f83e 	bl	8006ff6 <_tm1637DelayUsec>
    _tm1637DioHigh();
 8006f7a:	f000 f871 	bl	8007060 <_tm1637DioHigh>
}
 8006f7e:	bf00      	nop
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8006f86:	f000 f85f 	bl	8007048 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8006f8a:	2005      	movs	r0, #5
 8006f8c:	f000 f833 	bl	8006ff6 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8006f90:	f000 f84e 	bl	8007030 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8006f94:	2002      	movs	r0, #2
 8006f96:	f000 f82e 	bl	8006ff6 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8006f9a:	f000 f855 	bl	8007048 <_tm1637ClkLow>
}
 8006f9e:	bf00      	nop
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e019      	b.n	8006fe6 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8006fb2:	f000 f849 	bl	8007048 <_tm1637ClkLow>
        if (b & 0x01) {
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8006fc0:	f000 f84e 	bl	8007060 <_tm1637DioHigh>
 8006fc4:	e001      	b.n	8006fca <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8006fc6:	f000 f857 	bl	8007078 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8006fca:	2003      	movs	r0, #3
 8006fcc:	f000 f813 	bl	8006ff6 <_tm1637DelayUsec>
        b >>= 1;
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8006fd6:	f000 f82b 	bl	8007030 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8006fda:	2003      	movs	r0, #3
 8006fdc:	f000 f80b 	bl	8006ff6 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b07      	cmp	r3, #7
 8006fea:	dde2      	ble.n	8006fb2 <_tm1637WriteByte+0x10>
    }
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8006ffe:	e00c      	b.n	800701a <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e003      	b.n	800700e <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8007006:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b09      	cmp	r3, #9
 8007012:	ddf8      	ble.n	8007006 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3b01      	subs	r3, #1
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1ef      	bne.n	8007000 <_tm1637DelayUsec+0xa>
        }
    }
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8007034:	2201      	movs	r2, #1
 8007036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800703a:	4802      	ldr	r0, [pc, #8]	; (8007044 <_tm1637ClkHigh+0x14>)
 800703c:	f002 f8f8 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	58020400 	.word	0x58020400

08007048 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 800704c:	2200      	movs	r2, #0
 800704e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007052:	4802      	ldr	r0, [pc, #8]	; (800705c <_tm1637ClkLow+0x14>)
 8007054:	f002 f8ec 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007058:	bf00      	nop
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58020400 	.word	0x58020400

08007060 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8007064:	2201      	movs	r2, #1
 8007066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800706a:	4802      	ldr	r0, [pc, #8]	; (8007074 <_tm1637DioHigh+0x14>)
 800706c:	f002 f8e0 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}
 8007074:	58020400 	.word	0x58020400

08007078 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 800707c:	2200      	movs	r2, #0
 800707e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007082:	4802      	ldr	r0, [pc, #8]	; (800708c <_tm1637DioLow+0x14>)
 8007084:	f002 f8d4 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007088:	bf00      	nop
 800708a:	bd80      	pop	{r7, pc}
 800708c:	58020400 	.word	0x58020400

08007090 <tm1637WriteSymbol>:

void tm1637WriteSymbol(unsigned char Symbol, uint8_t pos) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	460a      	mov	r2, r1
 800709a:	71fb      	strb	r3, [r7, #7]
 800709c:	4613      	mov	r3, r2
 800709e:	71bb      	strb	r3, [r7, #6]

    static unsigned char digitArr[4];
    if (Symbol == 'A')
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b41      	cmp	r3, #65	; 0x41
 80070a4:	d104      	bne.n	80070b0 <tm1637WriteSymbol+0x20>
    digitArr[pos] = segmentMap[10];
 80070a6:	79bb      	ldrb	r3, [r7, #6]
 80070a8:	2177      	movs	r1, #119	; 0x77
 80070aa:	4a59      	ldr	r2, [pc, #356]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070ac:	54d1      	strb	r1, [r2, r3]
 80070ae:	e086      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == 'B')
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	2b42      	cmp	r3, #66	; 0x42
 80070b4:	d104      	bne.n	80070c0 <tm1637WriteSymbol+0x30>
    digitArr[pos] = segmentMap[11];
 80070b6:	79bb      	ldrb	r3, [r7, #6]
 80070b8:	217c      	movs	r1, #124	; 0x7c
 80070ba:	4a55      	ldr	r2, [pc, #340]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070bc:	54d1      	strb	r1, [r2, r3]
 80070be:	e07e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == 'C')
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b43      	cmp	r3, #67	; 0x43
 80070c4:	d104      	bne.n	80070d0 <tm1637WriteSymbol+0x40>
    digitArr[pos] = segmentMap[12];
 80070c6:	79bb      	ldrb	r3, [r7, #6]
 80070c8:	2139      	movs	r1, #57	; 0x39
 80070ca:	4a51      	ldr	r2, [pc, #324]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070cc:	54d1      	strb	r1, [r2, r3]
 80070ce:	e076      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == 'D')
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b44      	cmp	r3, #68	; 0x44
 80070d4:	d104      	bne.n	80070e0 <tm1637WriteSymbol+0x50>
    digitArr[pos] = segmentMap[13];
 80070d6:	79bb      	ldrb	r3, [r7, #6]
 80070d8:	215e      	movs	r1, #94	; 0x5e
 80070da:	4a4d      	ldr	r2, [pc, #308]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070dc:	54d1      	strb	r1, [r2, r3]
 80070de:	e06e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == 'E')
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b45      	cmp	r3, #69	; 0x45
 80070e4:	d104      	bne.n	80070f0 <tm1637WriteSymbol+0x60>
    digitArr[pos] = segmentMap[14];
 80070e6:	79bb      	ldrb	r3, [r7, #6]
 80070e8:	2179      	movs	r1, #121	; 0x79
 80070ea:	4a49      	ldr	r2, [pc, #292]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070ec:	54d1      	strb	r1, [r2, r3]
 80070ee:	e066      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == 'F')
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	2b46      	cmp	r3, #70	; 0x46
 80070f4:	d104      	bne.n	8007100 <tm1637WriteSymbol+0x70>
    digitArr[pos] = segmentMap[15];
 80070f6:	79bb      	ldrb	r3, [r7, #6]
 80070f8:	2171      	movs	r1, #113	; 0x71
 80070fa:	4a45      	ldr	r2, [pc, #276]	; (8007210 <tm1637WriteSymbol+0x180>)
 80070fc:	54d1      	strb	r1, [r2, r3]
 80070fe:	e05e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == ' ')
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b20      	cmp	r3, #32
 8007104:	d104      	bne.n	8007110 <tm1637WriteSymbol+0x80>
    digitArr[pos] = segmentMap[16];
 8007106:	79bb      	ldrb	r3, [r7, #6]
 8007108:	2100      	movs	r1, #0
 800710a:	4a41      	ldr	r2, [pc, #260]	; (8007210 <tm1637WriteSymbol+0x180>)
 800710c:	54d1      	strb	r1, [r2, r3]
 800710e:	e056      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '0')
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b30      	cmp	r3, #48	; 0x30
 8007114:	d104      	bne.n	8007120 <tm1637WriteSymbol+0x90>
    digitArr[pos] = segmentMap[0];
 8007116:	79bb      	ldrb	r3, [r7, #6]
 8007118:	213f      	movs	r1, #63	; 0x3f
 800711a:	4a3d      	ldr	r2, [pc, #244]	; (8007210 <tm1637WriteSymbol+0x180>)
 800711c:	54d1      	strb	r1, [r2, r3]
 800711e:	e04e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '1')
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b31      	cmp	r3, #49	; 0x31
 8007124:	d104      	bne.n	8007130 <tm1637WriteSymbol+0xa0>
    digitArr[pos] = segmentMap[1];
 8007126:	79bb      	ldrb	r3, [r7, #6]
 8007128:	2106      	movs	r1, #6
 800712a:	4a39      	ldr	r2, [pc, #228]	; (8007210 <tm1637WriteSymbol+0x180>)
 800712c:	54d1      	strb	r1, [r2, r3]
 800712e:	e046      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '2')
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b32      	cmp	r3, #50	; 0x32
 8007134:	d104      	bne.n	8007140 <tm1637WriteSymbol+0xb0>
    digitArr[pos] = segmentMap[2];
 8007136:	79bb      	ldrb	r3, [r7, #6]
 8007138:	215b      	movs	r1, #91	; 0x5b
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <tm1637WriteSymbol+0x180>)
 800713c:	54d1      	strb	r1, [r2, r3]
 800713e:	e03e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '3')
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b33      	cmp	r3, #51	; 0x33
 8007144:	d104      	bne.n	8007150 <tm1637WriteSymbol+0xc0>
    digitArr[pos] = segmentMap[3];
 8007146:	79bb      	ldrb	r3, [r7, #6]
 8007148:	214f      	movs	r1, #79	; 0x4f
 800714a:	4a31      	ldr	r2, [pc, #196]	; (8007210 <tm1637WriteSymbol+0x180>)
 800714c:	54d1      	strb	r1, [r2, r3]
 800714e:	e036      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '4')
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b34      	cmp	r3, #52	; 0x34
 8007154:	d104      	bne.n	8007160 <tm1637WriteSymbol+0xd0>
    digitArr[pos] = segmentMap[4];
 8007156:	79bb      	ldrb	r3, [r7, #6]
 8007158:	2166      	movs	r1, #102	; 0x66
 800715a:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <tm1637WriteSymbol+0x180>)
 800715c:	54d1      	strb	r1, [r2, r3]
 800715e:	e02e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '5')
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	2b35      	cmp	r3, #53	; 0x35
 8007164:	d104      	bne.n	8007170 <tm1637WriteSymbol+0xe0>
    digitArr[pos] = segmentMap[5];
 8007166:	79bb      	ldrb	r3, [r7, #6]
 8007168:	216d      	movs	r1, #109	; 0x6d
 800716a:	4a29      	ldr	r2, [pc, #164]	; (8007210 <tm1637WriteSymbol+0x180>)
 800716c:	54d1      	strb	r1, [r2, r3]
 800716e:	e026      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '6')
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b36      	cmp	r3, #54	; 0x36
 8007174:	d104      	bne.n	8007180 <tm1637WriteSymbol+0xf0>
    digitArr[pos] = segmentMap[6];
 8007176:	79bb      	ldrb	r3, [r7, #6]
 8007178:	217d      	movs	r1, #125	; 0x7d
 800717a:	4a25      	ldr	r2, [pc, #148]	; (8007210 <tm1637WriteSymbol+0x180>)
 800717c:	54d1      	strb	r1, [r2, r3]
 800717e:	e01e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '7')
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b37      	cmp	r3, #55	; 0x37
 8007184:	d104      	bne.n	8007190 <tm1637WriteSymbol+0x100>
    digitArr[pos] = segmentMap[7];
 8007186:	79bb      	ldrb	r3, [r7, #6]
 8007188:	2107      	movs	r1, #7
 800718a:	4a21      	ldr	r2, [pc, #132]	; (8007210 <tm1637WriteSymbol+0x180>)
 800718c:	54d1      	strb	r1, [r2, r3]
 800718e:	e016      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '8')
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b38      	cmp	r3, #56	; 0x38
 8007194:	d104      	bne.n	80071a0 <tm1637WriteSymbol+0x110>
    digitArr[pos] = segmentMap[8];
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	217f      	movs	r1, #127	; 0x7f
 800719a:	4a1d      	ldr	r2, [pc, #116]	; (8007210 <tm1637WriteSymbol+0x180>)
 800719c:	54d1      	strb	r1, [r2, r3]
 800719e:	e00e      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '9')
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b39      	cmp	r3, #57	; 0x39
 80071a4:	d104      	bne.n	80071b0 <tm1637WriteSymbol+0x120>
    digitArr[pos] = segmentMap[9];
 80071a6:	79bb      	ldrb	r3, [r7, #6]
 80071a8:	216f      	movs	r1, #111	; 0x6f
 80071aa:	4a19      	ldr	r2, [pc, #100]	; (8007210 <tm1637WriteSymbol+0x180>)
 80071ac:	54d1      	strb	r1, [r2, r3]
 80071ae:	e006      	b.n	80071be <tm1637WriteSymbol+0x12e>
    else if (Symbol == '-')
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b2d      	cmp	r3, #45	; 0x2d
 80071b4:	d103      	bne.n	80071be <tm1637WriteSymbol+0x12e>
    digitArr[pos] = segmentMap[23];
 80071b6:	79bb      	ldrb	r3, [r7, #6]
 80071b8:	2140      	movs	r1, #64	; 0x40
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <tm1637WriteSymbol+0x180>)
 80071bc:	54d1      	strb	r1, [r2, r3]

    _tm1637Start();
 80071be:	f7ff febe 	bl	8006f3e <_tm1637Start>
    _tm1637WriteByte(0x40);
 80071c2:	2040      	movs	r0, #64	; 0x40
 80071c4:	f7ff feed 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 80071c8:	f7ff fedb 	bl	8006f82 <_tm1637ReadResult>
    _tm1637Stop();
 80071cc:	f7ff fec4 	bl	8006f58 <_tm1637Stop>

    _tm1637Start();
 80071d0:	f7ff feb5 	bl	8006f3e <_tm1637Start>
    _tm1637WriteByte(0xC0);
 80071d4:	20c0      	movs	r0, #192	; 0xc0
 80071d6:	f7ff fee4 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 80071da:	f7ff fed2 	bl	8006f82 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e00c      	b.n	80071fe <tm1637WriteSymbol+0x16e>
        _tm1637WriteByte(digitArr[3 - i]);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f1c3 0303 	rsb	r3, r3, #3
 80071ea:	4a09      	ldr	r2, [pc, #36]	; (8007210 <tm1637WriteSymbol+0x180>)
 80071ec:	5cd3      	ldrb	r3, [r2, r3]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fed7 	bl	8006fa2 <_tm1637WriteByte>
        _tm1637ReadResult();
 80071f4:	f7ff fec5 	bl	8006f82 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b03      	cmp	r3, #3
 8007202:	ddef      	ble.n	80071e4 <tm1637WriteSymbol+0x154>
    }
   _tm1637Stop();
 8007204:	f7ff fea8 	bl	8006f58 <_tm1637Stop>
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	24000af4 	.word	0x24000af4

08007214 <tm1637WriteDigitArr>:
	tm1637WriteSymbol(' ', 1);
	tm1637WriteSymbol(' ', 2);
	tm1637WriteSymbol(' ', 3);
}

void tm1637WriteDigitArr(unsigned char digitArr[4]) {
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
_tm1637Start();
 800721c:	f7ff fe8f 	bl	8006f3e <_tm1637Start>
_tm1637WriteByte(0x40);
 8007220:	2040      	movs	r0, #64	; 0x40
 8007222:	f7ff febe 	bl	8006fa2 <_tm1637WriteByte>
_tm1637ReadResult();
 8007226:	f7ff feac 	bl	8006f82 <_tm1637ReadResult>
_tm1637Stop();
 800722a:	f7ff fe95 	bl	8006f58 <_tm1637Stop>

_tm1637Start();
 800722e:	f7ff fe86 	bl	8006f3e <_tm1637Start>
_tm1637WriteByte(0xC0);
 8007232:	20c0      	movs	r0, #192	; 0xc0
 8007234:	f7ff feb5 	bl	8006fa2 <_tm1637WriteByte>
_tm1637ReadResult();
 8007238:	f7ff fea3 	bl	8006f82 <_tm1637ReadResult>

for (int i = 0; i < 4; ++i) {
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e00e      	b.n	8007260 <tm1637WriteDigitArr+0x4c>
    _tm1637WriteByte(digitArr[3 - i]);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f1c3 0303 	rsb	r3, r3, #3
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fea6 	bl	8006fa2 <_tm1637WriteByte>
    _tm1637ReadResult();
 8007256:	f7ff fe94 	bl	8006f82 <_tm1637ReadResult>
for (int i = 0; i < 4; ++i) {
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b03      	cmp	r3, #3
 8007264:	dded      	ble.n	8007242 <tm1637WriteDigitArr+0x2e>
	}
	_tm1637Stop();
 8007266:	f7ff fe77 	bl	8006f58 <_tm1637Stop>
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <tm1637WriteSnake>:

void  tm1637WriteSnake(uint32_t SnakeDelay) {
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
	unsigned char digitArr[4];

	digitArr[0] = segmentMap[16];
 800727a:	2300      	movs	r3, #0
 800727c:	733b      	strb	r3, [r7, #12]
	digitArr[1] = segmentMap[16];
 800727e:	2300      	movs	r3, #0
 8007280:	737b      	strb	r3, [r7, #13]
	digitArr[2] = segmentMap[16];
 8007282:	2300      	movs	r3, #0
 8007284:	73bb      	strb	r3, [r7, #14]
	digitArr[3] = segmentMap[16];
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
	tm1637WriteDigitArr(digitArr);
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff ffc0 	bl	8007214 <tm1637WriteDigitArr>

	digitArr[0] = segmentMap[17];
 8007294:	2301      	movs	r3, #1
 8007296:	733b      	strb	r3, [r7, #12]
	tm1637WriteDigitArr(digitArr);
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ffb9 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 ff58 	bl	8008158 <HAL_Delay>

	digitArr[0] = segmentMap[18];
 80072a8:	2302      	movs	r3, #2
 80072aa:	733b      	strb	r3, [r7, #12]
	tm1637WriteDigitArr(digitArr);
 80072ac:	f107 030c 	add.w	r3, r7, #12
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff ffaf 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 ff4e 	bl	8008158 <HAL_Delay>

	digitArr[0] = segmentMap[19];
 80072bc:	2304      	movs	r3, #4
 80072be:	733b      	strb	r3, [r7, #12]
	tm1637WriteDigitArr(digitArr);
 80072c0:	f107 030c 	add.w	r3, r7, #12
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff ffa5 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 ff44 	bl	8008158 <HAL_Delay>

	digitArr[0] = segmentMap[20];
 80072d0:	2308      	movs	r3, #8
 80072d2:	733b      	strb	r3, [r7, #12]
	tm1637WriteDigitArr(digitArr);
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff ff9b 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 ff3a 	bl	8008158 <HAL_Delay>

	digitArr[0] = segmentMap[16];
 80072e4:	2300      	movs	r3, #0
 80072e6:	733b      	strb	r3, [r7, #12]
	digitArr[1] = segmentMap[20];
 80072e8:	2308      	movs	r3, #8
 80072ea:	737b      	strb	r3, [r7, #13]
	tm1637WriteDigitArr(digitArr);
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ff8f 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 ff2e 	bl	8008158 <HAL_Delay>

	digitArr[1] = segmentMap[16];
 80072fc:	2300      	movs	r3, #0
 80072fe:	737b      	strb	r3, [r7, #13]
	digitArr[2] = segmentMap[20];
 8007300:	2308      	movs	r3, #8
 8007302:	73bb      	strb	r3, [r7, #14]
	tm1637WriteDigitArr(digitArr);
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff ff83 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ff22 	bl	8008158 <HAL_Delay>

	digitArr[2] = segmentMap[16];
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]
	digitArr[3] = segmentMap[20];
 8007318:	2308      	movs	r3, #8
 800731a:	73fb      	strb	r3, [r7, #15]
	tm1637WriteDigitArr(digitArr);
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff77 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff16 	bl	8008158 <HAL_Delay>

	digitArr[3] = segmentMap[21];
 800732c:	2310      	movs	r3, #16
 800732e:	73fb      	strb	r3, [r7, #15]
	tm1637WriteDigitArr(digitArr);
 8007330:	f107 030c 	add.w	r3, r7, #12
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ff6d 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 ff0c 	bl	8008158 <HAL_Delay>

	digitArr[3] = segmentMap[22];
 8007340:	2320      	movs	r3, #32
 8007342:	73fb      	strb	r3, [r7, #15]
	tm1637WriteDigitArr(digitArr);
 8007344:	f107 030c 	add.w	r3, r7, #12
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff ff63 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 ff02 	bl	8008158 <HAL_Delay>

	digitArr[3] = segmentMap[17];
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
	tm1637WriteDigitArr(digitArr);
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff59 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fef8 	bl	8008158 <HAL_Delay>

	digitArr[3] = segmentMap[16];
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
	digitArr[2] = segmentMap[17];
 800736c:	2301      	movs	r3, #1
 800736e:	73bb      	strb	r3, [r7, #14]
	tm1637WriteDigitArr(digitArr);
 8007370:	f107 030c 	add.w	r3, r7, #12
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff ff4d 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 feec 	bl	8008158 <HAL_Delay>

	digitArr[2] = segmentMap[16];
 8007380:	2300      	movs	r3, #0
 8007382:	73bb      	strb	r3, [r7, #14]
	digitArr[1] = segmentMap[17];
 8007384:	2301      	movs	r3, #1
 8007386:	737b      	strb	r3, [r7, #13]
	tm1637WriteDigitArr(digitArr);
 8007388:	f107 030c 	add.w	r3, r7, #12
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ff41 	bl	8007214 <tm1637WriteDigitArr>
	HAL_Delay(SnakeDelay);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fee0 	bl	8008158 <HAL_Delay>
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <HAL_MspInit+0x30>)
 80073a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ac:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <HAL_MspInit+0x30>)
 80073ae:	f043 0302 	orr.w	r3, r3, #2
 80073b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <HAL_MspInit+0x30>)
 80073b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	58024400 	.word	0x58024400

080073d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b0b2      	sub	sp, #200	; 0xc8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	22c0      	movs	r2, #192	; 0xc0
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f009 f93f 	bl	8010668 <memset>
  if(hrtc->Instance==RTC)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a10      	ldr	r2, [pc, #64]	; (8007430 <HAL_RTC_MspInit+0x5c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d119      	bne.n	8007428 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80073f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007408:	f107 0308 	add.w	r3, r7, #8
 800740c:	4618      	mov	r0, r3
 800740e:	f002 ff9f 	bl	800a350 <HAL_RCCEx_PeriphCLKConfig>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8007418:	f7ff fc22 	bl	8006c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <HAL_RTC_MspInit+0x60>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	4a04      	ldr	r2, [pc, #16]	; (8007434 <HAL_RTC_MspInit+0x60>)
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007428:	bf00      	nop
 800742a:	37c8      	adds	r7, #200	; 0xc8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58004000 	.word	0x58004000
 8007434:	58024400 	.word	0x58024400

08007438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b0be      	sub	sp, #248	; 0xf8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	609a      	str	r2, [r3, #8]
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007450:	f107 0320 	add.w	r3, r7, #32
 8007454:	22c0      	movs	r2, #192	; 0xc0
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f009 f905 	bl	8010668 <memset>
  if(hspi->Instance==SPI2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a60      	ldr	r2, [pc, #384]	; (80075e4 <HAL_SPI_MspInit+0x1ac>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d147      	bne.n	80074f8 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8007468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800747a:	f107 0320 	add.w	r3, r7, #32
 800747e:	4618      	mov	r0, r3
 8007480:	f002 ff66 	bl	800a350 <HAL_RCCEx_PeriphCLKConfig>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800748a:	f7ff fbe9 	bl	8006c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800748e:	4b56      	ldr	r3, [pc, #344]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007494:	4a54      	ldr	r2, [pc, #336]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800749a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800749e:	4b52      	ldr	r3, [pc, #328]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 80074a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ac:	4b4e      	ldr	r3, [pc, #312]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 80074ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b2:	4a4d      	ldr	r2, [pc, #308]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 80074b4:	f043 0302 	orr.w	r3, r3, #2
 80074b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074bc:	4b4a      	ldr	r3, [pc, #296]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 80074be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_INA_Pin|SPI2_MISO_INA_Pin|SPI2_MOSI_INA_Pin;
 80074ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80074ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d2:	2302      	movs	r3, #2
 80074d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074de:	2300      	movs	r3, #0
 80074e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80074e4:	2305      	movs	r3, #5
 80074e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80074ee:	4619      	mov	r1, r3
 80074f0:	483e      	ldr	r0, [pc, #248]	; (80075ec <HAL_SPI_MspInit+0x1b4>)
 80074f2:	f001 fcd5 	bl	8008ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80074f6:	e071      	b.n	80075dc <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a3c      	ldr	r2, [pc, #240]	; (80075f0 <HAL_SPI_MspInit+0x1b8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d134      	bne.n	800756c <HAL_SPI_MspInit+0x134>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007502:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007508:	4a37      	ldr	r2, [pc, #220]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 800750a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800750e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007512:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007520:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007526:	4a30      	ldr	r2, [pc, #192]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007528:	f043 0310 	orr.w	r3, r3, #16
 800752c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007530:	4b2d      	ldr	r3, [pc, #180]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800753e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8007542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007546:	2302      	movs	r3, #2
 8007548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007558:	2305      	movs	r3, #5
 800755a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800755e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007562:	4619      	mov	r1, r3
 8007564:	4823      	ldr	r0, [pc, #140]	; (80075f4 <HAL_SPI_MspInit+0x1bc>)
 8007566:	f001 fc9b 	bl	8008ea0 <HAL_GPIO_Init>
}
 800756a:	e037      	b.n	80075dc <HAL_SPI_MspInit+0x1a4>
  else if(hspi->Instance==SPI6)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a21      	ldr	r2, [pc, #132]	; (80075f8 <HAL_SPI_MspInit+0x1c0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d132      	bne.n	80075dc <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007576:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800757c:	4a1a      	ldr	r2, [pc, #104]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 800757e:	f043 0320 	orr.w	r3, r3, #32
 8007582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007586:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007594:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 8007596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800759a:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075a4:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <HAL_SPI_MspInit+0x1b0>)
 80075a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI6_SCK_LTC_Pin|SPI6_MISO_LTC_Pin|SPI6_MOSI_LTC_Pin;
 80075b2:	23e0      	movs	r3, #224	; 0xe0
 80075b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b8:	2302      	movs	r3, #2
 80075ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80075ca:	2308      	movs	r3, #8
 80075cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4809      	ldr	r0, [pc, #36]	; (80075fc <HAL_SPI_MspInit+0x1c4>)
 80075d8:	f001 fc62 	bl	8008ea0 <HAL_GPIO_Init>
}
 80075dc:	bf00      	nop
 80075de:	37f8      	adds	r7, #248	; 0xf8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40003800 	.word	0x40003800
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58020400 	.word	0x58020400
 80075f0:	40013400 	.word	0x40013400
 80075f4:	58021000 	.word	0x58021000
 80075f8:	58001400 	.word	0x58001400
 80075fc:	58020000 	.word	0x58020000

08007600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a0b      	ldr	r2, [pc, #44]	; (800763c <HAL_TIM_Base_MspInit+0x3c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10e      	bne.n	8007630 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <HAL_TIM_Base_MspInit+0x40>)
 8007614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <HAL_TIM_Base_MspInit+0x40>)
 800761a:	f043 0310 	orr.w	r3, r3, #16
 800761e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <HAL_TIM_Base_MspInit+0x40>)
 8007624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40001000 	.word	0x40001000
 8007640:	58024400 	.word	0x58024400

08007644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08c      	sub	sp, #48	; 0x30
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800764c:	f107 031c 	add.w	r3, r7, #28
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	605a      	str	r2, [r3, #4]
 8007656:	609a      	str	r2, [r3, #8]
 8007658:	60da      	str	r2, [r3, #12]
 800765a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a34      	ldr	r2, [pc, #208]	; (8007734 <HAL_UART_MspInit+0xf0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d12f      	bne.n	80076c6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007666:	4b34      	ldr	r3, [pc, #208]	; (8007738 <HAL_UART_MspInit+0xf4>)
 8007668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800766c:	4a32      	ldr	r2, [pc, #200]	; (8007738 <HAL_UART_MspInit+0xf4>)
 800766e:	f043 0310 	orr.w	r3, r3, #16
 8007672:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <HAL_UART_MspInit+0xf4>)
 8007678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007684:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <HAL_UART_MspInit+0xf4>)
 8007686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800768a:	4a2b      	ldr	r2, [pc, #172]	; (8007738 <HAL_UART_MspInit+0xf4>)
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007694:	4b28      	ldr	r3, [pc, #160]	; (8007738 <HAL_UART_MspInit+0xf4>)
 8007696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80076a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80076a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a8:	2302      	movs	r3, #2
 80076aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80076b4:	2307      	movs	r3, #7
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076b8:	f107 031c 	add.w	r3, r7, #28
 80076bc:	4619      	mov	r1, r3
 80076be:	481f      	ldr	r0, [pc, #124]	; (800773c <HAL_UART_MspInit+0xf8>)
 80076c0:	f001 fbee 	bl	8008ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80076c4:	e032      	b.n	800772c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <HAL_UART_MspInit+0xfc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d12d      	bne.n	800772c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <HAL_UART_MspInit+0xf4>)
 80076d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_UART_MspInit+0xf4>)
 80076d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80076e0:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_UART_MspInit+0xf4>)
 80076e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <HAL_UART_MspInit+0xf4>)
 80076f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076f4:	4a10      	ldr	r2, [pc, #64]	; (8007738 <HAL_UART_MspInit+0xf4>)
 80076f6:	f043 0308 	orr.w	r3, r3, #8
 80076fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80076fe:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <HAL_UART_MspInit+0xf4>)
 8007700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800770c:	2360      	movs	r3, #96	; 0x60
 800770e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007710:	2302      	movs	r3, #2
 8007712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007718:	2300      	movs	r3, #0
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800771c:	2307      	movs	r3, #7
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007720:	f107 031c 	add.w	r3, r7, #28
 8007724:	4619      	mov	r1, r3
 8007726:	4807      	ldr	r0, [pc, #28]	; (8007744 <HAL_UART_MspInit+0x100>)
 8007728:	f001 fbba 	bl	8008ea0 <HAL_GPIO_Init>
}
 800772c:	bf00      	nop
 800772e:	3730      	adds	r7, #48	; 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40011000 	.word	0x40011000
 8007738:	58024400 	.word	0x58024400
 800773c:	58020000 	.word	0x58020000
 8007740:	40004400 	.word	0x40004400
 8007744:	58020c00 	.word	0x58020c00

08007748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800774c:	f002 fde4 	bl	800a318 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007750:	e7fe      	b.n	8007750 <NMI_Handler+0x8>

08007752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007752:	b480      	push	{r7}
 8007754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007756:	e7fe      	b.n	8007756 <HardFault_Handler+0x4>

08007758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800775c:	e7fe      	b.n	800775c <MemManage_Handler+0x4>

0800775e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800775e:	b480      	push	{r7}
 8007760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007762:	e7fe      	b.n	8007762 <BusFault_Handler+0x4>

08007764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007768:	e7fe      	b.n	8007768 <UsageFault_Handler+0x4>

0800776a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800776a:	b480      	push	{r7}
 800776c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800776e:	bf00      	nop
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800777c:	bf00      	nop
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007798:	f000 fcbe 	bl	8008118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800779c:	bf00      	nop
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80077a4:	4802      	ldr	r0, [pc, #8]	; (80077b0 <USART2_IRQHandler+0x10>)
 80077a6:	f006 fba5 	bl	800def4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80077aa:	bf00      	nop
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	240005e8 	.word	0x240005e8

080077b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_INA_Pin);
 80077b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80077bc:	f001 fd51 	bl	8009262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80077c0:	bf00      	nop
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80077c8:	4802      	ldr	r0, [pc, #8]	; (80077d4 <TIM6_DAC_IRQHandler+0x10>)
 80077ca:	f005 ffdb 	bl	800d784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80077ce:	bf00      	nop
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	24000508 	.word	0x24000508

080077d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <_sbrk+0x5c>)
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <_sbrk+0x60>)
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077ec:	4b13      	ldr	r3, [pc, #76]	; (800783c <_sbrk+0x64>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <_sbrk+0x64>)
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <_sbrk+0x68>)
 80077f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077fa:	4b10      	ldr	r3, [pc, #64]	; (800783c <_sbrk+0x64>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	429a      	cmp	r2, r3
 8007806:	d207      	bcs.n	8007818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007808:	f008 ff46 	bl	8010698 <__errno>
 800780c:	4603      	mov	r3, r0
 800780e:	220c      	movs	r2, #12
 8007810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007812:	f04f 33ff 	mov.w	r3, #4294967295
 8007816:	e009      	b.n	800782c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007818:	4b08      	ldr	r3, [pc, #32]	; (800783c <_sbrk+0x64>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800781e:	4b07      	ldr	r3, [pc, #28]	; (800783c <_sbrk+0x64>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	4a05      	ldr	r2, [pc, #20]	; (800783c <_sbrk+0x64>)
 8007828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	24080000 	.word	0x24080000
 8007838:	00000400 	.word	0x00000400
 800783c:	24000af8 	.word	0x24000af8
 8007840:	24000c70 	.word	0x24000c70

08007844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007848:	4b37      	ldr	r3, [pc, #220]	; (8007928 <SystemInit+0xe4>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784e:	4a36      	ldr	r2, [pc, #216]	; (8007928 <SystemInit+0xe4>)
 8007850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007858:	4b34      	ldr	r3, [pc, #208]	; (800792c <SystemInit+0xe8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	2b06      	cmp	r3, #6
 8007862:	d807      	bhi.n	8007874 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007864:	4b31      	ldr	r3, [pc, #196]	; (800792c <SystemInit+0xe8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f023 030f 	bic.w	r3, r3, #15
 800786c:	4a2f      	ldr	r2, [pc, #188]	; (800792c <SystemInit+0xe8>)
 800786e:	f043 0307 	orr.w	r3, r3, #7
 8007872:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007874:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <SystemInit+0xec>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <SystemInit+0xec>)
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007880:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <SystemInit+0xec>)
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007886:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <SystemInit+0xec>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4929      	ldr	r1, [pc, #164]	; (8007930 <SystemInit+0xec>)
 800788c:	4b29      	ldr	r3, [pc, #164]	; (8007934 <SystemInit+0xf0>)
 800788e:	4013      	ands	r3, r2
 8007890:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <SystemInit+0xe8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <SystemInit+0xe8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 030f 	bic.w	r3, r3, #15
 80078a6:	4a21      	ldr	r2, [pc, #132]	; (800792c <SystemInit+0xe8>)
 80078a8:	f043 0307 	orr.w	r3, r3, #7
 80078ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80078ae:	4b20      	ldr	r3, [pc, #128]	; (8007930 <SystemInit+0xec>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80078b4:	4b1e      	ldr	r3, [pc, #120]	; (8007930 <SystemInit+0xec>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80078ba:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <SystemInit+0xec>)
 80078bc:	2200      	movs	r2, #0
 80078be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80078c0:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <SystemInit+0xec>)
 80078c2:	4a1d      	ldr	r2, [pc, #116]	; (8007938 <SystemInit+0xf4>)
 80078c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80078c6:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <SystemInit+0xec>)
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <SystemInit+0xf8>)
 80078ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80078cc:	4b18      	ldr	r3, [pc, #96]	; (8007930 <SystemInit+0xec>)
 80078ce:	4a1c      	ldr	r2, [pc, #112]	; (8007940 <SystemInit+0xfc>)
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80078d2:	4b17      	ldr	r3, [pc, #92]	; (8007930 <SystemInit+0xec>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <SystemInit+0xec>)
 80078da:	4a19      	ldr	r2, [pc, #100]	; (8007940 <SystemInit+0xfc>)
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <SystemInit+0xec>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <SystemInit+0xec>)
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <SystemInit+0xfc>)
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <SystemInit+0xec>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <SystemInit+0xec>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0e      	ldr	r2, [pc, #56]	; (8007930 <SystemInit+0xec>)
 80078f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <SystemInit+0xec>)
 80078fe:	2200      	movs	r2, #0
 8007900:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <SystemInit+0x100>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b10      	ldr	r3, [pc, #64]	; (8007948 <SystemInit+0x104>)
 8007908:	4013      	ands	r3, r2
 800790a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790e:	d202      	bcs.n	8007916 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <SystemInit+0x108>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <SystemInit+0x10c>)
 8007918:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800791c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800791e:	bf00      	nop
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	e000ed00 	.word	0xe000ed00
 800792c:	52002000 	.word	0x52002000
 8007930:	58024400 	.word	0x58024400
 8007934:	eaf6ed7f 	.word	0xeaf6ed7f
 8007938:	02020200 	.word	0x02020200
 800793c:	01ff0000 	.word	0x01ff0000
 8007940:	01010280 	.word	0x01010280
 8007944:	5c001000 	.word	0x5c001000
 8007948:	ffff0000 	.word	0xffff0000
 800794c:	51008108 	.word	0x51008108
 8007950:	52004000 	.word	0x52004000

08007954 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af02      	add	r7, sp, #8
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800795e:	f107 020f 	add.w	r2, r7, #15
 8007962:	1df9      	adds	r1, r7, #7
 8007964:	2364      	movs	r3, #100	; 0x64
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2301      	movs	r3, #1
 800796a:	4804      	ldr	r0, [pc, #16]	; (800797c <W25qxx_Spi+0x28>)
 800796c:	f005 fb36 	bl	800cfdc <HAL_SPI_TransmitReceive>
	return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	240003f8 	.word	0x240003f8

08007980 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	2300      	movs	r3, #0
 8007994:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007996:	2200      	movs	r2, #0
 8007998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800799c:	4813      	ldr	r0, [pc, #76]	; (80079ec <W25qxx_ReadID+0x6c>)
 800799e:	f001 fc47 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80079a2:	209f      	movs	r0, #159	; 0x9f
 80079a4:	f7ff ffd6 	bl	8007954 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80079a8:	20a5      	movs	r0, #165	; 0xa5
 80079aa:	f7ff ffd3 	bl	8007954 <W25qxx_Spi>
 80079ae:	4603      	mov	r3, r0
 80079b0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80079b2:	20a5      	movs	r0, #165	; 0xa5
 80079b4:	f7ff ffce 	bl	8007954 <W25qxx_Spi>
 80079b8:	4603      	mov	r3, r0
 80079ba:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80079bc:	20a5      	movs	r0, #165	; 0xa5
 80079be:	f7ff ffc9 	bl	8007954 <W25qxx_Spi>
 80079c2:	4603      	mov	r3, r0
 80079c4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80079c6:	2201      	movs	r2, #1
 80079c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079cc:	4807      	ldr	r0, [pc, #28]	; (80079ec <W25qxx_ReadID+0x6c>)
 80079ce:	f001 fc2f 	bl	8009230 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	041a      	lsls	r2, r3, #16
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	4313      	orrs	r3, r2
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	58020400 	.word	0x58020400

080079f0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80079f0:	b590      	push	{r4, r7, lr}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80079f6:	2200      	movs	r2, #0
 80079f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079fc:	4816      	ldr	r0, [pc, #88]	; (8007a58 <W25qxx_ReadUniqID+0x68>)
 80079fe:	f001 fc17 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8007a02:	204b      	movs	r0, #75	; 0x4b
 8007a04:	f7ff ffa6 	bl	8007954 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	71fb      	strb	r3, [r7, #7]
 8007a0c:	e005      	b.n	8007a1a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007a0e:	20a5      	movs	r0, #165	; 0xa5
 8007a10:	f7ff ffa0 	bl	8007954 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	3301      	adds	r3, #1
 8007a18:	71fb      	strb	r3, [r7, #7]
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d9f6      	bls.n	8007a0e <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8007a20:	2300      	movs	r3, #0
 8007a22:	71bb      	strb	r3, [r7, #6]
 8007a24:	e00b      	b.n	8007a3e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007a26:	79bc      	ldrb	r4, [r7, #6]
 8007a28:	20a5      	movs	r0, #165	; 0xa5
 8007a2a:	f7ff ff93 	bl	8007954 <W25qxx_Spi>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <W25qxx_ReadUniqID+0x6c>)
 8007a34:	4423      	add	r3, r4
 8007a36:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8007a38:	79bb      	ldrb	r3, [r7, #6]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	71bb      	strb	r3, [r7, #6]
 8007a3e:	79bb      	ldrb	r3, [r7, #6]
 8007a40:	2b07      	cmp	r3, #7
 8007a42:	d9f0      	bls.n	8007a26 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007a44:	2201      	movs	r2, #1
 8007a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a4a:	4803      	ldr	r0, [pc, #12]	; (8007a58 <W25qxx_ReadUniqID+0x68>)
 8007a4c:	f001 fbf0 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd90      	pop	{r4, r7, pc}
 8007a58:	58020400 	.word	0x58020400
 8007a5c:	24000afc 	.word	0x24000afc

08007a60 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007a64:	2200      	movs	r2, #0
 8007a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a6a:	4808      	ldr	r0, [pc, #32]	; (8007a8c <W25qxx_WriteEnable+0x2c>)
 8007a6c:	f001 fbe0 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8007a70:	2006      	movs	r0, #6
 8007a72:	f7ff ff6f 	bl	8007954 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007a76:	2201      	movs	r2, #1
 8007a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a7c:	4803      	ldr	r0, [pc, #12]	; (8007a8c <W25qxx_WriteEnable+0x2c>)
 8007a7e:	f001 fbd7 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8007a82:	2001      	movs	r0, #1
 8007a84:	f000 fb68 	bl	8008158 <HAL_Delay>
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	58020400 	.word	0x58020400

08007a90 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007aa4:	481c      	ldr	r0, [pc, #112]	; (8007b18 <W25qxx_ReadStatusRegister+0x88>)
 8007aa6:	f001 fbc3 	bl	8009230 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10c      	bne.n	8007aca <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8007ab0:	2005      	movs	r0, #5
 8007ab2:	f7ff ff4f 	bl	8007954 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007ab6:	20a5      	movs	r0, #165	; 0xa5
 8007ab8:	f7ff ff4c 	bl	8007954 <W25qxx_Spi>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8007ac0:	4a16      	ldr	r2, [pc, #88]	; (8007b1c <W25qxx_ReadStatusRegister+0x8c>)
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007ac8:	e01b      	b.n	8007b02 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d10c      	bne.n	8007aea <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8007ad0:	2035      	movs	r0, #53	; 0x35
 8007ad2:	f7ff ff3f 	bl	8007954 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007ad6:	20a5      	movs	r0, #165	; 0xa5
 8007ad8:	f7ff ff3c 	bl	8007954 <W25qxx_Spi>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8007ae0:	4a0e      	ldr	r2, [pc, #56]	; (8007b1c <W25qxx_ReadStatusRegister+0x8c>)
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8007ae8:	e00b      	b.n	8007b02 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8007aea:	2015      	movs	r0, #21
 8007aec:	f7ff ff32 	bl	8007954 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007af0:	20a5      	movs	r0, #165	; 0xa5
 8007af2:	f7ff ff2f 	bl	8007954 <W25qxx_Spi>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8007afa:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <W25qxx_ReadStatusRegister+0x8c>)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007b02:	2201      	movs	r2, #1
 8007b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b08:	4803      	ldr	r0, [pc, #12]	; (8007b18 <W25qxx_ReadStatusRegister+0x88>)
 8007b0a:	f001 fb91 	bl	8009230 <HAL_GPIO_WritePin>
	return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	58020400 	.word	0x58020400
 8007b1c:	24000afc 	.word	0x24000afc

08007b20 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8007b24:	2001      	movs	r0, #1
 8007b26:	f000 fb17 	bl	8008158 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b30:	480f      	ldr	r0, [pc, #60]	; (8007b70 <W25qxx_WaitForWriteEnd+0x50>)
 8007b32:	f001 fb7d 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8007b36:	2005      	movs	r0, #5
 8007b38:	f7ff ff0c 	bl	8007954 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007b3c:	20a5      	movs	r0, #165	; 0xa5
 8007b3e:	f7ff ff09 	bl	8007954 <W25qxx_Spi>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <W25qxx_WaitForWriteEnd+0x54>)
 8007b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	f000 fb03 	bl	8008158 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8007b52:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <W25qxx_WaitForWriteEnd+0x54>)
 8007b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1ed      	bne.n	8007b3c <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007b60:	2201      	movs	r2, #1
 8007b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b66:	4802      	ldr	r0, [pc, #8]	; (8007b70 <W25qxx_WaitForWriteEnd+0x50>)
 8007b68:	f001 fb62 	bl	8009230 <HAL_GPIO_WritePin>
}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	58020400 	.word	0x58020400
 8007b74:	24000afc 	.word	0x24000afc

08007b78 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8007b7e:	4b65      	ldr	r3, [pc, #404]	; (8007d14 <W25qxx_Init+0x19c>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8007b86:	e002      	b.n	8007b8e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8007b88:	2001      	movs	r0, #1
 8007b8a:	f000 fae5 	bl	8008158 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8007b8e:	f000 fad7 	bl	8008140 <HAL_GetTick>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b63      	cmp	r3, #99	; 0x63
 8007b96:	d9f7      	bls.n	8007b88 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b9e:	485e      	ldr	r0, [pc, #376]	; (8007d18 <W25qxx_Init+0x1a0>)
 8007ba0:	f001 fb46 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8007ba4:	2064      	movs	r0, #100	; 0x64
 8007ba6:	f000 fad7 	bl	8008158 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8007baa:	f7ff fee9 	bl	8007980 <W25qxx_ReadID>
 8007bae:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	3b11      	subs	r3, #17
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d86b      	bhi.n	8007c92 <W25qxx_Init+0x11a>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <W25qxx_Init+0x48>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007c85 	.word	0x08007c85
 8007bc4:	08007c77 	.word	0x08007c77
 8007bc8:	08007c69 	.word	0x08007c69
 8007bcc:	08007c5b 	.word	0x08007c5b
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c3f 	.word	0x08007c3f
 8007bd8:	08007c31 	.word	0x08007c31
 8007bdc:	08007c21 	.word	0x08007c21
 8007be0:	08007c11 	.word	0x08007c11
 8007be4:	08007c93 	.word	0x08007c93
 8007be8:	08007c93 	.word	0x08007c93
 8007bec:	08007c93 	.word	0x08007c93
 8007bf0:	08007c93 	.word	0x08007c93
 8007bf4:	08007c93 	.word	0x08007c93
 8007bf8:	08007c93 	.word	0x08007c93
 8007bfc:	08007c01 	.word	0x08007c01
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8007c00:	4b44      	ldr	r3, [pc, #272]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c02:	220a      	movs	r2, #10
 8007c04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8007c06:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c0c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8007c0e:	e046      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8007c10:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c12:	2209      	movs	r2, #9
 8007c14:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8007c16:	4b3f      	ldr	r3, [pc, #252]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c1c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8007c1e:	e03e      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8007c20:	4b3c      	ldr	r3, [pc, #240]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c22:	2208      	movs	r2, #8
 8007c24:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8007c26:	4b3b      	ldr	r3, [pc, #236]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8007c2e:	e036      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8007c30:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c32:	2207      	movs	r2, #7
 8007c34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8007c36:	4b37      	ldr	r3, [pc, #220]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c38:	2280      	movs	r2, #128	; 0x80
 8007c3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8007c3c:	e02f      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8007c3e:	4b35      	ldr	r3, [pc, #212]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c40:	2206      	movs	r2, #6
 8007c42:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8007c44:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8007c4a:	e028      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8007c4c:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c4e:	2205      	movs	r2, #5
 8007c50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c54:	2220      	movs	r2, #32
 8007c56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8007c58:	e021      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8007c60:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c62:	2210      	movs	r2, #16
 8007c64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8007c66:	e01a      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8007c68:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c70:	2208      	movs	r2, #8
 8007c72:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8007c74:	e013      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8007c76:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c78:	2202      	movs	r2, #2
 8007c7a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c7e:	2204      	movs	r2, #4
 8007c80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8007c82:	e00c      	b.n	8007c9e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8007c84:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8007c8a:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8007c90:	e005      	b.n	8007c9e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <W25qxx_Init+0x19c>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e036      	b.n	8007d0c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8007c9e:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <W25qxx_Init+0x19c>)
 8007ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <W25qxx_Init+0x19c>)
 8007ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cac:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cb6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cbe:	6912      	ldr	r2, [r2, #16]
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cc6:	8952      	ldrh	r2, [r2, #10]
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cce:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8007cd0:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	4a0f      	ldr	r2, [pc, #60]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cd8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	4a0d      	ldr	r2, [pc, #52]	; (8007d14 <W25qxx_Init+0x19c>)
 8007ce0:	6912      	ldr	r2, [r2, #16]
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	0a9b      	lsrs	r3, r3, #10
 8007ce8:	4a0a      	ldr	r2, [pc, #40]	; (8007d14 <W25qxx_Init+0x19c>)
 8007cea:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8007cec:	f7ff fe80 	bl	80079f0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	f7ff fecd 	bl	8007a90 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8007cf6:	2002      	movs	r0, #2
 8007cf8:	f7ff feca 	bl	8007a90 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	f7ff fec7 	bl	8007a90 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8007d02:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <W25qxx_Init+0x19c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8007d0a:	2301      	movs	r3, #1
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	24000afc 	.word	0x24000afc
 8007d18:	58020400 	.word	0x58020400

08007d1c <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8007d24:	e002      	b.n	8007d2c <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8007d26:	2001      	movs	r0, #1
 8007d28:	f000 fa16 	bl	8008158 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <W25qxx_EraseBlock+0xb0>)
 8007d2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d0f7      	beq.n	8007d26 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 8007d36:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <W25qxx_EraseBlock+0xb0>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8007d3e:	f7ff feef 	bl	8007b20 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8007d42:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <W25qxx_EraseBlock+0xb0>)
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	fb02 f303 	mul.w	r3, r2, r3
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8007d50:	f7ff fe86 	bl	8007a60 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d5a:	481d      	ldr	r0, [pc, #116]	; (8007dd0 <W25qxx_EraseBlock+0xb4>)
 8007d5c:	f001 fa68 	bl	8009230 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8007d60:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <W25qxx_EraseBlock+0xb0>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d909      	bls.n	8007d7c <W25qxx_EraseBlock+0x60>
	{
		W25qxx_Spi(0xDC);
 8007d68:	20dc      	movs	r0, #220	; 0xdc
 8007d6a:	f7ff fdf3 	bl	8007954 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	0e1b      	lsrs	r3, r3, #24
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fded 	bl	8007954 <W25qxx_Spi>
 8007d7a:	e002      	b.n	8007d82 <W25qxx_EraseBlock+0x66>
	}
	else
	{
		W25qxx_Spi(0xD8);
 8007d7c:	20d8      	movs	r0, #216	; 0xd8
 8007d7e:	f7ff fde9 	bl	8007954 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fde3 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0a1b      	lsrs	r3, r3, #8
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff fddd 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fdd8 	bl	8007954 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007da4:	2201      	movs	r2, #1
 8007da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007daa:	4809      	ldr	r0, [pc, #36]	; (8007dd0 <W25qxx_EraseBlock+0xb4>)
 8007dac:	f001 fa40 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8007db0:	f7ff feb6 	bl	8007b20 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8007db4:	2001      	movs	r0, #1
 8007db6:	f000 f9cf 	bl	8008158 <HAL_Delay>
	w25qxx.Lock = 0;
 8007dba:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <W25qxx_EraseBlock+0xb0>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	24000afc 	.word	0x24000afc
 8007dd0:	58020400 	.word	0x58020400

08007dd4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8007de2:	e002      	b.n	8007dea <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f000 f9b7 	bl	8008158 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007dea:	4b3a      	ldr	r3, [pc, #232]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007dec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d0f7      	beq.n	8007de4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8007df4:	4b37      	ldr	r3, [pc, #220]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	4a34      	ldr	r2, [pc, #208]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e04:	8952      	ldrh	r2, [r2, #10]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d802      	bhi.n	8007e10 <W25qxx_WritePage+0x3c>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007e10:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e12:	895b      	ldrh	r3, [r3, #10]
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	4a2c      	ldr	r2, [pc, #176]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e24:	8952      	ldrh	r2, [r2, #10]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d905      	bls.n	8007e36 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007e2a:	4b2a      	ldr	r3, [pc, #168]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e2c:	895b      	ldrh	r3, [r3, #10]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8007e36:	f7ff fe73 	bl	8007b20 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8007e3a:	f7ff fe11 	bl	8007a60 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e44:	4824      	ldr	r0, [pc, #144]	; (8007ed8 <W25qxx_WritePage+0x104>)
 8007e46:	f001 f9f3 	bl	8009230 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8007e4a:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e4c:	895b      	ldrh	r3, [r3, #10]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	4413      	add	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d909      	bls.n	8007e78 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8007e64:	2012      	movs	r0, #18
 8007e66:	f7ff fd75 	bl	8007954 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	0e1b      	lsrs	r3, r3, #24
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fd6f 	bl	8007954 <W25qxx_Spi>
 8007e76:	e002      	b.n	8007e7e <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8007e78:	2002      	movs	r0, #2
 8007e7a:	f7ff fd6b 	bl	8007954 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fd65 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fd5f 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fd5a 	bl	8007954 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	2364      	movs	r3, #100	; 0x64
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	480c      	ldr	r0, [pc, #48]	; (8007edc <W25qxx_WritePage+0x108>)
 8007eaa:	f004 fd0b 	bl	800c8c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007eb4:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <W25qxx_WritePage+0x104>)
 8007eb6:	f001 f9bb 	bl	8009230 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8007eba:	f7ff fe31 	bl	8007b20 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f000 f94a 	bl	8008158 <HAL_Delay>
	w25qxx.Lock = 0;
 8007ec4:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <W25qxx_WritePage+0x100>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	24000afc 	.word	0x24000afc
 8007ed8:	58020400 	.word	0x58020400
 8007edc:	240003f8 	.word	0x240003f8

08007ee0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8007eee:	e002      	b.n	8007ef6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f000 f931 	bl	8008158 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007ef6:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007ef8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d0f7      	beq.n	8007ef0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8007f00:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f0a:	895b      	ldrh	r3, [r3, #10]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d802      	bhi.n	8007f1a <W25qxx_ReadPage+0x3a>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f1c:	895b      	ldrh	r3, [r3, #10]
 8007f1e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f28:	8952      	ldrh	r2, [r2, #10]
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d905      	bls.n	8007f3a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007f2e:	4b29      	ldr	r3, [pc, #164]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f30:	895b      	ldrh	r3, [r3, #10]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8007f3a:	4b26      	ldr	r3, [pc, #152]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f3c:	895b      	ldrh	r3, [r3, #10]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f52:	4821      	ldr	r0, [pc, #132]	; (8007fd8 <W25qxx_ReadPage+0xf8>)
 8007f54:	f001 f96c 	bl	8009230 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d909      	bls.n	8007f74 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8007f60:	200c      	movs	r0, #12
 8007f62:	f7ff fcf7 	bl	8007954 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fcf1 	bl	8007954 <W25qxx_Spi>
 8007f72:	e002      	b.n	8007f7a <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8007f74:	200b      	movs	r0, #11
 8007f76:	f7ff fced 	bl	8007954 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	0c1b      	lsrs	r3, r3, #16
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff fce7 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fce1 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fcdc 	bl	8007954 <W25qxx_Spi>
	W25qxx_Spi(0);
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f7ff fcd9 	bl	8007954 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	2364      	movs	r3, #100	; 0x64
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	480c      	ldr	r0, [pc, #48]	; (8007fdc <W25qxx_ReadPage+0xfc>)
 8007fac:	f004 fe86 	bl	800ccbc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fb6:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <W25qxx_ReadPage+0xf8>)
 8007fb8:	f001 f93a 	bl	8009230 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f000 f8cb 	bl	8008158 <HAL_Delay>
	w25qxx.Lock = 0;
 8007fc2:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <W25qxx_ReadPage+0xf4>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	24000afc 	.word	0x24000afc
 8007fd8:	58020400 	.word	0x58020400
 8007fdc:	240003f8 	.word	0x240003f8

08007fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007fe4:	f7ff fc2e 	bl	8007844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fe8:	480c      	ldr	r0, [pc, #48]	; (800801c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007fea:	490d      	ldr	r1, [pc, #52]	; (8008020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007fec:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ff0:	e002      	b.n	8007ff8 <LoopCopyDataInit>

08007ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ff6:	3304      	adds	r3, #4

08007ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ffc:	d3f9      	bcc.n	8007ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	; (8008028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008000:	4c0a      	ldr	r4, [pc, #40]	; (800802c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008004:	e001      	b.n	800800a <LoopFillZerobss>

08008006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008008:	3204      	adds	r2, #4

0800800a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800800a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800800c:	d3fb      	bcc.n	8008006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800800e:	f008 fb49 	bl	80106a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008012:	f7fd ff81 	bl	8005f18 <main>
  bx  lr
 8008016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008018:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800801c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008020:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8008024:	08011520 	.word	0x08011520
  ldr r2, =_sbss
 8008028:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800802c:	24000c70 	.word	0x24000c70

08008030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008030:	e7fe      	b.n	8008030 <ADC3_IRQHandler>
	...

08008034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800803a:	2003      	movs	r0, #3
 800803c:	f000 f98c 	bl	8008358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008040:	f001 ff94 	bl	8009f6c <HAL_RCC_GetSysClockFreq>
 8008044:	4602      	mov	r2, r0
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <HAL_Init+0x68>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	4913      	ldr	r1, [pc, #76]	; (80080a0 <HAL_Init+0x6c>)
 8008052:	5ccb      	ldrb	r3, [r1, r3]
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <HAL_Init+0x68>)
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	4a0e      	ldr	r2, [pc, #56]	; (80080a0 <HAL_Init+0x6c>)
 8008068:	5cd3      	ldrb	r3, [r2, r3]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	fa22 f303 	lsr.w	r3, r2, r3
 8008074:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <HAL_Init+0x70>)
 8008076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008078:	4a0b      	ldr	r2, [pc, #44]	; (80080a8 <HAL_Init+0x74>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800807e:	200f      	movs	r0, #15
 8008080:	f000 f814 	bl	80080ac <HAL_InitTick>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e002      	b.n	8008094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800808e:	f7ff f987 	bl	80073a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	58024400 	.word	0x58024400
 80080a0:	08010c44 	.word	0x08010c44
 80080a4:	2400002c 	.word	0x2400002c
 80080a8:	24000028 	.word	0x24000028

080080ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80080b4:	4b15      	ldr	r3, [pc, #84]	; (800810c <HAL_InitTick+0x60>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e021      	b.n	8008104 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80080c0:	4b13      	ldr	r3, [pc, #76]	; (8008110 <HAL_InitTick+0x64>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	4b11      	ldr	r3, [pc, #68]	; (800810c <HAL_InitTick+0x60>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80080d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f971 	bl	80083be <HAL_SYSTICK_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e00e      	b.n	8008104 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b0f      	cmp	r3, #15
 80080ea:	d80a      	bhi.n	8008102 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080ec:	2200      	movs	r2, #0
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	f000 f93b 	bl	800836e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80080f8:	4a06      	ldr	r2, [pc, #24]	; (8008114 <HAL_InitTick+0x68>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	24000034 	.word	0x24000034
 8008110:	24000028 	.word	0x24000028
 8008114:	24000030 	.word	0x24000030

08008118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <HAL_IncTick+0x20>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <HAL_IncTick+0x24>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4413      	add	r3, r2
 8008128:	4a04      	ldr	r2, [pc, #16]	; (800813c <HAL_IncTick+0x24>)
 800812a:	6013      	str	r3, [r2, #0]
}
 800812c:	bf00      	nop
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	24000034 	.word	0x24000034
 800813c:	24000b24 	.word	0x24000b24

08008140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  return uwTick;
 8008144:	4b03      	ldr	r3, [pc, #12]	; (8008154 <HAL_GetTick+0x14>)
 8008146:	681b      	ldr	r3, [r3, #0]
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	24000b24 	.word	0x24000b24

08008158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008160:	f7ff ffee 	bl	8008140 <HAL_GetTick>
 8008164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d005      	beq.n	800817e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008172:	4b0a      	ldr	r3, [pc, #40]	; (800819c <HAL_Delay+0x44>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800817e:	bf00      	nop
 8008180:	f7ff ffde 	bl	8008140 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	429a      	cmp	r2, r3
 800818e:	d8f7      	bhi.n	8008180 <HAL_Delay+0x28>
  {
  }
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	24000034 	.word	0x24000034

080081a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80081a4:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <HAL_GetREVID+0x14>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	0c1b      	lsrs	r3, r3, #16
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	5c001000 	.word	0x5c001000

080081b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <__NVIC_SetPriorityGrouping+0x40>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80081d4:	4013      	ands	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80081e0:	4b06      	ldr	r3, [pc, #24]	; (80081fc <__NVIC_SetPriorityGrouping+0x44>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081e6:	4a04      	ldr	r2, [pc, #16]	; (80081f8 <__NVIC_SetPriorityGrouping+0x40>)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	60d3      	str	r3, [r2, #12]
}
 80081ec:	bf00      	nop
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	e000ed00 	.word	0xe000ed00
 80081fc:	05fa0000 	.word	0x05fa0000

08008200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__NVIC_GetPriorityGrouping+0x18>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	f003 0307 	and.w	r3, r3, #7
}
 800820e:	4618      	mov	r0, r3
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	e000ed00 	.word	0xe000ed00

0800821c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	db0b      	blt.n	8008246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	f003 021f 	and.w	r2, r3, #31
 8008234:	4907      	ldr	r1, [pc, #28]	; (8008254 <__NVIC_EnableIRQ+0x38>)
 8008236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	2001      	movs	r0, #1
 800823e:	fa00 f202 	lsl.w	r2, r0, r2
 8008242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	e000e100 	.word	0xe000e100

08008258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	db0a      	blt.n	8008282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	490c      	ldr	r1, [pc, #48]	; (80082a4 <__NVIC_SetPriority+0x4c>)
 8008272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008276:	0112      	lsls	r2, r2, #4
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	440b      	add	r3, r1
 800827c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008280:	e00a      	b.n	8008298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	b2da      	uxtb	r2, r3
 8008286:	4908      	ldr	r1, [pc, #32]	; (80082a8 <__NVIC_SetPriority+0x50>)
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	3b04      	subs	r3, #4
 8008290:	0112      	lsls	r2, r2, #4
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	440b      	add	r3, r1
 8008296:	761a      	strb	r2, [r3, #24]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000e100 	.word	0xe000e100
 80082a8:	e000ed00 	.word	0xe000ed00

080082ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b089      	sub	sp, #36	; 0x24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f1c3 0307 	rsb	r3, r3, #7
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	bf28      	it	cs
 80082ca:	2304      	movcs	r3, #4
 80082cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	3304      	adds	r3, #4
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d902      	bls.n	80082dc <NVIC_EncodePriority+0x30>
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	3b03      	subs	r3, #3
 80082da:	e000      	b.n	80082de <NVIC_EncodePriority+0x32>
 80082dc:	2300      	movs	r3, #0
 80082de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	43da      	mvns	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	401a      	ands	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082f4:	f04f 31ff 	mov.w	r1, #4294967295
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	fa01 f303 	lsl.w	r3, r1, r3
 80082fe:	43d9      	mvns	r1, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008304:	4313      	orrs	r3, r2
         );
}
 8008306:	4618      	mov	r0, r3
 8008308:	3724      	adds	r7, #36	; 0x24
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3b01      	subs	r3, #1
 8008320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008324:	d301      	bcc.n	800832a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008326:	2301      	movs	r3, #1
 8008328:	e00f      	b.n	800834a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800832a:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <SysTick_Config+0x40>)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3b01      	subs	r3, #1
 8008330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008332:	210f      	movs	r1, #15
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	f7ff ff8e 	bl	8008258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <SysTick_Config+0x40>)
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008342:	4b04      	ldr	r3, [pc, #16]	; (8008354 <SysTick_Config+0x40>)
 8008344:	2207      	movs	r2, #7
 8008346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	e000e010 	.word	0xe000e010

08008358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff29 	bl	80081b8 <__NVIC_SetPriorityGrouping>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b086      	sub	sp, #24
 8008372:	af00      	add	r7, sp, #0
 8008374:	4603      	mov	r3, r0
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800837c:	f7ff ff40 	bl	8008200 <__NVIC_GetPriorityGrouping>
 8008380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	6978      	ldr	r0, [r7, #20]
 8008388:	f7ff ff90 	bl	80082ac <NVIC_EncodePriority>
 800838c:	4602      	mov	r2, r0
 800838e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008392:	4611      	mov	r1, r2
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff ff5f 	bl	8008258 <__NVIC_SetPriority>
}
 800839a:	bf00      	nop
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	4603      	mov	r3, r0
 80083aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ff33 	bl	800821c <__NVIC_EnableIRQ>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff ffa4 	bl	8008314 <SysTick_Config>
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80083e0:	f7ff feae 	bl	8008140 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e2dc      	b.n	80089aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d008      	beq.n	800840e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e2cd      	b.n	80089aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a76      	ldr	r2, [pc, #472]	; (80085ec <HAL_DMA_Abort+0x214>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a74      	ldr	r2, [pc, #464]	; (80085f0 <HAL_DMA_Abort+0x218>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a73      	ldr	r2, [pc, #460]	; (80085f4 <HAL_DMA_Abort+0x21c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a71      	ldr	r2, [pc, #452]	; (80085f8 <HAL_DMA_Abort+0x220>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a70      	ldr	r2, [pc, #448]	; (80085fc <HAL_DMA_Abort+0x224>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a6e      	ldr	r2, [pc, #440]	; (8008600 <HAL_DMA_Abort+0x228>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a6d      	ldr	r2, [pc, #436]	; (8008604 <HAL_DMA_Abort+0x22c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a6b      	ldr	r2, [pc, #428]	; (8008608 <HAL_DMA_Abort+0x230>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6a      	ldr	r2, [pc, #424]	; (800860c <HAL_DMA_Abort+0x234>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a68      	ldr	r2, [pc, #416]	; (8008610 <HAL_DMA_Abort+0x238>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a67      	ldr	r2, [pc, #412]	; (8008614 <HAL_DMA_Abort+0x23c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a65      	ldr	r2, [pc, #404]	; (8008618 <HAL_DMA_Abort+0x240>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a64      	ldr	r2, [pc, #400]	; (800861c <HAL_DMA_Abort+0x244>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a62      	ldr	r2, [pc, #392]	; (8008620 <HAL_DMA_Abort+0x248>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a61      	ldr	r2, [pc, #388]	; (8008624 <HAL_DMA_Abort+0x24c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_Abort+0xd6>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a5f      	ldr	r2, [pc, #380]	; (8008628 <HAL_DMA_Abort+0x250>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_Abort+0xda>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_Abort+0xdc>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d013      	beq.n	80084e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 021e 	bic.w	r2, r2, #30
 80084c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695a      	ldr	r2, [r3, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e00a      	b.n	80084f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 020e 	bic.w	r2, r2, #14
 80084ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a3c      	ldr	r2, [pc, #240]	; (80085ec <HAL_DMA_Abort+0x214>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d072      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a3a      	ldr	r2, [pc, #232]	; (80085f0 <HAL_DMA_Abort+0x218>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d06d      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a39      	ldr	r2, [pc, #228]	; (80085f4 <HAL_DMA_Abort+0x21c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d068      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a37      	ldr	r2, [pc, #220]	; (80085f8 <HAL_DMA_Abort+0x220>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d063      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a36      	ldr	r2, [pc, #216]	; (80085fc <HAL_DMA_Abort+0x224>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d05e      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a34      	ldr	r2, [pc, #208]	; (8008600 <HAL_DMA_Abort+0x228>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d059      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a33      	ldr	r2, [pc, #204]	; (8008604 <HAL_DMA_Abort+0x22c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d054      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a31      	ldr	r2, [pc, #196]	; (8008608 <HAL_DMA_Abort+0x230>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d04f      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a30      	ldr	r2, [pc, #192]	; (800860c <HAL_DMA_Abort+0x234>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d04a      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a2e      	ldr	r2, [pc, #184]	; (8008610 <HAL_DMA_Abort+0x238>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d045      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2d      	ldr	r2, [pc, #180]	; (8008614 <HAL_DMA_Abort+0x23c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d040      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a2b      	ldr	r2, [pc, #172]	; (8008618 <HAL_DMA_Abort+0x240>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d03b      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2a      	ldr	r2, [pc, #168]	; (800861c <HAL_DMA_Abort+0x244>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d036      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a28      	ldr	r2, [pc, #160]	; (8008620 <HAL_DMA_Abort+0x248>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d031      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a27      	ldr	r2, [pc, #156]	; (8008624 <HAL_DMA_Abort+0x24c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d02c      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a25      	ldr	r2, [pc, #148]	; (8008628 <HAL_DMA_Abort+0x250>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d027      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a24      	ldr	r2, [pc, #144]	; (800862c <HAL_DMA_Abort+0x254>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d022      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a22      	ldr	r2, [pc, #136]	; (8008630 <HAL_DMA_Abort+0x258>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01d      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a21      	ldr	r2, [pc, #132]	; (8008634 <HAL_DMA_Abort+0x25c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d018      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1f      	ldr	r2, [pc, #124]	; (8008638 <HAL_DMA_Abort+0x260>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d013      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a1e      	ldr	r2, [pc, #120]	; (800863c <HAL_DMA_Abort+0x264>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00e      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <HAL_DMA_Abort+0x268>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d009      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1b      	ldr	r2, [pc, #108]	; (8008644 <HAL_DMA_Abort+0x26c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d004      	beq.n	80085e6 <HAL_DMA_Abort+0x20e>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a19      	ldr	r2, [pc, #100]	; (8008648 <HAL_DMA_Abort+0x270>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d132      	bne.n	800864c <HAL_DMA_Abort+0x274>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e031      	b.n	800864e <HAL_DMA_Abort+0x276>
 80085ea:	bf00      	nop
 80085ec:	40020010 	.word	0x40020010
 80085f0:	40020028 	.word	0x40020028
 80085f4:	40020040 	.word	0x40020040
 80085f8:	40020058 	.word	0x40020058
 80085fc:	40020070 	.word	0x40020070
 8008600:	40020088 	.word	0x40020088
 8008604:	400200a0 	.word	0x400200a0
 8008608:	400200b8 	.word	0x400200b8
 800860c:	40020410 	.word	0x40020410
 8008610:	40020428 	.word	0x40020428
 8008614:	40020440 	.word	0x40020440
 8008618:	40020458 	.word	0x40020458
 800861c:	40020470 	.word	0x40020470
 8008620:	40020488 	.word	0x40020488
 8008624:	400204a0 	.word	0x400204a0
 8008628:	400204b8 	.word	0x400204b8
 800862c:	58025408 	.word	0x58025408
 8008630:	5802541c 	.word	0x5802541c
 8008634:	58025430 	.word	0x58025430
 8008638:	58025444 	.word	0x58025444
 800863c:	58025458 	.word	0x58025458
 8008640:	5802546c 	.word	0x5802546c
 8008644:	58025480 	.word	0x58025480
 8008648:	58025494 	.word	0x58025494
 800864c:	2300      	movs	r3, #0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d007      	beq.n	8008662 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008660:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a6d      	ldr	r2, [pc, #436]	; (800881c <HAL_DMA_Abort+0x444>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d04a      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a6b      	ldr	r2, [pc, #428]	; (8008820 <HAL_DMA_Abort+0x448>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d045      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a6a      	ldr	r2, [pc, #424]	; (8008824 <HAL_DMA_Abort+0x44c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d040      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a68      	ldr	r2, [pc, #416]	; (8008828 <HAL_DMA_Abort+0x450>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d03b      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a67      	ldr	r2, [pc, #412]	; (800882c <HAL_DMA_Abort+0x454>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d036      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a65      	ldr	r2, [pc, #404]	; (8008830 <HAL_DMA_Abort+0x458>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d031      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a64      	ldr	r2, [pc, #400]	; (8008834 <HAL_DMA_Abort+0x45c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d02c      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a62      	ldr	r2, [pc, #392]	; (8008838 <HAL_DMA_Abort+0x460>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d027      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a61      	ldr	r2, [pc, #388]	; (800883c <HAL_DMA_Abort+0x464>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a5f      	ldr	r2, [pc, #380]	; (8008840 <HAL_DMA_Abort+0x468>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d01d      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a5e      	ldr	r2, [pc, #376]	; (8008844 <HAL_DMA_Abort+0x46c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d018      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a5c      	ldr	r2, [pc, #368]	; (8008848 <HAL_DMA_Abort+0x470>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a5b      	ldr	r2, [pc, #364]	; (800884c <HAL_DMA_Abort+0x474>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00e      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a59      	ldr	r2, [pc, #356]	; (8008850 <HAL_DMA_Abort+0x478>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a58      	ldr	r2, [pc, #352]	; (8008854 <HAL_DMA_Abort+0x47c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_DMA_Abort+0x32a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a56      	ldr	r2, [pc, #344]	; (8008858 <HAL_DMA_Abort+0x480>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d108      	bne.n	8008714 <HAL_DMA_Abort+0x33c>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e007      	b.n	8008724 <HAL_DMA_Abort+0x34c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0201 	bic.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008724:	e013      	b.n	800874e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008726:	f7ff fd0b 	bl	8008140 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b05      	cmp	r3, #5
 8008732:	d90c      	bls.n	800874e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2203      	movs	r2, #3
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e12d      	b.n	80089aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2f      	ldr	r2, [pc, #188]	; (800881c <HAL_DMA_Abort+0x444>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d04a      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2d      	ldr	r2, [pc, #180]	; (8008820 <HAL_DMA_Abort+0x448>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d045      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2c      	ldr	r2, [pc, #176]	; (8008824 <HAL_DMA_Abort+0x44c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d040      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a2a      	ldr	r2, [pc, #168]	; (8008828 <HAL_DMA_Abort+0x450>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d03b      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a29      	ldr	r2, [pc, #164]	; (800882c <HAL_DMA_Abort+0x454>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d036      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <HAL_DMA_Abort+0x458>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d031      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <HAL_DMA_Abort+0x45c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d02c      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a24      	ldr	r2, [pc, #144]	; (8008838 <HAL_DMA_Abort+0x460>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d027      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a23      	ldr	r2, [pc, #140]	; (800883c <HAL_DMA_Abort+0x464>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d022      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a21      	ldr	r2, [pc, #132]	; (8008840 <HAL_DMA_Abort+0x468>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01d      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a20      	ldr	r2, [pc, #128]	; (8008844 <HAL_DMA_Abort+0x46c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d018      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <HAL_DMA_Abort+0x470>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1d      	ldr	r2, [pc, #116]	; (800884c <HAL_DMA_Abort+0x474>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <HAL_DMA_Abort+0x478>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <HAL_DMA_Abort+0x47c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_DMA_Abort+0x422>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a18      	ldr	r2, [pc, #96]	; (8008858 <HAL_DMA_Abort+0x480>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d101      	bne.n	80087fe <HAL_DMA_Abort+0x426>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <HAL_DMA_Abort+0x428>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02b      	beq.n	800885c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008808:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	223f      	movs	r2, #63	; 0x3f
 8008814:	409a      	lsls	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	609a      	str	r2, [r3, #8]
 800881a:	e02a      	b.n	8008872 <HAL_DMA_Abort+0x49a>
 800881c:	40020010 	.word	0x40020010
 8008820:	40020028 	.word	0x40020028
 8008824:	40020040 	.word	0x40020040
 8008828:	40020058 	.word	0x40020058
 800882c:	40020070 	.word	0x40020070
 8008830:	40020088 	.word	0x40020088
 8008834:	400200a0 	.word	0x400200a0
 8008838:	400200b8 	.word	0x400200b8
 800883c:	40020410 	.word	0x40020410
 8008840:	40020428 	.word	0x40020428
 8008844:	40020440 	.word	0x40020440
 8008848:	40020458 	.word	0x40020458
 800884c:	40020470 	.word	0x40020470
 8008850:	40020488 	.word	0x40020488
 8008854:	400204a0 	.word	0x400204a0
 8008858:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008866:	f003 031f 	and.w	r3, r3, #31
 800886a:	2201      	movs	r2, #1
 800886c:	409a      	lsls	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a4f      	ldr	r2, [pc, #316]	; (80089b4 <HAL_DMA_Abort+0x5dc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d072      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a4d      	ldr	r2, [pc, #308]	; (80089b8 <HAL_DMA_Abort+0x5e0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d06d      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a4c      	ldr	r2, [pc, #304]	; (80089bc <HAL_DMA_Abort+0x5e4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d068      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a4a      	ldr	r2, [pc, #296]	; (80089c0 <HAL_DMA_Abort+0x5e8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d063      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a49      	ldr	r2, [pc, #292]	; (80089c4 <HAL_DMA_Abort+0x5ec>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d05e      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a47      	ldr	r2, [pc, #284]	; (80089c8 <HAL_DMA_Abort+0x5f0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d059      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a46      	ldr	r2, [pc, #280]	; (80089cc <HAL_DMA_Abort+0x5f4>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d054      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a44      	ldr	r2, [pc, #272]	; (80089d0 <HAL_DMA_Abort+0x5f8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d04f      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a43      	ldr	r2, [pc, #268]	; (80089d4 <HAL_DMA_Abort+0x5fc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d04a      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a41      	ldr	r2, [pc, #260]	; (80089d8 <HAL_DMA_Abort+0x600>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d045      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a40      	ldr	r2, [pc, #256]	; (80089dc <HAL_DMA_Abort+0x604>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d040      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3e      	ldr	r2, [pc, #248]	; (80089e0 <HAL_DMA_Abort+0x608>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d03b      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3d      	ldr	r2, [pc, #244]	; (80089e4 <HAL_DMA_Abort+0x60c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d036      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3b      	ldr	r2, [pc, #236]	; (80089e8 <HAL_DMA_Abort+0x610>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d031      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a3a      	ldr	r2, [pc, #232]	; (80089ec <HAL_DMA_Abort+0x614>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d02c      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <HAL_DMA_Abort+0x618>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d027      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a37      	ldr	r2, [pc, #220]	; (80089f4 <HAL_DMA_Abort+0x61c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d022      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a35      	ldr	r2, [pc, #212]	; (80089f8 <HAL_DMA_Abort+0x620>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01d      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a34      	ldr	r2, [pc, #208]	; (80089fc <HAL_DMA_Abort+0x624>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d018      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a32      	ldr	r2, [pc, #200]	; (8008a00 <HAL_DMA_Abort+0x628>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d013      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a31      	ldr	r2, [pc, #196]	; (8008a04 <HAL_DMA_Abort+0x62c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00e      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a2f      	ldr	r2, [pc, #188]	; (8008a08 <HAL_DMA_Abort+0x630>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d009      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2e      	ldr	r2, [pc, #184]	; (8008a0c <HAL_DMA_Abort+0x634>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d004      	beq.n	8008962 <HAL_DMA_Abort+0x58a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2c      	ldr	r2, [pc, #176]	; (8008a10 <HAL_DMA_Abort+0x638>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d101      	bne.n	8008966 <HAL_DMA_Abort+0x58e>
 8008962:	2301      	movs	r3, #1
 8008964:	e000      	b.n	8008968 <HAL_DMA_Abort+0x590>
 8008966:	2300      	movs	r3, #0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d015      	beq.n	8008998 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008974:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800898c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008996:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	40020010 	.word	0x40020010
 80089b8:	40020028 	.word	0x40020028
 80089bc:	40020040 	.word	0x40020040
 80089c0:	40020058 	.word	0x40020058
 80089c4:	40020070 	.word	0x40020070
 80089c8:	40020088 	.word	0x40020088
 80089cc:	400200a0 	.word	0x400200a0
 80089d0:	400200b8 	.word	0x400200b8
 80089d4:	40020410 	.word	0x40020410
 80089d8:	40020428 	.word	0x40020428
 80089dc:	40020440 	.word	0x40020440
 80089e0:	40020458 	.word	0x40020458
 80089e4:	40020470 	.word	0x40020470
 80089e8:	40020488 	.word	0x40020488
 80089ec:	400204a0 	.word	0x400204a0
 80089f0:	400204b8 	.word	0x400204b8
 80089f4:	58025408 	.word	0x58025408
 80089f8:	5802541c 	.word	0x5802541c
 80089fc:	58025430 	.word	0x58025430
 8008a00:	58025444 	.word	0x58025444
 8008a04:	58025458 	.word	0x58025458
 8008a08:	5802546c 	.word	0x5802546c
 8008a0c:	58025480 	.word	0x58025480
 8008a10:	58025494 	.word	0x58025494

08008a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e237      	b.n	8008e96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d004      	beq.n	8008a3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2280      	movs	r2, #128	; 0x80
 8008a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e22c      	b.n	8008e96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a5c      	ldr	r2, [pc, #368]	; (8008bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d04a      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a5b      	ldr	r2, [pc, #364]	; (8008bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d045      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a59      	ldr	r2, [pc, #356]	; (8008bbc <HAL_DMA_Abort_IT+0x1a8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d040      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a58      	ldr	r2, [pc, #352]	; (8008bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d03b      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a56      	ldr	r2, [pc, #344]	; (8008bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d036      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a55      	ldr	r2, [pc, #340]	; (8008bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d031      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a53      	ldr	r2, [pc, #332]	; (8008bcc <HAL_DMA_Abort_IT+0x1b8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d02c      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a52      	ldr	r2, [pc, #328]	; (8008bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d027      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a50      	ldr	r2, [pc, #320]	; (8008bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d022      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a4f      	ldr	r2, [pc, #316]	; (8008bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d01d      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a4d      	ldr	r2, [pc, #308]	; (8008bdc <HAL_DMA_Abort_IT+0x1c8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d018      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a4c      	ldr	r2, [pc, #304]	; (8008be0 <HAL_DMA_Abort_IT+0x1cc>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a4a      	ldr	r2, [pc, #296]	; (8008be4 <HAL_DMA_Abort_IT+0x1d0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00e      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a49      	ldr	r2, [pc, #292]	; (8008be8 <HAL_DMA_Abort_IT+0x1d4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d009      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a47      	ldr	r2, [pc, #284]	; (8008bec <HAL_DMA_Abort_IT+0x1d8>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d004      	beq.n	8008adc <HAL_DMA_Abort_IT+0xc8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a46      	ldr	r2, [pc, #280]	; (8008bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d101      	bne.n	8008ae0 <HAL_DMA_Abort_IT+0xcc>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <HAL_DMA_Abort_IT+0xce>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 8086 	beq.w	8008bf4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2204      	movs	r2, #4
 8008aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a2f      	ldr	r2, [pc, #188]	; (8008bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d04a      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2e      	ldr	r2, [pc, #184]	; (8008bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d045      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a2c      	ldr	r2, [pc, #176]	; (8008bbc <HAL_DMA_Abort_IT+0x1a8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d040      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a2b      	ldr	r2, [pc, #172]	; (8008bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d03b      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a29      	ldr	r2, [pc, #164]	; (8008bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d036      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a28      	ldr	r2, [pc, #160]	; (8008bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d031      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a26      	ldr	r2, [pc, #152]	; (8008bcc <HAL_DMA_Abort_IT+0x1b8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02c      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d027      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a23      	ldr	r2, [pc, #140]	; (8008bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d022      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d01d      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a20      	ldr	r2, [pc, #128]	; (8008bdc <HAL_DMA_Abort_IT+0x1c8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d018      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <HAL_DMA_Abort_IT+0x1cc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <HAL_DMA_Abort_IT+0x1d0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00e      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <HAL_DMA_Abort_IT+0x1d4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_DMA_Abort_IT+0x1d8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_DMA_Abort_IT+0x17c>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a19      	ldr	r2, [pc, #100]	; (8008bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d108      	bne.n	8008ba2 <HAL_DMA_Abort_IT+0x18e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e178      	b.n	8008e94 <HAL_DMA_Abort_IT+0x480>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0201 	bic.w	r2, r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e16f      	b.n	8008e94 <HAL_DMA_Abort_IT+0x480>
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 020e 	bic.w	r2, r2, #14
 8008c02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a6c      	ldr	r2, [pc, #432]	; (8008dbc <HAL_DMA_Abort_IT+0x3a8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d04a      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a6b      	ldr	r2, [pc, #428]	; (8008dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d045      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a69      	ldr	r2, [pc, #420]	; (8008dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d040      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a68      	ldr	r2, [pc, #416]	; (8008dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d03b      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a66      	ldr	r2, [pc, #408]	; (8008dcc <HAL_DMA_Abort_IT+0x3b8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d036      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a65      	ldr	r2, [pc, #404]	; (8008dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d031      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a63      	ldr	r2, [pc, #396]	; (8008dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d02c      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a62      	ldr	r2, [pc, #392]	; (8008dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d027      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a60      	ldr	r2, [pc, #384]	; (8008ddc <HAL_DMA_Abort_IT+0x3c8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a5f      	ldr	r2, [pc, #380]	; (8008de0 <HAL_DMA_Abort_IT+0x3cc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d01d      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a5d      	ldr	r2, [pc, #372]	; (8008de4 <HAL_DMA_Abort_IT+0x3d0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a5c      	ldr	r2, [pc, #368]	; (8008de8 <HAL_DMA_Abort_IT+0x3d4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a5a      	ldr	r2, [pc, #360]	; (8008dec <HAL_DMA_Abort_IT+0x3d8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a59      	ldr	r2, [pc, #356]	; (8008df0 <HAL_DMA_Abort_IT+0x3dc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a57      	ldr	r2, [pc, #348]	; (8008df4 <HAL_DMA_Abort_IT+0x3e0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_DMA_Abort_IT+0x290>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a56      	ldr	r2, [pc, #344]	; (8008df8 <HAL_DMA_Abort_IT+0x3e4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d108      	bne.n	8008cb6 <HAL_DMA_Abort_IT+0x2a2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0201 	bic.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e007      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x2b2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a3c      	ldr	r2, [pc, #240]	; (8008dbc <HAL_DMA_Abort_IT+0x3a8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d072      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a3a      	ldr	r2, [pc, #232]	; (8008dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d06d      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a39      	ldr	r2, [pc, #228]	; (8008dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d068      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a37      	ldr	r2, [pc, #220]	; (8008dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d063      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a36      	ldr	r2, [pc, #216]	; (8008dcc <HAL_DMA_Abort_IT+0x3b8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d05e      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a34      	ldr	r2, [pc, #208]	; (8008dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d059      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a33      	ldr	r2, [pc, #204]	; (8008dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d054      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a31      	ldr	r2, [pc, #196]	; (8008dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d04f      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a30      	ldr	r2, [pc, #192]	; (8008ddc <HAL_DMA_Abort_IT+0x3c8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d04a      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a2e      	ldr	r2, [pc, #184]	; (8008de0 <HAL_DMA_Abort_IT+0x3cc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d045      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a2d      	ldr	r2, [pc, #180]	; (8008de4 <HAL_DMA_Abort_IT+0x3d0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d040      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a2b      	ldr	r2, [pc, #172]	; (8008de8 <HAL_DMA_Abort_IT+0x3d4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d03b      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <HAL_DMA_Abort_IT+0x3d8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d036      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a28      	ldr	r2, [pc, #160]	; (8008df0 <HAL_DMA_Abort_IT+0x3dc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d031      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a27      	ldr	r2, [pc, #156]	; (8008df4 <HAL_DMA_Abort_IT+0x3e0>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d02c      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a25      	ldr	r2, [pc, #148]	; (8008df8 <HAL_DMA_Abort_IT+0x3e4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d027      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a24      	ldr	r2, [pc, #144]	; (8008dfc <HAL_DMA_Abort_IT+0x3e8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d022      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <HAL_DMA_Abort_IT+0x3ec>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d01d      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <HAL_DMA_Abort_IT+0x3f0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d018      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <HAL_DMA_Abort_IT+0x3f4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_DMA_Abort_IT+0x3f8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00e      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <HAL_DMA_Abort_IT+0x3fc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d009      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_DMA_Abort_IT+0x400>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d004      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x3a2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <HAL_DMA_Abort_IT+0x404>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d132      	bne.n	8008e1c <HAL_DMA_Abort_IT+0x408>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e031      	b.n	8008e1e <HAL_DMA_Abort_IT+0x40a>
 8008dba:	bf00      	nop
 8008dbc:	40020010 	.word	0x40020010
 8008dc0:	40020028 	.word	0x40020028
 8008dc4:	40020040 	.word	0x40020040
 8008dc8:	40020058 	.word	0x40020058
 8008dcc:	40020070 	.word	0x40020070
 8008dd0:	40020088 	.word	0x40020088
 8008dd4:	400200a0 	.word	0x400200a0
 8008dd8:	400200b8 	.word	0x400200b8
 8008ddc:	40020410 	.word	0x40020410
 8008de0:	40020428 	.word	0x40020428
 8008de4:	40020440 	.word	0x40020440
 8008de8:	40020458 	.word	0x40020458
 8008dec:	40020470 	.word	0x40020470
 8008df0:	40020488 	.word	0x40020488
 8008df4:	400204a0 	.word	0x400204a0
 8008df8:	400204b8 	.word	0x400204b8
 8008dfc:	58025408 	.word	0x58025408
 8008e00:	5802541c 	.word	0x5802541c
 8008e04:	58025430 	.word	0x58025430
 8008e08:	58025444 	.word	0x58025444
 8008e0c:	58025458 	.word	0x58025458
 8008e10:	5802546c 	.word	0x5802546c
 8008e14:	58025480 	.word	0x58025480
 8008e18:	58025494 	.word	0x58025494
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d028      	beq.n	8008e74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2201      	movs	r2, #1
 8008e42:	409a      	lsls	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00c      	beq.n	8008e74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop

08008ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b089      	sub	sp, #36	; 0x24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008eae:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <HAL_GPIO_Init+0x234>)
 8008eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008eb2:	e194      	b.n	80091de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	2101      	movs	r1, #1
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8186 	beq.w	80091d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d005      	beq.n	8008ee4 <HAL_GPIO_Init+0x44>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f003 0303 	and.w	r3, r3, #3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d130      	bne.n	8008f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	2203      	movs	r2, #3
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	091b      	lsrs	r3, r3, #4
 8008f30:	f003 0201 	and.w	r2, r3, #1
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d017      	beq.n	8008f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	43db      	mvns	r3, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4013      	ands	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	fa02 f303 	lsl.w	r3, r2, r3
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d123      	bne.n	8008fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	08da      	lsrs	r2, r3, #3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3208      	adds	r2, #8
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 0307 	and.w	r3, r3, #7
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	220f      	movs	r2, #15
 8008fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008faa:	43db      	mvns	r3, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	08da      	lsrs	r2, r3, #3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3208      	adds	r2, #8
 8008fd0:	69b9      	ldr	r1, [r7, #24]
 8008fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4013      	ands	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f003 0203 	and.w	r2, r3, #3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	4313      	orrs	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 80e0 	beq.w	80091d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009018:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <HAL_GPIO_Init+0x238>)
 800901a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800901e:	4a2e      	ldr	r2, [pc, #184]	; (80090d8 <HAL_GPIO_Init+0x238>)
 8009020:	f043 0302 	orr.w	r3, r3, #2
 8009024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009028:	4b2b      	ldr	r3, [pc, #172]	; (80090d8 <HAL_GPIO_Init+0x238>)
 800902a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009036:	4a29      	ldr	r2, [pc, #164]	; (80090dc <HAL_GPIO_Init+0x23c>)
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	089b      	lsrs	r3, r3, #2
 800903c:	3302      	adds	r3, #2
 800903e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	220f      	movs	r2, #15
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	43db      	mvns	r3, r3
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	4013      	ands	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <HAL_GPIO_Init+0x240>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d052      	beq.n	8009108 <HAL_GPIO_Init+0x268>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1f      	ldr	r2, [pc, #124]	; (80090e4 <HAL_GPIO_Init+0x244>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d031      	beq.n	80090ce <HAL_GPIO_Init+0x22e>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1e      	ldr	r2, [pc, #120]	; (80090e8 <HAL_GPIO_Init+0x248>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d02b      	beq.n	80090ca <HAL_GPIO_Init+0x22a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <HAL_GPIO_Init+0x24c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d025      	beq.n	80090c6 <HAL_GPIO_Init+0x226>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1c      	ldr	r2, [pc, #112]	; (80090f0 <HAL_GPIO_Init+0x250>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d01f      	beq.n	80090c2 <HAL_GPIO_Init+0x222>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1b      	ldr	r2, [pc, #108]	; (80090f4 <HAL_GPIO_Init+0x254>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d019      	beq.n	80090be <HAL_GPIO_Init+0x21e>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <HAL_GPIO_Init+0x258>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d013      	beq.n	80090ba <HAL_GPIO_Init+0x21a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a19      	ldr	r2, [pc, #100]	; (80090fc <HAL_GPIO_Init+0x25c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00d      	beq.n	80090b6 <HAL_GPIO_Init+0x216>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a18      	ldr	r2, [pc, #96]	; (8009100 <HAL_GPIO_Init+0x260>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d007      	beq.n	80090b2 <HAL_GPIO_Init+0x212>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a17      	ldr	r2, [pc, #92]	; (8009104 <HAL_GPIO_Init+0x264>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d101      	bne.n	80090ae <HAL_GPIO_Init+0x20e>
 80090aa:	2309      	movs	r3, #9
 80090ac:	e02d      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090ae:	230a      	movs	r3, #10
 80090b0:	e02b      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090b2:	2308      	movs	r3, #8
 80090b4:	e029      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090b6:	2307      	movs	r3, #7
 80090b8:	e027      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090ba:	2306      	movs	r3, #6
 80090bc:	e025      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090be:	2305      	movs	r3, #5
 80090c0:	e023      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090c2:	2304      	movs	r3, #4
 80090c4:	e021      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090c6:	2303      	movs	r3, #3
 80090c8:	e01f      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e01d      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e01b      	b.n	800910a <HAL_GPIO_Init+0x26a>
 80090d2:	bf00      	nop
 80090d4:	58000080 	.word	0x58000080
 80090d8:	58024400 	.word	0x58024400
 80090dc:	58000400 	.word	0x58000400
 80090e0:	58020000 	.word	0x58020000
 80090e4:	58020400 	.word	0x58020400
 80090e8:	58020800 	.word	0x58020800
 80090ec:	58020c00 	.word	0x58020c00
 80090f0:	58021000 	.word	0x58021000
 80090f4:	58021400 	.word	0x58021400
 80090f8:	58021800 	.word	0x58021800
 80090fc:	58021c00 	.word	0x58021c00
 8009100:	58022000 	.word	0x58022000
 8009104:	58022400 	.word	0x58022400
 8009108:	2300      	movs	r3, #0
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	f002 0203 	and.w	r2, r2, #3
 8009110:	0092      	lsls	r2, r2, #2
 8009112:	4093      	lsls	r3, r2
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	4313      	orrs	r3, r2
 8009118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800911a:	4938      	ldr	r1, [pc, #224]	; (80091fc <HAL_GPIO_Init+0x35c>)
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	089b      	lsrs	r3, r3, #2
 8009120:	3302      	adds	r3, #2
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	43db      	mvns	r3, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4013      	ands	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4313      	orrs	r3, r2
 800914c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800914e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	43db      	mvns	r3, r3
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	4013      	ands	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800917c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	43db      	mvns	r3, r3
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	4013      	ands	r3, r2
 8009192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	43db      	mvns	r3, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4013      	ands	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f ae63 	bne.w	8008eb4 <HAL_GPIO_Init+0x14>
  }
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3724      	adds	r7, #36	; 0x24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	58000400 	.word	0x58000400

08009200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	887b      	ldrh	r3, [r7, #2]
 8009212:	4013      	ands	r3, r2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009218:	2301      	movs	r3, #1
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e001      	b.n	8009222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	807b      	strh	r3, [r7, #2]
 800923c:	4613      	mov	r3, r2
 800923e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009240:	787b      	ldrb	r3, [r7, #1]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009246:	887a      	ldrh	r2, [r7, #2]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800924c:	e003      	b.n	8009256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	041a      	lsls	r2, r3, #16
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	619a      	str	r2, [r3, #24]
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	4603      	mov	r3, r0
 800926a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800926c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009270:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	4013      	ands	r3, r2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800927c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	4618      	mov	r0, r3
 800928a:	f7fc fd65 	bl	8005d58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800929c:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80092a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	58024800 	.word	0x58024800

080092b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092c0:	4b19      	ldr	r3, [pc, #100]	; (8009328 <HAL_PWREx_ConfigSupply+0x70>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d00a      	beq.n	80092e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092cc:	4b16      	ldr	r3, [pc, #88]	; (8009328 <HAL_PWREx_ConfigSupply+0x70>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d001      	beq.n	80092de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e01f      	b.n	800931e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e01d      	b.n	800931e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092e2:	4b11      	ldr	r3, [pc, #68]	; (8009328 <HAL_PWREx_ConfigSupply+0x70>)
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f023 0207 	bic.w	r2, r3, #7
 80092ea:	490f      	ldr	r1, [pc, #60]	; (8009328 <HAL_PWREx_ConfigSupply+0x70>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80092f2:	f7fe ff25 	bl	8008140 <HAL_GetTick>
 80092f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092f8:	e009      	b.n	800930e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092fa:	f7fe ff21 	bl	8008140 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009308:	d901      	bls.n	800930e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e007      	b.n	800931e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <HAL_PWREx_ConfigSupply+0x70>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800931a:	d1ee      	bne.n	80092fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	58024800 	.word	0x58024800

0800932c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	; 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f000 bc48 	b.w	8009bd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8088 	beq.w	800945e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800934e:	4b99      	ldr	r3, [pc, #612]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009358:	4b96      	ldr	r3, [pc, #600]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	2b10      	cmp	r3, #16
 8009362:	d007      	beq.n	8009374 <HAL_RCC_OscConfig+0x48>
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	2b18      	cmp	r3, #24
 8009368:	d111      	bne.n	800938e <HAL_RCC_OscConfig+0x62>
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d10c      	bne.n	800938e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009374:	4b8f      	ldr	r3, [pc, #572]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d06d      	beq.n	800945c <HAL_RCC_OscConfig+0x130>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d169      	bne.n	800945c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	f000 bc21 	b.w	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009396:	d106      	bne.n	80093a6 <HAL_RCC_OscConfig+0x7a>
 8009398:	4b86      	ldr	r3, [pc, #536]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a85      	ldr	r2, [pc, #532]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800939e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e02e      	b.n	8009404 <HAL_RCC_OscConfig+0xd8>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10c      	bne.n	80093c8 <HAL_RCC_OscConfig+0x9c>
 80093ae:	4b81      	ldr	r3, [pc, #516]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a80      	ldr	r2, [pc, #512]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	4b7e      	ldr	r3, [pc, #504]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a7d      	ldr	r2, [pc, #500]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	e01d      	b.n	8009404 <HAL_RCC_OscConfig+0xd8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093d0:	d10c      	bne.n	80093ec <HAL_RCC_OscConfig+0xc0>
 80093d2:	4b78      	ldr	r3, [pc, #480]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a77      	ldr	r2, [pc, #476]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	4b75      	ldr	r3, [pc, #468]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a74      	ldr	r2, [pc, #464]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	e00b      	b.n	8009404 <HAL_RCC_OscConfig+0xd8>
 80093ec:	4b71      	ldr	r3, [pc, #452]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a70      	ldr	r2, [pc, #448]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	4b6e      	ldr	r3, [pc, #440]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a6d      	ldr	r2, [pc, #436]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80093fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d013      	beq.n	8009434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940c:	f7fe fe98 	bl	8008140 <HAL_GetTick>
 8009410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009412:	e008      	b.n	8009426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009414:	f7fe fe94 	bl	8008140 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b64      	cmp	r3, #100	; 0x64
 8009420:	d901      	bls.n	8009426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e3d4      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009426:	4b63      	ldr	r3, [pc, #396]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <HAL_RCC_OscConfig+0xe8>
 8009432:	e014      	b.n	800945e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009434:	f7fe fe84 	bl	8008140 <HAL_GetTick>
 8009438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800943c:	f7fe fe80 	bl	8008140 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b64      	cmp	r3, #100	; 0x64
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e3c0      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800944e:	4b59      	ldr	r3, [pc, #356]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1f0      	bne.n	800943c <HAL_RCC_OscConfig+0x110>
 800945a:	e000      	b.n	800945e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800945c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80ca 	beq.w	8009600 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800946c:	4b51      	ldr	r3, [pc, #324]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009476:	4b4f      	ldr	r3, [pc, #316]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <HAL_RCC_OscConfig+0x166>
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	2b18      	cmp	r3, #24
 8009486:	d156      	bne.n	8009536 <HAL_RCC_OscConfig+0x20a>
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d151      	bne.n	8009536 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009492:	4b48      	ldr	r3, [pc, #288]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <HAL_RCC_OscConfig+0x17e>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e392      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094aa:	4b42      	ldr	r3, [pc, #264]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f023 0219 	bic.w	r2, r3, #25
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	493f      	ldr	r1, [pc, #252]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094bc:	f7fe fe40 	bl	8008140 <HAL_GetTick>
 80094c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094c2:	e008      	b.n	80094d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094c4:	f7fe fe3c 	bl	8008140 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d901      	bls.n	80094d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e37c      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094d6:	4b37      	ldr	r3, [pc, #220]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0f0      	beq.n	80094c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094e2:	f7fe fe5d 	bl	80081a0 <HAL_GetREVID>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d817      	bhi.n	8009520 <HAL_RCC_OscConfig+0x1f4>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b40      	cmp	r3, #64	; 0x40
 80094f6:	d108      	bne.n	800950a <HAL_RCC_OscConfig+0x1de>
 80094f8:	4b2e      	ldr	r3, [pc, #184]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009500:	4a2c      	ldr	r2, [pc, #176]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009506:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009508:	e07a      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800950a:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	031b      	lsls	r3, r3, #12
 8009518:	4926      	ldr	r1, [pc, #152]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800951a:	4313      	orrs	r3, r2
 800951c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800951e:	e06f      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009520:	4b24      	ldr	r3, [pc, #144]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	061b      	lsls	r3, r3, #24
 800952e:	4921      	ldr	r1, [pc, #132]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009530:	4313      	orrs	r3, r2
 8009532:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009534:	e064      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d047      	beq.n	80095ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800953e:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f023 0219 	bic.w	r2, r3, #25
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	491a      	ldr	r1, [pc, #104]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800954c:	4313      	orrs	r3, r2
 800954e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fe fdf6 	bl	8008140 <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009558:	f7fe fdf2 	bl	8008140 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e332      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800956a:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f0      	beq.n	8009558 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009576:	f7fe fe13 	bl	80081a0 <HAL_GetREVID>
 800957a:	4603      	mov	r3, r0
 800957c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009580:	4293      	cmp	r3, r2
 8009582:	d819      	bhi.n	80095b8 <HAL_RCC_OscConfig+0x28c>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b40      	cmp	r3, #64	; 0x40
 800958a:	d108      	bne.n	800959e <HAL_RCC_OscConfig+0x272>
 800958c:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009594:	4a07      	ldr	r2, [pc, #28]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959a:	6053      	str	r3, [r2, #4]
 800959c:	e030      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	031b      	lsls	r3, r3, #12
 80095ac:	4901      	ldr	r1, [pc, #4]	; (80095b4 <HAL_RCC_OscConfig+0x288>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	604b      	str	r3, [r1, #4]
 80095b2:	e025      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
 80095b4:	58024400 	.word	0x58024400
 80095b8:	4b9a      	ldr	r3, [pc, #616]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	061b      	lsls	r3, r3, #24
 80095c6:	4997      	ldr	r1, [pc, #604]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	604b      	str	r3, [r1, #4]
 80095cc:	e018      	b.n	8009600 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095ce:	4b95      	ldr	r3, [pc, #596]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a94      	ldr	r2, [pc, #592]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095da:	f7fe fdb1 	bl	8008140 <HAL_GetTick>
 80095de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095e2:	f7fe fdad 	bl	8008140 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e2ed      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095f4:	4b8b      	ldr	r3, [pc, #556]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f0      	bne.n	80095e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0310 	and.w	r3, r3, #16
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a9 	beq.w	8009760 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800960e:	4b85      	ldr	r3, [pc, #532]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009618:	4b82      	ldr	r3, [pc, #520]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b08      	cmp	r3, #8
 8009622:	d007      	beq.n	8009634 <HAL_RCC_OscConfig+0x308>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b18      	cmp	r3, #24
 8009628:	d13a      	bne.n	80096a0 <HAL_RCC_OscConfig+0x374>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d135      	bne.n	80096a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009634:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <HAL_RCC_OscConfig+0x320>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	2b80      	cmp	r3, #128	; 0x80
 8009646:	d001      	beq.n	800964c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e2c1      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800964c:	f7fe fda8 	bl	80081a0 <HAL_GetREVID>
 8009650:	4603      	mov	r3, r0
 8009652:	f241 0203 	movw	r2, #4099	; 0x1003
 8009656:	4293      	cmp	r3, r2
 8009658:	d817      	bhi.n	800968a <HAL_RCC_OscConfig+0x35e>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	2b20      	cmp	r3, #32
 8009660:	d108      	bne.n	8009674 <HAL_RCC_OscConfig+0x348>
 8009662:	4b70      	ldr	r3, [pc, #448]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800966a:	4a6e      	ldr	r2, [pc, #440]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800966c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009670:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009672:	e075      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009674:	4b6b      	ldr	r3, [pc, #428]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	069b      	lsls	r3, r3, #26
 8009682:	4968      	ldr	r1, [pc, #416]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009684:	4313      	orrs	r3, r2
 8009686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009688:	e06a      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800968a:	4b66      	ldr	r3, [pc, #408]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	061b      	lsls	r3, r3, #24
 8009698:	4962      	ldr	r1, [pc, #392]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800969a:	4313      	orrs	r3, r2
 800969c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800969e:	e05f      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d042      	beq.n	800972e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80096a8:	4b5e      	ldr	r3, [pc, #376]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a5d      	ldr	r2, [pc, #372]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80096ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b4:	f7fe fd44 	bl	8008140 <HAL_GetTick>
 80096b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80096bc:	f7fe fd40 	bl	8008140 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e280      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096ce:	4b55      	ldr	r3, [pc, #340]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0f0      	beq.n	80096bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096da:	f7fe fd61 	bl	80081a0 <HAL_GetREVID>
 80096de:	4603      	mov	r3, r0
 80096e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d817      	bhi.n	8009718 <HAL_RCC_OscConfig+0x3ec>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d108      	bne.n	8009702 <HAL_RCC_OscConfig+0x3d6>
 80096f0:	4b4c      	ldr	r3, [pc, #304]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096f8:	4a4a      	ldr	r2, [pc, #296]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80096fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096fe:	6053      	str	r3, [r2, #4]
 8009700:	e02e      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
 8009702:	4b48      	ldr	r3, [pc, #288]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	069b      	lsls	r3, r3, #26
 8009710:	4944      	ldr	r1, [pc, #272]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009712:	4313      	orrs	r3, r2
 8009714:	604b      	str	r3, [r1, #4]
 8009716:	e023      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
 8009718:	4b42      	ldr	r3, [pc, #264]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	493f      	ldr	r1, [pc, #252]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009728:	4313      	orrs	r3, r2
 800972a:	60cb      	str	r3, [r1, #12]
 800972c:	e018      	b.n	8009760 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800972e:	4b3d      	ldr	r3, [pc, #244]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a3c      	ldr	r2, [pc, #240]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973a:	f7fe fd01 	bl	8008140 <HAL_GetTick>
 800973e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009740:	e008      	b.n	8009754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009742:	f7fe fcfd 	bl	8008140 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d901      	bls.n	8009754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e23d      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009754:	4b33      	ldr	r3, [pc, #204]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1f0      	bne.n	8009742 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d036      	beq.n	80097da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d019      	beq.n	80097a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009774:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009778:	4a2a      	ldr	r2, [pc, #168]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009780:	f7fe fcde 	bl	8008140 <HAL_GetTick>
 8009784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009786:	e008      	b.n	800979a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009788:	f7fe fcda 	bl	8008140 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e21a      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800979a:	4b22      	ldr	r3, [pc, #136]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 800979c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0f0      	beq.n	8009788 <HAL_RCC_OscConfig+0x45c>
 80097a6:	e018      	b.n	80097da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097a8:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80097aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ac:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80097ae:	f023 0301 	bic.w	r3, r3, #1
 80097b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b4:	f7fe fcc4 	bl	8008140 <HAL_GetTick>
 80097b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097bc:	f7fe fcc0 	bl	8008140 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e200      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80097d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f0      	bne.n	80097bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d039      	beq.n	800985a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01c      	beq.n	8009828 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097ee:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a0c      	ldr	r2, [pc, #48]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 80097f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80097fa:	f7fe fca1 	bl	8008140 <HAL_GetTick>
 80097fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009800:	e008      	b.n	8009814 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009802:	f7fe fc9d 	bl	8008140 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e1dd      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009814:	4b03      	ldr	r3, [pc, #12]	; (8009824 <HAL_RCC_OscConfig+0x4f8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0f0      	beq.n	8009802 <HAL_RCC_OscConfig+0x4d6>
 8009820:	e01b      	b.n	800985a <HAL_RCC_OscConfig+0x52e>
 8009822:	bf00      	nop
 8009824:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009828:	4b9b      	ldr	r3, [pc, #620]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a9a      	ldr	r2, [pc, #616]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 800982e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009834:	f7fe fc84 	bl	8008140 <HAL_GetTick>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800983c:	f7fe fc80 	bl	8008140 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e1c0      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800984e:	4b92      	ldr	r3, [pc, #584]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f0      	bne.n	800983c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8081 	beq.w	800996a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009868:	4b8c      	ldr	r3, [pc, #560]	; (8009a9c <HAL_RCC_OscConfig+0x770>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a8b      	ldr	r2, [pc, #556]	; (8009a9c <HAL_RCC_OscConfig+0x770>)
 800986e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009874:	f7fe fc64 	bl	8008140 <HAL_GetTick>
 8009878:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800987a:	e008      	b.n	800988e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800987c:	f7fe fc60 	bl	8008140 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	2b64      	cmp	r3, #100	; 0x64
 8009888:	d901      	bls.n	800988e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e1a0      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800988e:	4b83      	ldr	r3, [pc, #524]	; (8009a9c <HAL_RCC_OscConfig+0x770>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0f0      	beq.n	800987c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d106      	bne.n	80098b0 <HAL_RCC_OscConfig+0x584>
 80098a2:	4b7d      	ldr	r3, [pc, #500]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a6:	4a7c      	ldr	r2, [pc, #496]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	6713      	str	r3, [r2, #112]	; 0x70
 80098ae:	e02d      	b.n	800990c <HAL_RCC_OscConfig+0x5e0>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10c      	bne.n	80098d2 <HAL_RCC_OscConfig+0x5a6>
 80098b8:	4b77      	ldr	r3, [pc, #476]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098bc:	4a76      	ldr	r2, [pc, #472]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	6713      	str	r3, [r2, #112]	; 0x70
 80098c4:	4b74      	ldr	r3, [pc, #464]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	4a73      	ldr	r2, [pc, #460]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098ca:	f023 0304 	bic.w	r3, r3, #4
 80098ce:	6713      	str	r3, [r2, #112]	; 0x70
 80098d0:	e01c      	b.n	800990c <HAL_RCC_OscConfig+0x5e0>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b05      	cmp	r3, #5
 80098d8:	d10c      	bne.n	80098f4 <HAL_RCC_OscConfig+0x5c8>
 80098da:	4b6f      	ldr	r3, [pc, #444]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	4a6e      	ldr	r2, [pc, #440]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	6713      	str	r3, [r2, #112]	; 0x70
 80098e6:	4b6c      	ldr	r3, [pc, #432]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	4a6b      	ldr	r2, [pc, #428]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098ec:	f043 0301 	orr.w	r3, r3, #1
 80098f0:	6713      	str	r3, [r2, #112]	; 0x70
 80098f2:	e00b      	b.n	800990c <HAL_RCC_OscConfig+0x5e0>
 80098f4:	4b68      	ldr	r3, [pc, #416]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f8:	4a67      	ldr	r2, [pc, #412]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009900:	4b65      	ldr	r3, [pc, #404]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009904:	4a64      	ldr	r2, [pc, #400]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009906:	f023 0304 	bic.w	r3, r3, #4
 800990a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d015      	beq.n	8009940 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009914:	f7fe fc14 	bl	8008140 <HAL_GetTick>
 8009918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800991a:	e00a      	b.n	8009932 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800991c:	f7fe fc10 	bl	8008140 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	f241 3288 	movw	r2, #5000	; 0x1388
 800992a:	4293      	cmp	r3, r2
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e14e      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009932:	4b59      	ldr	r3, [pc, #356]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0ee      	beq.n	800991c <HAL_RCC_OscConfig+0x5f0>
 800993e:	e014      	b.n	800996a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009940:	f7fe fbfe 	bl	8008140 <HAL_GetTick>
 8009944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009946:	e00a      	b.n	800995e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009948:	f7fe fbfa 	bl	8008140 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	f241 3288 	movw	r2, #5000	; 0x1388
 8009956:	4293      	cmp	r3, r2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e138      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800995e:	4b4e      	ldr	r3, [pc, #312]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1ee      	bne.n	8009948 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 812d 	beq.w	8009bce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009974:	4b48      	ldr	r3, [pc, #288]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997c:	2b18      	cmp	r3, #24
 800997e:	f000 80bd 	beq.w	8009afc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	2b02      	cmp	r3, #2
 8009988:	f040 809e 	bne.w	8009ac8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800998c:	4b42      	ldr	r3, [pc, #264]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a41      	ldr	r2, [pc, #260]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009998:	f7fe fbd2 	bl	8008140 <HAL_GetTick>
 800999c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a0:	f7fe fbce 	bl	8008140 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e10e      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099b2:	4b39      	ldr	r3, [pc, #228]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1f0      	bne.n	80099a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099be:	4b36      	ldr	r3, [pc, #216]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80099c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099c2:	4b37      	ldr	r3, [pc, #220]	; (8009aa0 <HAL_RCC_OscConfig+0x774>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099ce:	0112      	lsls	r2, r2, #4
 80099d0:	430a      	orrs	r2, r1
 80099d2:	4931      	ldr	r1, [pc, #196]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	628b      	str	r3, [r1, #40]	; 0x28
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	3b01      	subs	r3, #1
 80099de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e6:	3b01      	subs	r3, #1
 80099e8:	025b      	lsls	r3, r3, #9
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	3b01      	subs	r3, #1
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a00:	3b01      	subs	r3, #1
 8009a02:	061b      	lsls	r3, r3, #24
 8009a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a08:	4923      	ldr	r1, [pc, #140]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009a0e:	4b22      	ldr	r3, [pc, #136]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	4a21      	ldr	r2, [pc, #132]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a1a:	4b1f      	ldr	r3, [pc, #124]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a1e:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <HAL_RCC_OscConfig+0x778>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a26:	00d2      	lsls	r2, r2, #3
 8009a28:	491b      	ldr	r1, [pc, #108]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a2e:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	f023 020c 	bic.w	r2, r3, #12
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	4917      	ldr	r1, [pc, #92]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a40:	4b15      	ldr	r3, [pc, #84]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	f023 0202 	bic.w	r2, r3, #2
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4c:	4912      	ldr	r1, [pc, #72]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a52:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	4a0d      	ldr	r2, [pc, #52]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	4a0a      	ldr	r2, [pc, #40]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	4a07      	ldr	r2, [pc, #28]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a7c:	f043 0301 	orr.w	r3, r3, #1
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a04      	ldr	r2, [pc, #16]	; (8009a98 <HAL_RCC_OscConfig+0x76c>)
 8009a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8e:	f7fe fb57 	bl	8008140 <HAL_GetTick>
 8009a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a94:	e011      	b.n	8009aba <HAL_RCC_OscConfig+0x78e>
 8009a96:	bf00      	nop
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	58024800 	.word	0x58024800
 8009aa0:	fffffc0c 	.word	0xfffffc0c
 8009aa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa8:	f7fe fb4a 	bl	8008140 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e08a      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aba:	4b47      	ldr	r3, [pc, #284]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0f0      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x77c>
 8009ac6:	e082      	b.n	8009bce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ac8:	4b43      	ldr	r3, [pc, #268]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a42      	ldr	r2, [pc, #264]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad4:	f7fe fb34 	bl	8008140 <HAL_GetTick>
 8009ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009adc:	f7fe fb30 	bl	8008140 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e070      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009aee:	4b3a      	ldr	r3, [pc, #232]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f0      	bne.n	8009adc <HAL_RCC_OscConfig+0x7b0>
 8009afa:	e068      	b.n	8009bce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b02:	4b35      	ldr	r3, [pc, #212]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d031      	beq.n	8009b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f003 0203 	and.w	r2, r3, #3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d12a      	bne.n	8009b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	091b      	lsrs	r3, r3, #4
 8009b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d122      	bne.n	8009b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d11a      	bne.n	8009b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	0a5b      	lsrs	r3, r3, #9
 8009b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d111      	bne.n	8009b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d108      	bne.n	8009b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	0e1b      	lsrs	r3, r3, #24
 8009b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d001      	beq.n	8009b78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e02b      	b.n	8009bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009b78:	4b17      	ldr	r3, [pc, #92]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7c:	08db      	lsrs	r3, r3, #3
 8009b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d01f      	beq.n	8009bce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	4a11      	ldr	r2, [pc, #68]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b9a:	f7fe fad1 	bl	8008140 <HAL_GetTick>
 8009b9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ba0:	bf00      	nop
 8009ba2:	f7fe facd 	bl	8008140 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d0f9      	beq.n	8009ba2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bb2:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <HAL_RCC_OscConfig+0x8b0>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009bba:	00d2      	lsls	r2, r2, #3
 8009bbc:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	4a04      	ldr	r2, [pc, #16]	; (8009bd8 <HAL_RCC_OscConfig+0x8ac>)
 8009bc8:	f043 0301 	orr.w	r3, r3, #1
 8009bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3730      	adds	r7, #48	; 0x30
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	ffff0007 	.word	0xffff0007

08009be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e19c      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009bf4:	4b8a      	ldr	r3, [pc, #552]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 030f 	and.w	r3, r3, #15
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d910      	bls.n	8009c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c02:	4b87      	ldr	r3, [pc, #540]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f023 020f 	bic.w	r2, r3, #15
 8009c0a:	4985      	ldr	r1, [pc, #532]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c12:	4b83      	ldr	r3, [pc, #524]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d001      	beq.n	8009c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e184      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d010      	beq.n	8009c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	4b7b      	ldr	r3, [pc, #492]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d908      	bls.n	8009c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c40:	4b78      	ldr	r3, [pc, #480]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	4975      	ldr	r1, [pc, #468]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d010      	beq.n	8009c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695a      	ldr	r2, [r3, #20]
 8009c62:	4b70      	ldr	r3, [pc, #448]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d908      	bls.n	8009c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c6e:	4b6d      	ldr	r3, [pc, #436]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	496a      	ldr	r1, [pc, #424]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d010      	beq.n	8009cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	4b64      	ldr	r3, [pc, #400]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d908      	bls.n	8009cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c9c:	4b61      	ldr	r3, [pc, #388]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	495e      	ldr	r1, [pc, #376]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d010      	beq.n	8009cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69da      	ldr	r2, [r3, #28]
 8009cbe:	4b59      	ldr	r3, [pc, #356]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d908      	bls.n	8009cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009cca:	4b56      	ldr	r3, [pc, #344]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	4953      	ldr	r1, [pc, #332]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d010      	beq.n	8009d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	4b4d      	ldr	r3, [pc, #308]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d908      	bls.n	8009d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cf8:	4b4a      	ldr	r3, [pc, #296]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	f023 020f 	bic.w	r2, r3, #15
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4947      	ldr	r1, [pc, #284]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d055      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d16:	4b43      	ldr	r3, [pc, #268]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	4940      	ldr	r1, [pc, #256]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d107      	bne.n	8009d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d30:	4b3c      	ldr	r3, [pc, #240]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d121      	bne.n	8009d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0f6      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d107      	bne.n	8009d58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d48:	4b36      	ldr	r3, [pc, #216]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d115      	bne.n	8009d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e0ea      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d107      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d60:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d109      	bne.n	8009d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0de      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d70:	4b2c      	ldr	r3, [pc, #176]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e0d6      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d80:	4b28      	ldr	r3, [pc, #160]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	f023 0207 	bic.w	r2, r3, #7
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4925      	ldr	r1, [pc, #148]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d92:	f7fe f9d5 	bl	8008140 <HAL_GetTick>
 8009d96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d98:	e00a      	b.n	8009db0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d9a:	f7fe f9d1 	bl	8008140 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d901      	bls.n	8009db0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e0be      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009db0:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	00db      	lsls	r3, r3, #3
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d1eb      	bne.n	8009d9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d010      	beq.n	8009df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d208      	bcs.n	8009df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dde:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	f023 020f 	bic.w	r2, r3, #15
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	490e      	ldr	r1, [pc, #56]	; (8009e24 <HAL_RCC_ClockConfig+0x244>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d214      	bcs.n	8009e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dfe:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f023 020f 	bic.w	r2, r3, #15
 8009e06:	4906      	ldr	r1, [pc, #24]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <HAL_RCC_ClockConfig+0x240>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 030f 	and.w	r3, r3, #15
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d005      	beq.n	8009e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e086      	b.n	8009f2e <HAL_RCC_ClockConfig+0x34e>
 8009e20:	52002000 	.word	0x52002000
 8009e24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d010      	beq.n	8009e56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691a      	ldr	r2, [r3, #16]
 8009e38:	4b3f      	ldr	r3, [pc, #252]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d208      	bcs.n	8009e56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e44:	4b3c      	ldr	r3, [pc, #240]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	4939      	ldr	r1, [pc, #228]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d010      	beq.n	8009e84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d208      	bcs.n	8009e84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e72:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	492e      	ldr	r1, [pc, #184]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d010      	beq.n	8009eb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699a      	ldr	r2, [r3, #24]
 8009e94:	4b28      	ldr	r3, [pc, #160]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d208      	bcs.n	8009eb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ea0:	4b25      	ldr	r3, [pc, #148]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	4922      	ldr	r1, [pc, #136]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d010      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69da      	ldr	r2, [r3, #28]
 8009ec2:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d208      	bcs.n	8009ee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009ece:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	4917      	ldr	r1, [pc, #92]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ee0:	f000 f844 	bl	8009f6c <HAL_RCC_GetSysClockFreq>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	4912      	ldr	r1, [pc, #72]	; (8009f3c <HAL_RCC_ClockConfig+0x35c>)
 8009ef2:	5ccb      	ldrb	r3, [r1, r3]
 8009ef4:	f003 031f 	and.w	r3, r3, #31
 8009ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8009efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009efe:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <HAL_RCC_ClockConfig+0x358>)
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	4a0d      	ldr	r2, [pc, #52]	; (8009f3c <HAL_RCC_ClockConfig+0x35c>)
 8009f08:	5cd3      	ldrb	r3, [r2, r3]
 8009f0a:	f003 031f 	and.w	r3, r3, #31
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	fa22 f303 	lsr.w	r3, r2, r3
 8009f14:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <HAL_RCC_ClockConfig+0x360>)
 8009f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f18:	4a0a      	ldr	r2, [pc, #40]	; (8009f44 <HAL_RCC_ClockConfig+0x364>)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <HAL_RCC_ClockConfig+0x368>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f8c2 	bl	80080ac <HAL_InitTick>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	08010c44 	.word	0x08010c44
 8009f40:	2400002c 	.word	0x2400002c
 8009f44:	24000028 	.word	0x24000028
 8009f48:	24000030 	.word	0x24000030

08009f4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <HAL_RCC_EnableCSS+0x1c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <HAL_RCC_EnableCSS+0x1c>)
 8009f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f5a:	6013      	str	r3, [r2, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400

08009f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f72:	4bb3      	ldr	r3, [pc, #716]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f7a:	2b18      	cmp	r3, #24
 8009f7c:	f200 8155 	bhi.w	800a22a <HAL_RCC_GetSysClockFreq+0x2be>
 8009f80:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	08009fed 	.word	0x08009fed
 8009f8c:	0800a22b 	.word	0x0800a22b
 8009f90:	0800a22b 	.word	0x0800a22b
 8009f94:	0800a22b 	.word	0x0800a22b
 8009f98:	0800a22b 	.word	0x0800a22b
 8009f9c:	0800a22b 	.word	0x0800a22b
 8009fa0:	0800a22b 	.word	0x0800a22b
 8009fa4:	0800a22b 	.word	0x0800a22b
 8009fa8:	0800a013 	.word	0x0800a013
 8009fac:	0800a22b 	.word	0x0800a22b
 8009fb0:	0800a22b 	.word	0x0800a22b
 8009fb4:	0800a22b 	.word	0x0800a22b
 8009fb8:	0800a22b 	.word	0x0800a22b
 8009fbc:	0800a22b 	.word	0x0800a22b
 8009fc0:	0800a22b 	.word	0x0800a22b
 8009fc4:	0800a22b 	.word	0x0800a22b
 8009fc8:	0800a019 	.word	0x0800a019
 8009fcc:	0800a22b 	.word	0x0800a22b
 8009fd0:	0800a22b 	.word	0x0800a22b
 8009fd4:	0800a22b 	.word	0x0800a22b
 8009fd8:	0800a22b 	.word	0x0800a22b
 8009fdc:	0800a22b 	.word	0x0800a22b
 8009fe0:	0800a22b 	.word	0x0800a22b
 8009fe4:	0800a22b 	.word	0x0800a22b
 8009fe8:	0800a01f 	.word	0x0800a01f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fec:	4b94      	ldr	r3, [pc, #592]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ff8:	4b91      	ldr	r3, [pc, #580]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	08db      	lsrs	r3, r3, #3
 8009ffe:	f003 0303 	and.w	r3, r3, #3
 800a002:	4a90      	ldr	r2, [pc, #576]	; (800a244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a004:	fa22 f303 	lsr.w	r3, r2, r3
 800a008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a00a:	e111      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a00c:	4b8d      	ldr	r3, [pc, #564]	; (800a244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a00e:	61bb      	str	r3, [r7, #24]
      break;
 800a010:	e10e      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a012:	4b8d      	ldr	r3, [pc, #564]	; (800a248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a014:	61bb      	str	r3, [r7, #24]
      break;
 800a016:	e10b      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a018:	4b8c      	ldr	r3, [pc, #560]	; (800a24c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a01a:	61bb      	str	r3, [r7, #24]
      break;
 800a01c:	e108      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a01e:	4b88      	ldr	r3, [pc, #544]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	f003 0303 	and.w	r3, r3, #3
 800a026:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a028:	4b85      	ldr	r3, [pc, #532]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	091b      	lsrs	r3, r3, #4
 800a02e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a032:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a034:	4b82      	ldr	r3, [pc, #520]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a03e:	4b80      	ldr	r3, [pc, #512]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	08db      	lsrs	r3, r3, #3
 800a044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80e1 	beq.w	800a224 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b02      	cmp	r3, #2
 800a066:	f000 8083 	beq.w	800a170 <HAL_RCC_GetSysClockFreq+0x204>
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	f200 80a1 	bhi.w	800a1b4 <HAL_RCC_GetSysClockFreq+0x248>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_RCC_GetSysClockFreq+0x114>
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d056      	beq.n	800a12c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a07e:	e099      	b.n	800a1b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a080:	4b6f      	ldr	r3, [pc, #444]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d02d      	beq.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a08c:	4b6c      	ldr	r3, [pc, #432]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	4a6b      	ldr	r2, [pc, #428]	; (800a244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b6:	4b62      	ldr	r3, [pc, #392]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a0e6:	e087      	b.n	800a1f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a254 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b51      	ldr	r3, [pc, #324]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a10e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a12a:	e065      	b.n	800a1f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a258 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b40      	ldr	r3, [pc, #256]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a152:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a16e:	e043      	b.n	800a1f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a25c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b2f      	ldr	r3, [pc, #188]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a02 	vldr	s12, [r7, #8]
 800a196:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a1b2:	e021      	b.n	800a1f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a258 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a1f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fc:	0a5b      	lsrs	r3, r3, #9
 800a1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a202:	3301      	adds	r3, #1
 800a204:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a210:	edd7 6a07 	vldr	s13, [r7, #28]
 800a214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21c:	ee17 3a90 	vmov	r3, s15
 800a220:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a222:	e005      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	61bb      	str	r3, [r7, #24]
      break;
 800a228:	e002      	b.n	800a230 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a22c:	61bb      	str	r3, [r7, #24]
      break;
 800a22e:	bf00      	nop
  }

  return sysclockfreq;
 800a230:	69bb      	ldr	r3, [r7, #24]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3724      	adds	r7, #36	; 0x24
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	58024400 	.word	0x58024400
 800a244:	03d09000 	.word	0x03d09000
 800a248:	003d0900 	.word	0x003d0900
 800a24c:	00f42400 	.word	0x00f42400
 800a250:	46000000 	.word	0x46000000
 800a254:	4c742400 	.word	0x4c742400
 800a258:	4a742400 	.word	0x4a742400
 800a25c:	4b742400 	.word	0x4b742400

0800a260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a266:	f7ff fe81 	bl	8009f6c <HAL_RCC_GetSysClockFreq>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	0a1b      	lsrs	r3, r3, #8
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	490f      	ldr	r1, [pc, #60]	; (800a2b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a278:	5ccb      	ldrb	r3, [r1, r3]
 800a27a:	f003 031f 	and.w	r3, r3, #31
 800a27e:	fa22 f303 	lsr.w	r3, r2, r3
 800a282:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	4a09      	ldr	r2, [pc, #36]	; (800a2b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a28e:	5cd3      	ldrb	r3, [r2, r3]
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	fa22 f303 	lsr.w	r3, r2, r3
 800a29a:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a29c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a29e:	4a07      	ldr	r2, [pc, #28]	; (800a2bc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	08010c44 	.word	0x08010c44
 800a2b8:	2400002c 	.word	0x2400002c
 800a2bc:	24000028 	.word	0x24000028

0800a2c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2c4:	f7ff ffcc 	bl	800a260 <HAL_RCC_GetHCLKFreq>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	091b      	lsrs	r3, r3, #4
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	4904      	ldr	r1, [pc, #16]	; (800a2e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2d6:	5ccb      	ldrb	r3, [r1, r3]
 800a2d8:	f003 031f 	and.w	r3, r3, #31
 800a2dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	08010c44 	.word	0x08010c44

0800a2ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a2f0:	f7ff ffb6 	bl	800a260 <HAL_RCC_GetHCLKFreq>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	4b06      	ldr	r3, [pc, #24]	; (800a310 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	4904      	ldr	r1, [pc, #16]	; (800a314 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a302:	5ccb      	ldrb	r3, [r1, r3]
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	58024400 	.word	0x58024400
 800a314:	08010c44 	.word	0x08010c44

0800a318 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a328:	d105      	bne.n	800a336 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a32a:	f000 f809 	bl	800a340 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a32e:	4b03      	ldr	r3, [pc, #12]	; (800a33c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a334:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400

0800a340 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a354:	b0ca      	sub	sp, #296	; 0x128
 800a356:	af00      	add	r7, sp, #0
 800a358:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a362:	2300      	movs	r3, #0
 800a364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a374:	2500      	movs	r5, #0
 800a376:	ea54 0305 	orrs.w	r3, r4, r5
 800a37a:	d049      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a386:	d02f      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a38c:	d828      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a38e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a392:	d01a      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a398:	d822      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a2:	d007      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a3a4:	e01c      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a6:	4bb8      	ldr	r3, [pc, #736]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4ab7      	ldr	r2, [pc, #732]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a3b2:	e01a      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	2102      	movs	r1, #2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 fc8f 	bl	800bce0 <RCCEx_PLL2_Config>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a3c8:	e00f      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	3328      	adds	r3, #40	; 0x28
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 fd36 	bl	800be44 <RCCEx_PLL3_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a3de:	e004      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3e6:	e000      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3f2:	4ba5      	ldr	r3, [pc, #660]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a400:	4aa1      	ldr	r2, [pc, #644]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a402:	430b      	orrs	r3, r1
 800a404:	6513      	str	r3, [r2, #80]	; 0x50
 800a406:	e003      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a40c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a41c:	f04f 0900 	mov.w	r9, #0
 800a420:	ea58 0309 	orrs.w	r3, r8, r9
 800a424:	d047      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d82a      	bhi.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a44d 	.word	0x0800a44d
 800a43c:	0800a45b 	.word	0x0800a45b
 800a440:	0800a471 	.word	0x0800a471
 800a444:	0800a48f 	.word	0x0800a48f
 800a448:	0800a48f 	.word	0x0800a48f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a44c:	4b8e      	ldr	r3, [pc, #568]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	4a8d      	ldr	r2, [pc, #564]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a458:	e01a      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45e:	3308      	adds	r3, #8
 800a460:	2100      	movs	r1, #0
 800a462:	4618      	mov	r0, r3
 800a464:	f001 fc3c 	bl	800bce0 <RCCEx_PLL2_Config>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a46e:	e00f      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a474:	3328      	adds	r3, #40	; 0x28
 800a476:	2100      	movs	r1, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f001 fce3 	bl	800be44 <RCCEx_PLL3_Config>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a484:	e004      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a48c:	e000      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a48e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a498:	4b7b      	ldr	r3, [pc, #492]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49c:	f023 0107 	bic.w	r1, r3, #7
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a6:	4a78      	ldr	r2, [pc, #480]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	6513      	str	r3, [r2, #80]	; 0x50
 800a4ac:	e003      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a4c2:	f04f 0b00 	mov.w	fp, #0
 800a4c6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a4ca:	d04c      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d6:	d030      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4dc:	d829      	bhi.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4de:	2bc0      	cmp	r3, #192	; 0xc0
 800a4e0:	d02d      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a4e2:	2bc0      	cmp	r3, #192	; 0xc0
 800a4e4:	d825      	bhi.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4e6:	2b80      	cmp	r3, #128	; 0x80
 800a4e8:	d018      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a4ea:	2b80      	cmp	r3, #128	; 0x80
 800a4ec:	d821      	bhi.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a4f2:	2b40      	cmp	r3, #64	; 0x40
 800a4f4:	d007      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a4f6:	e01c      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f8:	4b63      	ldr	r3, [pc, #396]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	4a62      	ldr	r2, [pc, #392]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a504:	e01c      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50a:	3308      	adds	r3, #8
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 fbe6 	bl	800bce0 <RCCEx_PLL2_Config>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a51a:	e011      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a520:	3328      	adds	r3, #40	; 0x28
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f001 fc8d 	bl	800be44 <RCCEx_PLL3_Config>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a530:	e006      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a538:	e002      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a53a:	bf00      	nop
 800a53c:	e000      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a53e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a548:	4b4f      	ldr	r3, [pc, #316]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a556:	4a4c      	ldr	r2, [pc, #304]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a558:	430b      	orrs	r3, r1
 800a55a:	6513      	str	r3, [r2, #80]	; 0x50
 800a55c:	e003      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a572:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a576:	2300      	movs	r3, #0
 800a578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a57c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a580:	460b      	mov	r3, r1
 800a582:	4313      	orrs	r3, r2
 800a584:	d053      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a58e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a592:	d035      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a598:	d82e      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a59a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a59e:	d031      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a5a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5a4:	d828      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a5a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5aa:	d01a      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a5ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5b0:	d822      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a5b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5ba:	d007      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a5bc:	e01c      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5be:	4b32      	ldr	r3, [pc, #200]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	4a31      	ldr	r2, [pc, #196]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5ca:	e01c      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fb83 	bl	800bce0 <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a5e0:	e011      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	3328      	adds	r3, #40	; 0x28
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 fc2a 	bl	800be44 <RCCEx_PLL3_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5f6:	e006      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5fe:	e002      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a600:	bf00      	nop
 800a602:	e000      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10b      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a60e:	4b1e      	ldr	r3, [pc, #120]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a612:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a61e:	4a1a      	ldr	r2, [pc, #104]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a620:	430b      	orrs	r3, r1
 800a622:	6593      	str	r3, [r2, #88]	; 0x58
 800a624:	e003      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a62a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a63a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a63e:	2300      	movs	r3, #0
 800a640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a644:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a648:	460b      	mov	r3, r1
 800a64a:	4313      	orrs	r3, r2
 800a64c:	d056      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a65a:	d038      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a65c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a660:	d831      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a666:	d034      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a66c:	d82b      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a66e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a672:	d01d      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a678:	d825      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a67e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a682:	d00a      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a684:	e01f      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a686:	bf00      	nop
 800a688:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a68c:	4ba2      	ldr	r3, [pc, #648]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	4aa1      	ldr	r2, [pc, #644]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a698:	e01c      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69e:	3308      	adds	r3, #8
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 fb1c 	bl	800bce0 <RCCEx_PLL2_Config>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a6ae:	e011      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b4:	3328      	adds	r3, #40	; 0x28
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 fbc3 	bl	800be44 <RCCEx_PLL3_Config>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6c4:	e006      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6cc:	e002      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a6ce:	bf00      	nop
 800a6d0:	e000      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10b      	bne.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a6dc:	4b8e      	ldr	r3, [pc, #568]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6ec:	4a8a      	ldr	r2, [pc, #552]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	6593      	str	r3, [r2, #88]	; 0x58
 800a6f2:	e003      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a712:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a716:	460b      	mov	r3, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	d03a      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a722:	2b30      	cmp	r3, #48	; 0x30
 800a724:	d01f      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a726:	2b30      	cmp	r3, #48	; 0x30
 800a728:	d819      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d00c      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d815      	bhi.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d019      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a736:	2b10      	cmp	r3, #16
 800a738:	d111      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73a:	4b77      	ldr	r3, [pc, #476]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	4a76      	ldr	r2, [pc, #472]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a746:	e011      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74c:	3308      	adds	r3, #8
 800a74e:	2102      	movs	r1, #2
 800a750:	4618      	mov	r0, r3
 800a752:	f001 fac5 	bl	800bce0 <RCCEx_PLL2_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a75c:	e006      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a764:	e002      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a766:	bf00      	nop
 800a768:	e000      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10a      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a774:	4b68      	ldr	r3, [pc, #416]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a778:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a782:	4a65      	ldr	r2, [pc, #404]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a784:	430b      	orrs	r3, r1
 800a786:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a788:	e003      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a78e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a79e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	d051      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7bc:	d035      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a7be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7c2:	d82e      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7c8:	d031      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a7ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7ce:	d828      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d4:	d01a      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7da:	d822      	bhi.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e4:	d007      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a7e6:	e01c      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e8:	4b4b      	ldr	r3, [pc, #300]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	4a4a      	ldr	r2, [pc, #296]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a7f4:	e01c      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 fa6e 	bl	800bce0 <RCCEx_PLL2_Config>
 800a804:	4603      	mov	r3, r0
 800a806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a80a:	e011      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a810:	3328      	adds	r3, #40	; 0x28
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fb15 	bl	800be44 <RCCEx_PLL3_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a820:	e006      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a828:	e002      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a82a:	bf00      	nop
 800a82c:	e000      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a82e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a838:	4b37      	ldr	r3, [pc, #220]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a846:	4a34      	ldr	r2, [pc, #208]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a848:	430b      	orrs	r3, r1
 800a84a:	6513      	str	r3, [r2, #80]	; 0x50
 800a84c:	e003      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a86c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a870:	460b      	mov	r3, r1
 800a872:	4313      	orrs	r3, r2
 800a874:	d056      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a880:	d033      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a886:	d82c      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a88c:	d02f      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a88e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a892:	d826      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a898:	d02b      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a89a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a89e:	d820      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a8a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8a4:	d012      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a8a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8aa:	d81a      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d022      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b4:	d115      	bne.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	2101      	movs	r1, #1
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 fa0e 	bl	800bce0 <RCCEx_PLL2_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8ca:	e015      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d0:	3328      	adds	r3, #40	; 0x28
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fab5 	bl	800be44 <RCCEx_PLL3_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8e0:	e00a      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8e8:	e006      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8ea:	bf00      	nop
 800a8ec:	e004      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8ee:	bf00      	nop
 800a8f0:	e002      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8f2:	bf00      	nop
 800a8f4:	e000      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a8f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10d      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a904:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a90e:	4a02      	ldr	r2, [pc, #8]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a910:	430b      	orrs	r3, r1
 800a912:	6513      	str	r3, [r2, #80]	; 0x50
 800a914:	e006      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a916:	bf00      	nop
 800a918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a934:	2300      	movs	r3, #0
 800a936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a93a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a93e:	460b      	mov	r3, r1
 800a940:	4313      	orrs	r3, r2
 800a942:	d055      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a950:	d033      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a956:	d82c      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95c:	d02f      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a962:	d826      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a968:	d02b      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a96a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a96e:	d820      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a974:	d012      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a97a:	d81a      	bhi.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d022      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a984:	d115      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98a:	3308      	adds	r3, #8
 800a98c:	2101      	movs	r1, #1
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 f9a6 	bl	800bce0 <RCCEx_PLL2_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a99a:	e015      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a0:	3328      	adds	r3, #40	; 0x28
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f001 fa4d 	bl	800be44 <RCCEx_PLL3_Config>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a9b0:	e00a      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9b8:	e006      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9ba:	bf00      	nop
 800a9bc:	e004      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9be:	bf00      	nop
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a9d0:	4ba3      	ldr	r3, [pc, #652]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9e0:	4a9f      	ldr	r2, [pc, #636]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e6:	e003      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a9fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa00:	2300      	movs	r3, #0
 800aa02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aa06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	d037      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa1a:	d00e      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800aa1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa20:	d816      	bhi.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d018      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800aa26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa2a:	d111      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa2c:	4b8c      	ldr	r3, [pc, #560]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	4a8b      	ldr	r2, [pc, #556]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa38:	e00f      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	3308      	adds	r3, #8
 800aa40:	2101      	movs	r1, #1
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 f94c 	bl	800bce0 <RCCEx_PLL2_Config>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa4e:	e004      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa56:	e000      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800aa58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa62:	4b7f      	ldr	r3, [pc, #508]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa70:	4a7b      	ldr	r2, [pc, #492]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa72:	430b      	orrs	r3, r1
 800aa74:	6513      	str	r3, [r2, #80]	; 0x50
 800aa76:	e003      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aa80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aa8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa90:	2300      	movs	r3, #0
 800aa92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	d039      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d81c      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aaed 	.word	0x0800aaed
 800aab4:	0800aac1 	.word	0x0800aac1
 800aab8:	0800aacf 	.word	0x0800aacf
 800aabc:	0800aaed 	.word	0x0800aaed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac0:	4b67      	ldr	r3, [pc, #412]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	4a66      	ldr	r2, [pc, #408]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aacc:	e00f      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad2:	3308      	adds	r3, #8
 800aad4:	2102      	movs	r1, #2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 f902 	bl	800bce0 <RCCEx_PLL2_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aae2:	e004      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaea:	e000      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800aaec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aaf6:	4b5a      	ldr	r3, [pc, #360]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafa:	f023 0103 	bic.w	r1, r3, #3
 800aafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab04:	4a56      	ldr	r2, [pc, #344]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab06:	430b      	orrs	r3, r1
 800ab08:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab0a:	e003      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ab20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4313      	orrs	r3, r2
 800ab32:	f000 809f 	beq.w	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab36:	4b4b      	ldr	r3, [pc, #300]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a4a      	ldr	r2, [pc, #296]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab42:	f7fd fafd 	bl	8008140 <HAL_GetTick>
 800ab46:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab4a:	e00b      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab4c:	f7fd faf8 	bl	8008140 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b64      	cmp	r3, #100	; 0x64
 800ab5a:	d903      	bls.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab62:	e005      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab64:	4b3f      	ldr	r3, [pc, #252]	; (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0ed      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ab70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d179      	bne.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ab78:	4b39      	ldr	r3, [pc, #228]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab84:	4053      	eors	r3, r2
 800ab86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d015      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab8e:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab9a:	4b31      	ldr	r3, [pc, #196]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9e:	4a30      	ldr	r2, [pc, #192]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aba4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abaa:	4a2d      	ldr	r2, [pc, #180]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abb0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800abb2:	4a2b      	ldr	r2, [pc, #172]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800abb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc6:	d118      	bne.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc8:	f7fd faba 	bl	8008140 <HAL_GetTick>
 800abcc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abd0:	e00d      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abd2:	f7fd fab5 	bl	8008140 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800abdc:	1ad2      	subs	r2, r2, r3
 800abde:	f241 3388 	movw	r3, #5000	; 0x1388
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d903      	bls.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800abec:	e005      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abee:	4b1c      	ldr	r3, [pc, #112]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0eb      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800abfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d129      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac12:	d10e      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ac14:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ac1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac24:	091a      	lsrs	r2, r3, #4
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	4a0d      	ldr	r2, [pc, #52]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	6113      	str	r3, [r2, #16]
 800ac30:	e005      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ac32:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	4a0a      	ldr	r2, [pc, #40]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac3c:	6113      	str	r3, [r2, #16]
 800ac3e:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ac42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac4e:	4a04      	ldr	r2, [pc, #16]	; (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6713      	str	r3, [r2, #112]	; 0x70
 800ac54:	e00e      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ac5e:	e009      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ac60:	58024400 	.word	0x58024400
 800ac64:	58024800 	.word	0x58024800
 800ac68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f002 0301 	and.w	r3, r2, #1
 800ac80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac84:	2300      	movs	r3, #0
 800ac86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f000 8089 	beq.w	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ac96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9c:	2b28      	cmp	r3, #40	; 0x28
 800ac9e:	d86b      	bhi.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800aca0:	a201      	add	r2, pc, #4	; (adr r2, 800aca8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca6:	bf00      	nop
 800aca8:	0800ad81 	.word	0x0800ad81
 800acac:	0800ad79 	.word	0x0800ad79
 800acb0:	0800ad79 	.word	0x0800ad79
 800acb4:	0800ad79 	.word	0x0800ad79
 800acb8:	0800ad79 	.word	0x0800ad79
 800acbc:	0800ad79 	.word	0x0800ad79
 800acc0:	0800ad79 	.word	0x0800ad79
 800acc4:	0800ad79 	.word	0x0800ad79
 800acc8:	0800ad4d 	.word	0x0800ad4d
 800accc:	0800ad79 	.word	0x0800ad79
 800acd0:	0800ad79 	.word	0x0800ad79
 800acd4:	0800ad79 	.word	0x0800ad79
 800acd8:	0800ad79 	.word	0x0800ad79
 800acdc:	0800ad79 	.word	0x0800ad79
 800ace0:	0800ad79 	.word	0x0800ad79
 800ace4:	0800ad79 	.word	0x0800ad79
 800ace8:	0800ad63 	.word	0x0800ad63
 800acec:	0800ad79 	.word	0x0800ad79
 800acf0:	0800ad79 	.word	0x0800ad79
 800acf4:	0800ad79 	.word	0x0800ad79
 800acf8:	0800ad79 	.word	0x0800ad79
 800acfc:	0800ad79 	.word	0x0800ad79
 800ad00:	0800ad79 	.word	0x0800ad79
 800ad04:	0800ad79 	.word	0x0800ad79
 800ad08:	0800ad81 	.word	0x0800ad81
 800ad0c:	0800ad79 	.word	0x0800ad79
 800ad10:	0800ad79 	.word	0x0800ad79
 800ad14:	0800ad79 	.word	0x0800ad79
 800ad18:	0800ad79 	.word	0x0800ad79
 800ad1c:	0800ad79 	.word	0x0800ad79
 800ad20:	0800ad79 	.word	0x0800ad79
 800ad24:	0800ad79 	.word	0x0800ad79
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad79 	.word	0x0800ad79
 800ad30:	0800ad79 	.word	0x0800ad79
 800ad34:	0800ad79 	.word	0x0800ad79
 800ad38:	0800ad79 	.word	0x0800ad79
 800ad3c:	0800ad79 	.word	0x0800ad79
 800ad40:	0800ad79 	.word	0x0800ad79
 800ad44:	0800ad79 	.word	0x0800ad79
 800ad48:	0800ad81 	.word	0x0800ad81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad50:	3308      	adds	r3, #8
 800ad52:	2101      	movs	r1, #1
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 ffc3 	bl	800bce0 <RCCEx_PLL2_Config>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad60:	e00f      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad66:	3328      	adds	r3, #40	; 0x28
 800ad68:	2101      	movs	r1, #1
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 f86a 	bl	800be44 <RCCEx_PLL3_Config>
 800ad70:	4603      	mov	r3, r0
 800ad72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad76:	e004      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad7e:	e000      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ad80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ad8a:	4bbf      	ldr	r3, [pc, #764]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ad92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad98:	4abb      	ldr	r2, [pc, #748]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad9a:	430b      	orrs	r3, r1
 800ad9c:	6553      	str	r3, [r2, #84]	; 0x54
 800ad9e:	e003      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ada4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f002 0302 	and.w	r3, r2, #2
 800adb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800adb8:	2300      	movs	r3, #0
 800adba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800adbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800adc2:	460b      	mov	r3, r1
 800adc4:	4313      	orrs	r3, r2
 800adc6:	d041      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800adc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adce:	2b05      	cmp	r3, #5
 800add0:	d824      	bhi.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae25 	.word	0x0800ae25
 800addc:	0800adf1 	.word	0x0800adf1
 800ade0:	0800ae07 	.word	0x0800ae07
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae25 	.word	0x0800ae25
 800adec:	0800ae25 	.word	0x0800ae25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf4:	3308      	adds	r3, #8
 800adf6:	2101      	movs	r1, #1
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 ff71 	bl	800bce0 <RCCEx_PLL2_Config>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae04:	e00f      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0a:	3328      	adds	r3, #40	; 0x28
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 f818 	bl	800be44 <RCCEx_PLL3_Config>
 800ae14:	4603      	mov	r3, r0
 800ae16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae1a:	e004      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae22:	e000      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ae24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae2e:	4b96      	ldr	r3, [pc, #600]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	f023 0107 	bic.w	r1, r3, #7
 800ae36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae3c:	4a92      	ldr	r2, [pc, #584]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae3e:	430b      	orrs	r3, r1
 800ae40:	6553      	str	r3, [r2, #84]	; 0x54
 800ae42:	e003      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f002 0304 	and.w	r3, r2, #4
 800ae58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	d044      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ae6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae74:	2b05      	cmp	r3, #5
 800ae76:	d825      	bhi.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ae78:	a201      	add	r2, pc, #4	; (adr r2, 800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ae7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7e:	bf00      	nop
 800ae80:	0800aecd 	.word	0x0800aecd
 800ae84:	0800ae99 	.word	0x0800ae99
 800ae88:	0800aeaf 	.word	0x0800aeaf
 800ae8c:	0800aecd 	.word	0x0800aecd
 800ae90:	0800aecd 	.word	0x0800aecd
 800ae94:	0800aecd 	.word	0x0800aecd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	2101      	movs	r1, #1
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 ff1d 	bl	800bce0 <RCCEx_PLL2_Config>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aeac:	e00f      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb2:	3328      	adds	r3, #40	; 0x28
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 ffc4 	bl	800be44 <RCCEx_PLL3_Config>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aec2:	e004      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeca:	e000      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800aecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10b      	bne.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aed6:	4b6c      	ldr	r3, [pc, #432]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeda:	f023 0107 	bic.w	r1, r3, #7
 800aede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aee6:	4a68      	ldr	r2, [pc, #416]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aee8:	430b      	orrs	r3, r1
 800aeea:	6593      	str	r3, [r2, #88]	; 0x58
 800aeec:	e003      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f002 0320 	and.w	r3, r2, #32
 800af02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af06:	2300      	movs	r3, #0
 800af08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af10:	460b      	mov	r3, r1
 800af12:	4313      	orrs	r3, r2
 800af14:	d055      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af22:	d033      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800af24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af28:	d82c      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af2e:	d02f      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800af30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af34:	d826      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af3a:	d02b      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800af3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af40:	d820      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af46:	d012      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800af48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4c:	d81a      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d022      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800af52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af56:	d115      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5c:	3308      	adds	r3, #8
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f000 febd 	bl	800bce0 <RCCEx_PLL2_Config>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e015      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af72:	3328      	adds	r3, #40	; 0x28
 800af74:	2102      	movs	r1, #2
 800af76:	4618      	mov	r0, r3
 800af78:	f000 ff64 	bl	800be44 <RCCEx_PLL3_Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af82:	e00a      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af8a:	e006      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af8c:	bf00      	nop
 800af8e:	e004      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af90:	bf00      	nop
 800af92:	e002      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af94:	bf00      	nop
 800af96:	e000      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800af98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10b      	bne.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afa2:	4b39      	ldr	r3, [pc, #228]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800afa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800afaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb2:	4a35      	ldr	r2, [pc, #212]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800afb4:	430b      	orrs	r3, r1
 800afb6:	6553      	str	r3, [r2, #84]	; 0x54
 800afb8:	e003      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800afc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800afce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afd2:	2300      	movs	r3, #0
 800afd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800afdc:	460b      	mov	r3, r1
 800afde:	4313      	orrs	r3, r2
 800afe0:	d058      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800afe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800afee:	d033      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aff0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aff4:	d82c      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800affa:	d02f      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800affc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b000:	d826      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b006:	d02b      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b00c:	d820      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b00e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b012:	d012      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b018:	d81a      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d022      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b01e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b022:	d115      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b028:	3308      	adds	r3, #8
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fe57 	bl	800bce0 <RCCEx_PLL2_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b038:	e015      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03e:	3328      	adds	r3, #40	; 0x28
 800b040:	2102      	movs	r1, #2
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fefe 	bl	800be44 <RCCEx_PLL3_Config>
 800b048:	4603      	mov	r3, r0
 800b04a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b04e:	e00a      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b056:	e006      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b058:	bf00      	nop
 800b05a:	e004      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b05c:	bf00      	nop
 800b05e:	e002      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b060:	bf00      	nop
 800b062:	e000      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b064:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10e      	bne.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b06e:	4b06      	ldr	r3, [pc, #24]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b072:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b07e:	4a02      	ldr	r2, [pc, #8]	; (800b088 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b080:	430b      	orrs	r3, r1
 800b082:	6593      	str	r3, [r2, #88]	; 0x58
 800b084:	e006      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b086:	bf00      	nop
 800b088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b0a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	d055      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b0bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0c0:	d033      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b0c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0c6:	d82c      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0cc:	d02f      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b0ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d2:	d826      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0d8:	d02b      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b0da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0de:	d820      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0e4:	d012      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b0e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0ea:	d81a      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d022      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f4:	d115      	bne.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fdee 	bl	800bce0 <RCCEx_PLL2_Config>
 800b104:	4603      	mov	r3, r0
 800b106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b10a:	e015      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b110:	3328      	adds	r3, #40	; 0x28
 800b112:	2102      	movs	r1, #2
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fe95 	bl	800be44 <RCCEx_PLL3_Config>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b120:	e00a      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b128:	e006      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b12a:	bf00      	nop
 800b12c:	e004      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b12e:	bf00      	nop
 800b130:	e002      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b132:	bf00      	nop
 800b134:	e000      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b136:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b140:	4ba1      	ldr	r3, [pc, #644]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b144:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b150:	4a9d      	ldr	r2, [pc, #628]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b152:	430b      	orrs	r3, r1
 800b154:	6593      	str	r3, [r2, #88]	; 0x58
 800b156:	e003      	b.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f002 0308 	and.w	r3, r2, #8
 800b16c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b170:	2300      	movs	r3, #0
 800b172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b176:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b17a:	460b      	mov	r3, r1
 800b17c:	4313      	orrs	r3, r2
 800b17e:	d01e      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b18c:	d10c      	bne.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	3328      	adds	r3, #40	; 0x28
 800b194:	2102      	movs	r1, #2
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fe54 	bl	800be44 <RCCEx_PLL3_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1a8:	4b87      	ldr	r3, [pc, #540]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b8:	4a83      	ldr	r2, [pc, #524]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1ba:	430b      	orrs	r3, r1
 800b1bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f002 0310 	and.w	r3, r2, #16
 800b1ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d01e      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ea:	d10c      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f0:	3328      	adds	r3, #40	; 0x28
 800b1f2:	2102      	movs	r1, #2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fe25 	bl	800be44 <RCCEx_PLL3_Config>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b206:	4b70      	ldr	r3, [pc, #448]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b20a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b216:	4a6c      	ldr	r2, [pc, #432]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b218:	430b      	orrs	r3, r1
 800b21a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b232:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b236:	460b      	mov	r3, r1
 800b238:	4313      	orrs	r3, r2
 800b23a:	d03e      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b248:	d022      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b24e:	d81b      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b258:	d00b      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b25a:	e015      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b260:	3308      	adds	r3, #8
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fd3b 	bl	800bce0 <RCCEx_PLL2_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b270:	e00f      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b276:	3328      	adds	r3, #40	; 0x28
 800b278:	2102      	movs	r1, #2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fde2 	bl	800be44 <RCCEx_PLL3_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b286:	e004      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b29a:	4b4b      	ldr	r3, [pc, #300]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b2aa:	4a47      	ldr	r2, [pc, #284]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b2c6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	d03b      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2e2:	d01f      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b2e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2e8:	d818      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ee:	d003      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b2f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2f4:	d007      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b2f6:	e011      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2f8:	4b33      	ldr	r3, [pc, #204]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	4a32      	ldr	r2, [pc, #200]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b304:	e00f      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30a:	3328      	adds	r3, #40	; 0x28
 800b30c:	2101      	movs	r1, #1
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fd98 	bl	800be44 <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b31a:	e004      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b322:	e000      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10b      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b32e:	4b26      	ldr	r3, [pc, #152]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b332:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b33e:	4a22      	ldr	r2, [pc, #136]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b340:	430b      	orrs	r3, r1
 800b342:	6553      	str	r3, [r2, #84]	; 0x54
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b34a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b35a:	673b      	str	r3, [r7, #112]	; 0x70
 800b35c:	2300      	movs	r3, #0
 800b35e:	677b      	str	r3, [r7, #116]	; 0x74
 800b360:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b364:	460b      	mov	r3, r1
 800b366:	4313      	orrs	r3, r2
 800b368:	d034      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b378:	d007      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b37a:	e011      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b37c:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	4a11      	ldr	r2, [pc, #68]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b388:	e00e      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38e:	3308      	adds	r3, #8
 800b390:	2102      	movs	r1, #2
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fca4 	bl	800bce0 <RCCEx_PLL2_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b39e:	e003      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10d      	bne.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3be:	4a02      	ldr	r2, [pc, #8]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3c4:	e006      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b3e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	d00c      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f4:	3328      	adds	r3, #40	; 0x28
 800b3f6:	2102      	movs	r1, #2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fd23 	bl	800be44 <RCCEx_PLL3_Config>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b416:	663b      	str	r3, [r7, #96]	; 0x60
 800b418:	2300      	movs	r3, #0
 800b41a:	667b      	str	r3, [r7, #100]	; 0x64
 800b41c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b420:	460b      	mov	r3, r1
 800b422:	4313      	orrs	r3, r2
 800b424:	d038      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b42e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b432:	d018      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b438:	d811      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b43a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b43e:	d014      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b444:	d80b      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b446:	2b00      	cmp	r3, #0
 800b448:	d011      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b44e:	d106      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b450:	4bc3      	ldr	r3, [pc, #780]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4ac2      	ldr	r2, [pc, #776]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b45c:	e008      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b464:	e004      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b466:	bf00      	nop
 800b468:	e002      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b46a:	bf00      	nop
 800b46c:	e000      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10b      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b478:	4bb9      	ldr	r3, [pc, #740]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b47c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b488:	4ab5      	ldr	r2, [pc, #724]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b48a:	430b      	orrs	r3, r1
 800b48c:	6553      	str	r3, [r2, #84]	; 0x54
 800b48e:	e003      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b4a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	d009      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b4b4:	4baa      	ldr	r3, [pc, #680]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4c2:	4aa7      	ldr	r2, [pc, #668]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b4d4:	653b      	str	r3, [r7, #80]	; 0x50
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b4da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	d00a      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b4e4:	4b9e      	ldr	r3, [pc, #632]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b4f4:	4a9a      	ldr	r2, [pc, #616]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b506:	64bb      	str	r3, [r7, #72]	; 0x48
 800b508:	2300      	movs	r3, #0
 800b50a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b50c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b510:	460b      	mov	r3, r1
 800b512:	4313      	orrs	r3, r2
 800b514:	d009      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b516:	4b92      	ldr	r3, [pc, #584]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b524:	4a8e      	ldr	r2, [pc, #568]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b526:	430b      	orrs	r3, r1
 800b528:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b536:	643b      	str	r3, [r7, #64]	; 0x40
 800b538:	2300      	movs	r3, #0
 800b53a:	647b      	str	r3, [r7, #68]	; 0x44
 800b53c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b540:	460b      	mov	r3, r1
 800b542:	4313      	orrs	r3, r2
 800b544:	d00e      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b546:	4b86      	ldr	r3, [pc, #536]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	4a85      	ldr	r2, [pc, #532]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b54c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b550:	6113      	str	r3, [r2, #16]
 800b552:	4b83      	ldr	r3, [pc, #524]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b554:	6919      	ldr	r1, [r3, #16]
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b55e:	4a80      	ldr	r2, [pc, #512]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b560:	430b      	orrs	r3, r1
 800b562:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b570:	63bb      	str	r3, [r7, #56]	; 0x38
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b576:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b57a:	460b      	mov	r3, r1
 800b57c:	4313      	orrs	r3, r2
 800b57e:	d009      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b580:	4b77      	ldr	r3, [pc, #476]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b584:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	4a74      	ldr	r2, [pc, #464]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b590:	430b      	orrs	r3, r1
 800b592:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b5a0:	633b      	str	r3, [r7, #48]	; 0x30
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	d00a      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b5b0:	4b6b      	ldr	r3, [pc, #428]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5c0:	4a67      	ldr	r2, [pc, #412]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5c2:	430b      	orrs	r3, r1
 800b5c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	62b9      	str	r1, [r7, #40]	; 0x28
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	d011      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fb78 	bl	800bce0 <RCCEx_PLL2_Config>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	2100      	movs	r1, #0
 800b610:	6239      	str	r1, [r7, #32]
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
 800b618:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b61c:	460b      	mov	r3, r1
 800b61e:	4313      	orrs	r3, r2
 800b620:	d011      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b626:	3308      	adds	r3, #8
 800b628:	2101      	movs	r1, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fb58 	bl	800bce0 <RCCEx_PLL2_Config>
 800b630:	4603      	mov	r3, r0
 800b632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b63e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	2100      	movs	r1, #0
 800b650:	61b9      	str	r1, [r7, #24]
 800b652:	f003 0304 	and.w	r3, r3, #4
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b65c:	460b      	mov	r3, r1
 800b65e:	4313      	orrs	r3, r2
 800b660:	d011      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b666:	3308      	adds	r3, #8
 800b668:	2102      	movs	r1, #2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fb38 	bl	800bce0 <RCCEx_PLL2_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	2100      	movs	r1, #0
 800b690:	6139      	str	r1, [r7, #16]
 800b692:	f003 0308 	and.w	r3, r3, #8
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b69c:	460b      	mov	r3, r1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	d011      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	3328      	adds	r3, #40	; 0x28
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fbca 	bl	800be44 <RCCEx_PLL3_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	f003 0310 	and.w	r3, r3, #16
 800b6d6:	60fb      	str	r3, [r7, #12]
 800b6d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	d011      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e6:	3328      	adds	r3, #40	; 0x28
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 fbaa 	bl	800be44 <RCCEx_PLL3_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	2100      	movs	r1, #0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	607b      	str	r3, [r7, #4]
 800b718:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b71c:	460b      	mov	r3, r1
 800b71e:	4313      	orrs	r3, r2
 800b720:	d011      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b726:	3328      	adds	r3, #40	; 0x28
 800b728:	2102      	movs	r1, #2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 fb8a 	bl	800be44 <RCCEx_PLL3_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b746:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	e000      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
}
 800b754:	4618      	mov	r0, r3
 800b756:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b75a:	46bd      	mov	sp, r7
 800b75c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b760:	58024400 	.word	0x58024400

0800b764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b768:	f7fe fd7a 	bl	800a260 <HAL_RCC_GetHCLKFreq>
 800b76c:	4602      	mov	r2, r0
 800b76e:	4b06      	ldr	r3, [pc, #24]	; (800b788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	091b      	lsrs	r3, r3, #4
 800b774:	f003 0307 	and.w	r3, r3, #7
 800b778:	4904      	ldr	r1, [pc, #16]	; (800b78c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b77a:	5ccb      	ldrb	r3, [r1, r3]
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b784:	4618      	mov	r0, r3
 800b786:	bd80      	pop	{r7, pc}
 800b788:	58024400 	.word	0x58024400
 800b78c:	08010c44 	.word	0x08010c44

0800b790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b790:	b480      	push	{r7}
 800b792:	b089      	sub	sp, #36	; 0x24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b798:	4ba1      	ldr	r3, [pc, #644]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b7a2:	4b9f      	ldr	r3, [pc, #636]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a6:	0b1b      	lsrs	r3, r3, #12
 800b7a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b7ae:	4b9c      	ldr	r3, [pc, #624]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	091b      	lsrs	r3, r3, #4
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b7ba:	4b99      	ldr	r3, [pc, #612]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7be:	08db      	lsrs	r3, r3, #3
 800b7c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	fb02 f303 	mul.w	r3, r2, r3
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 8111 	beq.w	800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	f000 8083 	beq.w	800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	f200 80a1 	bhi.w	800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d056      	beq.n	800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7fa:	e099      	b.n	800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7fc:	4b88      	ldr	r3, [pc, #544]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b00      	cmp	r3, #0
 800b806:	d02d      	beq.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b808:	4b85      	ldr	r3, [pc, #532]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	08db      	lsrs	r3, r3, #3
 800b80e:	f003 0303 	and.w	r3, r3, #3
 800b812:	4a84      	ldr	r2, [pc, #528]	; (800ba24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b814:	fa22 f303 	lsr.w	r3, r2, r3
 800b818:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	ee07 3a90 	vmov	s15, r3
 800b820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b832:	4b7b      	ldr	r3, [pc, #492]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b842:	ed97 6a03 	vldr	s12, [r7, #12]
 800b846:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b862:	e087      	b.n	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b876:	4b6a      	ldr	r3, [pc, #424]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87e:	ee07 3a90 	vmov	s15, r3
 800b882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b886:	ed97 6a03 	vldr	s12, [r7, #12]
 800b88a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8a6:	e065      	b.n	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ba:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ea:	e043      	b.n	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fe:	4b48      	ldr	r3, [pc, #288]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b912:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b92e:	e021      	b.n	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b942:	4b37      	ldr	r3, [pc, #220]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b952:	ed97 6a03 	vldr	s12, [r7, #12]
 800b956:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b974:	4b2a      	ldr	r3, [pc, #168]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	0a5b      	lsrs	r3, r3, #9
 800b97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99a:	ee17 2a90 	vmov	r2, s15
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b9a2:	4b1f      	ldr	r3, [pc, #124]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	0c1b      	lsrs	r3, r3, #16
 800b9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ac:	ee07 3a90 	vmov	s15, r3
 800b9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c8:	ee17 2a90 	vmov	r2, s15
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b9d0:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	0e1b      	lsrs	r3, r3, #24
 800b9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9f6:	ee17 2a90 	vmov	r2, s15
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9fe:	e008      	b.n	800ba12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	609a      	str	r2, [r3, #8]
}
 800ba12:	bf00      	nop
 800ba14:	3724      	adds	r7, #36	; 0x24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	58024400 	.word	0x58024400
 800ba24:	03d09000 	.word	0x03d09000
 800ba28:	46000000 	.word	0x46000000
 800ba2c:	4c742400 	.word	0x4c742400
 800ba30:	4a742400 	.word	0x4a742400
 800ba34:	4b742400 	.word	0x4b742400

0800ba38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b089      	sub	sp, #36	; 0x24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba40:	4ba1      	ldr	r3, [pc, #644]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba4a:	4b9f      	ldr	r3, [pc, #636]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	0d1b      	lsrs	r3, r3, #20
 800ba50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba56:	4b9c      	ldr	r3, [pc, #624]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	0a1b      	lsrs	r3, r3, #8
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba62:	4b99      	ldr	r3, [pc, #612]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba66:	08db      	lsrs	r3, r3, #3
 800ba68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	fb02 f303 	mul.w	r3, r2, r3
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 8111 	beq.w	800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	f000 8083 	beq.w	800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	f200 80a1 	bhi.w	800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d056      	beq.n	800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800baa2:	e099      	b.n	800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baa4:	4b88      	ldr	r3, [pc, #544]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0320 	and.w	r3, r3, #32
 800baac:	2b00      	cmp	r3, #0
 800baae:	d02d      	beq.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bab0:	4b85      	ldr	r3, [pc, #532]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	08db      	lsrs	r3, r3, #3
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	4a84      	ldr	r2, [pc, #528]	; (800bccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800babc:	fa22 f303 	lsr.w	r3, r2, r3
 800bac0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bada:	4b7b      	ldr	r3, [pc, #492]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800badc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baea:	ed97 6a03 	vldr	s12, [r7, #12]
 800baee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb0a:	e087      	b.n	800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bcd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1e:	4b6a      	ldr	r3, [pc, #424]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb26:	ee07 3a90 	vmov	s15, r3
 800bb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb32:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb4e:	e065      	b.n	800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb62:	4b59      	ldr	r3, [pc, #356]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb72:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb76:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb92:	e043      	b.n	800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bcdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba6:	4b48      	ldr	r3, [pc, #288]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbd6:	e021      	b.n	800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbea:	4b37      	ldr	r3, [pc, #220]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc1c:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc20:	0a5b      	lsrs	r3, r3, #9
 800bc22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc26:	ee07 3a90 	vmov	s15, r3
 800bc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc36:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc42:	ee17 2a90 	vmov	r2, s15
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc4a:	4b1f      	ldr	r3, [pc, #124]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc54:	ee07 3a90 	vmov	s15, r3
 800bc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc64:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc70:	ee17 2a90 	vmov	r2, s15
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc78:	4b13      	ldr	r3, [pc, #76]	; (800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	0e1b      	lsrs	r3, r3, #24
 800bc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc92:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc9e:	ee17 2a90 	vmov	r2, s15
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bca6:	e008      	b.n	800bcba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	609a      	str	r2, [r3, #8]
}
 800bcba:	bf00      	nop
 800bcbc:	3724      	adds	r7, #36	; 0x24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	58024400 	.word	0x58024400
 800bccc:	03d09000 	.word	0x03d09000
 800bcd0:	46000000 	.word	0x46000000
 800bcd4:	4c742400 	.word	0x4c742400
 800bcd8:	4a742400 	.word	0x4a742400
 800bcdc:	4b742400 	.word	0x4b742400

0800bce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcee:	4b53      	ldr	r3, [pc, #332]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d101      	bne.n	800bcfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e099      	b.n	800be32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcfe:	4b4f      	ldr	r3, [pc, #316]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a4e      	ldr	r2, [pc, #312]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd0a:	f7fc fa19 	bl	8008140 <HAL_GetTick>
 800bd0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd10:	e008      	b.n	800bd24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd12:	f7fc fa15 	bl	8008140 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d901      	bls.n	800bd24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e086      	b.n	800be32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd24:	4b45      	ldr	r3, [pc, #276]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1f0      	bne.n	800bd12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd30:	4b42      	ldr	r3, [pc, #264]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	031b      	lsls	r3, r3, #12
 800bd3e:	493f      	ldr	r1, [pc, #252]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	628b      	str	r3, [r1, #40]	; 0x28
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	025b      	lsls	r3, r3, #9
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	041b      	lsls	r3, r3, #16
 800bd62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	061b      	lsls	r3, r3, #24
 800bd70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd74:	4931      	ldr	r1, [pc, #196]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd7a:	4b30      	ldr	r3, [pc, #192]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	492d      	ldr	r1, [pc, #180]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd8c:	4b2b      	ldr	r3, [pc, #172]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd90:	f023 0220 	bic.w	r2, r3, #32
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	4928      	ldr	r1, [pc, #160]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd9e:	4b27      	ldr	r3, [pc, #156]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda2:	4a26      	ldr	r2, [pc, #152]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bda4:	f023 0310 	bic.w	r3, r3, #16
 800bda8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bdaa:	4b24      	ldr	r3, [pc, #144]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdae:	4b24      	ldr	r3, [pc, #144]	; (800be40 <RCCEx_PLL2_Config+0x160>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	69d2      	ldr	r2, [r2, #28]
 800bdb6:	00d2      	lsls	r2, r2, #3
 800bdb8:	4920      	ldr	r1, [pc, #128]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bdbe:	4b1f      	ldr	r3, [pc, #124]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	4a1e      	ldr	r2, [pc, #120]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdc4:	f043 0310 	orr.w	r3, r3, #16
 800bdc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdd0:	4b1a      	ldr	r3, [pc, #104]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd4:	4a19      	ldr	r2, [pc, #100]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bddc:	e00f      	b.n	800bdfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d106      	bne.n	800bdf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bde4:	4b15      	ldr	r3, [pc, #84]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde8:	4a14      	ldr	r2, [pc, #80]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdf0:	e005      	b.n	800bdfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdf2:	4b12      	ldr	r3, [pc, #72]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	4a11      	ldr	r2, [pc, #68]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdfe:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a0e      	ldr	r2, [pc, #56]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be0a:	f7fc f999 	bl	8008140 <HAL_GetTick>
 800be0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be10:	e008      	b.n	800be24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be12:	f7fc f995 	bl	8008140 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d901      	bls.n	800be24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e006      	b.n	800be32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <RCCEx_PLL2_Config+0x15c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0f0      	beq.n	800be12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be30:	7bfb      	ldrb	r3, [r7, #15]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	58024400 	.word	0x58024400
 800be40:	ffff0007 	.word	0xffff0007

0800be44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be52:	4b53      	ldr	r3, [pc, #332]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be56:	f003 0303 	and.w	r3, r3, #3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d101      	bne.n	800be62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e099      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be62:	4b4f      	ldr	r3, [pc, #316]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a4e      	ldr	r2, [pc, #312]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be6e:	f7fc f967 	bl	8008140 <HAL_GetTick>
 800be72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be74:	e008      	b.n	800be88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be76:	f7fc f963 	bl	8008140 <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d901      	bls.n	800be88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e086      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be88:	4b45      	ldr	r3, [pc, #276]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1f0      	bne.n	800be76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be94:	4b42      	ldr	r3, [pc, #264]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	051b      	lsls	r3, r3, #20
 800bea2:	493f      	ldr	r1, [pc, #252]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	628b      	str	r3, [r1, #40]	; 0x28
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	3b01      	subs	r3, #1
 800beae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	025b      	lsls	r3, r3, #9
 800beba:	b29b      	uxth	r3, r3
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	3b01      	subs	r3, #1
 800bec4:	041b      	lsls	r3, r3, #16
 800bec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800beca:	431a      	orrs	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	061b      	lsls	r3, r3, #24
 800bed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bed8:	4931      	ldr	r1, [pc, #196]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bede:	4b30      	ldr	r3, [pc, #192]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	492d      	ldr	r1, [pc, #180]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800beec:	4313      	orrs	r3, r2
 800beee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	4928      	ldr	r1, [pc, #160]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf02:	4b27      	ldr	r3, [pc, #156]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf06:	4a26      	ldr	r2, [pc, #152]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf0e:	4b24      	ldr	r3, [pc, #144]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf12:	4b24      	ldr	r3, [pc, #144]	; (800bfa4 <RCCEx_PLL3_Config+0x160>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	69d2      	ldr	r2, [r2, #28]
 800bf1a:	00d2      	lsls	r2, r2, #3
 800bf1c:	4920      	ldr	r1, [pc, #128]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf22:	4b1f      	ldr	r3, [pc, #124]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf34:	4b1a      	ldr	r3, [pc, #104]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	4a19      	ldr	r2, [pc, #100]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bf3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf40:	e00f      	b.n	800bf62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d106      	bne.n	800bf56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	4a14      	ldr	r2, [pc, #80]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf54:	e005      	b.n	800bf62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf56:	4b12      	ldr	r3, [pc, #72]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf62:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a0e      	ldr	r2, [pc, #56]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf6e:	f7fc f8e7 	bl	8008140 <HAL_GetTick>
 800bf72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf74:	e008      	b.n	800bf88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf76:	f7fc f8e3 	bl	8008140 <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d901      	bls.n	800bf88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e006      	b.n	800bf96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf88:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <RCCEx_PLL3_Config+0x15c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d0f0      	beq.n	800bf76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	58024400 	.word	0x58024400
 800bfa4:	ffff0007 	.word	0xffff0007

0800bfa8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d071      	beq.n	800c09e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7fb fa00 	bl	80073d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	f003 0310 	and.w	r3, r3, #16
 800bfe6:	2b10      	cmp	r3, #16
 800bfe8:	d050      	beq.n	800c08c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	22ca      	movs	r2, #202	; 0xca
 800bff0:	625a      	str	r2, [r3, #36]	; 0x24
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2253      	movs	r2, #83	; 0x53
 800bff8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fa4a 	bl	800c494 <RTC_EnterInitMode>
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d124      	bne.n	800c054 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6899      	ldr	r1, [r3, #8]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	4b24      	ldr	r3, [pc, #144]	; (800c0a8 <HAL_RTC_Init+0x100>)
 800c016:	400b      	ands	r3, r1
 800c018:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6899      	ldr	r1, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	431a      	orrs	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	431a      	orrs	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	0419      	lsls	r1, r3, #16
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68da      	ldr	r2, [r3, #12]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fa56 	bl	800c4fc <RTC_ExitInitMode>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d113      	bne.n	800c082 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0203 	bic.w	r2, r2, #3
 800c068:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	431a      	orrs	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	430a      	orrs	r2, r1
 800c080:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	22ff      	movs	r2, #255	; 0xff
 800c088:	625a      	str	r2, [r3, #36]	; 0x24
 800c08a:	e001      	b.n	800c090 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	ff8fffbf 	.word	0xff8fffbf

0800c0ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_RTC_SetTime+0x1a>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e089      	b.n	800c1da <HAL_RTC_SetTime+0x12e>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	22ca      	movs	r2, #202	; 0xca
 800c0dc:	625a      	str	r2, [r3, #36]	; 0x24
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2253      	movs	r2, #83	; 0x53
 800c0e4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f000 f9d4 	bl	800c494 <RTC_EnterInitMode>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c0f0:	7cfb      	ldrb	r3, [r7, #19]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d161      	bne.n	800c1ba <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d126      	bne.n	800c14a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c106:	2b00      	cmp	r3, #0
 800c108:	d102      	bne.n	800c110 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2200      	movs	r2, #0
 800c10e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	4618      	mov	r0, r3
 800c116:	f000 fa2f 	bl	800c578 <RTC_ByteToBcd2>
 800c11a:	4603      	mov	r3, r0
 800c11c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	785b      	ldrb	r3, [r3, #1]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 fa28 	bl	800c578 <RTC_ByteToBcd2>
 800c128:	4603      	mov	r3, r0
 800c12a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c12c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	789b      	ldrb	r3, [r3, #2]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fa20 	bl	800c578 <RTC_ByteToBcd2>
 800c138:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c13a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	78db      	ldrb	r3, [r3, #3]
 800c142:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c144:	4313      	orrs	r3, r2
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	e018      	b.n	800c17c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2200      	movs	r2, #0
 800c15c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	785b      	ldrb	r3, [r3, #1]
 800c168:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c16a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c170:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	78db      	ldrb	r3, [r3, #3]
 800c176:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c178:	4313      	orrs	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	6979      	ldr	r1, [r7, #20]
 800c182:	4b18      	ldr	r3, [pc, #96]	; (800c1e4 <HAL_RTC_SetTime+0x138>)
 800c184:	400b      	ands	r3, r1
 800c186:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c196:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6899      	ldr	r1, [r3, #8]
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	68da      	ldr	r2, [r3, #12]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 f9a3 	bl	800c4fc <RTC_ExitInitMode>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	22ff      	movs	r2, #255	; 0xff
 800c1c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c1c2:	7cfb      	ldrb	r3, [r7, #19]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c1d8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd90      	pop	{r4, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	007f7f7f 	.word	0x007f7f7f

0800c1e8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	4b22      	ldr	r3, [pc, #136]	; (800c29c <HAL_RTC_GetTime+0xb4>)
 800c214:	4013      	ands	r3, r2
 800c216:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	0c1b      	lsrs	r3, r3, #16
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c222:	b2da      	uxtb	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	b2da      	uxtb	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c240:	b2da      	uxtb	r2, r3
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	0d9b      	lsrs	r3, r3, #22
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	b2da      	uxtb	r2, r3
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d11a      	bne.n	800c292 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f000 f9a9 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c266:	4603      	mov	r3, r0
 800c268:	461a      	mov	r2, r3
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	785b      	ldrb	r3, [r3, #1]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f9a0 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	789b      	ldrb	r3, [r3, #2]
 800c284:	4618      	mov	r0, r3
 800c286:	f000 f997 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c28a:	4603      	mov	r3, r0
 800c28c:	461a      	mov	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	007f7f7f 	.word	0x007f7f7f

0800c2a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b087      	sub	sp, #28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d101      	bne.n	800c2ba <HAL_RTC_SetDate+0x1a>
 800c2b6:	2302      	movs	r3, #2
 800c2b8:	e073      	b.n	800c3a2 <HAL_RTC_SetDate+0x102>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10e      	bne.n	800c2ee <HAL_RTC_SetDate+0x4e>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	f003 0310 	and.w	r3, r3, #16
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d008      	beq.n	800c2ee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	f023 0310 	bic.w	r3, r3, #16
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	330a      	adds	r3, #10
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d11c      	bne.n	800c32e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	78db      	ldrb	r3, [r3, #3]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 f93d 	bl	800c578 <RTC_ByteToBcd2>
 800c2fe:	4603      	mov	r3, r0
 800c300:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	4618      	mov	r0, r3
 800c308:	f000 f936 	bl	800c578 <RTC_ByteToBcd2>
 800c30c:	4603      	mov	r3, r0
 800c30e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c310:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	789b      	ldrb	r3, [r3, #2]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f92e 	bl	800c578 <RTC_ByteToBcd2>
 800c31c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c31e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c328:	4313      	orrs	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	e00e      	b.n	800c34c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	78db      	ldrb	r3, [r3, #3]
 800c332:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c33a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c340:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c348:	4313      	orrs	r3, r2
 800c34a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	22ca      	movs	r2, #202	; 0xca
 800c352:	625a      	str	r2, [r3, #36]	; 0x24
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2253      	movs	r2, #83	; 0x53
 800c35a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f899 	bl	800c494 <RTC_EnterInitMode>
 800c362:	4603      	mov	r3, r0
 800c364:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c366:	7cfb      	ldrb	r3, [r7, #19]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	6979      	ldr	r1, [r7, #20]
 800c372:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <HAL_RTC_SetDate+0x10c>)
 800c374:	400b      	ands	r3, r1
 800c376:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 f8bf 	bl	800c4fc <RTC_ExitInitMode>
 800c37e:	4603      	mov	r3, r0
 800c380:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	22ff      	movs	r2, #255	; 0xff
 800c388:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c38a:	7cfb      	ldrb	r3, [r7, #19]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d103      	bne.n	800c398 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c3a0:	7cfb      	ldrb	r3, [r7, #19]


}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd90      	pop	{r4, r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	00ffff3f 	.word	0x00ffff3f

0800c3b0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	4b21      	ldr	r3, [pc, #132]	; (800c448 <HAL_RTC_GetDate+0x98>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	0c1b      	lsrs	r3, r3, #16
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	0a1b      	lsrs	r3, r3, #8
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 031f 	and.w	r3, r3, #31
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	0b5b      	lsrs	r3, r3, #13
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d11a      	bne.n	800c43c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	78db      	ldrb	r3, [r3, #3]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f8d4 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c410:	4603      	mov	r3, r0
 800c412:	461a      	mov	r2, r3
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	785b      	ldrb	r3, [r3, #1]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f8cb 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	789b      	ldrb	r3, [r3, #2]
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 f8c2 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c434:	4603      	mov	r3, r0
 800c436:	461a      	mov	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	00ffff3f 	.word	0x00ffff3f

0800c44c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a0d      	ldr	r2, [pc, #52]	; (800c490 <HAL_RTC_WaitForSynchro+0x44>)
 800c45a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c45c:	f7fb fe70 	bl	8008140 <HAL_GetTick>
 800c460:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c462:	e009      	b.n	800c478 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c464:	f7fb fe6c 	bl	8008140 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c472:	d901      	bls.n	800c478 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e007      	b.n	800c488 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0ee      	beq.n	800c464 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0003ff5f 	.word	0x0003ff5f

0800c494 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d120      	bne.n	800c4f0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c4b8:	f7fb fe42 	bl	8008140 <HAL_GetTick>
 800c4bc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4be:	e00d      	b.n	800c4dc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c4c0:	f7fb fe3e 	bl	8008140 <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4ce:	d905      	bls.n	800c4dc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <RTC_EnterInitMode+0x5c>
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d1e7      	bne.n	800c4c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c508:	4b1a      	ldr	r3, [pc, #104]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	4a19      	ldr	r2, [pc, #100]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c512:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c514:	4b17      	ldr	r3, [pc, #92]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f003 0320 	and.w	r3, r3, #32
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10c      	bne.n	800c53a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ff93 	bl	800c44c <HAL_RTC_WaitForSynchro>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01e      	beq.n	800c56a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2203      	movs	r2, #3
 800c530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	73fb      	strb	r3, [r7, #15]
 800c538:	e017      	b.n	800c56a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c53a:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	4a0d      	ldr	r2, [pc, #52]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c540:	f023 0320 	bic.w	r3, r3, #32
 800c544:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff ff80 	bl	800c44c <HAL_RTC_WaitForSynchro>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2203      	movs	r2, #3
 800c556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c55e:	4b05      	ldr	r3, [pc, #20]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	4a04      	ldr	r2, [pc, #16]	; (800c574 <RTC_ExitInitMode+0x78>)
 800c564:	f043 0320 	orr.w	r3, r3, #32
 800c568:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	58004000 	.word	0x58004000

0800c578 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c58a:	e005      	b.n	800c598 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3b0a      	subs	r3, #10
 800c596:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c598:	7afb      	ldrb	r3, [r7, #11]
 800c59a:	2b09      	cmp	r3, #9
 800c59c:	d8f6      	bhi.n	800c58c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	011b      	lsls	r3, r3, #4
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	b2db      	uxtb	r3, r3
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	091b      	lsrs	r3, r3, #4
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	0092      	lsls	r2, r2, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	f003 030f 	and.w	r3, r3, #15
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	4413      	add	r3, r2
 800c5de:	b2db      	uxtb	r3, r3
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d101      	bne.n	800c604 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800c600:	2302      	movs	r3, #2
 800c602:	e034      	b.n	800c66e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2202      	movs	r2, #2
 800c610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	22ca      	movs	r2, #202	; 0xca
 800c61a:	625a      	str	r2, [r3, #36]	; 0x24
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2253      	movs	r2, #83	; 0x53
 800c622:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689a      	ldr	r2, [r3, #8]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800c632:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6899      	ldr	r1, [r3, #8]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	430a      	orrs	r2, r1
 800c642:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c652:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	22ff      	movs	r2, #255	; 0xff
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
	...

0800c67c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e10f      	b.n	800c8ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a87      	ldr	r2, [pc, #540]	; (800c8b8 <HAL_SPI_Init+0x23c>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00f      	beq.n	800c6be <HAL_SPI_Init+0x42>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a86      	ldr	r2, [pc, #536]	; (800c8bc <HAL_SPI_Init+0x240>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00a      	beq.n	800c6be <HAL_SPI_Init+0x42>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a84      	ldr	r2, [pc, #528]	; (800c8c0 <HAL_SPI_Init+0x244>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d005      	beq.n	800c6be <HAL_SPI_Init+0x42>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	2b0f      	cmp	r3, #15
 800c6b8:	d901      	bls.n	800c6be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e0f7      	b.n	800c8ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 ff76 	bl	800d5b0 <SPI_GetPacketSize>
 800c6c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a7b      	ldr	r2, [pc, #492]	; (800c8b8 <HAL_SPI_Init+0x23c>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d00c      	beq.n	800c6ea <HAL_SPI_Init+0x6e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a79      	ldr	r2, [pc, #484]	; (800c8bc <HAL_SPI_Init+0x240>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d007      	beq.n	800c6ea <HAL_SPI_Init+0x6e>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a78      	ldr	r2, [pc, #480]	; (800c8c0 <HAL_SPI_Init+0x244>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d002      	beq.n	800c6ea <HAL_SPI_Init+0x6e>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b08      	cmp	r3, #8
 800c6e8:	d811      	bhi.n	800c70e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6ee:	4a72      	ldr	r2, [pc, #456]	; (800c8b8 <HAL_SPI_Init+0x23c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d009      	beq.n	800c708 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a70      	ldr	r2, [pc, #448]	; (800c8bc <HAL_SPI_Init+0x240>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <HAL_SPI_Init+0x8c>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a6f      	ldr	r2, [pc, #444]	; (800c8c0 <HAL_SPI_Init+0x244>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d104      	bne.n	800c712 <HAL_SPI_Init+0x96>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b10      	cmp	r3, #16
 800c70c:	d901      	bls.n	800c712 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	e0cd      	b.n	800c8ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fa fe86 	bl	8007438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f022 0201 	bic.w	r2, r2, #1
 800c742:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c74e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c758:	d119      	bne.n	800c78e <HAL_SPI_Init+0x112>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c762:	d103      	bne.n	800c76c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10c      	bne.n	800c78e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c77c:	d107      	bne.n	800c78e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c78c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00f      	beq.n	800c7ba <HAL_SPI_Init+0x13e>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	2b06      	cmp	r3, #6
 800c7a0:	d90b      	bls.n	800c7ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e007      	b.n	800c7ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	69da      	ldr	r2, [r3, #28]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7dc:	ea42 0103 	orr.w	r1, r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68da      	ldr	r2, [r3, #12]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	431a      	orrs	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	431a      	orrs	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	431a      	orrs	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	431a      	orrs	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c81e:	431a      	orrs	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	431a      	orrs	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c82a:	ea42 0103 	orr.w	r1, r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	430a      	orrs	r2, r1
 800c838:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d113      	bne.n	800c86a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c854:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c868:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f022 0201 	bic.w	r2, r2, #1
 800c878:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40013000 	.word	0x40013000
 800c8bc:	40003800 	.word	0x40003800
 800c8c0:	40003c00 	.word	0x40003c00

0800c8c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af02      	add	r7, sp, #8
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	603b      	str	r3, [r7, #0]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	3320      	adds	r3, #32
 800c8da:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <HAL_SPI_Transmit+0x2a>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	e1e1      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8f6:	f7fb fc23 	bl	8008140 <HAL_GetTick>
 800c8fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	d007      	beq.n	800c918 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c908:	2302      	movs	r3, #2
 800c90a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c914:	7efb      	ldrb	r3, [r7, #27]
 800c916:	e1cc      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <HAL_SPI_Transmit+0x60>
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d107      	bne.n	800c934 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c930:	7efb      	ldrb	r3, [r7, #27]
 800c932:	e1be      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2203      	movs	r2, #3
 800c938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	88fa      	ldrh	r2, [r7, #6]
 800c956:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c984:	d108      	bne.n	800c998 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	e009      	b.n	800c9ac <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c9aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4b96      	ldr	r3, [pc, #600]	; (800cc0c <HAL_SPI_Transmit+0x348>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	88f9      	ldrh	r1, [r7, #6]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	6812      	ldr	r2, [r2, #0]
 800c9bc:	430b      	orrs	r3, r1
 800c9be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f042 0201 	orr.w	r2, r2, #1
 800c9ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9d8:	d107      	bne.n	800c9ea <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	2b0f      	cmp	r3, #15
 800c9f0:	d947      	bls.n	800ca82 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c9f2:	e03f      	b.n	800ca74 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d114      	bne.n	800ca2c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	6812      	ldr	r2, [r2, #0]
 800ca0c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	3b01      	subs	r3, #1
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ca2a:	e023      	b.n	800ca74 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca2c:	f7fb fb88 	bl	8008140 <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d803      	bhi.n	800ca44 <HAL_SPI_Transmit+0x180>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca42:	d102      	bne.n	800ca4a <HAL_SPI_Transmit+0x186>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d114      	bne.n	800ca74 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 fce2 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e11e      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1b9      	bne.n	800c9f4 <HAL_SPI_Transmit+0x130>
 800ca80:	e0f1      	b.n	800cc66 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	2b07      	cmp	r3, #7
 800ca88:	f240 80e6 	bls.w	800cc58 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ca8c:	e05d      	b.n	800cb4a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	f003 0302 	and.w	r3, r3, #2
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d132      	bne.n	800cb02 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d918      	bls.n	800cada <HAL_SPI_Transmit+0x216>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d014      	beq.n	800cada <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3b02      	subs	r3, #2
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cad8:	e037      	b.n	800cb4a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cade:	881a      	ldrh	r2, [r3, #0]
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cae8:	1c9a      	adds	r2, r3, #2
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	3b01      	subs	r3, #1
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cb00:	e023      	b.n	800cb4a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb02:	f7fb fb1d 	bl	8008140 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d803      	bhi.n	800cb1a <HAL_SPI_Transmit+0x256>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d102      	bne.n	800cb20 <HAL_SPI_Transmit+0x25c>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d114      	bne.n	800cb4a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f000 fc77 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2201      	movs	r2, #1
 800cb42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e0b3      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d19b      	bne.n	800ca8e <HAL_SPI_Transmit+0x1ca>
 800cb56:	e086      	b.n	800cc66 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	f003 0302 	and.w	r3, r3, #2
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d154      	bne.n	800cc10 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d918      	bls.n	800cba4 <HAL_SPI_Transmit+0x2e0>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb76:	2b40      	cmp	r3, #64	; 0x40
 800cb78:	d914      	bls.n	800cba4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb8a:	1d1a      	adds	r2, r3, #4
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	3b04      	subs	r3, #4
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cba2:	e059      	b.n	800cc58 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d917      	bls.n	800cbe0 <HAL_SPI_Transmit+0x31c>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d013      	beq.n	800cbe0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbc6:	1c9a      	adds	r2, r3, #2
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b02      	subs	r3, #2
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cbde:	e03b      	b.n	800cc58 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3320      	adds	r3, #32
 800cbea:	7812      	ldrb	r2, [r2, #0]
 800cbec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	3b01      	subs	r3, #1
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc0a:	e025      	b.n	800cc58 <HAL_SPI_Transmit+0x394>
 800cc0c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc10:	f7fb fa96 	bl	8008140 <HAL_GetTick>
 800cc14:	4602      	mov	r2, r0
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d803      	bhi.n	800cc28 <HAL_SPI_Transmit+0x364>
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d102      	bne.n	800cc2e <HAL_SPI_Transmit+0x36a>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d114      	bne.n	800cc58 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f000 fbf0 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cc54:	2303      	movs	r3, #3
 800cc56:	e02c      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f47f af79 	bne.w	800cb58 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2108      	movs	r1, #8
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f000 fc6f 	bl	800d554 <SPI_WaitOnFlagUntilTimeout>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc82:	f043 0220 	orr.w	r2, r3, #32
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 fbc1 	bl	800d414 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e000      	b.n	800ccb2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ccb0:	7efb      	ldrb	r3, [r7, #27]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3720      	adds	r7, #32
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop

0800ccbc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	603b      	str	r3, [r7, #0]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3330      	adds	r3, #48	; 0x30
 800ccd6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d101      	bne.n	800cce6 <HAL_SPI_Receive+0x2a>
 800cce2:	2302      	movs	r3, #2
 800cce4:	e173      	b.n	800cfce <HAL_SPI_Receive+0x312>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccee:	f7fb fa27 	bl	8008140 <HAL_GetTick>
 800ccf2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d007      	beq.n	800cd10 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800cd00:	2302      	movs	r3, #2
 800cd02:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd0c:	7ffb      	ldrb	r3, [r7, #31]
 800cd0e:	e15e      	b.n	800cfce <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <HAL_SPI_Receive+0x60>
 800cd16:	88fb      	ldrh	r3, [r7, #6]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d107      	bne.n	800cd2c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd28:	7ffb      	ldrb	r3, [r7, #31]
 800cd2a:	e150      	b.n	800cfce <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2204      	movs	r2, #4
 800cd30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	88fa      	ldrh	r2, [r7, #6]
 800cd46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	88fa      	ldrh	r2, [r7, #6]
 800cd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cd7c:	d108      	bne.n	800cd90 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	e009      	b.n	800cda4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cda2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	4b8b      	ldr	r3, [pc, #556]	; (800cfd8 <HAL_SPI_Receive+0x31c>)
 800cdac:	4013      	ands	r3, r2
 800cdae:	88f9      	ldrh	r1, [r7, #6]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	430b      	orrs	r3, r1
 800cdb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f042 0201 	orr.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdd0:	d107      	bne.n	800cde2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cde0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	2b0f      	cmp	r3, #15
 800cde8:	d948      	bls.n	800ce7c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cdea:	e040      	b.n	800ce6e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	695a      	ldr	r2, [r3, #20]
 800cdf2:	f248 0308 	movw	r3, #32776	; 0x8008
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d014      	beq.n	800ce26 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce06:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce0c:	1d1a      	adds	r2, r3, #4
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ce24:	e023      	b.n	800ce6e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce26:	f7fb f98b 	bl	8008140 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d803      	bhi.n	800ce3e <HAL_SPI_Receive+0x182>
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3c:	d102      	bne.n	800ce44 <HAL_SPI_Receive+0x188>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d114      	bne.n	800ce6e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f000 fae5 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e0af      	b.n	800cfce <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1b8      	bne.n	800cdec <HAL_SPI_Receive+0x130>
 800ce7a:	e095      	b.n	800cfa8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	2b07      	cmp	r3, #7
 800ce82:	f240 808b 	bls.w	800cf9c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ce86:	e03f      	b.n	800cf08 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d114      	bne.n	800cec0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	8812      	ldrh	r2, [r2, #0]
 800ce9e:	b292      	uxth	r2, r2
 800cea0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cea6:	1c9a      	adds	r2, r3, #2
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cebe:	e023      	b.n	800cf08 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cec0:	f7fb f93e 	bl	8008140 <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d803      	bhi.n	800ced8 <HAL_SPI_Receive+0x21c>
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced6:	d102      	bne.n	800cede <HAL_SPI_Receive+0x222>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d114      	bne.n	800cf08 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 fa98 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e062      	b.n	800cfce <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1b9      	bne.n	800ce88 <HAL_SPI_Receive+0x1cc>
 800cf14:	e048      	b.n	800cfa8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d117      	bne.n	800cf54 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf30:	7812      	ldrb	r2, [r2, #0]
 800cf32:	b2d2      	uxtb	r2, r2
 800cf34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cf52:	e023      	b.n	800cf9c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf54:	f7fb f8f4 	bl	8008140 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d803      	bhi.n	800cf6c <HAL_SPI_Receive+0x2b0>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6a:	d102      	bne.n	800cf72 <HAL_SPI_Receive+0x2b6>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d114      	bne.n	800cf9c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fa4e 	bl	800d414 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e018      	b.n	800cfce <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1b6      	bne.n	800cf16 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 fa33 	bl	800d414 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800cfcc:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	ffff0000 	.word	0xffff0000

0800cfdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08c      	sub	sp, #48	; 0x30
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3320      	adds	r3, #32
 800cff6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3330      	adds	r3, #48	; 0x30
 800cffe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <HAL_SPI_TransmitReceive+0x32>
 800d00a:	2302      	movs	r3, #2
 800d00c:	e1fd      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d016:	f7fb f893 	bl	8008140 <HAL_GetTick>
 800d01a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800d01c:	887b      	ldrh	r3, [r7, #2]
 800d01e:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800d020:	887b      	ldrh	r3, [r7, #2]
 800d022:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d009      	beq.n	800d044 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800d030:	2302      	movs	r3, #2
 800d032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d03e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d042:	e1e2      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d005      	beq.n	800d056 <HAL_SPI_TransmitReceive+0x7a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <HAL_SPI_TransmitReceive+0x7a>
 800d050:	887b      	ldrh	r3, [r7, #2]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d109      	bne.n	800d06a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800d056:	2301      	movs	r3, #1
 800d058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d068:	e1cf      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2205      	movs	r2, #5
 800d06e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	887a      	ldrh	r2, [r7, #2]
 800d084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	887a      	ldrh	r2, [r7, #2]
 800d08c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	887a      	ldrh	r2, [r7, #2]
 800d09a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	887a      	ldrh	r2, [r7, #2]
 800d0a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68da      	ldr	r2, [r3, #12]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800d0c0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	4b82      	ldr	r3, [pc, #520]	; (800d2d4 <HAL_SPI_TransmitReceive+0x2f8>)
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	8879      	ldrh	r1, [r7, #2]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	430b      	orrs	r3, r1
 800d0d4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f042 0201 	orr.w	r2, r2, #1
 800d0e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0ee:	d107      	bne.n	800d100 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	2b0f      	cmp	r3, #15
 800d106:	d970      	bls.n	800d1ea <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d108:	e068      	b.n	800d1dc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b02      	cmp	r3, #2
 800d116:	d11a      	bne.n	800d14e <HAL_SPI_TransmitReceive+0x172>
 800d118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d017      	beq.n	800d14e <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d12e:	1d1a      	adds	r2, r3, #4
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	b29a      	uxth	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d14c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	695a      	ldr	r2, [r3, #20]
 800d154:	f248 0308 	movw	r3, #32776	; 0x8008
 800d158:	4013      	ands	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d01a      	beq.n	800d194 <HAL_SPI_TransmitReceive+0x1b8>
 800d15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d017      	beq.n	800d194 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d16e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d174:	1d1a      	adds	r2, r3, #4
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d180:	b29b      	uxth	r3, r3
 800d182:	3b01      	subs	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d192:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d194:	f7fa ffd4 	bl	8008140 <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d803      	bhi.n	800d1ac <HAL_SPI_TransmitReceive+0x1d0>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1aa:	d102      	bne.n	800d1b2 <HAL_SPI_TransmitReceive+0x1d6>
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d114      	bne.n	800d1dc <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f000 f92e 	bl	800d414 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e116      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d193      	bne.n	800d10a <HAL_SPI_TransmitReceive+0x12e>
 800d1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d190      	bne.n	800d10a <HAL_SPI_TransmitReceive+0x12e>
 800d1e8:	e0e8      	b.n	800d3bc <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	2b07      	cmp	r3, #7
 800d1f0:	f240 80de 	bls.w	800d3b0 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1f4:	e066      	b.n	800d2c4 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b02      	cmp	r3, #2
 800d202:	d119      	bne.n	800d238 <HAL_SPI_TransmitReceive+0x25c>
 800d204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d206:	2b00      	cmp	r3, #0
 800d208:	d016      	beq.n	800d238 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d20e:	881a      	ldrh	r2, [r3, #0]
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d218:	1c9a      	adds	r2, r3, #2
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d224:	b29b      	uxth	r3, r3
 800d226:	3b01      	subs	r3, #1
 800d228:	b29a      	uxth	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d236:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b01      	cmp	r3, #1
 800d244:	d11a      	bne.n	800d27c <HAL_SPI_TransmitReceive+0x2a0>
 800d246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d017      	beq.n	800d27c <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	8812      	ldrh	r2, [r2, #0]
 800d254:	b292      	uxth	r2, r2
 800d256:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d25c:	1c9a      	adds	r2, r3, #2
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d27a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d27c:	f7fa ff60 	bl	8008140 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d288:	429a      	cmp	r2, r3
 800d28a:	d803      	bhi.n	800d294 <HAL_SPI_TransmitReceive+0x2b8>
 800d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d102      	bne.n	800d29a <HAL_SPI_TransmitReceive+0x2be>
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	2b00      	cmp	r3, #0
 800d298:	d114      	bne.n	800d2c4 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 f8ba 	bl	800d414 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e0a2      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d2c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d195      	bne.n	800d1f6 <HAL_SPI_TransmitReceive+0x21a>
 800d2ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d192      	bne.n	800d1f6 <HAL_SPI_TransmitReceive+0x21a>
 800d2d0:	e074      	b.n	800d3bc <HAL_SPI_TransmitReceive+0x3e0>
 800d2d2:	bf00      	nop
 800d2d4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d11b      	bne.n	800d31e <HAL_SPI_TransmitReceive+0x342>
 800d2e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d018      	beq.n	800d31e <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3320      	adds	r3, #32
 800d2f6:	7812      	ldrb	r2, [r2, #0]
 800d2f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	3b01      	subs	r3, #1
 800d30e:	b29a      	uxth	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d31c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d11d      	bne.n	800d368 <HAL_SPI_TransmitReceive+0x38c>
 800d32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01a      	beq.n	800d368 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d33e:	7812      	ldrb	r2, [r2, #0]
 800d340:	b2d2      	uxtb	r2, r2
 800d342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d354:	b29b      	uxth	r3, r3
 800d356:	3b01      	subs	r3, #1
 800d358:	b29a      	uxth	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d366:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d368:	f7fa feea 	bl	8008140 <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d374:	429a      	cmp	r2, r3
 800d376:	d803      	bhi.n	800d380 <HAL_SPI_TransmitReceive+0x3a4>
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d102      	bne.n	800d386 <HAL_SPI_TransmitReceive+0x3aa>
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	2b00      	cmp	r3, #0
 800d384:	d114      	bne.n	800d3b0 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f000 f844 	bl	800d414 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d39a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e02c      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d190      	bne.n	800d2d8 <HAL_SPI_TransmitReceive+0x2fc>
 800d3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d18d      	bne.n	800d2d8 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	2108      	movs	r1, #8
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 f8c4 	bl	800d554 <SPI_WaitOnFlagUntilTimeout>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d007      	beq.n	800d3e2 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3d8:	f043 0220 	orr.w	r2, r3, #32
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f000 f816 	bl	800d414 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e001      	b.n	800d40a <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800d406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3728      	adds	r7, #40	; 0x28
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop

0800d414 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	699a      	ldr	r2, [r3, #24]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0208 	orr.w	r2, r2, #8
 800d432:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	699a      	ldr	r2, [r3, #24]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0210 	orr.w	r2, r2, #16
 800d442:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f022 0201 	bic.w	r2, r2, #1
 800d452:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6919      	ldr	r1, [r3, #16]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b3c      	ldr	r3, [pc, #240]	; (800d550 <SPI_CloseTransfer+0x13c>)
 800d460:	400b      	ands	r3, r1
 800d462:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689a      	ldr	r2, [r3, #8]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d472:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b04      	cmp	r3, #4
 800d47e:	d014      	beq.n	800d4aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00f      	beq.n	800d4aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	699a      	ldr	r2, [r3, #24]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0220 	orr.w	r2, r2, #32
 800d4a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d014      	beq.n	800d4e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00f      	beq.n	800d4e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c6:	f043 0204 	orr.w	r2, r3, #4
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	699a      	ldr	r2, [r3, #24]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00f      	beq.n	800d50a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f0:	f043 0201 	orr.w	r2, r3, #1
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	699a      	ldr	r2, [r3, #24]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d508:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00f      	beq.n	800d534 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d51a:	f043 0208 	orr.w	r2, r3, #8
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d532:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d544:	bf00      	nop
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	fffffc90 	.word	0xfffffc90

0800d554 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	4613      	mov	r3, r2
 800d562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d564:	e010      	b.n	800d588 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d566:	f7fa fdeb 	bl	8008140 <HAL_GetTick>
 800d56a:	4602      	mov	r2, r0
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d803      	bhi.n	800d57e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57c:	d102      	bne.n	800d584 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d101      	bne.n	800d588 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e00f      	b.n	800d5a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	695a      	ldr	r2, [r3, #20]
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	4013      	ands	r3, r2
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	429a      	cmp	r2, r3
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	461a      	mov	r2, r3
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d0df      	beq.n	800d566 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5bc:	095b      	lsrs	r3, r3, #5
 800d5be:	3301      	adds	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	3307      	adds	r3, #7
 800d5ce:	08db      	lsrs	r3, r3, #3
 800d5d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d101      	bne.n	800d5f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e049      	b.n	800d68c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d106      	bne.n	800d612 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7f9 fff7 	bl	8007600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2202      	movs	r2, #2
 800d616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3304      	adds	r3, #4
 800d622:	4619      	mov	r1, r3
 800d624:	4610      	mov	r0, r2
 800d626:	f000 f9f5 	bl	800da14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d001      	beq.n	800d6ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e054      	b.n	800d756 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0201 	orr.w	r2, r2, #1
 800d6c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a26      	ldr	r2, [pc, #152]	; (800d764 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d022      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d6:	d01d      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a22      	ldr	r2, [pc, #136]	; (800d768 <HAL_TIM_Base_Start_IT+0xd4>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d018      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a21      	ldr	r2, [pc, #132]	; (800d76c <HAL_TIM_Base_Start_IT+0xd8>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d013      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a1f      	ldr	r2, [pc, #124]	; (800d770 <HAL_TIM_Base_Start_IT+0xdc>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d00e      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a1e      	ldr	r2, [pc, #120]	; (800d774 <HAL_TIM_Base_Start_IT+0xe0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d009      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a1c      	ldr	r2, [pc, #112]	; (800d778 <HAL_TIM_Base_Start_IT+0xe4>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d004      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x80>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a1b      	ldr	r2, [pc, #108]	; (800d77c <HAL_TIM_Base_Start_IT+0xe8>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d115      	bne.n	800d740 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	4b19      	ldr	r3, [pc, #100]	; (800d780 <HAL_TIM_Base_Start_IT+0xec>)
 800d71c:	4013      	ands	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b06      	cmp	r3, #6
 800d724:	d015      	beq.n	800d752 <HAL_TIM_Base_Start_IT+0xbe>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d72c:	d011      	beq.n	800d752 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f042 0201 	orr.w	r2, r2, #1
 800d73c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d73e:	e008      	b.n	800d752 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f042 0201 	orr.w	r2, r2, #1
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	e000      	b.n	800d754 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	40010000 	.word	0x40010000
 800d768:	40000400 	.word	0x40000400
 800d76c:	40000800 	.word	0x40000800
 800d770:	40000c00 	.word	0x40000c00
 800d774:	40010400 	.word	0x40010400
 800d778:	40001800 	.word	0x40001800
 800d77c:	40014000 	.word	0x40014000
 800d780:	00010007 	.word	0x00010007

0800d784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	2b02      	cmp	r3, #2
 800d798:	d122      	bne.n	800d7e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f003 0302 	and.w	r3, r3, #2
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d11b      	bne.n	800d7e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f06f 0202 	mvn.w	r2, #2
 800d7b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	f003 0303 	and.w	r3, r3, #3
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f905 	bl	800d9d6 <HAL_TIM_IC_CaptureCallback>
 800d7cc:	e005      	b.n	800d7da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f8f7 	bl	800d9c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f908 	bl	800d9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d122      	bne.n	800d834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	f003 0304 	and.w	r3, r3, #4
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d11b      	bne.n	800d834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f06f 0204 	mvn.w	r2, #4
 800d804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2202      	movs	r2, #2
 800d80a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	699b      	ldr	r3, [r3, #24]
 800d812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d816:	2b00      	cmp	r3, #0
 800d818:	d003      	beq.n	800d822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f8db 	bl	800d9d6 <HAL_TIM_IC_CaptureCallback>
 800d820:	e005      	b.n	800d82e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f8cd 	bl	800d9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f8de 	bl	800d9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	f003 0308 	and.w	r3, r3, #8
 800d83e:	2b08      	cmp	r3, #8
 800d840:	d122      	bne.n	800d888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	f003 0308 	and.w	r3, r3, #8
 800d84c:	2b08      	cmp	r3, #8
 800d84e:	d11b      	bne.n	800d888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f06f 0208 	mvn.w	r2, #8
 800d858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2204      	movs	r2, #4
 800d85e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	f003 0303 	and.w	r3, r3, #3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d003      	beq.n	800d876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 f8b1 	bl	800d9d6 <HAL_TIM_IC_CaptureCallback>
 800d874:	e005      	b.n	800d882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f8a3 	bl	800d9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f8b4 	bl	800d9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	f003 0310 	and.w	r3, r3, #16
 800d892:	2b10      	cmp	r3, #16
 800d894:	d122      	bne.n	800d8dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	f003 0310 	and.w	r3, r3, #16
 800d8a0:	2b10      	cmp	r3, #16
 800d8a2:	d11b      	bne.n	800d8dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f06f 0210 	mvn.w	r2, #16
 800d8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d003      	beq.n	800d8ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f887 	bl	800d9d6 <HAL_TIM_IC_CaptureCallback>
 800d8c8:	e005      	b.n	800d8d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f879 	bl	800d9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f88a 	bl	800d9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d10e      	bne.n	800d908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d107      	bne.n	800d908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f06f 0201 	mvn.w	r2, #1
 800d900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7f8 fa7a 	bl	8005dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d912:	2b80      	cmp	r3, #128	; 0x80
 800d914:	d10e      	bne.n	800d934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d920:	2b80      	cmp	r3, #128	; 0x80
 800d922:	d107      	bne.n	800d934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d92c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f9a2 	bl	800dc78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d942:	d10e      	bne.n	800d962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d94e:	2b80      	cmp	r3, #128	; 0x80
 800d950:	d107      	bne.n	800d962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f995 	bl	800dc8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d96c:	2b40      	cmp	r3, #64	; 0x40
 800d96e:	d10e      	bne.n	800d98e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d97a:	2b40      	cmp	r3, #64	; 0x40
 800d97c:	d107      	bne.n	800d98e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f838 	bl	800d9fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	f003 0320 	and.w	r3, r3, #32
 800d998:	2b20      	cmp	r3, #32
 800d99a:	d10e      	bne.n	800d9ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	f003 0320 	and.w	r3, r3, #32
 800d9a6:	2b20      	cmp	r3, #32
 800d9a8:	d107      	bne.n	800d9ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f06f 0220 	mvn.w	r2, #32
 800d9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f955 	bl	800dc64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9ca:	bf00      	nop
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b083      	sub	sp, #12
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9de:	bf00      	nop
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b083      	sub	sp, #12
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9f2:	bf00      	nop
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b083      	sub	sp, #12
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a40      	ldr	r2, [pc, #256]	; (800db28 <TIM_Base_SetConfig+0x114>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d013      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da32:	d00f      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a3d      	ldr	r2, [pc, #244]	; (800db2c <TIM_Base_SetConfig+0x118>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d00b      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a3c      	ldr	r2, [pc, #240]	; (800db30 <TIM_Base_SetConfig+0x11c>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d007      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a3b      	ldr	r2, [pc, #236]	; (800db34 <TIM_Base_SetConfig+0x120>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d003      	beq.n	800da54 <TIM_Base_SetConfig+0x40>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a3a      	ldr	r2, [pc, #232]	; (800db38 <TIM_Base_SetConfig+0x124>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d108      	bne.n	800da66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4a2f      	ldr	r2, [pc, #188]	; (800db28 <TIM_Base_SetConfig+0x114>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d01f      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da74:	d01b      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4a2c      	ldr	r2, [pc, #176]	; (800db2c <TIM_Base_SetConfig+0x118>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d017      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4a2b      	ldr	r2, [pc, #172]	; (800db30 <TIM_Base_SetConfig+0x11c>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d013      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a2a      	ldr	r2, [pc, #168]	; (800db34 <TIM_Base_SetConfig+0x120>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d00f      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a29      	ldr	r2, [pc, #164]	; (800db38 <TIM_Base_SetConfig+0x124>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00b      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a28      	ldr	r2, [pc, #160]	; (800db3c <TIM_Base_SetConfig+0x128>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d007      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a27      	ldr	r2, [pc, #156]	; (800db40 <TIM_Base_SetConfig+0x12c>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d003      	beq.n	800daae <TIM_Base_SetConfig+0x9a>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a26      	ldr	r2, [pc, #152]	; (800db44 <TIM_Base_SetConfig+0x130>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d108      	bne.n	800dac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	4313      	orrs	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a10      	ldr	r2, [pc, #64]	; (800db28 <TIM_Base_SetConfig+0x114>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d00f      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a12      	ldr	r2, [pc, #72]	; (800db38 <TIM_Base_SetConfig+0x124>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00b      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a11      	ldr	r2, [pc, #68]	; (800db3c <TIM_Base_SetConfig+0x128>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d007      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a10      	ldr	r2, [pc, #64]	; (800db40 <TIM_Base_SetConfig+0x12c>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d003      	beq.n	800db0c <TIM_Base_SetConfig+0xf8>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a0f      	ldr	r2, [pc, #60]	; (800db44 <TIM_Base_SetConfig+0x130>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d103      	bne.n	800db14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	691a      	ldr	r2, [r3, #16]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	615a      	str	r2, [r3, #20]
}
 800db1a:	bf00      	nop
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	40010000 	.word	0x40010000
 800db2c:	40000400 	.word	0x40000400
 800db30:	40000800 	.word	0x40000800
 800db34:	40000c00 	.word	0x40000c00
 800db38:	40010400 	.word	0x40010400
 800db3c:	40014000 	.word	0x40014000
 800db40:	40014400 	.word	0x40014400
 800db44:	40014800 	.word	0x40014800

0800db48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d101      	bne.n	800db60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db5c:	2302      	movs	r3, #2
 800db5e:	e06d      	b.n	800dc3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a30      	ldr	r2, [pc, #192]	; (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d004      	beq.n	800db94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a2f      	ldr	r2, [pc, #188]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d108      	bne.n	800dba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a20      	ldr	r2, [pc, #128]	; (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d022      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbd2:	d01d      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a1d      	ldr	r2, [pc, #116]	; (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d018      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a1c      	ldr	r2, [pc, #112]	; (800dc54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d013      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a1a      	ldr	r2, [pc, #104]	; (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d00e      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a15      	ldr	r2, [pc, #84]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d009      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a16      	ldr	r2, [pc, #88]	; (800dc5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d004      	beq.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a15      	ldr	r2, [pc, #84]	; (800dc60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d10c      	bne.n	800dc2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	40010000 	.word	0x40010000
 800dc4c:	40010400 	.word	0x40010400
 800dc50:	40000400 	.word	0x40000400
 800dc54:	40000800 	.word	0x40000800
 800dc58:	40000c00 	.word	0x40000c00
 800dc5c:	40001800 	.word	0x40001800
 800dc60:	40014000 	.word	0x40014000

0800dc64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e042      	b.n	800dd38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7f9 fcbd 	bl	8007644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2224      	movs	r2, #36	; 0x24
 800dcce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 0201 	bic.w	r2, r2, #1
 800dce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fce0 	bl	800e6a8 <UART_SetConfig>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d101      	bne.n	800dcf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e022      	b.n	800dd38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 fa3c 	bl	800f178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689a      	ldr	r2, [r3, #8]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f042 0201 	orr.w	r2, r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 fac3 	bl	800f2bc <UART_CheckIdleState>
 800dd36:	4603      	mov	r3, r0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08a      	sub	sp, #40	; 0x28
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd56:	2b20      	cmp	r3, #32
 800dd58:	d17b      	bne.n	800de52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <HAL_UART_Transmit+0x26>
 800dd60:	88fb      	ldrh	r3, [r7, #6]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e074      	b.n	800de54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2221      	movs	r2, #33	; 0x21
 800dd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd7a:	f7fa f9e1 	bl	8008140 <HAL_GetTick>
 800dd7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	88fa      	ldrh	r2, [r7, #6]
 800dd84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	88fa      	ldrh	r2, [r7, #6]
 800dd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd98:	d108      	bne.n	800ddac <HAL_UART_Transmit+0x6c>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d104      	bne.n	800ddac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	61bb      	str	r3, [r7, #24]
 800ddaa:	e003      	b.n	800ddb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ddb4:	e030      	b.n	800de18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2180      	movs	r1, #128	; 0x80
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f001 fb25 	bl	800f410 <UART_WaitOnFlagUntilTimeout>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2220      	movs	r2, #32
 800ddd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e03d      	b.n	800de54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10b      	bne.n	800ddf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	e007      	b.n	800de06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	3301      	adds	r3, #1
 800de04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3b01      	subs	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de1e:	b29b      	uxth	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1c8      	bne.n	800ddb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2200      	movs	r2, #0
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f001 faee 	bl	800f410 <UART_WaitOnFlagUntilTimeout>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2220      	movs	r2, #32
 800de3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e006      	b.n	800de54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2220      	movs	r2, #32
 800de4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	e000      	b.n	800de54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800de52:	2302      	movs	r3, #2
  }
}
 800de54:	4618      	mov	r0, r3
 800de56:	3720      	adds	r7, #32
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08a      	sub	sp, #40	; 0x28
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	4613      	mov	r3, r2
 800de68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de70:	2b20      	cmp	r3, #32
 800de72:	d137      	bne.n	800dee4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <HAL_UART_Receive_IT+0x24>
 800de7a:	88fb      	ldrh	r3, [r7, #6]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	e030      	b.n	800dee6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a18      	ldr	r2, [pc, #96]	; (800def0 <HAL_UART_Receive_IT+0x94>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d01f      	beq.n	800ded4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d018      	beq.n	800ded4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	e853 3f00 	ldrex	r3, [r3]
 800deae:	613b      	str	r3, [r7, #16]
   return(result);
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800deb6:	627b      	str	r3, [r7, #36]	; 0x24
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	623b      	str	r3, [r7, #32]
 800dec2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	69f9      	ldr	r1, [r7, #28]
 800dec6:	6a3a      	ldr	r2, [r7, #32]
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e6      	bne.n	800dea2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	461a      	mov	r2, r3
 800ded8:	68b9      	ldr	r1, [r7, #8]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f001 fb00 	bl	800f4e0 <UART_Start_Receive_IT>
 800dee0:	4603      	mov	r3, r0
 800dee2:	e000      	b.n	800dee6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dee4:	2302      	movs	r3, #2
  }
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3728      	adds	r7, #40	; 0x28
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	58000c00 	.word	0x58000c00

0800def4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b0ba      	sub	sp, #232	; 0xe8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800df1e:	f640 030f 	movw	r3, #2063	; 0x80f
 800df22:	4013      	ands	r3, r2
 800df24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d11b      	bne.n	800df68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df34:	f003 0320 	and.w	r3, r3, #32
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d015      	beq.n	800df68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df40:	f003 0320 	and.w	r3, r3, #32
 800df44:	2b00      	cmp	r3, #0
 800df46:	d105      	bne.n	800df54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df50:	2b00      	cmp	r3, #0
 800df52:	d009      	beq.n	800df68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 8377 	beq.w	800e64c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	4798      	blx	r3
      }
      return;
 800df66:	e371      	b.n	800e64c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 8123 	beq.w	800e1b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df76:	4b8d      	ldr	r3, [pc, #564]	; (800e1ac <HAL_UART_IRQHandler+0x2b8>)
 800df78:	4013      	ands	r3, r2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d106      	bne.n	800df8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df82:	4b8b      	ldr	r3, [pc, #556]	; (800e1b0 <HAL_UART_IRQHandler+0x2bc>)
 800df84:	4013      	ands	r3, r2
 800df86:	2b00      	cmp	r3, #0
 800df88:	f000 8116 	beq.w	800e1b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d011      	beq.n	800dfbc <HAL_UART_IRQHandler+0xc8>
 800df98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00b      	beq.n	800dfbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfb2:	f043 0201 	orr.w	r2, r3, #1
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc0:	f003 0302 	and.w	r3, r3, #2
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d011      	beq.n	800dfec <HAL_UART_IRQHandler+0xf8>
 800dfc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00b      	beq.n	800dfec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2202      	movs	r2, #2
 800dfda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe2:	f043 0204 	orr.w	r2, r3, #4
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d011      	beq.n	800e01c <HAL_UART_IRQHandler+0x128>
 800dff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2204      	movs	r2, #4
 800e00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e012:	f043 0202 	orr.w	r2, r3, #2
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e020:	f003 0308 	and.w	r3, r3, #8
 800e024:	2b00      	cmp	r3, #0
 800e026:	d017      	beq.n	800e058 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e02c:	f003 0320 	and.w	r3, r3, #32
 800e030:	2b00      	cmp	r3, #0
 800e032:	d105      	bne.n	800e040 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e034:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e038:	4b5c      	ldr	r3, [pc, #368]	; (800e1ac <HAL_UART_IRQHandler+0x2b8>)
 800e03a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2208      	movs	r2, #8
 800e046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e04e:	f043 0208 	orr.w	r2, r3, #8
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e05c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e060:	2b00      	cmp	r3, #0
 800e062:	d012      	beq.n	800e08a <HAL_UART_IRQHandler+0x196>
 800e064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00c      	beq.n	800e08a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e080:	f043 0220 	orr.w	r2, r3, #32
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e090:	2b00      	cmp	r3, #0
 800e092:	f000 82dd 	beq.w	800e650 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e09a:	f003 0320 	and.w	r3, r3, #32
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d013      	beq.n	800e0ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0a6:	f003 0320 	and.w	r3, r3, #32
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d105      	bne.n	800e0ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d007      	beq.n	800e0ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d003      	beq.n	800e0ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0de:	2b40      	cmp	r3, #64	; 0x40
 800e0e0:	d005      	beq.n	800e0ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d054      	beq.n	800e198 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f001 fb18 	bl	800f724 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0fe:	2b40      	cmp	r3, #64	; 0x40
 800e100:	d146      	bne.n	800e190 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3308      	adds	r3, #8
 800e108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e10c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e110:	e853 3f00 	ldrex	r3, [r3]
 800e114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e11c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3308      	adds	r3, #8
 800e12a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e12e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e13a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e13e:	e841 2300 	strex	r3, r2, [r1]
 800e142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d1d9      	bne.n	800e102 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e154:	2b00      	cmp	r3, #0
 800e156:	d017      	beq.n	800e188 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e15e:	4a15      	ldr	r2, [pc, #84]	; (800e1b4 <HAL_UART_IRQHandler+0x2c0>)
 800e160:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fa fc53 	bl	8008a14 <HAL_DMA_Abort_IT>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d019      	beq.n	800e1a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e182:	4610      	mov	r0, r2
 800e184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e186:	e00f      	b.n	800e1a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fa77 	bl	800e67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e18e:	e00b      	b.n	800e1a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fa73 	bl	800e67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e196:	e007      	b.n	800e1a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 fa6f 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e1a6:	e253      	b.n	800e650 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a8:	bf00      	nop
    return;
 800e1aa:	e251      	b.n	800e650 <HAL_UART_IRQHandler+0x75c>
 800e1ac:	10000001 	.word	0x10000001
 800e1b0:	04000120 	.word	0x04000120
 800e1b4:	0800f7f1 	.word	0x0800f7f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	f040 81e7 	bne.w	800e590 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1c6:	f003 0310 	and.w	r3, r3, #16
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 81e0 	beq.w	800e590 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1d4:	f003 0310 	and.w	r3, r3, #16
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 81d9 	beq.w	800e590 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2210      	movs	r2, #16
 800e1e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f0:	2b40      	cmp	r3, #64	; 0x40
 800e1f2:	f040 8151 	bne.w	800e498 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a96      	ldr	r2, [pc, #600]	; (800e458 <HAL_UART_IRQHandler+0x564>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d068      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a93      	ldr	r2, [pc, #588]	; (800e45c <HAL_UART_IRQHandler+0x568>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d061      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a91      	ldr	r2, [pc, #580]	; (800e460 <HAL_UART_IRQHandler+0x56c>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d05a      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a8e      	ldr	r2, [pc, #568]	; (800e464 <HAL_UART_IRQHandler+0x570>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d053      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a8c      	ldr	r2, [pc, #560]	; (800e468 <HAL_UART_IRQHandler+0x574>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d04c      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a89      	ldr	r2, [pc, #548]	; (800e46c <HAL_UART_IRQHandler+0x578>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d045      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a87      	ldr	r2, [pc, #540]	; (800e470 <HAL_UART_IRQHandler+0x57c>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d03e      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a84      	ldr	r2, [pc, #528]	; (800e474 <HAL_UART_IRQHandler+0x580>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d037      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a82      	ldr	r2, [pc, #520]	; (800e478 <HAL_UART_IRQHandler+0x584>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d030      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a7f      	ldr	r2, [pc, #508]	; (800e47c <HAL_UART_IRQHandler+0x588>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d029      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a7d      	ldr	r2, [pc, #500]	; (800e480 <HAL_UART_IRQHandler+0x58c>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d022      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a7a      	ldr	r2, [pc, #488]	; (800e484 <HAL_UART_IRQHandler+0x590>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d01b      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a78      	ldr	r2, [pc, #480]	; (800e488 <HAL_UART_IRQHandler+0x594>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d014      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a75      	ldr	r2, [pc, #468]	; (800e48c <HAL_UART_IRQHandler+0x598>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d00d      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a73      	ldr	r2, [pc, #460]	; (800e490 <HAL_UART_IRQHandler+0x59c>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d006      	beq.n	800e2d6 <HAL_UART_IRQHandler+0x3e2>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a70      	ldr	r2, [pc, #448]	; (800e494 <HAL_UART_IRQHandler+0x5a0>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d106      	bne.n	800e2e4 <HAL_UART_IRQHandler+0x3f0>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	e005      	b.n	800e2f0 <HAL_UART_IRQHandler+0x3fc>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e2f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 81ab 	beq.w	800e654 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e304:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e308:	429a      	cmp	r2, r3
 800e30a:	f080 81a3 	bcs.w	800e654 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31e:	69db      	ldr	r3, [r3, #28]
 800e320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e324:	f000 8087 	beq.w	800e436 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e334:	e853 3f00 	ldrex	r3, [r3]
 800e338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e33c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	461a      	mov	r2, r3
 800e34e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e356:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e35e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e362:	e841 2300 	strex	r3, r2, [r1]
 800e366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e36a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1da      	bne.n	800e328 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e37c:	e853 3f00 	ldrex	r3, [r3]
 800e380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e384:	f023 0301 	bic.w	r3, r3, #1
 800e388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3308      	adds	r3, #8
 800e392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e39a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e39e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e3a2:	e841 2300 	strex	r3, r2, [r1]
 800e3a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e3a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e1      	bne.n	800e372 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3308      	adds	r3, #8
 800e3b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3b8:	e853 3f00 	ldrex	r3, [r3]
 800e3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e3be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e3d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e3da:	e841 2300 	strex	r3, r2, [r1]
 800e3de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1e3      	bne.n	800e3ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e404:	f023 0310 	bic.w	r3, r3, #16
 800e408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e416:	65bb      	str	r3, [r7, #88]	; 0x58
 800e418:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e41c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e41e:	e841 2300 	strex	r3, r2, [r1]
 800e422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1e4      	bne.n	800e3f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e430:	4618      	mov	r0, r3
 800e432:	f7f9 ffd1 	bl	80083d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2202      	movs	r2, #2
 800e43a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e448:	b29b      	uxth	r3, r3
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	4619      	mov	r1, r3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f91d 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e456:	e0fd      	b.n	800e654 <HAL_UART_IRQHandler+0x760>
 800e458:	40020010 	.word	0x40020010
 800e45c:	40020028 	.word	0x40020028
 800e460:	40020040 	.word	0x40020040
 800e464:	40020058 	.word	0x40020058
 800e468:	40020070 	.word	0x40020070
 800e46c:	40020088 	.word	0x40020088
 800e470:	400200a0 	.word	0x400200a0
 800e474:	400200b8 	.word	0x400200b8
 800e478:	40020410 	.word	0x40020410
 800e47c:	40020428 	.word	0x40020428
 800e480:	40020440 	.word	0x40020440
 800e484:	40020458 	.word	0x40020458
 800e488:	40020470 	.word	0x40020470
 800e48c:	40020488 	.word	0x40020488
 800e490:	400204a0 	.word	0x400204a0
 800e494:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 80cf 	beq.w	800e658 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e4ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f000 80ca 	beq.w	800e658 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	e853 3f00 	ldrex	r3, [r3]
 800e4d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e4e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ee:	e841 2300 	strex	r3, r2, [r1]
 800e4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1e4      	bne.n	800e4c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3308      	adds	r3, #8
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	e853 3f00 	ldrex	r3, [r3]
 800e508:	623b      	str	r3, [r7, #32]
   return(result);
 800e50a:	6a3a      	ldr	r2, [r7, #32]
 800e50c:	4b55      	ldr	r3, [pc, #340]	; (800e664 <HAL_UART_IRQHandler+0x770>)
 800e50e:	4013      	ands	r3, r2
 800e510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3308      	adds	r3, #8
 800e51a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e51e:	633a      	str	r2, [r7, #48]	; 0x30
 800e520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e526:	e841 2300 	strex	r3, r2, [r1]
 800e52a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1e3      	bne.n	800e4fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	e853 3f00 	ldrex	r3, [r3]
 800e552:	60fb      	str	r3, [r7, #12]
   return(result);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f023 0310 	bic.w	r3, r3, #16
 800e55a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	461a      	mov	r2, r3
 800e564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e568:	61fb      	str	r3, [r7, #28]
 800e56a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	69b9      	ldr	r1, [r7, #24]
 800e56e:	69fa      	ldr	r2, [r7, #28]
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	617b      	str	r3, [r7, #20]
   return(result);
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e4      	bne.n	800e546 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2202      	movs	r2, #2
 800e580:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f881 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e58e:	e063      	b.n	800e658 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00e      	beq.n	800e5ba <HAL_UART_IRQHandler+0x6c6>
 800e59c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d008      	beq.n	800e5ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e5b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 fe7a 	bl	80102ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e5b8:	e051      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d014      	beq.n	800e5f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d105      	bne.n	800e5de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d008      	beq.n	800e5f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d03a      	beq.n	800e65c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	4798      	blx	r3
    }
    return;
 800e5ee:	e035      	b.n	800e65c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d009      	beq.n	800e610 <HAL_UART_IRQHandler+0x71c>
 800e5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e604:	2b00      	cmp	r3, #0
 800e606:	d003      	beq.n	800e610 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f001 f907 	bl	800f81c <UART_EndTransmit_IT>
    return;
 800e60e:	e026      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d009      	beq.n	800e630 <HAL_UART_IRQHandler+0x73c>
 800e61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e620:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d003      	beq.n	800e630 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f001 fe53 	bl	80102d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e62e:	e016      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d010      	beq.n	800e65e <HAL_UART_IRQHandler+0x76a>
 800e63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e640:	2b00      	cmp	r3, #0
 800e642:	da0c      	bge.n	800e65e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f001 fe3b 	bl	80102c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e64a:	e008      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
      return;
 800e64c:	bf00      	nop
 800e64e:	e006      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
    return;
 800e650:	bf00      	nop
 800e652:	e004      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
      return;
 800e654:	bf00      	nop
 800e656:	e002      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
      return;
 800e658:	bf00      	nop
 800e65a:	e000      	b.n	800e65e <HAL_UART_IRQHandler+0x76a>
    return;
 800e65c:	bf00      	nop
  }
}
 800e65e:	37e8      	adds	r7, #232	; 0xe8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	effffffe 	.word	0xeffffffe

0800e668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e6a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6ac:	b092      	sub	sp, #72	; 0x48
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	689a      	ldr	r2, [r3, #8]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	431a      	orrs	r2, r3
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	69db      	ldr	r3, [r3, #28]
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	4bbe      	ldr	r3, [pc, #760]	; (800e9d0 <UART_SetConfig+0x328>)
 800e6d8:	4013      	ands	r3, r2
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	6812      	ldr	r2, [r2, #0]
 800e6de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6e0:	430b      	orrs	r3, r1
 800e6e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	430a      	orrs	r2, r1
 800e6f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	699b      	ldr	r3, [r3, #24]
 800e6fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4ab3      	ldr	r2, [pc, #716]	; (800e9d4 <UART_SetConfig+0x32c>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d004      	beq.n	800e714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e710:	4313      	orrs	r3, r2
 800e712:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	4baf      	ldr	r3, [pc, #700]	; (800e9d8 <UART_SetConfig+0x330>)
 800e71c:	4013      	ands	r3, r2
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	6812      	ldr	r2, [r2, #0]
 800e722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e724:	430b      	orrs	r3, r1
 800e726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	f023 010f 	bic.w	r1, r3, #15
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	430a      	orrs	r2, r1
 800e73c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4aa6      	ldr	r2, [pc, #664]	; (800e9dc <UART_SetConfig+0x334>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d177      	bne.n	800e838 <UART_SetConfig+0x190>
 800e748:	4ba5      	ldr	r3, [pc, #660]	; (800e9e0 <UART_SetConfig+0x338>)
 800e74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e74c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e750:	2b28      	cmp	r3, #40	; 0x28
 800e752:	d86d      	bhi.n	800e830 <UART_SetConfig+0x188>
 800e754:	a201      	add	r2, pc, #4	; (adr r2, 800e75c <UART_SetConfig+0xb4>)
 800e756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75a:	bf00      	nop
 800e75c:	0800e801 	.word	0x0800e801
 800e760:	0800e831 	.word	0x0800e831
 800e764:	0800e831 	.word	0x0800e831
 800e768:	0800e831 	.word	0x0800e831
 800e76c:	0800e831 	.word	0x0800e831
 800e770:	0800e831 	.word	0x0800e831
 800e774:	0800e831 	.word	0x0800e831
 800e778:	0800e831 	.word	0x0800e831
 800e77c:	0800e809 	.word	0x0800e809
 800e780:	0800e831 	.word	0x0800e831
 800e784:	0800e831 	.word	0x0800e831
 800e788:	0800e831 	.word	0x0800e831
 800e78c:	0800e831 	.word	0x0800e831
 800e790:	0800e831 	.word	0x0800e831
 800e794:	0800e831 	.word	0x0800e831
 800e798:	0800e831 	.word	0x0800e831
 800e79c:	0800e811 	.word	0x0800e811
 800e7a0:	0800e831 	.word	0x0800e831
 800e7a4:	0800e831 	.word	0x0800e831
 800e7a8:	0800e831 	.word	0x0800e831
 800e7ac:	0800e831 	.word	0x0800e831
 800e7b0:	0800e831 	.word	0x0800e831
 800e7b4:	0800e831 	.word	0x0800e831
 800e7b8:	0800e831 	.word	0x0800e831
 800e7bc:	0800e819 	.word	0x0800e819
 800e7c0:	0800e831 	.word	0x0800e831
 800e7c4:	0800e831 	.word	0x0800e831
 800e7c8:	0800e831 	.word	0x0800e831
 800e7cc:	0800e831 	.word	0x0800e831
 800e7d0:	0800e831 	.word	0x0800e831
 800e7d4:	0800e831 	.word	0x0800e831
 800e7d8:	0800e831 	.word	0x0800e831
 800e7dc:	0800e821 	.word	0x0800e821
 800e7e0:	0800e831 	.word	0x0800e831
 800e7e4:	0800e831 	.word	0x0800e831
 800e7e8:	0800e831 	.word	0x0800e831
 800e7ec:	0800e831 	.word	0x0800e831
 800e7f0:	0800e831 	.word	0x0800e831
 800e7f4:	0800e831 	.word	0x0800e831
 800e7f8:	0800e831 	.word	0x0800e831
 800e7fc:	0800e829 	.word	0x0800e829
 800e800:	2301      	movs	r3, #1
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e222      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e808:	2304      	movs	r3, #4
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e21e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e810:	2308      	movs	r3, #8
 800e812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e816:	e21a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e818:	2310      	movs	r3, #16
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81e:	e216      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e820:	2320      	movs	r3, #32
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e212      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e828:	2340      	movs	r3, #64	; 0x40
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e20e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e830:	2380      	movs	r3, #128	; 0x80
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e20a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a69      	ldr	r2, [pc, #420]	; (800e9e4 <UART_SetConfig+0x33c>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d130      	bne.n	800e8a4 <UART_SetConfig+0x1fc>
 800e842:	4b67      	ldr	r3, [pc, #412]	; (800e9e0 <UART_SetConfig+0x338>)
 800e844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d826      	bhi.n	800e89c <UART_SetConfig+0x1f4>
 800e84e:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <UART_SetConfig+0x1ac>)
 800e850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e854:	0800e86d 	.word	0x0800e86d
 800e858:	0800e875 	.word	0x0800e875
 800e85c:	0800e87d 	.word	0x0800e87d
 800e860:	0800e885 	.word	0x0800e885
 800e864:	0800e88d 	.word	0x0800e88d
 800e868:	0800e895 	.word	0x0800e895
 800e86c:	2300      	movs	r3, #0
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e1ec      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e874:	2304      	movs	r3, #4
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e1e8      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e87c:	2308      	movs	r3, #8
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e882:	e1e4      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e884:	2310      	movs	r3, #16
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88a:	e1e0      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e88c:	2320      	movs	r3, #32
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e892:	e1dc      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e894:	2340      	movs	r3, #64	; 0x40
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89a:	e1d8      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e89c:	2380      	movs	r3, #128	; 0x80
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a2:	e1d4      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a4f      	ldr	r2, [pc, #316]	; (800e9e8 <UART_SetConfig+0x340>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d130      	bne.n	800e910 <UART_SetConfig+0x268>
 800e8ae:	4b4c      	ldr	r3, [pc, #304]	; (800e9e0 <UART_SetConfig+0x338>)
 800e8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b05      	cmp	r3, #5
 800e8b8:	d826      	bhi.n	800e908 <UART_SetConfig+0x260>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <UART_SetConfig+0x218>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e8d9 	.word	0x0800e8d9
 800e8c4:	0800e8e1 	.word	0x0800e8e1
 800e8c8:	0800e8e9 	.word	0x0800e8e9
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f9 	.word	0x0800e8f9
 800e8d4:	0800e901 	.word	0x0800e901
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8de:	e1b6      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e6:	e1b2      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ee:	e1ae      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8f6:	e1aa      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fe:	e1a6      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e900:	2340      	movs	r3, #64	; 0x40
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e906:	e1a2      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e908:	2380      	movs	r3, #128	; 0x80
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90e:	e19e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a35      	ldr	r2, [pc, #212]	; (800e9ec <UART_SetConfig+0x344>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d130      	bne.n	800e97c <UART_SetConfig+0x2d4>
 800e91a:	4b31      	ldr	r3, [pc, #196]	; (800e9e0 <UART_SetConfig+0x338>)
 800e91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b05      	cmp	r3, #5
 800e924:	d826      	bhi.n	800e974 <UART_SetConfig+0x2cc>
 800e926:	a201      	add	r2, pc, #4	; (adr r2, 800e92c <UART_SetConfig+0x284>)
 800e928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92c:	0800e945 	.word	0x0800e945
 800e930:	0800e94d 	.word	0x0800e94d
 800e934:	0800e955 	.word	0x0800e955
 800e938:	0800e95d 	.word	0x0800e95d
 800e93c:	0800e965 	.word	0x0800e965
 800e940:	0800e96d 	.word	0x0800e96d
 800e944:	2300      	movs	r3, #0
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94a:	e180      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e94c:	2304      	movs	r3, #4
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e952:	e17c      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e954:	2308      	movs	r3, #8
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95a:	e178      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e95c:	2310      	movs	r3, #16
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e174      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e964:	2320      	movs	r3, #32
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e170      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e96c:	2340      	movs	r3, #64	; 0x40
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e16c      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e974:	2380      	movs	r3, #128	; 0x80
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e168      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <UART_SetConfig+0x348>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d142      	bne.n	800ea0c <UART_SetConfig+0x364>
 800e986:	4b16      	ldr	r3, [pc, #88]	; (800e9e0 <UART_SetConfig+0x338>)
 800e988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	2b05      	cmp	r3, #5
 800e990:	d838      	bhi.n	800ea04 <UART_SetConfig+0x35c>
 800e992:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0x2f0>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800e9b1 	.word	0x0800e9b1
 800e99c:	0800e9b9 	.word	0x0800e9b9
 800e9a0:	0800e9c1 	.word	0x0800e9c1
 800e9a4:	0800e9c9 	.word	0x0800e9c9
 800e9a8:	0800e9f5 	.word	0x0800e9f5
 800e9ac:	0800e9fd 	.word	0x0800e9fd
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b6:	e14a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9be:	e146      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c6:	e142      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e9c8:	2310      	movs	r3, #16
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e13e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e9d0:	cfff69f3 	.word	0xcfff69f3
 800e9d4:	58000c00 	.word	0x58000c00
 800e9d8:	11fff4ff 	.word	0x11fff4ff
 800e9dc:	40011000 	.word	0x40011000
 800e9e0:	58024400 	.word	0x58024400
 800e9e4:	40004400 	.word	0x40004400
 800e9e8:	40004800 	.word	0x40004800
 800e9ec:	40004c00 	.word	0x40004c00
 800e9f0:	40005000 	.word	0x40005000
 800e9f4:	2320      	movs	r3, #32
 800e9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fa:	e128      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800e9fc:	2340      	movs	r3, #64	; 0x40
 800e9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea02:	e124      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ea04:	2380      	movs	r3, #128	; 0x80
 800ea06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0a:	e120      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4acb      	ldr	r2, [pc, #812]	; (800ed40 <UART_SetConfig+0x698>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d176      	bne.n	800eb04 <UART_SetConfig+0x45c>
 800ea16:	4bcb      	ldr	r3, [pc, #812]	; (800ed44 <UART_SetConfig+0x69c>)
 800ea18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea1e:	2b28      	cmp	r3, #40	; 0x28
 800ea20:	d86c      	bhi.n	800eafc <UART_SetConfig+0x454>
 800ea22:	a201      	add	r2, pc, #4	; (adr r2, 800ea28 <UART_SetConfig+0x380>)
 800ea24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea28:	0800eacd 	.word	0x0800eacd
 800ea2c:	0800eafd 	.word	0x0800eafd
 800ea30:	0800eafd 	.word	0x0800eafd
 800ea34:	0800eafd 	.word	0x0800eafd
 800ea38:	0800eafd 	.word	0x0800eafd
 800ea3c:	0800eafd 	.word	0x0800eafd
 800ea40:	0800eafd 	.word	0x0800eafd
 800ea44:	0800eafd 	.word	0x0800eafd
 800ea48:	0800ead5 	.word	0x0800ead5
 800ea4c:	0800eafd 	.word	0x0800eafd
 800ea50:	0800eafd 	.word	0x0800eafd
 800ea54:	0800eafd 	.word	0x0800eafd
 800ea58:	0800eafd 	.word	0x0800eafd
 800ea5c:	0800eafd 	.word	0x0800eafd
 800ea60:	0800eafd 	.word	0x0800eafd
 800ea64:	0800eafd 	.word	0x0800eafd
 800ea68:	0800eadd 	.word	0x0800eadd
 800ea6c:	0800eafd 	.word	0x0800eafd
 800ea70:	0800eafd 	.word	0x0800eafd
 800ea74:	0800eafd 	.word	0x0800eafd
 800ea78:	0800eafd 	.word	0x0800eafd
 800ea7c:	0800eafd 	.word	0x0800eafd
 800ea80:	0800eafd 	.word	0x0800eafd
 800ea84:	0800eafd 	.word	0x0800eafd
 800ea88:	0800eae5 	.word	0x0800eae5
 800ea8c:	0800eafd 	.word	0x0800eafd
 800ea90:	0800eafd 	.word	0x0800eafd
 800ea94:	0800eafd 	.word	0x0800eafd
 800ea98:	0800eafd 	.word	0x0800eafd
 800ea9c:	0800eafd 	.word	0x0800eafd
 800eaa0:	0800eafd 	.word	0x0800eafd
 800eaa4:	0800eafd 	.word	0x0800eafd
 800eaa8:	0800eaed 	.word	0x0800eaed
 800eaac:	0800eafd 	.word	0x0800eafd
 800eab0:	0800eafd 	.word	0x0800eafd
 800eab4:	0800eafd 	.word	0x0800eafd
 800eab8:	0800eafd 	.word	0x0800eafd
 800eabc:	0800eafd 	.word	0x0800eafd
 800eac0:	0800eafd 	.word	0x0800eafd
 800eac4:	0800eafd 	.word	0x0800eafd
 800eac8:	0800eaf5 	.word	0x0800eaf5
 800eacc:	2301      	movs	r3, #1
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead2:	e0bc      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ead4:	2304      	movs	r3, #4
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eada:	e0b8      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eadc:	2308      	movs	r3, #8
 800eade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae2:	e0b4      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eae4:	2310      	movs	r3, #16
 800eae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaea:	e0b0      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eaec:	2320      	movs	r3, #32
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf2:	e0ac      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eaf4:	2340      	movs	r3, #64	; 0x40
 800eaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafa:	e0a8      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eafc:	2380      	movs	r3, #128	; 0x80
 800eafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb02:	e0a4      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a8f      	ldr	r2, [pc, #572]	; (800ed48 <UART_SetConfig+0x6a0>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d130      	bne.n	800eb70 <UART_SetConfig+0x4c8>
 800eb0e:	4b8d      	ldr	r3, [pc, #564]	; (800ed44 <UART_SetConfig+0x69c>)
 800eb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb12:	f003 0307 	and.w	r3, r3, #7
 800eb16:	2b05      	cmp	r3, #5
 800eb18:	d826      	bhi.n	800eb68 <UART_SetConfig+0x4c0>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <UART_SetConfig+0x478>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800eb39 	.word	0x0800eb39
 800eb24:	0800eb41 	.word	0x0800eb41
 800eb28:	0800eb49 	.word	0x0800eb49
 800eb2c:	0800eb51 	.word	0x0800eb51
 800eb30:	0800eb59 	.word	0x0800eb59
 800eb34:	0800eb61 	.word	0x0800eb61
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3e:	e086      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb40:	2304      	movs	r3, #4
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb46:	e082      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb48:	2308      	movs	r3, #8
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4e:	e07e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb50:	2310      	movs	r3, #16
 800eb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb56:	e07a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb58:	2320      	movs	r3, #32
 800eb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5e:	e076      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb60:	2340      	movs	r3, #64	; 0x40
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb66:	e072      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb68:	2380      	movs	r3, #128	; 0x80
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6e:	e06e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a75      	ldr	r2, [pc, #468]	; (800ed4c <UART_SetConfig+0x6a4>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d130      	bne.n	800ebdc <UART_SetConfig+0x534>
 800eb7a:	4b72      	ldr	r3, [pc, #456]	; (800ed44 <UART_SetConfig+0x69c>)
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7e:	f003 0307 	and.w	r3, r3, #7
 800eb82:	2b05      	cmp	r3, #5
 800eb84:	d826      	bhi.n	800ebd4 <UART_SetConfig+0x52c>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <UART_SetConfig+0x4e4>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800eba5 	.word	0x0800eba5
 800eb90:	0800ebad 	.word	0x0800ebad
 800eb94:	0800ebb5 	.word	0x0800ebb5
 800eb98:	0800ebbd 	.word	0x0800ebbd
 800eb9c:	0800ebc5 	.word	0x0800ebc5
 800eba0:	0800ebcd 	.word	0x0800ebcd
 800eba4:	2300      	movs	r3, #0
 800eba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebaa:	e050      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebac:	2304      	movs	r3, #4
 800ebae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb2:	e04c      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebb4:	2308      	movs	r3, #8
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebba:	e048      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebbc:	2310      	movs	r3, #16
 800ebbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc2:	e044      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebca:	e040      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebcc:	2340      	movs	r3, #64	; 0x40
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd2:	e03c      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebda:	e038      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a5b      	ldr	r2, [pc, #364]	; (800ed50 <UART_SetConfig+0x6a8>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d130      	bne.n	800ec48 <UART_SetConfig+0x5a0>
 800ebe6:	4b57      	ldr	r3, [pc, #348]	; (800ed44 <UART_SetConfig+0x69c>)
 800ebe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebea:	f003 0307 	and.w	r3, r3, #7
 800ebee:	2b05      	cmp	r3, #5
 800ebf0:	d826      	bhi.n	800ec40 <UART_SetConfig+0x598>
 800ebf2:	a201      	add	r2, pc, #4	; (adr r2, 800ebf8 <UART_SetConfig+0x550>)
 800ebf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf8:	0800ec11 	.word	0x0800ec11
 800ebfc:	0800ec19 	.word	0x0800ec19
 800ec00:	0800ec21 	.word	0x0800ec21
 800ec04:	0800ec29 	.word	0x0800ec29
 800ec08:	0800ec31 	.word	0x0800ec31
 800ec0c:	0800ec39 	.word	0x0800ec39
 800ec10:	2302      	movs	r3, #2
 800ec12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec16:	e01a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec18:	2304      	movs	r3, #4
 800ec1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1e:	e016      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec20:	2308      	movs	r3, #8
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec26:	e012      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec28:	2310      	movs	r3, #16
 800ec2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2e:	e00e      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec30:	2320      	movs	r3, #32
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e00a      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec38:	2340      	movs	r3, #64	; 0x40
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e006      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec40:	2380      	movs	r3, #128	; 0x80
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e002      	b.n	800ec4e <UART_SetConfig+0x5a6>
 800ec48:	2380      	movs	r3, #128	; 0x80
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a3f      	ldr	r2, [pc, #252]	; (800ed50 <UART_SetConfig+0x6a8>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	f040 80f8 	bne.w	800ee4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec5e:	2b20      	cmp	r3, #32
 800ec60:	dc46      	bgt.n	800ecf0 <UART_SetConfig+0x648>
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	f2c0 8082 	blt.w	800ed6c <UART_SetConfig+0x6c4>
 800ec68:	3b02      	subs	r3, #2
 800ec6a:	2b1e      	cmp	r3, #30
 800ec6c:	d87e      	bhi.n	800ed6c <UART_SetConfig+0x6c4>
 800ec6e:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <UART_SetConfig+0x5cc>)
 800ec70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec74:	0800ecf7 	.word	0x0800ecf7
 800ec78:	0800ed6d 	.word	0x0800ed6d
 800ec7c:	0800ecff 	.word	0x0800ecff
 800ec80:	0800ed6d 	.word	0x0800ed6d
 800ec84:	0800ed6d 	.word	0x0800ed6d
 800ec88:	0800ed6d 	.word	0x0800ed6d
 800ec8c:	0800ed0f 	.word	0x0800ed0f
 800ec90:	0800ed6d 	.word	0x0800ed6d
 800ec94:	0800ed6d 	.word	0x0800ed6d
 800ec98:	0800ed6d 	.word	0x0800ed6d
 800ec9c:	0800ed6d 	.word	0x0800ed6d
 800eca0:	0800ed6d 	.word	0x0800ed6d
 800eca4:	0800ed6d 	.word	0x0800ed6d
 800eca8:	0800ed6d 	.word	0x0800ed6d
 800ecac:	0800ed1f 	.word	0x0800ed1f
 800ecb0:	0800ed6d 	.word	0x0800ed6d
 800ecb4:	0800ed6d 	.word	0x0800ed6d
 800ecb8:	0800ed6d 	.word	0x0800ed6d
 800ecbc:	0800ed6d 	.word	0x0800ed6d
 800ecc0:	0800ed6d 	.word	0x0800ed6d
 800ecc4:	0800ed6d 	.word	0x0800ed6d
 800ecc8:	0800ed6d 	.word	0x0800ed6d
 800eccc:	0800ed6d 	.word	0x0800ed6d
 800ecd0:	0800ed6d 	.word	0x0800ed6d
 800ecd4:	0800ed6d 	.word	0x0800ed6d
 800ecd8:	0800ed6d 	.word	0x0800ed6d
 800ecdc:	0800ed6d 	.word	0x0800ed6d
 800ece0:	0800ed6d 	.word	0x0800ed6d
 800ece4:	0800ed6d 	.word	0x0800ed6d
 800ece8:	0800ed6d 	.word	0x0800ed6d
 800ecec:	0800ed5f 	.word	0x0800ed5f
 800ecf0:	2b40      	cmp	r3, #64	; 0x40
 800ecf2:	d037      	beq.n	800ed64 <UART_SetConfig+0x6bc>
 800ecf4:	e03a      	b.n	800ed6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ecf6:	f7fc fd35 	bl	800b764 <HAL_RCCEx_GetD3PCLK1Freq>
 800ecfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecfc:	e03c      	b.n	800ed78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fc fd44 	bl	800b790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed0c:	e034      	b.n	800ed78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed0e:	f107 0318 	add.w	r3, r7, #24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fc fe90 	bl	800ba38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed1c:	e02c      	b.n	800ed78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed1e:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <UART_SetConfig+0x69c>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 0320 	and.w	r3, r3, #32
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d016      	beq.n	800ed58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed2a:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <UART_SetConfig+0x69c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	08db      	lsrs	r3, r3, #3
 800ed30:	f003 0303 	and.w	r3, r3, #3
 800ed34:	4a07      	ldr	r2, [pc, #28]	; (800ed54 <UART_SetConfig+0x6ac>)
 800ed36:	fa22 f303 	lsr.w	r3, r2, r3
 800ed3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed3c:	e01c      	b.n	800ed78 <UART_SetConfig+0x6d0>
 800ed3e:	bf00      	nop
 800ed40:	40011400 	.word	0x40011400
 800ed44:	58024400 	.word	0x58024400
 800ed48:	40007800 	.word	0x40007800
 800ed4c:	40007c00 	.word	0x40007c00
 800ed50:	58000c00 	.word	0x58000c00
 800ed54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ed58:	4b9d      	ldr	r3, [pc, #628]	; (800efd0 <UART_SetConfig+0x928>)
 800ed5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed5c:	e00c      	b.n	800ed78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed5e:	4b9d      	ldr	r3, [pc, #628]	; (800efd4 <UART_SetConfig+0x92c>)
 800ed60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed62:	e009      	b.n	800ed78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed6a:	e005      	b.n	800ed78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed70:	2301      	movs	r3, #1
 800ed72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 81de 	beq.w	800f13c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed84:	4a94      	ldr	r2, [pc, #592]	; (800efd8 <UART_SetConfig+0x930>)
 800ed86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	4413      	add	r3, r2
 800ed9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d305      	bcc.n	800edb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edac:	429a      	cmp	r2, r3
 800edae:	d903      	bls.n	800edb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800edb6:	e1c1      	b.n	800f13c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edba:	2200      	movs	r2, #0
 800edbc:	60bb      	str	r3, [r7, #8]
 800edbe:	60fa      	str	r2, [r7, #12]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc4:	4a84      	ldr	r2, [pc, #528]	; (800efd8 <UART_SetConfig+0x930>)
 800edc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	2200      	movs	r2, #0
 800edce:	603b      	str	r3, [r7, #0]
 800edd0:	607a      	str	r2, [r7, #4]
 800edd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edda:	f7f1 facd 	bl	8000378 <__aeabi_uldivmod>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4610      	mov	r0, r2
 800ede4:	4619      	mov	r1, r3
 800ede6:	f04f 0200 	mov.w	r2, #0
 800edea:	f04f 0300 	mov.w	r3, #0
 800edee:	020b      	lsls	r3, r1, #8
 800edf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edf4:	0202      	lsls	r2, r0, #8
 800edf6:	6979      	ldr	r1, [r7, #20]
 800edf8:	6849      	ldr	r1, [r1, #4]
 800edfa:	0849      	lsrs	r1, r1, #1
 800edfc:	2000      	movs	r0, #0
 800edfe:	460c      	mov	r4, r1
 800ee00:	4605      	mov	r5, r0
 800ee02:	eb12 0804 	adds.w	r8, r2, r4
 800ee06:	eb43 0905 	adc.w	r9, r3, r5
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	469a      	mov	sl, r3
 800ee12:	4693      	mov	fp, r2
 800ee14:	4652      	mov	r2, sl
 800ee16:	465b      	mov	r3, fp
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f7f1 faac 	bl	8000378 <__aeabi_uldivmod>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4613      	mov	r3, r2
 800ee26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee2e:	d308      	bcc.n	800ee42 <UART_SetConfig+0x79a>
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee36:	d204      	bcs.n	800ee42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee3e:	60da      	str	r2, [r3, #12]
 800ee40:	e17c      	b.n	800f13c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee48:	e178      	b.n	800f13c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	69db      	ldr	r3, [r3, #28]
 800ee4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee52:	f040 80c5 	bne.w	800efe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ee56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee5a:	2b20      	cmp	r3, #32
 800ee5c:	dc48      	bgt.n	800eef0 <UART_SetConfig+0x848>
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	db7b      	blt.n	800ef5a <UART_SetConfig+0x8b2>
 800ee62:	2b20      	cmp	r3, #32
 800ee64:	d879      	bhi.n	800ef5a <UART_SetConfig+0x8b2>
 800ee66:	a201      	add	r2, pc, #4	; (adr r2, 800ee6c <UART_SetConfig+0x7c4>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800eef7 	.word	0x0800eef7
 800ee70:	0800eeff 	.word	0x0800eeff
 800ee74:	0800ef5b 	.word	0x0800ef5b
 800ee78:	0800ef5b 	.word	0x0800ef5b
 800ee7c:	0800ef07 	.word	0x0800ef07
 800ee80:	0800ef5b 	.word	0x0800ef5b
 800ee84:	0800ef5b 	.word	0x0800ef5b
 800ee88:	0800ef5b 	.word	0x0800ef5b
 800ee8c:	0800ef17 	.word	0x0800ef17
 800ee90:	0800ef5b 	.word	0x0800ef5b
 800ee94:	0800ef5b 	.word	0x0800ef5b
 800ee98:	0800ef5b 	.word	0x0800ef5b
 800ee9c:	0800ef5b 	.word	0x0800ef5b
 800eea0:	0800ef5b 	.word	0x0800ef5b
 800eea4:	0800ef5b 	.word	0x0800ef5b
 800eea8:	0800ef5b 	.word	0x0800ef5b
 800eeac:	0800ef27 	.word	0x0800ef27
 800eeb0:	0800ef5b 	.word	0x0800ef5b
 800eeb4:	0800ef5b 	.word	0x0800ef5b
 800eeb8:	0800ef5b 	.word	0x0800ef5b
 800eebc:	0800ef5b 	.word	0x0800ef5b
 800eec0:	0800ef5b 	.word	0x0800ef5b
 800eec4:	0800ef5b 	.word	0x0800ef5b
 800eec8:	0800ef5b 	.word	0x0800ef5b
 800eecc:	0800ef5b 	.word	0x0800ef5b
 800eed0:	0800ef5b 	.word	0x0800ef5b
 800eed4:	0800ef5b 	.word	0x0800ef5b
 800eed8:	0800ef5b 	.word	0x0800ef5b
 800eedc:	0800ef5b 	.word	0x0800ef5b
 800eee0:	0800ef5b 	.word	0x0800ef5b
 800eee4:	0800ef5b 	.word	0x0800ef5b
 800eee8:	0800ef5b 	.word	0x0800ef5b
 800eeec:	0800ef4d 	.word	0x0800ef4d
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d02e      	beq.n	800ef52 <UART_SetConfig+0x8aa>
 800eef4:	e031      	b.n	800ef5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eef6:	f7fb f9e3 	bl	800a2c0 <HAL_RCC_GetPCLK1Freq>
 800eefa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eefc:	e033      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eefe:	f7fb f9f5 	bl	800a2ec <HAL_RCC_GetPCLK2Freq>
 800ef02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef04:	e02f      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fc fc40 	bl	800b790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef14:	e027      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef16:	f107 0318 	add.w	r3, r7, #24
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fc fd8c 	bl	800ba38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef24:	e01f      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef26:	4b2d      	ldr	r3, [pc, #180]	; (800efdc <UART_SetConfig+0x934>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f003 0320 	and.w	r3, r3, #32
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d009      	beq.n	800ef46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef32:	4b2a      	ldr	r3, [pc, #168]	; (800efdc <UART_SetConfig+0x934>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	08db      	lsrs	r3, r3, #3
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	4a24      	ldr	r2, [pc, #144]	; (800efd0 <UART_SetConfig+0x928>)
 800ef3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef44:	e00f      	b.n	800ef66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ef46:	4b22      	ldr	r3, [pc, #136]	; (800efd0 <UART_SetConfig+0x928>)
 800ef48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef4a:	e00c      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef4c:	4b21      	ldr	r3, [pc, #132]	; (800efd4 <UART_SetConfig+0x92c>)
 800ef4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef50:	e009      	b.n	800ef66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef58:	e005      	b.n	800ef66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 80e7 	beq.w	800f13c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef72:	4a19      	ldr	r2, [pc, #100]	; (800efd8 <UART_SetConfig+0x930>)
 800ef74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef80:	005a      	lsls	r2, r3, #1
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	085b      	lsrs	r3, r3, #1
 800ef88:	441a      	add	r2, r3
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	2b0f      	cmp	r3, #15
 800ef98:	d916      	bls.n	800efc8 <UART_SetConfig+0x920>
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa0:	d212      	bcs.n	800efc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	f023 030f 	bic.w	r3, r3, #15
 800efaa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	085b      	lsrs	r3, r3, #1
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f003 0307 	and.w	r3, r3, #7
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800efba:	4313      	orrs	r3, r2
 800efbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800efc4:	60da      	str	r2, [r3, #12]
 800efc6:	e0b9      	b.n	800f13c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800efce:	e0b5      	b.n	800f13c <UART_SetConfig+0xa94>
 800efd0:	03d09000 	.word	0x03d09000
 800efd4:	003d0900 	.word	0x003d0900
 800efd8:	08010c54 	.word	0x08010c54
 800efdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800efe0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efe4:	2b20      	cmp	r3, #32
 800efe6:	dc49      	bgt.n	800f07c <UART_SetConfig+0x9d4>
 800efe8:	2b00      	cmp	r3, #0
 800efea:	db7c      	blt.n	800f0e6 <UART_SetConfig+0xa3e>
 800efec:	2b20      	cmp	r3, #32
 800efee:	d87a      	bhi.n	800f0e6 <UART_SetConfig+0xa3e>
 800eff0:	a201      	add	r2, pc, #4	; (adr r2, 800eff8 <UART_SetConfig+0x950>)
 800eff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff6:	bf00      	nop
 800eff8:	0800f083 	.word	0x0800f083
 800effc:	0800f08b 	.word	0x0800f08b
 800f000:	0800f0e7 	.word	0x0800f0e7
 800f004:	0800f0e7 	.word	0x0800f0e7
 800f008:	0800f093 	.word	0x0800f093
 800f00c:	0800f0e7 	.word	0x0800f0e7
 800f010:	0800f0e7 	.word	0x0800f0e7
 800f014:	0800f0e7 	.word	0x0800f0e7
 800f018:	0800f0a3 	.word	0x0800f0a3
 800f01c:	0800f0e7 	.word	0x0800f0e7
 800f020:	0800f0e7 	.word	0x0800f0e7
 800f024:	0800f0e7 	.word	0x0800f0e7
 800f028:	0800f0e7 	.word	0x0800f0e7
 800f02c:	0800f0e7 	.word	0x0800f0e7
 800f030:	0800f0e7 	.word	0x0800f0e7
 800f034:	0800f0e7 	.word	0x0800f0e7
 800f038:	0800f0b3 	.word	0x0800f0b3
 800f03c:	0800f0e7 	.word	0x0800f0e7
 800f040:	0800f0e7 	.word	0x0800f0e7
 800f044:	0800f0e7 	.word	0x0800f0e7
 800f048:	0800f0e7 	.word	0x0800f0e7
 800f04c:	0800f0e7 	.word	0x0800f0e7
 800f050:	0800f0e7 	.word	0x0800f0e7
 800f054:	0800f0e7 	.word	0x0800f0e7
 800f058:	0800f0e7 	.word	0x0800f0e7
 800f05c:	0800f0e7 	.word	0x0800f0e7
 800f060:	0800f0e7 	.word	0x0800f0e7
 800f064:	0800f0e7 	.word	0x0800f0e7
 800f068:	0800f0e7 	.word	0x0800f0e7
 800f06c:	0800f0e7 	.word	0x0800f0e7
 800f070:	0800f0e7 	.word	0x0800f0e7
 800f074:	0800f0e7 	.word	0x0800f0e7
 800f078:	0800f0d9 	.word	0x0800f0d9
 800f07c:	2b40      	cmp	r3, #64	; 0x40
 800f07e:	d02e      	beq.n	800f0de <UART_SetConfig+0xa36>
 800f080:	e031      	b.n	800f0e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f082:	f7fb f91d 	bl	800a2c0 <HAL_RCC_GetPCLK1Freq>
 800f086:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f088:	e033      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f08a:	f7fb f92f 	bl	800a2ec <HAL_RCC_GetPCLK2Freq>
 800f08e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f090:	e02f      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f096:	4618      	mov	r0, r3
 800f098:	f7fc fb7a 	bl	800b790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a0:	e027      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0a2:	f107 0318 	add.w	r3, r7, #24
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fc fcc6 	bl	800ba38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b0:	e01f      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0b2:	4b2d      	ldr	r3, [pc, #180]	; (800f168 <UART_SetConfig+0xac0>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 0320 	and.w	r3, r3, #32
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d009      	beq.n	800f0d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0be:	4b2a      	ldr	r3, [pc, #168]	; (800f168 <UART_SetConfig+0xac0>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	08db      	lsrs	r3, r3, #3
 800f0c4:	f003 0303 	and.w	r3, r3, #3
 800f0c8:	4a28      	ldr	r2, [pc, #160]	; (800f16c <UART_SetConfig+0xac4>)
 800f0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0d0:	e00f      	b.n	800f0f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f0d2:	4b26      	ldr	r3, [pc, #152]	; (800f16c <UART_SetConfig+0xac4>)
 800f0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0d6:	e00c      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <UART_SetConfig+0xac8>)
 800f0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0dc:	e009      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0e4:	e005      	b.n	800f0f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0f0:	bf00      	nop
    }

    if (pclk != 0U)
 800f0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d021      	beq.n	800f13c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <UART_SetConfig+0xacc>)
 800f0fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f102:	461a      	mov	r2, r3
 800f104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f106:	fbb3 f2f2 	udiv	r2, r3, r2
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	085b      	lsrs	r3, r3, #1
 800f110:	441a      	add	r2, r3
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	fbb2 f3f3 	udiv	r3, r2, r3
 800f11a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	2b0f      	cmp	r3, #15
 800f120:	d909      	bls.n	800f136 <UART_SetConfig+0xa8e>
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f128:	d205      	bcs.n	800f136 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	60da      	str	r2, [r3, #12]
 800f134:	e002      	b.n	800f13c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2201      	movs	r2, #1
 800f140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	2201      	movs	r2, #1
 800f148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2200      	movs	r2, #0
 800f150:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2200      	movs	r2, #0
 800f156:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f158:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3748      	adds	r7, #72	; 0x48
 800f160:	46bd      	mov	sp, r7
 800f162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f166:	bf00      	nop
 800f168:	58024400 	.word	0x58024400
 800f16c:	03d09000 	.word	0x03d09000
 800f170:	003d0900 	.word	0x003d0900
 800f174:	08010c54 	.word	0x08010c54

0800f178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00a      	beq.n	800f1a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	430a      	orrs	r2, r1
 800f1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a6:	f003 0302 	and.w	r3, r3, #2
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00a      	beq.n	800f1c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c8:	f003 0304 	and.w	r3, r3, #4
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00a      	beq.n	800f1e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	430a      	orrs	r2, r1
 800f1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ea:	f003 0308 	and.w	r3, r3, #8
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00a      	beq.n	800f208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	430a      	orrs	r2, r1
 800f206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20c:	f003 0310 	and.w	r3, r3, #16
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00a      	beq.n	800f22a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	430a      	orrs	r2, r1
 800f228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22e:	f003 0320 	and.w	r3, r3, #32
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00a      	beq.n	800f24c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	689b      	ldr	r3, [r3, #8]
 800f23c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01a      	beq.n	800f28e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f276:	d10a      	bne.n	800f28e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00a      	beq.n	800f2b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	430a      	orrs	r2, r1
 800f2ae:	605a      	str	r2, [r3, #4]
  }
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b098      	sub	sp, #96	; 0x60
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2cc:	f7f8 ff38 	bl	8008140 <HAL_GetTick>
 800f2d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	d12f      	bne.n	800f340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f88e 	bl	800f410 <UART_WaitOnFlagUntilTimeout>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d022      	beq.n	800f340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	e853 3f00 	ldrex	r3, [r3]
 800f306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f30e:	653b      	str	r3, [r7, #80]	; 0x50
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	461a      	mov	r2, r3
 800f316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f318:	647b      	str	r3, [r7, #68]	; 0x44
 800f31a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f320:	e841 2300 	strex	r3, r2, [r1]
 800f324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1e6      	bne.n	800f2fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2220      	movs	r2, #32
 800f330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f33c:	2303      	movs	r3, #3
 800f33e:	e063      	b.n	800f408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f003 0304 	and.w	r3, r3, #4
 800f34a:	2b04      	cmp	r3, #4
 800f34c:	d149      	bne.n	800f3e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f34e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f356:	2200      	movs	r2, #0
 800f358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f857 	bl	800f410 <UART_WaitOnFlagUntilTimeout>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d03c      	beq.n	800f3e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	e853 3f00 	ldrex	r3, [r3]
 800f374:	623b      	str	r3, [r7, #32]
   return(result);
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f37c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f386:	633b      	str	r3, [r7, #48]	; 0x30
 800f388:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f38e:	e841 2300 	strex	r3, r2, [r1]
 800f392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1e6      	bne.n	800f368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3308      	adds	r3, #8
 800f3a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	e853 3f00 	ldrex	r3, [r3]
 800f3a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f023 0301 	bic.w	r3, r3, #1
 800f3b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3ba:	61fa      	str	r2, [r7, #28]
 800f3bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3be:	69b9      	ldr	r1, [r7, #24]
 800f3c0:	69fa      	ldr	r2, [r7, #28]
 800f3c2:	e841 2300 	strex	r3, r2, [r1]
 800f3c6:	617b      	str	r3, [r7, #20]
   return(result);
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1e5      	bne.n	800f39a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2220      	movs	r2, #32
 800f3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e012      	b.n	800f408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2220      	movs	r2, #32
 800f3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2220      	movs	r2, #32
 800f3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3758      	adds	r7, #88	; 0x58
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	4613      	mov	r3, r2
 800f41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f420:	e049      	b.n	800f4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f428:	d045      	beq.n	800f4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f42a:	f7f8 fe89 	bl	8008140 <HAL_GetTick>
 800f42e:	4602      	mov	r2, r0
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	69ba      	ldr	r2, [r7, #24]
 800f436:	429a      	cmp	r2, r3
 800f438:	d302      	bcc.n	800f440 <UART_WaitOnFlagUntilTimeout+0x30>
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f440:	2303      	movs	r3, #3
 800f442:	e048      	b.n	800f4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0304 	and.w	r3, r3, #4
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d031      	beq.n	800f4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	69db      	ldr	r3, [r3, #28]
 800f458:	f003 0308 	and.w	r3, r3, #8
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	d110      	bne.n	800f482 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2208      	movs	r2, #8
 800f466:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f000 f95b 	bl	800f724 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2208      	movs	r2, #8
 800f472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e029      	b.n	800f4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	69db      	ldr	r3, [r3, #28]
 800f488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f48c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f490:	d111      	bne.n	800f4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f49a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 f941 	bl	800f724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2220      	movs	r2, #32
 800f4a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	e00f      	b.n	800f4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	69da      	ldr	r2, [r3, #28]
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4013      	ands	r3, r2
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	bf0c      	ite	eq
 800f4c6:	2301      	moveq	r3, #1
 800f4c8:	2300      	movne	r3, #0
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d0a6      	beq.n	800f422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
	...

0800f4e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b0a3      	sub	sp, #140	; 0x8c
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	88fa      	ldrh	r2, [r7, #6]
 800f4f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	88fa      	ldrh	r2, [r7, #6]
 800f500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f512:	d10e      	bne.n	800f532 <UART_Start_Receive_IT+0x52>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	691b      	ldr	r3, [r3, #16]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d105      	bne.n	800f528 <UART_Start_Receive_IT+0x48>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f526:	e02d      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	22ff      	movs	r2, #255	; 0xff
 800f52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f530:	e028      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d10d      	bne.n	800f556 <UART_Start_Receive_IT+0x76>
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d104      	bne.n	800f54c <UART_Start_Receive_IT+0x6c>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	22ff      	movs	r2, #255	; 0xff
 800f546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f54a:	e01b      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	227f      	movs	r2, #127	; 0x7f
 800f550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f554:	e016      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f55e:	d10d      	bne.n	800f57c <UART_Start_Receive_IT+0x9c>
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d104      	bne.n	800f572 <UART_Start_Receive_IT+0x92>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	227f      	movs	r2, #127	; 0x7f
 800f56c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f570:	e008      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	223f      	movs	r2, #63	; 0x3f
 800f576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f57a:	e003      	b.n	800f584 <UART_Start_Receive_IT+0xa4>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2200      	movs	r2, #0
 800f588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2222      	movs	r2, #34	; 0x22
 800f590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3308      	adds	r3, #8
 800f59a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f59e:	e853 3f00 	ldrex	r3, [r3]
 800f5a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f5a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5a6:	f043 0301 	orr.w	r3, r3, #1
 800f5aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f5b8:	673a      	str	r2, [r7, #112]	; 0x70
 800f5ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f5be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f5c0:	e841 2300 	strex	r3, r2, [r1]
 800f5c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1e3      	bne.n	800f594 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5d4:	d14f      	bne.n	800f676 <UART_Start_Receive_IT+0x196>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5dc:	88fa      	ldrh	r2, [r7, #6]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d349      	bcc.n	800f676 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ea:	d107      	bne.n	800f5fc <UART_Start_Receive_IT+0x11c>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d103      	bne.n	800f5fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	4a47      	ldr	r2, [pc, #284]	; (800f714 <UART_Start_Receive_IT+0x234>)
 800f5f8:	675a      	str	r2, [r3, #116]	; 0x74
 800f5fa:	e002      	b.n	800f602 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	4a46      	ldr	r2, [pc, #280]	; (800f718 <UART_Start_Receive_IT+0x238>)
 800f600:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01a      	beq.n	800f640 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f612:	e853 3f00 	ldrex	r3, [r3]
 800f616:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f61a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f61e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	461a      	mov	r2, r3
 800f628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f62c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f62e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f634:	e841 2300 	strex	r3, r2, [r1]
 800f638:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e4      	bne.n	800f60a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f656:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3308      	adds	r3, #8
 800f65e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f660:	64ba      	str	r2, [r7, #72]	; 0x48
 800f662:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f668:	e841 2300 	strex	r3, r2, [r1]
 800f66c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e5      	bne.n	800f640 <UART_Start_Receive_IT+0x160>
 800f674:	e046      	b.n	800f704 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f67e:	d107      	bne.n	800f690 <UART_Start_Receive_IT+0x1b0>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4a24      	ldr	r2, [pc, #144]	; (800f71c <UART_Start_Receive_IT+0x23c>)
 800f68c:	675a      	str	r2, [r3, #116]	; 0x74
 800f68e:	e002      	b.n	800f696 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4a23      	ldr	r2, [pc, #140]	; (800f720 <UART_Start_Receive_IT+0x240>)
 800f694:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d019      	beq.n	800f6d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	e853 3f00 	ldrex	r3, [r3]
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f6b2:	677b      	str	r3, [r7, #116]	; 0x74
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f6be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6c4:	e841 2300 	strex	r3, r2, [r1]
 800f6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1e6      	bne.n	800f69e <UART_Start_Receive_IT+0x1be>
 800f6d0:	e018      	b.n	800f704 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	e853 3f00 	ldrex	r3, [r3]
 800f6de:	613b      	str	r3, [r7, #16]
   return(result);
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f043 0320 	orr.w	r3, r3, #32
 800f6e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6f0:	623b      	str	r3, [r7, #32]
 800f6f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f4:	69f9      	ldr	r1, [r7, #28]
 800f6f6:	6a3a      	ldr	r2, [r7, #32]
 800f6f8:	e841 2300 	strex	r3, r2, [r1]
 800f6fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1e6      	bne.n	800f6d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	378c      	adds	r7, #140	; 0x8c
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	0800ff45 	.word	0x0800ff45
 800f718:	0800fbe5 	.word	0x0800fbe5
 800f71c:	0800fa2d 	.word	0x0800fa2d
 800f720:	0800f875 	.word	0x0800f875

0800f724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f724:	b480      	push	{r7}
 800f726:	b095      	sub	sp, #84	; 0x54
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f734:	e853 3f00 	ldrex	r3, [r3]
 800f738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	461a      	mov	r2, r3
 800f748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74a:	643b      	str	r3, [r7, #64]	; 0x40
 800f74c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f752:	e841 2300 	strex	r3, r2, [r1]
 800f756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1e6      	bne.n	800f72c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	3308      	adds	r3, #8
 800f764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f766:	6a3b      	ldr	r3, [r7, #32]
 800f768:	e853 3f00 	ldrex	r3, [r3]
 800f76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f76e:	69fa      	ldr	r2, [r7, #28]
 800f770:	4b1e      	ldr	r3, [pc, #120]	; (800f7ec <UART_EndRxTransfer+0xc8>)
 800f772:	4013      	ands	r3, r2
 800f774:	64bb      	str	r3, [r7, #72]	; 0x48
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	3308      	adds	r3, #8
 800f77c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f77e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f786:	e841 2300 	strex	r3, r2, [r1]
 800f78a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1e5      	bne.n	800f75e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f796:	2b01      	cmp	r3, #1
 800f798:	d118      	bne.n	800f7cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	e853 3f00 	ldrex	r3, [r3]
 800f7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	f023 0310 	bic.w	r3, r3, #16
 800f7ae:	647b      	str	r3, [r7, #68]	; 0x44
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7b8:	61bb      	str	r3, [r7, #24]
 800f7ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7bc:	6979      	ldr	r1, [r7, #20]
 800f7be:	69ba      	ldr	r2, [r7, #24]
 800f7c0:	e841 2300 	strex	r3, r2, [r1]
 800f7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1e6      	bne.n	800f79a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f7e0:	bf00      	nop
 800f7e2:	3754      	adds	r7, #84	; 0x54
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	effffffe 	.word	0xeffffffe

0800f7f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7fe ff34 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b088      	sub	sp, #32
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	e853 3f00 	ldrex	r3, [r3]
 800f830:	60bb      	str	r3, [r7, #8]
   return(result);
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f838:	61fb      	str	r3, [r7, #28]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	61bb      	str	r3, [r7, #24]
 800f844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f846:	6979      	ldr	r1, [r7, #20]
 800f848:	69ba      	ldr	r2, [r7, #24]
 800f84a:	e841 2300 	strex	r3, r2, [r1]
 800f84e:	613b      	str	r3, [r7, #16]
   return(result);
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1e6      	bne.n	800f824 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2220      	movs	r2, #32
 800f85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7fe feff 	bl	800e668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f86a:	bf00      	nop
 800f86c:	3720      	adds	r7, #32
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
	...

0800f874 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b09c      	sub	sp, #112	; 0x70
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f882:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f88c:	2b22      	cmp	r3, #34	; 0x22
 800f88e:	f040 80be 	bne.w	800fa0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f89c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f8a0:	b2d9      	uxtb	r1, r3
 800f8a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ac:	400a      	ands	r2, r1
 800f8ae:	b2d2      	uxtb	r2, r2
 800f8b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f040 80a1 	bne.w	800fa1e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8e4:	e853 3f00 	ldrex	r3, [r3]
 800f8e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f902:	e841 2300 	strex	r3, r2, [r1]
 800f906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1e6      	bne.n	800f8dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3308      	adds	r3, #8
 800f914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f918:	e853 3f00 	ldrex	r3, [r3]
 800f91c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f920:	f023 0301 	bic.w	r3, r3, #1
 800f924:	667b      	str	r3, [r7, #100]	; 0x64
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3308      	adds	r3, #8
 800f92c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f92e:	647a      	str	r2, [r7, #68]	; 0x44
 800f930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e5      	bne.n	800f90e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2220      	movs	r2, #32
 800f946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a33      	ldr	r2, [pc, #204]	; (800fa28 <UART_RxISR_8BIT+0x1b4>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d01f      	beq.n	800f9a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d018      	beq.n	800f9a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	e853 3f00 	ldrex	r3, [r3]
 800f97a:	623b      	str	r3, [r7, #32]
   return(result);
 800f97c:	6a3b      	ldr	r3, [r7, #32]
 800f97e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f982:	663b      	str	r3, [r7, #96]	; 0x60
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f98c:	633b      	str	r3, [r7, #48]	; 0x30
 800f98e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f994:	e841 2300 	strex	r3, r2, [r1]
 800f998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d1e6      	bne.n	800f96e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d12e      	bne.n	800fa06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	e853 3f00 	ldrex	r3, [r3]
 800f9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f023 0310 	bic.w	r3, r3, #16
 800f9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9cc:	61fb      	str	r3, [r7, #28]
 800f9ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d0:	69b9      	ldr	r1, [r7, #24]
 800f9d2:	69fa      	ldr	r2, [r7, #28]
 800f9d4:	e841 2300 	strex	r3, r2, [r1]
 800f9d8:	617b      	str	r3, [r7, #20]
   return(result);
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1e6      	bne.n	800f9ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	69db      	ldr	r3, [r3, #28]
 800f9e6:	f003 0310 	and.w	r3, r3, #16
 800f9ea:	2b10      	cmp	r3, #16
 800f9ec:	d103      	bne.n	800f9f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2210      	movs	r2, #16
 800f9f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fe fe46 	bl	800e690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa04:	e00b      	b.n	800fa1e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7f6 f9e0 	bl	8005dcc <HAL_UART_RxCpltCallback>
}
 800fa0c:	e007      	b.n	800fa1e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	699a      	ldr	r2, [r3, #24]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f042 0208 	orr.w	r2, r2, #8
 800fa1c:	619a      	str	r2, [r3, #24]
}
 800fa1e:	bf00      	nop
 800fa20:	3770      	adds	r7, #112	; 0x70
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	58000c00 	.word	0x58000c00

0800fa2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b09c      	sub	sp, #112	; 0x70
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa44:	2b22      	cmp	r3, #34	; 0x22
 800fa46:	f040 80be 	bne.w	800fbc6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa58:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fa5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800fa5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fa62:	4013      	ands	r3, r2
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa6e:	1c9a      	adds	r2, r3, #2
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f040 80a1 	bne.w	800fbd6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa9c:	e853 3f00 	ldrex	r3, [r3]
 800faa0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800faa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800faa8:	667b      	str	r3, [r7, #100]	; 0x64
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	461a      	mov	r2, r3
 800fab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab2:	657b      	str	r3, [r7, #84]	; 0x54
 800fab4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800faba:	e841 2300 	strex	r3, r2, [r1]
 800fabe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1e6      	bne.n	800fa94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	3308      	adds	r3, #8
 800facc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad8:	f023 0301 	bic.w	r3, r3, #1
 800fadc:	663b      	str	r3, [r7, #96]	; 0x60
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	3308      	adds	r3, #8
 800fae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fae6:	643a      	str	r2, [r7, #64]	; 0x40
 800fae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800faec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800faf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e5      	bne.n	800fac6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2220      	movs	r2, #32
 800fafe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a33      	ldr	r2, [pc, #204]	; (800fbe0 <UART_RxISR_16BIT+0x1b4>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d01f      	beq.n	800fb58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d018      	beq.n	800fb58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2c:	6a3b      	ldr	r3, [r7, #32]
 800fb2e:	e853 3f00 	ldrex	r3, [r3]
 800fb32:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fb3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	461a      	mov	r2, r3
 800fb42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb4c:	e841 2300 	strex	r3, r2, [r1]
 800fb50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e6      	bne.n	800fb26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d12e      	bne.n	800fbbe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	e853 3f00 	ldrex	r3, [r3]
 800fb72:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	f023 0310 	bic.w	r3, r3, #16
 800fb7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	461a      	mov	r2, r3
 800fb82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb84:	61bb      	str	r3, [r7, #24]
 800fb86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6979      	ldr	r1, [r7, #20]
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	e841 2300 	strex	r3, r2, [r1]
 800fb90:	613b      	str	r3, [r7, #16]
   return(result);
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e6      	bne.n	800fb66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	69db      	ldr	r3, [r3, #28]
 800fb9e:	f003 0310 	and.w	r3, r3, #16
 800fba2:	2b10      	cmp	r3, #16
 800fba4:	d103      	bne.n	800fbae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2210      	movs	r2, #16
 800fbac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7fe fd6a 	bl	800e690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fbbc:	e00b      	b.n	800fbd6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7f6 f904 	bl	8005dcc <HAL_UART_RxCpltCallback>
}
 800fbc4:	e007      	b.n	800fbd6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	699a      	ldr	r2, [r3, #24]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f042 0208 	orr.w	r2, r2, #8
 800fbd4:	619a      	str	r2, [r3, #24]
}
 800fbd6:	bf00      	nop
 800fbd8:	3770      	adds	r7, #112	; 0x70
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	58000c00 	.word	0x58000c00

0800fbe4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b0ac      	sub	sp, #176	; 0xb0
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbf2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	69db      	ldr	r3, [r3, #28]
 800fbfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc1a:	2b22      	cmp	r3, #34	; 0x22
 800fc1c:	f040 8180 	bne.w	800ff20 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc26:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc2a:	e123      	b.n	800fe74 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fc36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fc3a:	b2d9      	uxtb	r1, r3
 800fc3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc46:	400a      	ands	r2, r1
 800fc48:	b2d2      	uxtb	r2, r2
 800fc4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	69db      	ldr	r3, [r3, #28]
 800fc6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fc72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d053      	beq.n	800fd26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d011      	beq.n	800fcae <UART_RxISR_8BIT_FIFOEN+0xca>
 800fc8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00b      	beq.n	800fcae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fca4:	f043 0201 	orr.w	r2, r3, #1
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcb2:	f003 0302 	and.w	r3, r3, #2
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d011      	beq.n	800fcde <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fcba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00b      	beq.n	800fcde <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2202      	movs	r2, #2
 800fccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcd4:	f043 0204 	orr.w	r2, r3, #4
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fce2:	f003 0304 	and.w	r3, r3, #4
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d011      	beq.n	800fd0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fcea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00b      	beq.n	800fd0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2204      	movs	r2, #4
 800fcfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd04:	f043 0202 	orr.w	r2, r3, #2
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d006      	beq.n	800fd26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fe fcaf 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f040 80a0 	bne.w	800fe74 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd3c:	e853 3f00 	ldrex	r3, [r3]
 800fd40:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800fd42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	461a      	mov	r2, r3
 800fd52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fd56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd58:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fd5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd5e:	e841 2300 	strex	r3, r2, [r1]
 800fd62:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800fd64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1e4      	bne.n	800fd34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd74:	e853 3f00 	ldrex	r3, [r3]
 800fd78:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fd7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd7c:	4b6e      	ldr	r3, [pc, #440]	; (800ff38 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fd7e:	4013      	ands	r3, r2
 800fd80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3308      	adds	r3, #8
 800fd8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fd8e:	66ba      	str	r2, [r7, #104]	; 0x68
 800fd90:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fd94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd96:	e841 2300 	strex	r3, r2, [r1]
 800fd9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1e3      	bne.n	800fd6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2220      	movs	r2, #32
 800fda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a60      	ldr	r2, [pc, #384]	; (800ff3c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d021      	beq.n	800fe04 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d01a      	beq.n	800fe04 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd6:	e853 3f00 	ldrex	r3, [r3]
 800fdda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fde2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	461a      	mov	r2, r3
 800fdec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdf0:	657b      	str	r3, [r7, #84]	; 0x54
 800fdf2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fdf8:	e841 2300 	strex	r3, r2, [r1]
 800fdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1e4      	bne.n	800fdce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d130      	bne.n	800fe6e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1a:	e853 3f00 	ldrex	r3, [r3]
 800fe1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe22:	f023 0310 	bic.w	r3, r3, #16
 800fe26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe34:	643b      	str	r3, [r7, #64]	; 0x40
 800fe36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe3c:	e841 2300 	strex	r3, r2, [r1]
 800fe40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d1e4      	bne.n	800fe12 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	69db      	ldr	r3, [r3, #28]
 800fe4e:	f003 0310 	and.w	r3, r3, #16
 800fe52:	2b10      	cmp	r3, #16
 800fe54:	d103      	bne.n	800fe5e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2210      	movs	r2, #16
 800fe5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe64:	4619      	mov	r1, r3
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7fe fc12 	bl	800e690 <HAL_UARTEx_RxEventCallback>
 800fe6c:	e002      	b.n	800fe74 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7f5 ffac 	bl	8005dcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d006      	beq.n	800fe8a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800fe7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe80:	f003 0320 	and.w	r3, r3, #32
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f47f aed1 	bne.w	800fc2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d049      	beq.n	800ff30 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fea2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d242      	bcs.n	800ff30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	3308      	adds	r3, #8
 800feb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	e853 3f00 	ldrex	r3, [r3]
 800feb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	3308      	adds	r3, #8
 800feca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fece:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed6:	e841 2300 	strex	r3, r2, [r1]
 800feda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e3      	bne.n	800feaa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a16      	ldr	r2, [pc, #88]	; (800ff40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fee6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	e853 3f00 	ldrex	r3, [r3]
 800fef4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	f043 0320 	orr.w	r3, r3, #32
 800fefc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	461a      	mov	r2, r3
 800ff06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff0a:	61bb      	str	r3, [r7, #24]
 800ff0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0e:	6979      	ldr	r1, [r7, #20]
 800ff10:	69ba      	ldr	r2, [r7, #24]
 800ff12:	e841 2300 	strex	r3, r2, [r1]
 800ff16:	613b      	str	r3, [r7, #16]
   return(result);
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1e4      	bne.n	800fee8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff1e:	e007      	b.n	800ff30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	699a      	ldr	r2, [r3, #24]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f042 0208 	orr.w	r2, r2, #8
 800ff2e:	619a      	str	r2, [r3, #24]
}
 800ff30:	bf00      	nop
 800ff32:	37b0      	adds	r7, #176	; 0xb0
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	effffffe 	.word	0xeffffffe
 800ff3c:	58000c00 	.word	0x58000c00
 800ff40:	0800f875 	.word	0x0800f875

0800ff44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b0ae      	sub	sp, #184	; 0xb8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff52:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	69db      	ldr	r3, [r3, #28]
 800ff5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	689b      	ldr	r3, [r3, #8]
 800ff70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff7a:	2b22      	cmp	r3, #34	; 0x22
 800ff7c:	f040 8184 	bne.w	8010288 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff86:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff8a:	e127      	b.n	80101dc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff92:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ff9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ffa2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ffae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffb4:	1c9a      	adds	r2, r3, #2
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ffd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ffda:	f003 0307 	and.w	r3, r3, #7
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d053      	beq.n	801008a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ffe6:	f003 0301 	and.w	r3, r3, #1
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d011      	beq.n	8010012 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ffee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00b      	beq.n	8010012 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2201      	movs	r2, #1
 8010000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010008:	f043 0201 	orr.w	r2, r3, #1
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010016:	f003 0302 	and.w	r3, r3, #2
 801001a:	2b00      	cmp	r3, #0
 801001c:	d011      	beq.n	8010042 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801001e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00b      	beq.n	8010042 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2202      	movs	r2, #2
 8010030:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010038:	f043 0204 	orr.w	r2, r3, #4
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010042:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010046:	f003 0304 	and.w	r3, r3, #4
 801004a:	2b00      	cmp	r3, #0
 801004c:	d011      	beq.n	8010072 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801004e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010052:	f003 0301 	and.w	r3, r3, #1
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00b      	beq.n	8010072 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2204      	movs	r2, #4
 8010060:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010068:	f043 0202 	orr.w	r2, r3, #2
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010078:	2b00      	cmp	r3, #0
 801007a:	d006      	beq.n	801008a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7fe fafd 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010090:	b29b      	uxth	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	f040 80a2 	bne.w	80101dc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801009e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100a0:	e853 3f00 	ldrex	r3, [r3]
 80100a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80100a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	461a      	mov	r2, r3
 80100b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80100be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80100c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80100cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e2      	bne.n	8010098 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3308      	adds	r3, #8
 80100d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100dc:	e853 3f00 	ldrex	r3, [r3]
 80100e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80100e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100e4:	4b6e      	ldr	r3, [pc, #440]	; (80102a0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80100e6:	4013      	ands	r3, r2
 80100e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	3308      	adds	r3, #8
 80100f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80100f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80100f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80100fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80100fe:	e841 2300 	strex	r3, r2, [r1]
 8010102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1e3      	bne.n	80100d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2220      	movs	r2, #32
 801010e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a60      	ldr	r2, [pc, #384]	; (80102a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d021      	beq.n	801016c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010132:	2b00      	cmp	r3, #0
 8010134:	d01a      	beq.n	801016c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801013e:	e853 3f00 	ldrex	r3, [r3]
 8010142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010146:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801014a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	461a      	mov	r2, r3
 8010154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010158:	65bb      	str	r3, [r7, #88]	; 0x58
 801015a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801015e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010160:	e841 2300 	strex	r3, r2, [r1]
 8010164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010168:	2b00      	cmp	r3, #0
 801016a:	d1e4      	bne.n	8010136 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010170:	2b01      	cmp	r3, #1
 8010172:	d130      	bne.n	80101d6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010182:	e853 3f00 	ldrex	r3, [r3]
 8010186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018a:	f023 0310 	bic.w	r3, r3, #16
 801018e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801019c:	647b      	str	r3, [r7, #68]	; 0x44
 801019e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101a4:	e841 2300 	strex	r3, r2, [r1]
 80101a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1e4      	bne.n	801017a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	69db      	ldr	r3, [r3, #28]
 80101b6:	f003 0310 	and.w	r3, r3, #16
 80101ba:	2b10      	cmp	r3, #16
 80101bc:	d103      	bne.n	80101c6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2210      	movs	r2, #16
 80101c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7fe fa5e 	bl	800e690 <HAL_UARTEx_RxEventCallback>
 80101d4:	e002      	b.n	80101dc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7f5 fdf8 	bl	8005dcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80101dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d006      	beq.n	80101f2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80101e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80101e8:	f003 0320 	and.w	r3, r3, #32
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f47f aecd 	bne.w	800ff8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80101fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010200:	2b00      	cmp	r3, #0
 8010202:	d049      	beq.n	8010298 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801020a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801020e:	429a      	cmp	r2, r3
 8010210:	d242      	bcs.n	8010298 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	3308      	adds	r3, #8
 8010218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	e853 3f00 	ldrex	r3, [r3]
 8010220:	623b      	str	r3, [r7, #32]
   return(result);
 8010222:	6a3b      	ldr	r3, [r7, #32]
 8010224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	3308      	adds	r3, #8
 8010232:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010236:	633a      	str	r2, [r7, #48]	; 0x30
 8010238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801023c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801023e:	e841 2300 	strex	r3, r2, [r1]
 8010242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1e3      	bne.n	8010212 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a16      	ldr	r2, [pc, #88]	; (80102a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801024e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	e853 3f00 	ldrex	r3, [r3]
 801025c:	60fb      	str	r3, [r7, #12]
   return(result);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f043 0320 	orr.w	r3, r3, #32
 8010264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	461a      	mov	r2, r3
 801026e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010272:	61fb      	str	r3, [r7, #28]
 8010274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010276:	69b9      	ldr	r1, [r7, #24]
 8010278:	69fa      	ldr	r2, [r7, #28]
 801027a:	e841 2300 	strex	r3, r2, [r1]
 801027e:	617b      	str	r3, [r7, #20]
   return(result);
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1e4      	bne.n	8010250 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010286:	e007      	b.n	8010298 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f042 0208 	orr.w	r2, r2, #8
 8010296:	619a      	str	r2, [r3, #24]
}
 8010298:	bf00      	nop
 801029a:	37b8      	adds	r7, #184	; 0xb8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	effffffe 	.word	0xeffffffe
 80102a4:	58000c00 	.word	0x58000c00
 80102a8:	0800fa2d 	.word	0x0800fa2d

080102ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d101      	bne.n	80102fe <HAL_UARTEx_DisableFifoMode+0x16>
 80102fa:	2302      	movs	r3, #2
 80102fc:	e027      	b.n	801034e <HAL_UARTEx_DisableFifoMode+0x66>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2224      	movs	r2, #36	; 0x24
 801030a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f022 0201 	bic.w	r2, r2, #1
 8010324:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801032c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2220      	movs	r2, #32
 8010340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801036a:	2b01      	cmp	r3, #1
 801036c:	d101      	bne.n	8010372 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801036e:	2302      	movs	r3, #2
 8010370:	e02d      	b.n	80103ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2224      	movs	r2, #36	; 0x24
 801037e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f022 0201 	bic.w	r2, r2, #1
 8010398:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	430a      	orrs	r2, r1
 80103ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f850 	bl	8010454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2220      	movs	r2, #32
 80103c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
 80103de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d101      	bne.n	80103ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80103ea:	2302      	movs	r3, #2
 80103ec:	e02d      	b.n	801044a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2224      	movs	r2, #36	; 0x24
 80103fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f022 0201 	bic.w	r2, r2, #1
 8010414:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	689b      	ldr	r3, [r3, #8]
 801041c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	430a      	orrs	r2, r1
 8010428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f812 	bl	8010454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2220      	movs	r2, #32
 801043c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010460:	2b00      	cmp	r3, #0
 8010462:	d108      	bne.n	8010476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2201      	movs	r2, #1
 8010470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010474:	e031      	b.n	80104da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010476:	2310      	movs	r3, #16
 8010478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801047a:	2310      	movs	r3, #16
 801047c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	0e5b      	lsrs	r3, r3, #25
 8010486:	b2db      	uxtb	r3, r3
 8010488:	f003 0307 	and.w	r3, r3, #7
 801048c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	0f5b      	lsrs	r3, r3, #29
 8010496:	b2db      	uxtb	r3, r3
 8010498:	f003 0307 	and.w	r3, r3, #7
 801049c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801049e:	7bbb      	ldrb	r3, [r7, #14]
 80104a0:	7b3a      	ldrb	r2, [r7, #12]
 80104a2:	4911      	ldr	r1, [pc, #68]	; (80104e8 <UARTEx_SetNbDataToProcess+0x94>)
 80104a4:	5c8a      	ldrb	r2, [r1, r2]
 80104a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80104aa:	7b3a      	ldrb	r2, [r7, #12]
 80104ac:	490f      	ldr	r1, [pc, #60]	; (80104ec <UARTEx_SetNbDataToProcess+0x98>)
 80104ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80104b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	7b7a      	ldrb	r2, [r7, #13]
 80104c0:	4909      	ldr	r1, [pc, #36]	; (80104e8 <UARTEx_SetNbDataToProcess+0x94>)
 80104c2:	5c8a      	ldrb	r2, [r1, r2]
 80104c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80104c8:	7b7a      	ldrb	r2, [r7, #13]
 80104ca:	4908      	ldr	r1, [pc, #32]	; (80104ec <UARTEx_SetNbDataToProcess+0x98>)
 80104cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80104ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80104da:	bf00      	nop
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	08010c6c 	.word	0x08010c6c
 80104ec:	08010c74 	.word	0x08010c74

080104f0 <malloc>:
 80104f0:	4b02      	ldr	r3, [pc, #8]	; (80104fc <malloc+0xc>)
 80104f2:	4601      	mov	r1, r0
 80104f4:	6818      	ldr	r0, [r3, #0]
 80104f6:	f000 b82b 	b.w	8010550 <_malloc_r>
 80104fa:	bf00      	nop
 80104fc:	24000084 	.word	0x24000084

08010500 <free>:
 8010500:	4b02      	ldr	r3, [pc, #8]	; (801050c <free+0xc>)
 8010502:	4601      	mov	r1, r0
 8010504:	6818      	ldr	r0, [r3, #0]
 8010506:	f000 b8f3 	b.w	80106f0 <_free_r>
 801050a:	bf00      	nop
 801050c:	24000084 	.word	0x24000084

08010510 <sbrk_aligned>:
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	4e0e      	ldr	r6, [pc, #56]	; (801054c <sbrk_aligned+0x3c>)
 8010514:	460c      	mov	r4, r1
 8010516:	6831      	ldr	r1, [r6, #0]
 8010518:	4605      	mov	r5, r0
 801051a:	b911      	cbnz	r1, 8010522 <sbrk_aligned+0x12>
 801051c:	f000 f8ac 	bl	8010678 <_sbrk_r>
 8010520:	6030      	str	r0, [r6, #0]
 8010522:	4621      	mov	r1, r4
 8010524:	4628      	mov	r0, r5
 8010526:	f000 f8a7 	bl	8010678 <_sbrk_r>
 801052a:	1c43      	adds	r3, r0, #1
 801052c:	d00a      	beq.n	8010544 <sbrk_aligned+0x34>
 801052e:	1cc4      	adds	r4, r0, #3
 8010530:	f024 0403 	bic.w	r4, r4, #3
 8010534:	42a0      	cmp	r0, r4
 8010536:	d007      	beq.n	8010548 <sbrk_aligned+0x38>
 8010538:	1a21      	subs	r1, r4, r0
 801053a:	4628      	mov	r0, r5
 801053c:	f000 f89c 	bl	8010678 <_sbrk_r>
 8010540:	3001      	adds	r0, #1
 8010542:	d101      	bne.n	8010548 <sbrk_aligned+0x38>
 8010544:	f04f 34ff 	mov.w	r4, #4294967295
 8010548:	4620      	mov	r0, r4
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	24000b2c 	.word	0x24000b2c

08010550 <_malloc_r>:
 8010550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010554:	1ccd      	adds	r5, r1, #3
 8010556:	f025 0503 	bic.w	r5, r5, #3
 801055a:	3508      	adds	r5, #8
 801055c:	2d0c      	cmp	r5, #12
 801055e:	bf38      	it	cc
 8010560:	250c      	movcc	r5, #12
 8010562:	2d00      	cmp	r5, #0
 8010564:	4607      	mov	r7, r0
 8010566:	db01      	blt.n	801056c <_malloc_r+0x1c>
 8010568:	42a9      	cmp	r1, r5
 801056a:	d905      	bls.n	8010578 <_malloc_r+0x28>
 801056c:	230c      	movs	r3, #12
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	2600      	movs	r6, #0
 8010572:	4630      	mov	r0, r6
 8010574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801064c <_malloc_r+0xfc>
 801057c:	f000 f868 	bl	8010650 <__malloc_lock>
 8010580:	f8d8 3000 	ldr.w	r3, [r8]
 8010584:	461c      	mov	r4, r3
 8010586:	bb5c      	cbnz	r4, 80105e0 <_malloc_r+0x90>
 8010588:	4629      	mov	r1, r5
 801058a:	4638      	mov	r0, r7
 801058c:	f7ff ffc0 	bl	8010510 <sbrk_aligned>
 8010590:	1c43      	adds	r3, r0, #1
 8010592:	4604      	mov	r4, r0
 8010594:	d155      	bne.n	8010642 <_malloc_r+0xf2>
 8010596:	f8d8 4000 	ldr.w	r4, [r8]
 801059a:	4626      	mov	r6, r4
 801059c:	2e00      	cmp	r6, #0
 801059e:	d145      	bne.n	801062c <_malloc_r+0xdc>
 80105a0:	2c00      	cmp	r4, #0
 80105a2:	d048      	beq.n	8010636 <_malloc_r+0xe6>
 80105a4:	6823      	ldr	r3, [r4, #0]
 80105a6:	4631      	mov	r1, r6
 80105a8:	4638      	mov	r0, r7
 80105aa:	eb04 0903 	add.w	r9, r4, r3
 80105ae:	f000 f863 	bl	8010678 <_sbrk_r>
 80105b2:	4581      	cmp	r9, r0
 80105b4:	d13f      	bne.n	8010636 <_malloc_r+0xe6>
 80105b6:	6821      	ldr	r1, [r4, #0]
 80105b8:	1a6d      	subs	r5, r5, r1
 80105ba:	4629      	mov	r1, r5
 80105bc:	4638      	mov	r0, r7
 80105be:	f7ff ffa7 	bl	8010510 <sbrk_aligned>
 80105c2:	3001      	adds	r0, #1
 80105c4:	d037      	beq.n	8010636 <_malloc_r+0xe6>
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	442b      	add	r3, r5
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	f8d8 3000 	ldr.w	r3, [r8]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d038      	beq.n	8010646 <_malloc_r+0xf6>
 80105d4:	685a      	ldr	r2, [r3, #4]
 80105d6:	42a2      	cmp	r2, r4
 80105d8:	d12b      	bne.n	8010632 <_malloc_r+0xe2>
 80105da:	2200      	movs	r2, #0
 80105dc:	605a      	str	r2, [r3, #4]
 80105de:	e00f      	b.n	8010600 <_malloc_r+0xb0>
 80105e0:	6822      	ldr	r2, [r4, #0]
 80105e2:	1b52      	subs	r2, r2, r5
 80105e4:	d41f      	bmi.n	8010626 <_malloc_r+0xd6>
 80105e6:	2a0b      	cmp	r2, #11
 80105e8:	d917      	bls.n	801061a <_malloc_r+0xca>
 80105ea:	1961      	adds	r1, r4, r5
 80105ec:	42a3      	cmp	r3, r4
 80105ee:	6025      	str	r5, [r4, #0]
 80105f0:	bf18      	it	ne
 80105f2:	6059      	strne	r1, [r3, #4]
 80105f4:	6863      	ldr	r3, [r4, #4]
 80105f6:	bf08      	it	eq
 80105f8:	f8c8 1000 	streq.w	r1, [r8]
 80105fc:	5162      	str	r2, [r4, r5]
 80105fe:	604b      	str	r3, [r1, #4]
 8010600:	4638      	mov	r0, r7
 8010602:	f104 060b 	add.w	r6, r4, #11
 8010606:	f000 f829 	bl	801065c <__malloc_unlock>
 801060a:	f026 0607 	bic.w	r6, r6, #7
 801060e:	1d23      	adds	r3, r4, #4
 8010610:	1af2      	subs	r2, r6, r3
 8010612:	d0ae      	beq.n	8010572 <_malloc_r+0x22>
 8010614:	1b9b      	subs	r3, r3, r6
 8010616:	50a3      	str	r3, [r4, r2]
 8010618:	e7ab      	b.n	8010572 <_malloc_r+0x22>
 801061a:	42a3      	cmp	r3, r4
 801061c:	6862      	ldr	r2, [r4, #4]
 801061e:	d1dd      	bne.n	80105dc <_malloc_r+0x8c>
 8010620:	f8c8 2000 	str.w	r2, [r8]
 8010624:	e7ec      	b.n	8010600 <_malloc_r+0xb0>
 8010626:	4623      	mov	r3, r4
 8010628:	6864      	ldr	r4, [r4, #4]
 801062a:	e7ac      	b.n	8010586 <_malloc_r+0x36>
 801062c:	4634      	mov	r4, r6
 801062e:	6876      	ldr	r6, [r6, #4]
 8010630:	e7b4      	b.n	801059c <_malloc_r+0x4c>
 8010632:	4613      	mov	r3, r2
 8010634:	e7cc      	b.n	80105d0 <_malloc_r+0x80>
 8010636:	230c      	movs	r3, #12
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	4638      	mov	r0, r7
 801063c:	f000 f80e 	bl	801065c <__malloc_unlock>
 8010640:	e797      	b.n	8010572 <_malloc_r+0x22>
 8010642:	6025      	str	r5, [r4, #0]
 8010644:	e7dc      	b.n	8010600 <_malloc_r+0xb0>
 8010646:	605b      	str	r3, [r3, #4]
 8010648:	deff      	udf	#255	; 0xff
 801064a:	bf00      	nop
 801064c:	24000b28 	.word	0x24000b28

08010650 <__malloc_lock>:
 8010650:	4801      	ldr	r0, [pc, #4]	; (8010658 <__malloc_lock+0x8>)
 8010652:	f000 b84b 	b.w	80106ec <__retarget_lock_acquire_recursive>
 8010656:	bf00      	nop
 8010658:	24000c6c 	.word	0x24000c6c

0801065c <__malloc_unlock>:
 801065c:	4801      	ldr	r0, [pc, #4]	; (8010664 <__malloc_unlock+0x8>)
 801065e:	f000 b846 	b.w	80106ee <__retarget_lock_release_recursive>
 8010662:	bf00      	nop
 8010664:	24000c6c 	.word	0x24000c6c

08010668 <memset>:
 8010668:	4402      	add	r2, r0
 801066a:	4603      	mov	r3, r0
 801066c:	4293      	cmp	r3, r2
 801066e:	d100      	bne.n	8010672 <memset+0xa>
 8010670:	4770      	bx	lr
 8010672:	f803 1b01 	strb.w	r1, [r3], #1
 8010676:	e7f9      	b.n	801066c <memset+0x4>

08010678 <_sbrk_r>:
 8010678:	b538      	push	{r3, r4, r5, lr}
 801067a:	4d06      	ldr	r5, [pc, #24]	; (8010694 <_sbrk_r+0x1c>)
 801067c:	2300      	movs	r3, #0
 801067e:	4604      	mov	r4, r0
 8010680:	4608      	mov	r0, r1
 8010682:	602b      	str	r3, [r5, #0]
 8010684:	f7f7 f8a8 	bl	80077d8 <_sbrk>
 8010688:	1c43      	adds	r3, r0, #1
 801068a:	d102      	bne.n	8010692 <_sbrk_r+0x1a>
 801068c:	682b      	ldr	r3, [r5, #0]
 801068e:	b103      	cbz	r3, 8010692 <_sbrk_r+0x1a>
 8010690:	6023      	str	r3, [r4, #0]
 8010692:	bd38      	pop	{r3, r4, r5, pc}
 8010694:	24000c68 	.word	0x24000c68

08010698 <__errno>:
 8010698:	4b01      	ldr	r3, [pc, #4]	; (80106a0 <__errno+0x8>)
 801069a:	6818      	ldr	r0, [r3, #0]
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	24000084 	.word	0x24000084

080106a4 <__libc_init_array>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	4d0d      	ldr	r5, [pc, #52]	; (80106dc <__libc_init_array+0x38>)
 80106a8:	4c0d      	ldr	r4, [pc, #52]	; (80106e0 <__libc_init_array+0x3c>)
 80106aa:	1b64      	subs	r4, r4, r5
 80106ac:	10a4      	asrs	r4, r4, #2
 80106ae:	2600      	movs	r6, #0
 80106b0:	42a6      	cmp	r6, r4
 80106b2:	d109      	bne.n	80106c8 <__libc_init_array+0x24>
 80106b4:	4d0b      	ldr	r5, [pc, #44]	; (80106e4 <__libc_init_array+0x40>)
 80106b6:	4c0c      	ldr	r4, [pc, #48]	; (80106e8 <__libc_init_array+0x44>)
 80106b8:	f000 f992 	bl	80109e0 <_init>
 80106bc:	1b64      	subs	r4, r4, r5
 80106be:	10a4      	asrs	r4, r4, #2
 80106c0:	2600      	movs	r6, #0
 80106c2:	42a6      	cmp	r6, r4
 80106c4:	d105      	bne.n	80106d2 <__libc_init_array+0x2e>
 80106c6:	bd70      	pop	{r4, r5, r6, pc}
 80106c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80106cc:	4798      	blx	r3
 80106ce:	3601      	adds	r6, #1
 80106d0:	e7ee      	b.n	80106b0 <__libc_init_array+0xc>
 80106d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80106d6:	4798      	blx	r3
 80106d8:	3601      	adds	r6, #1
 80106da:	e7f2      	b.n	80106c2 <__libc_init_array+0x1e>
 80106dc:	08011518 	.word	0x08011518
 80106e0:	08011518 	.word	0x08011518
 80106e4:	08011518 	.word	0x08011518
 80106e8:	0801151c 	.word	0x0801151c

080106ec <__retarget_lock_acquire_recursive>:
 80106ec:	4770      	bx	lr

080106ee <__retarget_lock_release_recursive>:
 80106ee:	4770      	bx	lr

080106f0 <_free_r>:
 80106f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106f2:	2900      	cmp	r1, #0
 80106f4:	d044      	beq.n	8010780 <_free_r+0x90>
 80106f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106fa:	9001      	str	r0, [sp, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f1a1 0404 	sub.w	r4, r1, #4
 8010702:	bfb8      	it	lt
 8010704:	18e4      	addlt	r4, r4, r3
 8010706:	f7ff ffa3 	bl	8010650 <__malloc_lock>
 801070a:	4a1e      	ldr	r2, [pc, #120]	; (8010784 <_free_r+0x94>)
 801070c:	9801      	ldr	r0, [sp, #4]
 801070e:	6813      	ldr	r3, [r2, #0]
 8010710:	b933      	cbnz	r3, 8010720 <_free_r+0x30>
 8010712:	6063      	str	r3, [r4, #4]
 8010714:	6014      	str	r4, [r2, #0]
 8010716:	b003      	add	sp, #12
 8010718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801071c:	f7ff bf9e 	b.w	801065c <__malloc_unlock>
 8010720:	42a3      	cmp	r3, r4
 8010722:	d908      	bls.n	8010736 <_free_r+0x46>
 8010724:	6825      	ldr	r5, [r4, #0]
 8010726:	1961      	adds	r1, r4, r5
 8010728:	428b      	cmp	r3, r1
 801072a:	bf01      	itttt	eq
 801072c:	6819      	ldreq	r1, [r3, #0]
 801072e:	685b      	ldreq	r3, [r3, #4]
 8010730:	1949      	addeq	r1, r1, r5
 8010732:	6021      	streq	r1, [r4, #0]
 8010734:	e7ed      	b.n	8010712 <_free_r+0x22>
 8010736:	461a      	mov	r2, r3
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	b10b      	cbz	r3, 8010740 <_free_r+0x50>
 801073c:	42a3      	cmp	r3, r4
 801073e:	d9fa      	bls.n	8010736 <_free_r+0x46>
 8010740:	6811      	ldr	r1, [r2, #0]
 8010742:	1855      	adds	r5, r2, r1
 8010744:	42a5      	cmp	r5, r4
 8010746:	d10b      	bne.n	8010760 <_free_r+0x70>
 8010748:	6824      	ldr	r4, [r4, #0]
 801074a:	4421      	add	r1, r4
 801074c:	1854      	adds	r4, r2, r1
 801074e:	42a3      	cmp	r3, r4
 8010750:	6011      	str	r1, [r2, #0]
 8010752:	d1e0      	bne.n	8010716 <_free_r+0x26>
 8010754:	681c      	ldr	r4, [r3, #0]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	6053      	str	r3, [r2, #4]
 801075a:	440c      	add	r4, r1
 801075c:	6014      	str	r4, [r2, #0]
 801075e:	e7da      	b.n	8010716 <_free_r+0x26>
 8010760:	d902      	bls.n	8010768 <_free_r+0x78>
 8010762:	230c      	movs	r3, #12
 8010764:	6003      	str	r3, [r0, #0]
 8010766:	e7d6      	b.n	8010716 <_free_r+0x26>
 8010768:	6825      	ldr	r5, [r4, #0]
 801076a:	1961      	adds	r1, r4, r5
 801076c:	428b      	cmp	r3, r1
 801076e:	bf04      	itt	eq
 8010770:	6819      	ldreq	r1, [r3, #0]
 8010772:	685b      	ldreq	r3, [r3, #4]
 8010774:	6063      	str	r3, [r4, #4]
 8010776:	bf04      	itt	eq
 8010778:	1949      	addeq	r1, r1, r5
 801077a:	6021      	streq	r1, [r4, #0]
 801077c:	6054      	str	r4, [r2, #4]
 801077e:	e7ca      	b.n	8010716 <_free_r+0x26>
 8010780:	b003      	add	sp, #12
 8010782:	bd30      	pop	{r4, r5, pc}
 8010784:	24000b28 	.word	0x24000b28

08010788 <log>:
 8010788:	b470      	push	{r4, r5, r6}
 801078a:	ee10 1a90 	vmov	r1, s1
 801078e:	ee10 3a10 	vmov	r3, s0
 8010792:	f04f 34ff 	mov.w	r4, #4294967295
 8010796:	429c      	cmp	r4, r3
 8010798:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 801079c:	4c72      	ldr	r4, [pc, #456]	; (8010968 <log+0x1e0>)
 801079e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 80107a2:	4184      	sbcs	r4, r0
 80107a4:	ed2d 8b02 	vpush	{d8}
 80107a8:	ea4f 4211 	mov.w	r2, r1, lsr #16
 80107ac:	d35a      	bcc.n	8010864 <log+0xdc>
 80107ae:	4a6f      	ldr	r2, [pc, #444]	; (801096c <log+0x1e4>)
 80107b0:	4291      	cmp	r1, r2
 80107b2:	bf08      	it	eq
 80107b4:	2b00      	cmpeq	r3, #0
 80107b6:	f000 80c5 	beq.w	8010944 <log+0x1bc>
 80107ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80107be:	ee30 0b47 	vsub.f64	d0, d0, d7
 80107c2:	4b6b      	ldr	r3, [pc, #428]	; (8010970 <log+0x1e8>)
 80107c4:	ee20 2b00 	vmul.f64	d2, d0, d0
 80107c8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80107cc:	ee20 4b02 	vmul.f64	d4, d0, d2
 80107d0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80107d4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80107d8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80107dc:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80107e0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80107e4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80107e8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80107ec:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80107f0:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80107f4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80107f8:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 80107fc:	eea3 5b00 	vfma.f64	d5, d3, d0
 8010800:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8010804:	eea3 5b02 	vfma.f64	d5, d3, d2
 8010808:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 801080c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010810:	eea5 6b04 	vfma.f64	d6, d5, d4
 8010814:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8010818:	eea6 7b04 	vfma.f64	d7, d6, d4
 801081c:	eeb0 2b47 	vmov.f64	d2, d7
 8010820:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010950 <log+0x1c8>
 8010824:	eeb0 6b40 	vmov.f64	d6, d0
 8010828:	eeb0 3b40 	vmov.f64	d3, d0
 801082c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010830:	eea0 6b47 	vfms.f64	d6, d0, d7
 8010834:	ee30 8b46 	vsub.f64	d8, d0, d6
 8010838:	ee26 1b06 	vmul.f64	d1, d6, d6
 801083c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8010840:	ee30 7b43 	vsub.f64	d7, d0, d3
 8010844:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010848:	eea1 7b05 	vfma.f64	d7, d1, d5
 801084c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8010850:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010854:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010858:	ee33 0b07 	vadd.f64	d0, d3, d7
 801085c:	ecbd 8b02 	vpop	{d8}
 8010860:	bc70      	pop	{r4, r5, r6}
 8010862:	4770      	bx	lr
 8010864:	f1a2 0410 	sub.w	r4, r2, #16
 8010868:	f647 70df 	movw	r0, #32735	; 0x7fdf
 801086c:	4284      	cmp	r4, r0
 801086e:	d924      	bls.n	80108ba <log+0x132>
 8010870:	18d8      	adds	r0, r3, r3
 8010872:	eb41 0401 	adc.w	r4, r1, r1
 8010876:	4320      	orrs	r0, r4
 8010878:	d105      	bne.n	8010886 <log+0xfe>
 801087a:	ecbd 8b02 	vpop	{d8}
 801087e:	2001      	movs	r0, #1
 8010880:	bc70      	pop	{r4, r5, r6}
 8010882:	f000 b885 	b.w	8010990 <__math_divzero>
 8010886:	483b      	ldr	r0, [pc, #236]	; (8010974 <log+0x1ec>)
 8010888:	4281      	cmp	r1, r0
 801088a:	bf08      	it	eq
 801088c:	2b00      	cmpeq	r3, #0
 801088e:	d0e5      	beq.n	801085c <log+0xd4>
 8010890:	0413      	lsls	r3, r2, #16
 8010892:	d403      	bmi.n	801089c <log+0x114>
 8010894:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010898:	4393      	bics	r3, r2
 801089a:	d104      	bne.n	80108a6 <log+0x11e>
 801089c:	ecbd 8b02 	vpop	{d8}
 80108a0:	bc70      	pop	{r4, r5, r6}
 80108a2:	f000 b88d 	b.w	80109c0 <__math_invalid>
 80108a6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8010958 <log+0x1d0>
 80108aa:	ee20 7b07 	vmul.f64	d7, d0, d7
 80108ae:	ec53 2b17 	vmov	r2, r3, d7
 80108b2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80108b6:	ee17 3a10 	vmov	r3, s14
 80108ba:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80108be:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80108c2:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 80108c6:	0d16      	lsrs	r6, r2, #20
 80108c8:	1e1c      	subs	r4, r3, #0
 80108ca:	4b29      	ldr	r3, [pc, #164]	; (8010970 <log+0x1e8>)
 80108cc:	f3c2 3046 	ubfx	r0, r2, #13, #7
 80108d0:	0536      	lsls	r6, r6, #20
 80108d2:	1b8d      	subs	r5, r1, r6
 80108d4:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 80108d8:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80108dc:	ec45 4b16 	vmov	d6, r4, r5
 80108e0:	1512      	asrs	r2, r2, #20
 80108e2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80108e6:	ee07 2a90 	vmov	s15, r2
 80108ea:	ee25 2b05 	vmul.f64	d2, d5, d5
 80108ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80108f2:	ed93 4b00 	vldr	d4, [r3]
 80108f6:	ee25 1b02 	vmul.f64	d1, d5, d2
 80108fa:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 80108fe:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010902:	ee35 4b07 	vadd.f64	d4, d5, d7
 8010906:	ee37 0b44 	vsub.f64	d0, d7, d4
 801090a:	ed93 7b02 	vldr	d7, [r3, #8]
 801090e:	ee30 0b05 	vadd.f64	d0, d0, d5
 8010912:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010916:	ed93 7b04 	vldr	d7, [r3, #16]
 801091a:	ed93 6b08 	vldr	d6, [r3, #32]
 801091e:	eea7 0b02 	vfma.f64	d0, d7, d2
 8010922:	ed93 7b06 	vldr	d7, [r3, #24]
 8010926:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801092a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801092e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8010932:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010936:	eea6 7b02 	vfma.f64	d7, d6, d2
 801093a:	eea1 0b07 	vfma.f64	d0, d1, d7
 801093e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8010942:	e78b      	b.n	801085c <log+0xd4>
 8010944:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010960 <log+0x1d8>
 8010948:	e788      	b.n	801085c <log+0xd4>
 801094a:	bf00      	nop
 801094c:	f3af 8000 	nop.w
 8010950:	00000000 	.word	0x00000000
 8010954:	41a00000 	.word	0x41a00000
 8010958:	00000000 	.word	0x00000000
 801095c:	43300000 	.word	0x43300000
	...
 8010968:	000308ff 	.word	0x000308ff
 801096c:	3ff00000 	.word	0x3ff00000
 8010970:	08010c80 	.word	0x08010c80
 8010974:	7ff00000 	.word	0x7ff00000

08010978 <with_errno>:
 8010978:	b513      	push	{r0, r1, r4, lr}
 801097a:	4604      	mov	r4, r0
 801097c:	ed8d 0b00 	vstr	d0, [sp]
 8010980:	f7ff fe8a 	bl	8010698 <__errno>
 8010984:	ed9d 0b00 	vldr	d0, [sp]
 8010988:	6004      	str	r4, [r0, #0]
 801098a:	b002      	add	sp, #8
 801098c:	bd10      	pop	{r4, pc}
	...

08010990 <__math_divzero>:
 8010990:	b082      	sub	sp, #8
 8010992:	2800      	cmp	r0, #0
 8010994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010998:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801099c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80109a0:	ed8d 7b00 	vstr	d7, [sp]
 80109a4:	ed9d 0b00 	vldr	d0, [sp]
 80109a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80109b8 <__math_divzero+0x28>
 80109ac:	2022      	movs	r0, #34	; 0x22
 80109ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80109b2:	b002      	add	sp, #8
 80109b4:	f7ff bfe0 	b.w	8010978 <with_errno>
	...

080109c0 <__math_invalid>:
 80109c0:	eeb0 7b40 	vmov.f64	d7, d0
 80109c4:	eeb4 7b47 	vcmp.f64	d7, d7
 80109c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80109d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80109d4:	d602      	bvs.n	80109dc <__math_invalid+0x1c>
 80109d6:	2021      	movs	r0, #33	; 0x21
 80109d8:	f7ff bfce 	b.w	8010978 <with_errno>
 80109dc:	4770      	bx	lr
	...

080109e0 <_init>:
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e2:	bf00      	nop
 80109e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109e6:	bc08      	pop	{r3}
 80109e8:	469e      	mov	lr, r3
 80109ea:	4770      	bx	lr

080109ec <_fini>:
 80109ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ee:	bf00      	nop
 80109f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109f2:	bc08      	pop	{r3}
 80109f4:	469e      	mov	lr, r3
 80109f6:	4770      	bx	lr
